__meteor_runtime_config__ = {
  "meteorEnv": {},
  "DDP_DEFAULT_CONNECTION_URL": "http://localhost:2005"
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Package-scope variables */
var exports, _;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/pre.js                                                                            //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// Define an object named exports. This will cause underscore.js to put `_` as a                         // 1
// field on it, instead of in the global namespace.  See also post.js.                                   // 2
exports = {};                                                                                            // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/underscore.js                                                                     //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
//     Underscore.js 1.5.2                                                                               // 1
//     http://underscorejs.org                                                                           // 2
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                // 3
//     Underscore may be freely distributed under the MIT license.                                       // 4
                                                                                                         // 5
(function() {                                                                                            // 6
                                                                                                         // 7
  // Baseline setup                                                                                      // 8
  // --------------                                                                                      // 9
                                                                                                         // 10
  // Establish the root object, `window` in the browser, or `exports` on the server.                     // 11
  var root = this;                                                                                       // 12
                                                                                                         // 13
  // Save the previous value of the `_` variable.                                                        // 14
  var previousUnderscore = root._;                                                                       // 15
                                                                                                         // 16
  // Establish the object that gets returned to break out of a loop iteration.                           // 17
  var breaker = {};                                                                                      // 18
                                                                                                         // 19
  // Save bytes in the minified (but not gzipped) version:                                               // 20
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;         // 21
                                                                                                         // 22
  // Create quick reference variables for speed access to core prototypes.                               // 23
  var                                                                                                    // 24
    push             = ArrayProto.push,                                                                  // 25
    slice            = ArrayProto.slice,                                                                 // 26
    concat           = ArrayProto.concat,                                                                // 27
    toString         = ObjProto.toString,                                                                // 28
    hasOwnProperty   = ObjProto.hasOwnProperty;                                                          // 29
                                                                                                         // 30
  // All **ECMAScript 5** native function implementations that we hope to use                            // 31
  // are declared here.                                                                                  // 32
  var                                                                                                    // 33
    nativeForEach      = ArrayProto.forEach,                                                             // 34
    nativeMap          = ArrayProto.map,                                                                 // 35
    nativeReduce       = ArrayProto.reduce,                                                              // 36
    nativeReduceRight  = ArrayProto.reduceRight,                                                         // 37
    nativeFilter       = ArrayProto.filter,                                                              // 38
    nativeEvery        = ArrayProto.every,                                                               // 39
    nativeSome         = ArrayProto.some,                                                                // 40
    nativeIndexOf      = ArrayProto.indexOf,                                                             // 41
    nativeLastIndexOf  = ArrayProto.lastIndexOf,                                                         // 42
    nativeIsArray      = Array.isArray,                                                                  // 43
    nativeKeys         = Object.keys,                                                                    // 44
    nativeBind         = FuncProto.bind;                                                                 // 45
                                                                                                         // 46
  // Create a safe reference to the Underscore object for use below.                                     // 47
  var _ = function(obj) {                                                                                // 48
    if (obj instanceof _) return obj;                                                                    // 49
    if (!(this instanceof _)) return new _(obj);                                                         // 50
    this._wrapped = obj;                                                                                 // 51
  };                                                                                                     // 52
                                                                                                         // 53
  // Export the Underscore object for **Node.js**, with                                                  // 54
  // backwards-compatibility for the old `require()` API. If we're in                                    // 55
  // the browser, add `_` as a global object via a string identifier,                                    // 56
  // for Closure Compiler "advanced" mode.                                                               // 57
  if (typeof exports !== 'undefined') {                                                                  // 58
    if (typeof module !== 'undefined' && module.exports) {                                               // 59
      exports = module.exports = _;                                                                      // 60
    }                                                                                                    // 61
    exports._ = _;                                                                                       // 62
  } else {                                                                                               // 63
    root._ = _;                                                                                          // 64
  }                                                                                                      // 65
                                                                                                         // 66
  // Current version.                                                                                    // 67
  _.VERSION = '1.5.2';                                                                                   // 68
                                                                                                         // 69
  // Collection Functions                                                                                // 70
  // --------------------                                                                                // 71
                                                                                                         // 72
  // METEOR CHANGE: Define _isArguments instead of depending on                                          // 73
  // _.isArguments which is defined using each. In looksLikeArray                                        // 74
  // (which each depends on), we then use _isArguments instead of                                        // 75
  // _.isArguments.                                                                                      // 76
  var _isArguments = function (obj) {                                                                    // 77
    return toString.call(obj) === '[object Arguments]';                                                  // 78
  };                                                                                                     // 79
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 80
  // there isn't any inspectable "Arguments" type.                                                       // 81
  if (!_isArguments(arguments)) {                                                                        // 82
    _isArguments = function (obj) {                                                                      // 83
      return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');          // 84
    };                                                                                                   // 85
  }                                                                                                      // 86
                                                                                                         // 87
  // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an                         // 88
  // array. This looksLikeArray function is introduced by Meteor, and replaces                           // 89
  // all instances of `obj.length === +obj.length`.                                                      // 90
  // https://github.com/meteor/meteor/issues/594                                                         // 91
  // https://github.com/jashkenas/underscore/issues/770                                                  // 92
  var looksLikeArray = function (obj) {                                                                  // 93
    return (obj.length === +obj.length                                                                   // 94
            // _.isArguments not yet necessarily defined here                                            // 95
            && (_isArguments(obj) || obj.constructor !== Object));                                       // 96
  };                                                                                                     // 97
                                                                                                         // 98
  // The cornerstone, an `each` implementation, aka `forEach`.                                           // 99
  // Handles objects with the built-in `forEach`, arrays, and raw objects.                               // 100
  // Delegates to **ECMAScript 5**'s native `forEach` if available.                                      // 101
  var each = _.each = _.forEach = function(obj, iterator, context) {                                     // 102
    if (obj == null) return;                                                                             // 103
    if (nativeForEach && obj.forEach === nativeForEach) {                                                // 104
      obj.forEach(iterator, context);                                                                    // 105
    } else if (looksLikeArray(obj)) {                                                                    // 106
      for (var i = 0, length = obj.length; i < length; i++) {                                            // 107
        if (iterator.call(context, obj[i], i, obj) === breaker) return;                                  // 108
      }                                                                                                  // 109
    } else {                                                                                             // 110
      var keys = _.keys(obj);                                                                            // 111
      for (var i = 0, length = keys.length; i < length; i++) {                                           // 112
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;                      // 113
      }                                                                                                  // 114
    }                                                                                                    // 115
  };                                                                                                     // 116
                                                                                                         // 117
  // Return the results of applying the iterator to each element.                                        // 118
  // Delegates to **ECMAScript 5**'s native `map` if available.                                          // 119
  _.map = _.collect = function(obj, iterator, context) {                                                 // 120
    var results = [];                                                                                    // 121
    if (obj == null) return results;                                                                     // 122
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);                           // 123
    each(obj, function(value, index, list) {                                                             // 124
      results.push(iterator.call(context, value, index, list));                                          // 125
    });                                                                                                  // 126
    return results;                                                                                      // 127
  };                                                                                                     // 128
                                                                                                         // 129
  var reduceError = 'Reduce of empty array with no initial value';                                       // 130
                                                                                                         // 131
  // **Reduce** builds up a single result from a list of values, aka `inject`,                           // 132
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.                           // 133
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {                               // 134
    var initial = arguments.length > 2;                                                                  // 135
    if (obj == null) obj = [];                                                                           // 136
    if (nativeReduce && obj.reduce === nativeReduce) {                                                   // 137
      if (context) iterator = _.bind(iterator, context);                                                 // 138
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);                                // 139
    }                                                                                                    // 140
    each(obj, function(value, index, list) {                                                             // 141
      if (!initial) {                                                                                    // 142
        memo = value;                                                                                    // 143
        initial = true;                                                                                  // 144
      } else {                                                                                           // 145
        memo = iterator.call(context, memo, value, index, list);                                         // 146
      }                                                                                                  // 147
    });                                                                                                  // 148
    if (!initial) throw new TypeError(reduceError);                                                      // 149
    return memo;                                                                                         // 150
  };                                                                                                     // 151
                                                                                                         // 152
  // The right-associative version of reduce, also known as `foldr`.                                     // 153
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.                                  // 154
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {                                     // 155
    var initial = arguments.length > 2;                                                                  // 156
    if (obj == null) obj = [];                                                                           // 157
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {                                    // 158
      if (context) iterator = _.bind(iterator, context);                                                 // 159
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);                      // 160
    }                                                                                                    // 161
    var length = obj.length;                                                                             // 162
    if (!looksLikeArray(obj)) {                                                                          // 163
      var keys = _.keys(obj);                                                                            // 164
      length = keys.length;                                                                              // 165
    }                                                                                                    // 166
    each(obj, function(value, index, list) {                                                             // 167
      index = keys ? keys[--length] : --length;                                                          // 168
      if (!initial) {                                                                                    // 169
        memo = obj[index];                                                                               // 170
        initial = true;                                                                                  // 171
      } else {                                                                                           // 172
        memo = iterator.call(context, memo, obj[index], index, list);                                    // 173
      }                                                                                                  // 174
    });                                                                                                  // 175
    if (!initial) throw new TypeError(reduceError);                                                      // 176
    return memo;                                                                                         // 177
  };                                                                                                     // 178
                                                                                                         // 179
  // Return the first value which passes a truth test. Aliased as `detect`.                              // 180
  _.find = _.detect = function(obj, iterator, context) {                                                 // 181
    var result;                                                                                          // 182
    any(obj, function(value, index, list) {                                                              // 183
      if (iterator.call(context, value, index, list)) {                                                  // 184
        result = value;                                                                                  // 185
        return true;                                                                                     // 186
      }                                                                                                  // 187
    });                                                                                                  // 188
    return result;                                                                                       // 189
  };                                                                                                     // 190
                                                                                                         // 191
  // Return all the elements that pass a truth test.                                                     // 192
  // Delegates to **ECMAScript 5**'s native `filter` if available.                                       // 193
  // Aliased as `select`.                                                                                // 194
  _.filter = _.select = function(obj, iterator, context) {                                               // 195
    var results = [];                                                                                    // 196
    if (obj == null) return results;                                                                     // 197
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);               // 198
    each(obj, function(value, index, list) {                                                             // 199
      if (iterator.call(context, value, index, list)) results.push(value);                               // 200
    });                                                                                                  // 201
    return results;                                                                                      // 202
  };                                                                                                     // 203
                                                                                                         // 204
  // Return all the elements for which a truth test fails.                                               // 205
  _.reject = function(obj, iterator, context) {                                                          // 206
    return _.filter(obj, function(value, index, list) {                                                  // 207
      return !iterator.call(context, value, index, list);                                                // 208
    }, context);                                                                                         // 209
  };                                                                                                     // 210
                                                                                                         // 211
  // Determine whether all of the elements match a truth test.                                           // 212
  // Delegates to **ECMAScript 5**'s native `every` if available.                                        // 213
  // Aliased as `all`.                                                                                   // 214
  _.every = _.all = function(obj, iterator, context) {                                                   // 215
    iterator || (iterator = _.identity);                                                                 // 216
    var result = true;                                                                                   // 217
    if (obj == null) return result;                                                                      // 218
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);                   // 219
    each(obj, function(value, index, list) {                                                             // 220
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;              // 221
    });                                                                                                  // 222
    return !!result;                                                                                     // 223
  };                                                                                                     // 224
                                                                                                         // 225
  // Determine if at least one element in the object matches a truth test.                               // 226
  // Delegates to **ECMAScript 5**'s native `some` if available.                                         // 227
  // Aliased as `any`.                                                                                   // 228
  var any = _.some = _.any = function(obj, iterator, context) {                                          // 229
    iterator || (iterator = _.identity);                                                                 // 230
    var result = false;                                                                                  // 231
    if (obj == null) return result;                                                                      // 232
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);                       // 233
    each(obj, function(value, index, list) {                                                             // 234
      if (result || (result = iterator.call(context, value, index, list))) return breaker;               // 235
    });                                                                                                  // 236
    return !!result;                                                                                     // 237
  };                                                                                                     // 238
                                                                                                         // 239
  // Determine if the array or object contains a given value (using `===`).                              // 240
  // Aliased as `include`.                                                                               // 241
  _.contains = _.include = function(obj, target) {                                                       // 242
    if (obj == null) return false;                                                                       // 243
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;                // 244
    return any(obj, function(value) {                                                                    // 245
      return value === target;                                                                           // 246
    });                                                                                                  // 247
  };                                                                                                     // 248
                                                                                                         // 249
  // Invoke a method (with arguments) on every item in a collection.                                     // 250
  _.invoke = function(obj, method) {                                                                     // 251
    var args = slice.call(arguments, 2);                                                                 // 252
    var isFunc = _.isFunction(method);                                                                   // 253
    return _.map(obj, function(value) {                                                                  // 254
      return (isFunc ? method : value[method]).apply(value, args);                                       // 255
    });                                                                                                  // 256
  };                                                                                                     // 257
                                                                                                         // 258
  // Convenience version of a common use case of `map`: fetching a property.                             // 259
  _.pluck = function(obj, key) {                                                                         // 260
    return _.map(obj, function(value){ return value[key]; });                                            // 261
  };                                                                                                     // 262
                                                                                                         // 263
  // Convenience version of a common use case of `filter`: selecting only objects                        // 264
  // containing specific `key:value` pairs.                                                              // 265
  _.where = function(obj, attrs, first) {                                                                // 266
    if (_.isEmpty(attrs)) return first ? void 0 : [];                                                    // 267
    return _[first ? 'find' : 'filter'](obj, function(value) {                                           // 268
      for (var key in attrs) {                                                                           // 269
        if (attrs[key] !== value[key]) return false;                                                     // 270
      }                                                                                                  // 271
      return true;                                                                                       // 272
    });                                                                                                  // 273
  };                                                                                                     // 274
                                                                                                         // 275
  // Convenience version of a common use case of `find`: getting the first object                        // 276
  // containing specific `key:value` pairs.                                                              // 277
  _.findWhere = function(obj, attrs) {                                                                   // 278
    return _.where(obj, attrs, true);                                                                    // 279
  };                                                                                                     // 280
                                                                                                         // 281
  // Return the maximum element or (element-based computation).                                          // 282
  // Can't optimize arrays of integers longer than 65,535 elements.                                      // 283
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)                               // 284
  _.max = function(obj, iterator, context) {                                                             // 285
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 286
      return Math.max.apply(Math, obj);                                                                  // 287
    }                                                                                                    // 288
    if (!iterator && _.isEmpty(obj)) return -Infinity;                                                   // 289
    var result = {computed : -Infinity, value: -Infinity};                                               // 290
    each(obj, function(value, index, list) {                                                             // 291
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 292
      computed > result.computed && (result = {value : value, computed : computed});                     // 293
    });                                                                                                  // 294
    return result.value;                                                                                 // 295
  };                                                                                                     // 296
                                                                                                         // 297
  // Return the minimum element (or element-based computation).                                          // 298
  _.min = function(obj, iterator, context) {                                                             // 299
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {                       // 300
      return Math.min.apply(Math, obj);                                                                  // 301
    }                                                                                                    // 302
    if (!iterator && _.isEmpty(obj)) return Infinity;                                                    // 303
    var result = {computed : Infinity, value: Infinity};                                                 // 304
    each(obj, function(value, index, list) {                                                             // 305
      var computed = iterator ? iterator.call(context, value, index, list) : value;                      // 306
      computed < result.computed && (result = {value : value, computed : computed});                     // 307
    });                                                                                                  // 308
    return result.value;                                                                                 // 309
  };                                                                                                     // 310
                                                                                                         // 311
  // Shuffle an array, using the modern version of the                                                   // 312
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                          // 313
  _.shuffle = function(obj) {                                                                            // 314
    var rand;                                                                                            // 315
    var index = 0;                                                                                       // 316
    var shuffled = [];                                                                                   // 317
    each(obj, function(value) {                                                                          // 318
      rand = _.random(index++);                                                                          // 319
      shuffled[index - 1] = shuffled[rand];                                                              // 320
      shuffled[rand] = value;                                                                            // 321
    });                                                                                                  // 322
    return shuffled;                                                                                     // 323
  };                                                                                                     // 324
                                                                                                         // 325
  // Sample **n** random values from an array.                                                           // 326
  // If **n** is not specified, returns a single random element from the array.                          // 327
  // The internal `guard` argument allows it to work with `map`.                                         // 328
  _.sample = function(obj, n, guard) {                                                                   // 329
    if (arguments.length < 2 || guard) {                                                                 // 330
      return obj[_.random(obj.length - 1)];                                                              // 331
    }                                                                                                    // 332
    return _.shuffle(obj).slice(0, Math.max(0, n));                                                      // 333
  };                                                                                                     // 334
                                                                                                         // 335
  // An internal function to generate lookup iterators.                                                  // 336
  var lookupIterator = function(value) {                                                                 // 337
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };                            // 338
  };                                                                                                     // 339
                                                                                                         // 340
  // Sort the object's values by a criterion produced by an iterator.                                    // 341
  _.sortBy = function(obj, value, context) {                                                             // 342
    var iterator = lookupIterator(value);                                                                // 343
    return _.pluck(_.map(obj, function(value, index, list) {                                             // 344
      return {                                                                                           // 345
        value: value,                                                                                    // 346
        index: index,                                                                                    // 347
        criteria: iterator.call(context, value, index, list)                                             // 348
      };                                                                                                 // 349
    }).sort(function(left, right) {                                                                      // 350
      var a = left.criteria;                                                                             // 351
      var b = right.criteria;                                                                            // 352
      if (a !== b) {                                                                                     // 353
        if (a > b || a === void 0) return 1;                                                             // 354
        if (a < b || b === void 0) return -1;                                                            // 355
      }                                                                                                  // 356
      return left.index - right.index;                                                                   // 357
    }), 'value');                                                                                        // 358
  };                                                                                                     // 359
                                                                                                         // 360
  // An internal function used for aggregate "group by" operations.                                      // 361
  var group = function(behavior) {                                                                       // 362
    return function(obj, value, context) {                                                               // 363
      var result = {};                                                                                   // 364
      var iterator = value == null ? _.identity : lookupIterator(value);                                 // 365
      each(obj, function(value, index) {                                                                 // 366
        var key = iterator.call(context, value, index, obj);                                             // 367
        behavior(result, key, value);                                                                    // 368
      });                                                                                                // 369
      return result;                                                                                     // 370
    };                                                                                                   // 371
  };                                                                                                     // 372
                                                                                                         // 373
  // Groups the object's values by a criterion. Pass either a string attribute                           // 374
  // to group by, or a function that returns the criterion.                                              // 375
  _.groupBy = group(function(result, key, value) {                                                       // 376
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);                                 // 377
  });                                                                                                    // 378
                                                                                                         // 379
  // Indexes the object's values by a criterion, similar to `groupBy`, but for                           // 380
  // when you know that your index values will be unique.                                                // 381
  _.indexBy = group(function(result, key, value) {                                                       // 382
    result[key] = value;                                                                                 // 383
  });                                                                                                    // 384
                                                                                                         // 385
  // Counts instances of an object that group by a certain criterion. Pass                               // 386
  // either a string attribute to count by, or a function that returns the                               // 387
  // criterion.                                                                                          // 388
  _.countBy = group(function(result, key) {                                                              // 389
    _.has(result, key) ? result[key]++ : result[key] = 1;                                                // 390
  });                                                                                                    // 391
                                                                                                         // 392
  // Use a comparator function to figure out the smallest index at which                                 // 393
  // an object should be inserted so as to maintain order. Uses binary search.                           // 394
  _.sortedIndex = function(array, obj, iterator, context) {                                              // 395
    iterator = iterator == null ? _.identity : lookupIterator(iterator);                                 // 396
    var value = iterator.call(context, obj);                                                             // 397
    var low = 0, high = array.length;                                                                    // 398
    while (low < high) {                                                                                 // 399
      var mid = (low + high) >>> 1;                                                                      // 400
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;                           // 401
    }                                                                                                    // 402
    return low;                                                                                          // 403
  };                                                                                                     // 404
                                                                                                         // 405
  // Safely create a real, live array from anything iterable.                                            // 406
  _.toArray = function(obj) {                                                                            // 407
    if (!obj) return [];                                                                                 // 408
    if (_.isArray(obj)) return slice.call(obj);                                                          // 409
    if (looksLikeArray(obj)) return _.map(obj, _.identity);                                              // 410
    return _.values(obj);                                                                                // 411
  };                                                                                                     // 412
                                                                                                         // 413
  // Return the number of elements in an object.                                                         // 414
  _.size = function(obj) {                                                                               // 415
    if (obj == null) return 0;                                                                           // 416
    return (looksLikeArray(obj)) ? obj.length : _.keys(obj).length;                                      // 417
  };                                                                                                     // 418
                                                                                                         // 419
  // Array Functions                                                                                     // 420
  // ---------------                                                                                     // 421
                                                                                                         // 422
  // Get the first element of an array. Passing **n** will return the first N                            // 423
  // values in the array. Aliased as `head` and `take`. The **guard** check                              // 424
  // allows it to work with `_.map`.                                                                     // 425
  _.first = _.head = _.take = function(array, n, guard) {                                                // 426
    if (array == null) return void 0;                                                                    // 427
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);                                    // 428
  };                                                                                                     // 429
                                                                                                         // 430
  // Returns everything but the last entry of the array. Especially useful on                            // 431
  // the arguments object. Passing **n** will return all the values in                                   // 432
  // the array, excluding the last N. The **guard** check allows it to work with                         // 433
  // `_.map`.                                                                                            // 434
  _.initial = function(array, n, guard) {                                                                // 435
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));                          // 436
  };                                                                                                     // 437
                                                                                                         // 438
  // Get the last element of an array. Passing **n** will return the last N                              // 439
  // values in the array. The **guard** check allows it to work with `_.map`.                            // 440
  _.last = function(array, n, guard) {                                                                   // 441
    if (array == null) return void 0;                                                                    // 442
    if ((n == null) || guard) {                                                                          // 443
      return array[array.length - 1];                                                                    // 444
    } else {                                                                                             // 445
      return slice.call(array, Math.max(array.length - n, 0));                                           // 446
    }                                                                                                    // 447
  };                                                                                                     // 448
                                                                                                         // 449
  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                  // 450
  // Especially useful on the arguments object. Passing an **n** will return                             // 451
  // the rest N values in the array. The **guard**                                                       // 452
  // check allows it to work with `_.map`.                                                               // 453
  _.rest = _.tail = _.drop = function(array, n, guard) {                                                 // 454
    return slice.call(array, (n == null) || guard ? 1 : n);                                              // 455
  };                                                                                                     // 456
                                                                                                         // 457
  // Trim out all falsy values from an array.                                                            // 458
  _.compact = function(array) {                                                                          // 459
    return _.filter(array, _.identity);                                                                  // 460
  };                                                                                                     // 461
                                                                                                         // 462
  // Internal implementation of a recursive `flatten` function.                                          // 463
  var flatten = function(input, shallow, output) {                                                       // 464
    if (shallow && _.every(input, _.isArray)) {                                                          // 465
      return concat.apply(output, input);                                                                // 466
    }                                                                                                    // 467
    each(input, function(value) {                                                                        // 468
      if (_.isArray(value) || _.isArguments(value)) {                                                    // 469
        shallow ? push.apply(output, value) : flatten(value, shallow, output);                           // 470
      } else {                                                                                           // 471
        output.push(value);                                                                              // 472
      }                                                                                                  // 473
    });                                                                                                  // 474
    return output;                                                                                       // 475
  };                                                                                                     // 476
                                                                                                         // 477
  // Flatten out an array, either recursively (by default), or just one level.                           // 478
  _.flatten = function(array, shallow) {                                                                 // 479
    return flatten(array, shallow, []);                                                                  // 480
  };                                                                                                     // 481
                                                                                                         // 482
  // Return a version of the array that does not contain the specified value(s).                         // 483
  _.without = function(array) {                                                                          // 484
    return _.difference(array, slice.call(arguments, 1));                                                // 485
  };                                                                                                     // 486
                                                                                                         // 487
  // Produce a duplicate-free version of the array. If the array has already                             // 488
  // been sorted, you have the option of using a faster algorithm.                                       // 489
  // Aliased as `unique`.                                                                                // 490
  _.uniq = _.unique = function(array, isSorted, iterator, context) {                                     // 491
    if (_.isFunction(isSorted)) {                                                                        // 492
      context = iterator;                                                                                // 493
      iterator = isSorted;                                                                               // 494
      isSorted = false;                                                                                  // 495
    }                                                                                                    // 496
    var initial = iterator ? _.map(array, iterator, context) : array;                                    // 497
    var results = [];                                                                                    // 498
    var seen = [];                                                                                       // 499
    each(initial, function(value, index) {                                                               // 500
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {           // 501
        seen.push(value);                                                                                // 502
        results.push(array[index]);                                                                      // 503
      }                                                                                                  // 504
    });                                                                                                  // 505
    return results;                                                                                      // 506
  };                                                                                                     // 507
                                                                                                         // 508
  // Produce an array that contains the union: each distinct element from all of                         // 509
  // the passed-in arrays.                                                                               // 510
  _.union = function() {                                                                                 // 511
    return _.uniq(_.flatten(arguments, true));                                                           // 512
  };                                                                                                     // 513
                                                                                                         // 514
  // Produce an array that contains every item shared between all the                                    // 515
  // passed-in arrays.                                                                                   // 516
  _.intersection = function(array) {                                                                     // 517
    var rest = slice.call(arguments, 1);                                                                 // 518
    return _.filter(_.uniq(array), function(item) {                                                      // 519
      return _.every(rest, function(other) {                                                             // 520
        return _.indexOf(other, item) >= 0;                                                              // 521
      });                                                                                                // 522
    });                                                                                                  // 523
  };                                                                                                     // 524
                                                                                                         // 525
  // Take the difference between one array and a number of other arrays.                                 // 526
  // Only the elements present in just the first array will remain.                                      // 527
  _.difference = function(array) {                                                                       // 528
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 529
    return _.filter(array, function(value){ return !_.contains(rest, value); });                         // 530
  };                                                                                                     // 531
                                                                                                         // 532
  // Zip together multiple lists into a single array -- elements that share                              // 533
  // an index go together.                                                                               // 534
  _.zip = function() {                                                                                   // 535
    var length = _.max(_.pluck(arguments, "length").concat(0));                                          // 536
    var results = new Array(length);                                                                     // 537
    for (var i = 0; i < length; i++) {                                                                   // 538
      results[i] = _.pluck(arguments, '' + i);                                                           // 539
    }                                                                                                    // 540
    return results;                                                                                      // 541
  };                                                                                                     // 542
                                                                                                         // 543
  // Converts lists into objects. Pass either a single array of `[key, value]`                           // 544
  // pairs, or two parallel arrays of the same length -- one of keys, and one of                         // 545
  // the corresponding values.                                                                           // 546
  _.object = function(list, values) {                                                                    // 547
    if (list == null) return {};                                                                         // 548
    var result = {};                                                                                     // 549
    for (var i = 0, length = list.length; i < length; i++) {                                             // 550
      if (values) {                                                                                      // 551
        result[list[i]] = values[i];                                                                     // 552
      } else {                                                                                           // 553
        result[list[i][0]] = list[i][1];                                                                 // 554
      }                                                                                                  // 555
    }                                                                                                    // 556
    return result;                                                                                       // 557
  };                                                                                                     // 558
                                                                                                         // 559
  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),                       // 560
  // we need this function. Return the position of the first occurrence of an                            // 561
  // item in an array, or -1 if the item is not included in the array.                                   // 562
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.                                      // 563
  // If the array is large and already in sort order, pass `true`                                        // 564
  // for **isSorted** to use binary search.                                                              // 565
  _.indexOf = function(array, item, isSorted) {                                                          // 566
    if (array == null) return -1;                                                                        // 567
    var i = 0, length = array.length;                                                                    // 568
    if (isSorted) {                                                                                      // 569
      if (typeof isSorted == 'number') {                                                                 // 570
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);                                  // 571
      } else {                                                                                           // 572
        i = _.sortedIndex(array, item);                                                                  // 573
        return array[i] === item ? i : -1;                                                               // 574
      }                                                                                                  // 575
    }                                                                                                    // 576
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);          // 577
    for (; i < length; i++) if (array[i] === item) return i;                                             // 578
    return -1;                                                                                           // 579
  };                                                                                                     // 580
                                                                                                         // 581
  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.                                  // 582
  _.lastIndexOf = function(array, item, from) {                                                          // 583
    if (array == null) return -1;                                                                        // 584
    var hasIndex = from != null;                                                                         // 585
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {                                  // 586
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);                         // 587
    }                                                                                                    // 588
    var i = (hasIndex ? from : array.length);                                                            // 589
    while (i--) if (array[i] === item) return i;                                                         // 590
    return -1;                                                                                           // 591
  };                                                                                                     // 592
                                                                                                         // 593
  // Generate an integer Array containing an arithmetic progression. A port of                           // 594
  // the native Python `range()` function. See                                                           // 595
  // [the Python documentation](http://docs.python.org/library/functions.html#range).                    // 596
  _.range = function(start, stop, step) {                                                                // 597
    if (arguments.length <= 1) {                                                                         // 598
      stop = start || 0;                                                                                 // 599
      start = 0;                                                                                         // 600
    }                                                                                                    // 601
    step = arguments[2] || 1;                                                                            // 602
                                                                                                         // 603
    var length = Math.max(Math.ceil((stop - start) / step), 0);                                          // 604
    var idx = 0;                                                                                         // 605
    var range = new Array(length);                                                                       // 606
                                                                                                         // 607
    while(idx < length) {                                                                                // 608
      range[idx++] = start;                                                                              // 609
      start += step;                                                                                     // 610
    }                                                                                                    // 611
                                                                                                         // 612
    return range;                                                                                        // 613
  };                                                                                                     // 614
                                                                                                         // 615
  // Function (ahem) Functions                                                                           // 616
  // ------------------                                                                                  // 617
                                                                                                         // 618
  // Reusable constructor function for prototype setting.                                                // 619
  var ctor = function(){};                                                                               // 620
                                                                                                         // 621
  // Create a function bound to a given object (assigning `this`, and arguments,                         // 622
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                              // 623
  // available.                                                                                          // 624
  _.bind = function(func, context) {                                                                     // 625
    var args, bound;                                                                                     // 626
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;                                                        // 628
    args = slice.call(arguments, 2);                                                                     // 629
    return bound = function() {                                                                          // 630
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));      // 631
      ctor.prototype = func.prototype;                                                                   // 632
      var self = new ctor;                                                                               // 633
      ctor.prototype = null;                                                                             // 634
      var result = func.apply(self, args.concat(slice.call(arguments)));                                 // 635
      if (Object(result) === result) return result;                                                      // 636
      return self;                                                                                       // 637
    };                                                                                                   // 638
  };                                                                                                     // 639
                                                                                                         // 640
  // Partially apply a function by creating a version that has had some of its                           // 641
  // arguments pre-filled, without changing its dynamic `this` context.                                  // 642
  _.partial = function(func) {                                                                           // 643
    var args = slice.call(arguments, 1);                                                                 // 644
    return function() {                                                                                  // 645
      return func.apply(this, args.concat(slice.call(arguments)));                                       // 646
    };                                                                                                   // 647
  };                                                                                                     // 648
                                                                                                         // 649
  // Bind all of an object's methods to that object. Useful for ensuring that                            // 650
  // all callbacks defined on an object belong to it.                                                    // 651
  _.bindAll = function(obj) {                                                                            // 652
    var funcs = slice.call(arguments, 1);                                                                // 653
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");                    // 654
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });                                          // 655
    return obj;                                                                                          // 656
  };                                                                                                     // 657
                                                                                                         // 658
  // Memoize an expensive function by storing its results.                                               // 659
  _.memoize = function(func, hasher) {                                                                   // 660
    var memo = {};                                                                                       // 661
    hasher || (hasher = _.identity);                                                                     // 662
    return function() {                                                                                  // 663
      var key = hasher.apply(this, arguments);                                                           // 664
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));                   // 665
    };                                                                                                   // 666
  };                                                                                                     // 667
                                                                                                         // 668
  // Delays a function for the given number of milliseconds, and then calls                              // 669
  // it with the arguments supplied.                                                                     // 670
  _.delay = function(func, wait) {                                                                       // 671
    var args = slice.call(arguments, 2);                                                                 // 672
    return setTimeout(function(){ return func.apply(null, args); }, wait);                               // 673
  };                                                                                                     // 674
                                                                                                         // 675
  // Defers a function, scheduling it to run after the current call stack has                            // 676
  // cleared.                                                                                            // 677
  _.defer = function(func) {                                                                             // 678
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));                                 // 679
  };                                                                                                     // 680
                                                                                                         // 681
  // Returns a function, that, when invoked, will only be triggered at most once                         // 682
  // during a given window of time. Normally, the throttled function will run                            // 683
  // as much as it can, without ever going more than once per `wait` duration;                           // 684
  // but if you'd like to disable the execution on the leading edge, pass                                // 685
  // `{leading: false}`. To disable execution on the trailing edge, ditto.                               // 686
  _.throttle = function(func, wait, options) {                                                           // 687
    var context, args, result;                                                                           // 688
    var timeout = null;                                                                                  // 689
    var previous = 0;                                                                                    // 690
    options || (options = {});                                                                           // 691
    var later = function() {                                                                             // 692
      previous = options.leading === false ? 0 : new Date;                                               // 693
      timeout = null;                                                                                    // 694
      result = func.apply(context, args);                                                                // 695
    };                                                                                                   // 696
    return function() {                                                                                  // 697
      var now = new Date;                                                                                // 698
      if (!previous && options.leading === false) previous = now;                                        // 699
      var remaining = wait - (now - previous);                                                           // 700
      context = this;                                                                                    // 701
      args = arguments;                                                                                  // 702
      if (remaining <= 0) {                                                                              // 703
        clearTimeout(timeout);                                                                           // 704
        timeout = null;                                                                                  // 705
        previous = now;                                                                                  // 706
        result = func.apply(context, args);                                                              // 707
      } else if (!timeout && options.trailing !== false) {                                               // 708
        timeout = setTimeout(later, remaining);                                                          // 709
      }                                                                                                  // 710
      return result;                                                                                     // 711
    };                                                                                                   // 712
  };                                                                                                     // 713
                                                                                                         // 714
  // Returns a function, that, as long as it continues to be invoked, will not                           // 715
  // be triggered. The function will be called after it stops being called for                           // 716
  // N milliseconds. If `immediate` is passed, trigger the function on the                               // 717
  // leading edge, instead of the trailing.                                                              // 718
  _.debounce = function(func, wait, immediate) {                                                         // 719
    var timeout, args, context, timestamp, result;                                                       // 720
    return function() {                                                                                  // 721
      context = this;                                                                                    // 722
      args = arguments;                                                                                  // 723
      timestamp = new Date();                                                                            // 724
      var later = function() {                                                                           // 725
        var last = (new Date()) - timestamp;                                                             // 726
        if (last < wait) {                                                                               // 727
          timeout = setTimeout(later, wait - last);                                                      // 728
        } else {                                                                                         // 729
          timeout = null;                                                                                // 730
          if (!immediate) result = func.apply(context, args);                                            // 731
        }                                                                                                // 732
      };                                                                                                 // 733
      var callNow = immediate && !timeout;                                                               // 734
      if (!timeout) {                                                                                    // 735
        timeout = setTimeout(later, wait);                                                               // 736
      }                                                                                                  // 737
      if (callNow) result = func.apply(context, args);                                                   // 738
      return result;                                                                                     // 739
    };                                                                                                   // 740
  };                                                                                                     // 741
                                                                                                         // 742
  // Returns a function that will be executed at most one time, no matter how                            // 743
  // often you call it. Useful for lazy initialization.                                                  // 744
  _.once = function(func) {                                                                              // 745
    var ran = false, memo;                                                                               // 746
    return function() {                                                                                  // 747
      if (ran) return memo;                                                                              // 748
      ran = true;                                                                                        // 749
      memo = func.apply(this, arguments);                                                                // 750
      func = null;                                                                                       // 751
      return memo;                                                                                       // 752
    };                                                                                                   // 753
  };                                                                                                     // 754
                                                                                                         // 755
  // Returns the first function passed as an argument to the second,                                     // 756
  // allowing you to adjust arguments, run code before and after, and                                    // 757
  // conditionally execute the original function.                                                        // 758
  _.wrap = function(func, wrapper) {                                                                     // 759
    return function() {                                                                                  // 760
      var args = [func];                                                                                 // 761
      push.apply(args, arguments);                                                                       // 762
      return wrapper.apply(this, args);                                                                  // 763
    };                                                                                                   // 764
  };                                                                                                     // 765
                                                                                                         // 766
  // Returns a function that is the composition of a list of functions, each                             // 767
  // consuming the return value of the function that follows.                                            // 768
  _.compose = function() {                                                                               // 769
    var funcs = arguments;                                                                               // 770
    return function() {                                                                                  // 771
      var args = arguments;                                                                              // 772
      for (var i = funcs.length - 1; i >= 0; i--) {                                                      // 773
        args = [funcs[i].apply(this, args)];                                                             // 774
      }                                                                                                  // 775
      return args[0];                                                                                    // 776
    };                                                                                                   // 777
  };                                                                                                     // 778
                                                                                                         // 779
  // Returns a function that will only be executed after being called N times.                           // 780
  _.after = function(times, func) {                                                                      // 781
    return function() {                                                                                  // 782
      if (--times < 1) {                                                                                 // 783
        return func.apply(this, arguments);                                                              // 784
      }                                                                                                  // 785
    };                                                                                                   // 786
  };                                                                                                     // 787
                                                                                                         // 788
  // Object Functions                                                                                    // 789
  // ----------------                                                                                    // 790
                                                                                                         // 791
  // Retrieve the names of an object's properties.                                                       // 792
  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                // 793
  _.keys = nativeKeys || function(obj) {                                                                 // 794
    if (obj !== Object(obj)) throw new TypeError('Invalid object');                                      // 795
    var keys = [];                                                                                       // 796
    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                            // 797
    return keys;                                                                                         // 798
  };                                                                                                     // 799
                                                                                                         // 800
  // Retrieve the values of an object's properties.                                                      // 801
  _.values = function(obj) {                                                                             // 802
    var keys = _.keys(obj);                                                                              // 803
    var length = keys.length;                                                                            // 804
    var values = new Array(length);                                                                      // 805
    for (var i = 0; i < length; i++) {                                                                   // 806
      values[i] = obj[keys[i]];                                                                          // 807
    }                                                                                                    // 808
    return values;                                                                                       // 809
  };                                                                                                     // 810
                                                                                                         // 811
  // Convert an object into a list of `[key, value]` pairs.                                              // 812
  _.pairs = function(obj) {                                                                              // 813
    var keys = _.keys(obj);                                                                              // 814
    var length = keys.length;                                                                            // 815
    var pairs = new Array(length);                                                                       // 816
    for (var i = 0; i < length; i++) {                                                                   // 817
      pairs[i] = [keys[i], obj[keys[i]]];                                                                // 818
    }                                                                                                    // 819
    return pairs;                                                                                        // 820
  };                                                                                                     // 821
                                                                                                         // 822
  // Invert the keys and values of an object. The values must be serializable.                           // 823
  _.invert = function(obj) {                                                                             // 824
    var result = {};                                                                                     // 825
    var keys = _.keys(obj);                                                                              // 826
    for (var i = 0, length = keys.length; i < length; i++) {                                             // 827
      result[obj[keys[i]]] = keys[i];                                                                    // 828
    }                                                                                                    // 829
    return result;                                                                                       // 830
  };                                                                                                     // 831
                                                                                                         // 832
  // Return a sorted list of the function names available on the object.                                 // 833
  // Aliased as `methods`                                                                                // 834
  _.functions = _.methods = function(obj) {                                                              // 835
    var names = [];                                                                                      // 836
    for (var key in obj) {                                                                               // 837
      if (_.isFunction(obj[key])) names.push(key);                                                       // 838
    }                                                                                                    // 839
    return names.sort();                                                                                 // 840
  };                                                                                                     // 841
                                                                                                         // 842
  // Extend a given object with all the properties in passed-in object(s).                               // 843
  _.extend = function(obj) {                                                                             // 844
    each(slice.call(arguments, 1), function(source) {                                                    // 845
      if (source) {                                                                                      // 846
        for (var prop in source) {                                                                       // 847
          obj[prop] = source[prop];                                                                      // 848
        }                                                                                                // 849
      }                                                                                                  // 850
    });                                                                                                  // 851
    return obj;                                                                                          // 852
  };                                                                                                     // 853
                                                                                                         // 854
  // Return a copy of the object only containing the whitelisted properties.                             // 855
  _.pick = function(obj) {                                                                               // 856
    var copy = {};                                                                                       // 857
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 858
    each(keys, function(key) {                                                                           // 859
      if (key in obj) copy[key] = obj[key];                                                              // 860
    });                                                                                                  // 861
    return copy;                                                                                         // 862
  };                                                                                                     // 863
                                                                                                         // 864
   // Return a copy of the object without the blacklisted properties.                                    // 865
  _.omit = function(obj) {                                                                               // 866
    var copy = {};                                                                                       // 867
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));                                       // 868
    for (var key in obj) {                                                                               // 869
      if (!_.contains(keys, key)) copy[key] = obj[key];                                                  // 870
    }                                                                                                    // 871
    return copy;                                                                                         // 872
  };                                                                                                     // 873
                                                                                                         // 874
  // Fill in a given object with default properties.                                                     // 875
  _.defaults = function(obj) {                                                                           // 876
    each(slice.call(arguments, 1), function(source) {                                                    // 877
      if (source) {                                                                                      // 878
        for (var prop in source) {                                                                       // 879
          if (obj[prop] === void 0) obj[prop] = source[prop];                                            // 880
        }                                                                                                // 881
      }                                                                                                  // 882
    });                                                                                                  // 883
    return obj;                                                                                          // 884
  };                                                                                                     // 885
                                                                                                         // 886
  // Create a (shallow-cloned) duplicate of an object.                                                   // 887
  _.clone = function(obj) {                                                                              // 888
    if (!_.isObject(obj)) return obj;                                                                    // 889
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                             // 890
  };                                                                                                     // 891
                                                                                                         // 892
  // Invokes interceptor with the obj, and then returns obj.                                             // 893
  // The primary purpose of this method is to "tap into" a method chain, in                              // 894
  // order to perform operations on intermediate results within the chain.                               // 895
  _.tap = function(obj, interceptor) {                                                                   // 896
    interceptor(obj);                                                                                    // 897
    return obj;                                                                                          // 898
  };                                                                                                     // 899
                                                                                                         // 900
  // Internal recursive comparison function for `isEqual`.                                               // 901
  var eq = function(a, b, aStack, bStack) {                                                              // 902
    // Identical objects are equal. `0 === -0`, but they aren't identical.                               // 903
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).           // 904
    if (a === b) return a !== 0 || 1 / a == 1 / b;                                                       // 905
    // A strict comparison is necessary because `null == undefined`.                                     // 906
    if (a == null || b == null) return a === b;                                                          // 907
    // Unwrap any wrapped objects.                                                                       // 908
    if (a instanceof _) a = a._wrapped;                                                                  // 909
    if (b instanceof _) b = b._wrapped;                                                                  // 910
    // Compare `[[Class]]` names.                                                                        // 911
    var className = toString.call(a);                                                                    // 912
    if (className != toString.call(b)) return false;                                                     // 913
    switch (className) {                                                                                 // 914
      // Strings, numbers, dates, and booleans are compared by value.                                    // 915
      case '[object String]':                                                                            // 916
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is             // 917
        // equivalent to `new String("5")`.                                                              // 918
        return a == String(b);                                                                           // 919
      case '[object Number]':                                                                            // 920
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for               // 921
        // other numeric values.                                                                         // 922
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);                                  // 923
      case '[object Date]':                                                                              // 924
      case '[object Boolean]':                                                                           // 925
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their            // 926
        // millisecond representations. Note that invalid dates with millisecond representations         // 927
        // of `NaN` are not equivalent.                                                                  // 928
        return +a == +b;                                                                                 // 929
      // RegExps are compared by their source patterns and flags.                                        // 930
      case '[object RegExp]':                                                                            // 931
        return a.source == b.source &&                                                                   // 932
               a.global == b.global &&                                                                   // 933
               a.multiline == b.multiline &&                                                             // 934
               a.ignoreCase == b.ignoreCase;                                                             // 935
    }                                                                                                    // 936
    if (typeof a != 'object' || typeof b != 'object') return false;                                      // 937
    // Assume equality for cyclic structures. The algorithm for detecting cyclic                         // 938
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                       // 939
    var length = aStack.length;                                                                          // 940
    while (length--) {                                                                                   // 941
      // Linear search. Performance is inversely proportional to the number of                           // 942
      // unique nested structures.                                                                       // 943
      if (aStack[length] == a) return bStack[length] == b;                                               // 944
    }                                                                                                    // 945
    // Objects with different constructors are not equivalent, but `Object`s                             // 946
    // from different frames are.                                                                        // 947
    var aCtor = a.constructor, bCtor = b.constructor;                                                    // 948
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&                          // 949
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {                         // 950
      return false;                                                                                      // 951
    }                                                                                                    // 952
    // Add the first object to the stack of traversed objects.                                           // 953
    aStack.push(a);                                                                                      // 954
    bStack.push(b);                                                                                      // 955
    var size = 0, result = true;                                                                         // 956
    // Recursively compare objects and arrays.                                                           // 957
    if (className == '[object Array]') {                                                                 // 958
      // Compare array lengths to determine if a deep comparison is necessary.                           // 959
      size = a.length;                                                                                   // 960
      result = size == b.length;                                                                         // 961
      if (result) {                                                                                      // 962
        // Deep compare the contents, ignoring non-numeric properties.                                   // 963
        while (size--) {                                                                                 // 964
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;                                   // 965
        }                                                                                                // 966
      }                                                                                                  // 967
    } else {                                                                                             // 968
      // Deep compare objects.                                                                           // 969
      for (var key in a) {                                                                               // 970
        if (_.has(a, key)) {                                                                             // 971
          // Count the expected number of properties.                                                    // 972
          size++;                                                                                        // 973
          // Deep compare each member.                                                                   // 974
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;                    // 975
        }                                                                                                // 976
      }                                                                                                  // 977
      // Ensure that both objects contain the same number of properties.                                 // 978
      if (result) {                                                                                      // 979
        for (key in b) {                                                                                 // 980
          if (_.has(b, key) && !(size--)) break;                                                         // 981
        }                                                                                                // 982
        result = !size;                                                                                  // 983
      }                                                                                                  // 984
    }                                                                                                    // 985
    // Remove the first object from the stack of traversed objects.                                      // 986
    aStack.pop();                                                                                        // 987
    bStack.pop();                                                                                        // 988
    return result;                                                                                       // 989
  };                                                                                                     // 990
                                                                                                         // 991
  // Perform a deep comparison to check if two objects are equal.                                        // 992
  _.isEqual = function(a, b) {                                                                           // 993
    return eq(a, b, [], []);                                                                             // 994
  };                                                                                                     // 995
                                                                                                         // 996
  // Is a given array, string, or object empty?                                                          // 997
  // An "empty" object has no enumerable own-properties.                                                 // 998
  _.isEmpty = function(obj) {                                                                            // 999
    if (obj == null) return true;                                                                        // 1000
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;                                      // 1001
    for (var key in obj) if (_.has(obj, key)) return false;                                              // 1002
    return true;                                                                                         // 1003
  };                                                                                                     // 1004
                                                                                                         // 1005
  // Is a given value a DOM element?                                                                     // 1006
  _.isElement = function(obj) {                                                                          // 1007
    return !!(obj && obj.nodeType === 1);                                                                // 1008
  };                                                                                                     // 1009
                                                                                                         // 1010
  // Is a given value an array?                                                                          // 1011
  // Delegates to ECMA5's native Array.isArray                                                           // 1012
  _.isArray = nativeIsArray || function(obj) {                                                           // 1013
    return toString.call(obj) == '[object Array]';                                                       // 1014
  };                                                                                                     // 1015
                                                                                                         // 1016
  // Is a given variable an object?                                                                      // 1017
  _.isObject = function(obj) {                                                                           // 1018
    return obj === Object(obj);                                                                          // 1019
  };                                                                                                     // 1020
                                                                                                         // 1021
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.             // 1022
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {                 // 1023
    _['is' + name] = function(obj) {                                                                     // 1024
      return toString.call(obj) == '[object ' + name + ']';                                              // 1025
    };                                                                                                   // 1026
  });                                                                                                    // 1027
                                                                                                         // 1028
  // Define a fallback version of the method in browsers (ahem, IE), where                               // 1029
  // there isn't any inspectable "Arguments" type.                                                       // 1030
  if (!_.isArguments(arguments)) {                                                                       // 1031
    _.isArguments = function(obj) {                                                                      // 1032
      return !!(obj && _.has(obj, 'callee'));                                                            // 1033
    };                                                                                                   // 1034
  }                                                                                                      // 1035
                                                                                                         // 1036
  // Optimize `isFunction` if appropriate.                                                               // 1037
  if (typeof (/./) !== 'function') {                                                                     // 1038
    _.isFunction = function(obj) {                                                                       // 1039
      return typeof obj === 'function';                                                                  // 1040
    };                                                                                                   // 1041
  }                                                                                                      // 1042
                                                                                                         // 1043
  // Is a given object a finite number?                                                                  // 1044
  _.isFinite = function(obj) {                                                                           // 1045
    return isFinite(obj) && !isNaN(parseFloat(obj));                                                     // 1046
  };                                                                                                     // 1047
                                                                                                         // 1048
  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                     // 1049
  _.isNaN = function(obj) {                                                                              // 1050
    return _.isNumber(obj) && obj != +obj;                                                               // 1051
  };                                                                                                     // 1052
                                                                                                         // 1053
  // Is a given value a boolean?                                                                         // 1054
  _.isBoolean = function(obj) {                                                                          // 1055
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';                    // 1056
  };                                                                                                     // 1057
                                                                                                         // 1058
  // Is a given value equal to null?                                                                     // 1059
  _.isNull = function(obj) {                                                                             // 1060
    return obj === null;                                                                                 // 1061
  };                                                                                                     // 1062
                                                                                                         // 1063
  // Is a given variable undefined?                                                                      // 1064
  _.isUndefined = function(obj) {                                                                        // 1065
    return obj === void 0;                                                                               // 1066
  };                                                                                                     // 1067
                                                                                                         // 1068
  // Shortcut function for checking if an object has a given property directly                           // 1069
  // on itself (in other words, not on a prototype).                                                     // 1070
  _.has = function(obj, key) {                                                                           // 1071
    return hasOwnProperty.call(obj, key);                                                                // 1072
  };                                                                                                     // 1073
                                                                                                         // 1074
  // Utility Functions                                                                                   // 1075
  // -----------------                                                                                   // 1076
                                                                                                         // 1077
  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                           // 1078
  // previous owner. Returns a reference to the Underscore object.                                       // 1079
  _.noConflict = function() {                                                                            // 1080
    root._ = previousUnderscore;                                                                         // 1081
    return this;                                                                                         // 1082
  };                                                                                                     // 1083
                                                                                                         // 1084
  // Keep the identity function around for default iterators.                                            // 1085
  _.identity = function(value) {                                                                         // 1086
    return value;                                                                                        // 1087
  };                                                                                                     // 1088
                                                                                                         // 1089
  // Run a function **n** times.                                                                         // 1090
  _.times = function(n, iterator, context) {                                                             // 1091
    var accum = Array(Math.max(0, n));                                                                   // 1092
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);                                    // 1093
    return accum;                                                                                        // 1094
  };                                                                                                     // 1095
                                                                                                         // 1096
  // Return a random integer between min and max (inclusive).                                            // 1097
  _.random = function(min, max) {                                                                        // 1098
    if (max == null) {                                                                                   // 1099
      max = min;                                                                                         // 1100
      min = 0;                                                                                           // 1101
    }                                                                                                    // 1102
    return min + Math.floor(Math.random() * (max - min + 1));                                            // 1103
  };                                                                                                     // 1104
                                                                                                         // 1105
  // List of HTML entities for escaping.                                                                 // 1106
  var entityMap = {                                                                                      // 1107
    escape: {                                                                                            // 1108
      '&': '&amp;',                                                                                      // 1109
      '<': '&lt;',                                                                                       // 1110
      '>': '&gt;',                                                                                       // 1111
      '"': '&quot;',                                                                                     // 1112
      "'": '&#x27;'                                                                                      // 1113
    }                                                                                                    // 1114
  };                                                                                                     // 1115
  entityMap.unescape = _.invert(entityMap.escape);                                                       // 1116
                                                                                                         // 1117
  // Regexes containing the keys and values listed immediately above.                                    // 1118
  var entityRegexes = {                                                                                  // 1119
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),                            // 1120
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')                          // 1121
  };                                                                                                     // 1122
                                                                                                         // 1123
  // Functions for escaping and unescaping strings to/from HTML interpolation.                           // 1124
  _.each(['escape', 'unescape'], function(method) {                                                      // 1125
    _[method] = function(string) {                                                                       // 1126
      if (string == null) return '';                                                                     // 1127
      return ('' + string).replace(entityRegexes[method], function(match) {                              // 1128
        return entityMap[method][match];                                                                 // 1129
      });                                                                                                // 1130
    };                                                                                                   // 1131
  });                                                                                                    // 1132
                                                                                                         // 1133
  // If the value of the named `property` is a function then invoke it with the                          // 1134
  // `object` as context; otherwise, return it.                                                          // 1135
  _.result = function(object, property) {                                                                // 1136
    if (object == null) return void 0;                                                                   // 1137
    var value = object[property];                                                                        // 1138
    return _.isFunction(value) ? value.call(object) : value;                                             // 1139
  };                                                                                                     // 1140
                                                                                                         // 1141
  // Add your own custom functions to the Underscore object.                                             // 1142
  _.mixin = function(obj) {                                                                              // 1143
    each(_.functions(obj), function(name) {                                                              // 1144
      var func = _[name] = obj[name];                                                                    // 1145
      _.prototype[name] = function() {                                                                   // 1146
        var args = [this._wrapped];                                                                      // 1147
        push.apply(args, arguments);                                                                     // 1148
        return result.call(this, func.apply(_, args));                                                   // 1149
      };                                                                                                 // 1150
    });                                                                                                  // 1151
  };                                                                                                     // 1152
                                                                                                         // 1153
  // Generate a unique integer id (unique within the entire client session).                             // 1154
  // Useful for temporary DOM ids.                                                                       // 1155
  var idCounter = 0;                                                                                     // 1156
  _.uniqueId = function(prefix) {                                                                        // 1157
    var id = ++idCounter + '';                                                                           // 1158
    return prefix ? prefix + id : id;                                                                    // 1159
  };                                                                                                     // 1160
                                                                                                         // 1161
  // By default, Underscore uses ERB-style template delimiters, change the                               // 1162
  // following template settings to use alternative delimiters.                                          // 1163
  _.templateSettings = {                                                                                 // 1164
    evaluate    : /<%([\s\S]+?)%>/g,                                                                     // 1165
    interpolate : /<%=([\s\S]+?)%>/g,                                                                    // 1166
    escape      : /<%-([\s\S]+?)%>/g                                                                     // 1167
  };                                                                                                     // 1168
                                                                                                         // 1169
  // When customizing `templateSettings`, if you don't want to define an                                 // 1170
  // interpolation, evaluation or escaping regex, we need one that is                                    // 1171
  // guaranteed not to match.                                                                            // 1172
  var noMatch = /(.)^/;                                                                                  // 1173
                                                                                                         // 1174
  // Certain characters need to be escaped so that they can be put into a                                // 1175
  // string literal.                                                                                     // 1176
  var escapes = {                                                                                        // 1177
    "'":      "'",                                                                                       // 1178
    '\\':     '\\',                                                                                      // 1179
    '\r':     'r',                                                                                       // 1180
    '\n':     'n',                                                                                       // 1181
    '\t':     't',                                                                                       // 1182
    '\u2028': 'u2028',                                                                                   // 1183
    '\u2029': 'u2029'                                                                                    // 1184
  };                                                                                                     // 1185
                                                                                                         // 1186
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;                                                          // 1187
                                                                                                         // 1188
  // JavaScript micro-templating, similar to John Resig's implementation.                                // 1189
  // Underscore templating handles arbitrary delimiters, preserves whitespace,                           // 1190
  // and correctly escapes quotes within interpolated code.                                              // 1191
  _.template = function(text, data, settings) {                                                          // 1192
    var render;                                                                                          // 1193
    settings = _.defaults({}, settings, _.templateSettings);                                             // 1194
                                                                                                         // 1195
    // Combine delimiters into one regular expression via alternation.                                   // 1196
    var matcher = new RegExp([                                                                           // 1197
      (settings.escape || noMatch).source,                                                               // 1198
      (settings.interpolate || noMatch).source,                                                          // 1199
      (settings.evaluate || noMatch).source                                                              // 1200
    ].join('|') + '|$', 'g');                                                                            // 1201
                                                                                                         // 1202
    // Compile the template source, escaping string literals appropriately.                              // 1203
    var index = 0;                                                                                       // 1204
    var source = "__p+='";                                                                               // 1205
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                       // 1206
      source += text.slice(index, offset)                                                                // 1207
        .replace(escaper, function(match) { return '\\' + escapes[match]; });                            // 1208
                                                                                                         // 1209
      if (escape) {                                                                                      // 1210
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";                             // 1211
      }                                                                                                  // 1212
      if (interpolate) {                                                                                 // 1213
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";                                  // 1214
      }                                                                                                  // 1215
      if (evaluate) {                                                                                    // 1216
        source += "';\n" + evaluate + "\n__p+='";                                                        // 1217
      }                                                                                                  // 1218
      index = offset + match.length;                                                                     // 1219
      return match;                                                                                      // 1220
    });                                                                                                  // 1221
    source += "';\n";                                                                                    // 1222
                                                                                                         // 1223
    // If a variable is not specified, place data values in local scope.                                 // 1224
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';                                // 1225
                                                                                                         // 1226
    source = "var __t,__p='',__j=Array.prototype.join," +                                                // 1227
      "print=function(){__p+=__j.call(arguments,'');};\n" +                                              // 1228
      source + "return __p;\n";                                                                          // 1229
                                                                                                         // 1230
    try {                                                                                                // 1231
      render = new Function(settings.variable || 'obj', '_', source);                                    // 1232
    } catch (e) {                                                                                        // 1233
      e.source = source;                                                                                 // 1234
      throw e;                                                                                           // 1235
    }                                                                                                    // 1236
                                                                                                         // 1237
    if (data) return render(data, _);                                                                    // 1238
    var template = function(data) {                                                                      // 1239
      return render.call(this, data, _);                                                                 // 1240
    };                                                                                                   // 1241
                                                                                                         // 1242
    // Provide the compiled function source as a convenience for precompilation.                         // 1243
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';                // 1244
                                                                                                         // 1245
    return template;                                                                                     // 1246
  };                                                                                                     // 1247
                                                                                                         // 1248
  // Add a "chain" function, which will delegate to the wrapper.                                         // 1249
  _.chain = function(obj) {                                                                              // 1250
    return _(obj).chain();                                                                               // 1251
  };                                                                                                     // 1252
                                                                                                         // 1253
  // OOP                                                                                                 // 1254
  // ---------------                                                                                     // 1255
  // If Underscore is called as a function, it returns a wrapped object that                             // 1256
  // can be used OO-style. This wrapper holds altered versions of all the                                // 1257
  // underscore functions. Wrapped objects may be chained.                                               // 1258
                                                                                                         // 1259
  // Helper function to continue chaining intermediate results.                                          // 1260
  var result = function(obj) {                                                                           // 1261
    return this._chain ? _(obj).chain() : obj;                                                           // 1262
  };                                                                                                     // 1263
                                                                                                         // 1264
  // Add all of the Underscore functions to the wrapper object.                                          // 1265
  _.mixin(_);                                                                                            // 1266
                                                                                                         // 1267
  // Add all mutator Array functions to the wrapper.                                                     // 1268
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                // 1269
    var method = ArrayProto[name];                                                                       // 1270
    _.prototype[name] = function() {                                                                     // 1271
      var obj = this._wrapped;                                                                           // 1272
      method.apply(obj, arguments);                                                                      // 1273
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];                      // 1274
      return result.call(this, obj);                                                                     // 1275
    };                                                                                                   // 1276
  });                                                                                                    // 1277
                                                                                                         // 1278
  // Add all accessor Array functions to the wrapper.                                                    // 1279
  each(['concat', 'join', 'slice'], function(name) {                                                     // 1280
    var method = ArrayProto[name];                                                                       // 1281
    _.prototype[name] = function() {                                                                     // 1282
      return result.call(this, method.apply(this._wrapped, arguments));                                  // 1283
    };                                                                                                   // 1284
  });                                                                                                    // 1285
                                                                                                         // 1286
  _.extend(_.prototype, {                                                                                // 1287
                                                                                                         // 1288
    // Start chaining a wrapped Underscore object.                                                       // 1289
    chain: function() {                                                                                  // 1290
      this._chain = true;                                                                                // 1291
      return this;                                                                                       // 1292
    },                                                                                                   // 1293
                                                                                                         // 1294
    // Extracts the result from a wrapped and chained object.                                            // 1295
    value: function() {                                                                                  // 1296
      return this._wrapped;                                                                              // 1297
    }                                                                                                    // 1298
                                                                                                         // 1299
  });                                                                                                    // 1300
                                                                                                         // 1301
}).call(this);                                                                                           // 1302
                                                                                                         // 1303
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                       //
// packages/underscore/post.js                                                                           //
//                                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                         //
// This exports object was created in pre.js.  Now copy the `_` object from it                           // 1
// into the package-scope variable `_`, which will get exported.                                         // 2
_ = exports._;                                                                                           // 3
                                                                                                         // 4
///////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.underscore = {}, {
  _: _
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var _ = Package.underscore._;

/* Package-scope variables */
var global, meteorEnv, Meteor;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/global.js                                                                              //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
global = this;                                                                                            // 1
                                                                                                          // 2
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/client_environment.js                                                                  //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
meteorEnv = __meteor_runtime_config__.meteorEnv;                                                          // 1
                                                                                                          // 2
/**                                                                                                       // 3
 * @summary The Meteor namespace                                                                          // 4
 * @namespace Meteor                                                                                      // 5
 */                                                                                                       // 6
Meteor = {                                                                                                // 7
  /**                                                                                                     // 8
   * @summary Boolean variable.  True if running in production environment.                               // 9
   * @locus Anywhere                                                                                      // 10
   * @static                                                                                              // 11
   * @type {Boolean}                                                                                      // 12
   */                                                                                                     // 13
  isProduction: meteorEnv.NODE_ENV === "production",                                                      // 14
                                                                                                          // 15
  /**                                                                                                     // 16
   * @summary Boolean variable.  True if running in development environment.                              // 17
   * @locus Anywhere                                                                                      // 18
   * @static                                                                                              // 19
   * @type {Boolean}                                                                                      // 20
   */                                                                                                     // 21
  isDevelopment: meteorEnv.NODE_ENV !== "production",                                                     // 22
                                                                                                          // 23
  /**                                                                                                     // 24
   * @summary Boolean variable.  True if running in client environment.                                   // 25
   * @locus Anywhere                                                                                      // 26
   * @static                                                                                              // 27
   * @type {Boolean}                                                                                      // 28
   */                                                                                                     // 29
  isClient: true,                                                                                         // 30
                                                                                                          // 31
  /**                                                                                                     // 32
   * @summary Boolean variable.  True if running in server environment.                                   // 33
   * @locus Anywhere                                                                                      // 34
   * @static                                                                                              // 35
   * @type {Boolean}                                                                                      // 36
   */                                                                                                     // 37
  isServer: false,                                                                                        // 38
  isCordova: false                                                                                        // 39
};                                                                                                        // 40
                                                                                                          // 41
if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 42
    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                          // 43
  /**                                                                                                     // 44
   * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
   * @locus Anywhere                                                                                      // 46
   * @type {Object}                                                                                       // 47
   */                                                                                                     // 48
  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                              // 49
}                                                                                                         // 50
                                                                                                          // 51
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/helpers.js                                                                             //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
if (Meteor.isServer)                                                                                      // 1
  var Future = Npm.require('fibers/future');                                                              // 2
                                                                                                          // 3
if (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4
    __meteor_runtime_config__.meteorRelease) {                                                            // 5
  /**                                                                                                     // 6
   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
   * @locus Anywhere                                                                                      // 8
   * @type {String}                                                                                       // 9
   */                                                                                                     // 10
  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11
}                                                                                                         // 12
                                                                                                          // 13
// XXX find a better home for these? Ideally they would be _.get,                                         // 14
// _.ensure, _.delete..                                                                                   // 15
                                                                                                          // 16
_.extend(Meteor, {                                                                                        // 17
  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18
  // a[b][c] doesn't exist.                                                                               // 19
  //                                                                                                      // 20
  _get: function (obj /*, arguments */) {                                                                 // 21
    for (var i = 1; i < arguments.length; i++) {                                                          // 22
      if (!(arguments[i] in obj))                                                                         // 23
        return undefined;                                                                                 // 24
      obj = obj[arguments[i]];                                                                            // 25
    }                                                                                                     // 26
    return obj;                                                                                           // 27
  },                                                                                                      // 28
                                                                                                          // 29
  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30
  // it is created and set to {}. Either way, it is returned.                                             // 31
  //                                                                                                      // 32
  _ensure: function (obj /*, arguments */) {                                                              // 33
    for (var i = 1; i < arguments.length; i++) {                                                          // 34
      var key = arguments[i];                                                                             // 35
      if (!(key in obj))                                                                                  // 36
        obj[key] = {};                                                                                    // 37
      obj = obj[key];                                                                                     // 38
    }                                                                                                     // 39
                                                                                                          // 40
    return obj;                                                                                           // 41
  },                                                                                                      // 42
                                                                                                          // 43
  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44
  // isn't empty, then a[b] unless it isn't empty.                                                        // 45
  //                                                                                                      // 46
  _delete: function (obj /*, arguments */) {                                                              // 47
    var stack = [obj];                                                                                    // 48
    var leaf = true;                                                                                      // 49
    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50
      var key = arguments[i];                                                                             // 51
      if (!(key in obj)) {                                                                                // 52
        leaf = false;                                                                                     // 53
        break;                                                                                            // 54
      }                                                                                                   // 55
      obj = obj[key];                                                                                     // 56
      if (typeof obj !== "object")                                                                        // 57
        break;                                                                                            // 58
      stack.push(obj);                                                                                    // 59
    }                                                                                                     // 60
                                                                                                          // 61
    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62
      var key = arguments[i+1];                                                                           // 63
                                                                                                          // 64
      if (leaf)                                                                                           // 65
        leaf = false;                                                                                     // 66
      else                                                                                                // 67
        for (var other in stack[i][key])                                                                  // 68
          return; // not empty -- we're done                                                              // 69
                                                                                                          // 70
      delete stack[i][key];                                                                               // 71
    }                                                                                                     // 72
  },                                                                                                      // 73
                                                                                                          // 74
  // wrapAsync can wrap any function that takes some number of arguments that                             // 75
  // can't be undefined, followed by some optional arguments, where the callback                          // 76
  // is the last optional argument.                                                                       // 77
  // e.g. fs.readFile(pathname, [callback]),                                                              // 78
  // fs.open(pathname, flags, [mode], [callback])                                                         // 79
  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80
  // functions where the callback is the only argument of type Function.                                  // 81
                                                                                                          // 82
  /**                                                                                                     // 83
   * @memberOf Meteor                                                                                     // 84
   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
   * @locus Anywhere                                                                                      // 86
   * @param {Function} func A function that takes a callback as its final parameter                       // 87
   * @param {Object} [context] Optional `this` object against which the original function will be invoked
   */                                                                                                     // 89
  wrapAsync: function (fn, context) {                                                                     // 90
    return function (/* arguments */) {                                                                   // 91
      var self = context || this;                                                                         // 92
      var newArgs = _.toArray(arguments);                                                                 // 93
      var callback;                                                                                       // 94
                                                                                                          // 95
      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96
        var arg = newArgs[i];                                                                             // 97
        var type = typeof arg;                                                                            // 98
        if (type !== "undefined") {                                                                       // 99
          if (type === "function") {                                                                      // 100
            callback = arg;                                                                               // 101
          }                                                                                               // 102
          break;                                                                                          // 103
        }                                                                                                 // 104
      }                                                                                                   // 105
                                                                                                          // 106
      if (! callback) {                                                                                   // 107
        if (Meteor.isClient) {                                                                            // 108
          callback = logErr;                                                                              // 109
        } else {                                                                                          // 110
          var fut = new Future();                                                                         // 111
          callback = fut.resolver();                                                                      // 112
        }                                                                                                 // 113
        ++i; // Insert the callback just after arg.                                                       // 114
      }                                                                                                   // 115
                                                                                                          // 116
      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117
      var result = fn.apply(self, newArgs);                                                               // 118
      return fut ? fut.wait() : result;                                                                   // 119
    };                                                                                                    // 120
  },                                                                                                      // 121
                                                                                                          // 122
  // Sets child's prototype to a new object whose prototype is parent's                                   // 123
  // prototype. Used as:                                                                                  // 124
  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125
  //   _.extend(ClassB.prototype, { ... })                                                                // 126
  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127
  _inherits: function (Child, Parent) {                                                                   // 128
    // copy Parent static properties                                                                      // 129
    for (var key in Parent) {                                                                             // 130
      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131
      // properties                                                                                       // 132
      if (_.has(Parent, key))                                                                             // 133
        Child[key] = Parent[key];                                                                         // 134
    }                                                                                                     // 135
                                                                                                          // 136
    // a middle member of prototype chain: takes the prototype from the Parent                            // 137
    var Middle = function () {                                                                            // 138
      this.constructor = Child;                                                                           // 139
    };                                                                                                    // 140
    Middle.prototype = Parent.prototype;                                                                  // 141
    Child.prototype = new Middle();                                                                       // 142
    Child.__super__ = Parent.prototype;                                                                   // 143
    return Child;                                                                                         // 144
  }                                                                                                       // 145
});                                                                                                       // 146
                                                                                                          // 147
var warnedAboutWrapAsync = false;                                                                         // 148
                                                                                                          // 149
/**                                                                                                       // 150
 * @deprecated in 0.9.3                                                                                   // 151
 */                                                                                                       // 152
Meteor._wrapAsync = function(fn, context) {                                                               // 153
  if (! warnedAboutWrapAsync) {                                                                           // 154
    Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");                              // 155
    warnedAboutWrapAsync = true;                                                                          // 156
  }                                                                                                       // 157
  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158
};                                                                                                        // 159
                                                                                                          // 160
function logErr(err) {                                                                                    // 161
  if (err) {                                                                                              // 162
    return Meteor._debug(                                                                                 // 163
      "Exception in callback of async function",                                                          // 164
      err.stack ? err.stack : err                                                                         // 165
    );                                                                                                    // 166
  }                                                                                                       // 167
}                                                                                                         // 168
                                                                                                          // 169
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/setimmediate.js                                                                        //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Chooses one of three setImmediate implementations:                                                     // 1
//                                                                                                        // 2
// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3
//                                                                                                        // 4
// * postMessage (many browsers)                                                                          // 5
//                                                                                                        // 6
// * setTimeout  (fallback)                                                                               // 7
//                                                                                                        // 8
// The postMessage implementation is based on                                                             // 9
// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10
//                                                                                                        // 11
// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12
// I/O, which is stricter than we're looking for.                                                         // 13
//                                                                                                        // 14
// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15
// Since we're not trying to be a polyfill, we have some                                                  // 16
// simplifications:                                                                                       // 17
//                                                                                                        // 18
// If one invocation of a setImmediate callback pauses itself by a                                        // 19
// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20
// implementation ensured that no setImmedate callback would run until                                    // 21
// the first invocation completed.  While correct per the spec, what it                                   // 22
// would mean for us in practice is that any reactive updates relying                                     // 23
// on Meteor.defer would be hung in the main window until the modal                                       // 24
// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25
// function is called in a later event loop.                                                              // 26
//                                                                                                        // 27
// We don't need to support using a string to be eval'ed for the                                          // 28
// callback, arguments to the function, or clearImmediate.                                                // 29
                                                                                                          // 30
"use strict";                                                                                             // 31
                                                                                                          // 32
var global = this;                                                                                        // 33
                                                                                                          // 34
                                                                                                          // 35
// IE 10, Node >= 9.1                                                                                     // 36
                                                                                                          // 37
function useSetImmediate() {                                                                              // 38
  if (! global.setImmediate)                                                                              // 39
    return null;                                                                                          // 40
  else {                                                                                                  // 41
    var setImmediate = function (fn) {                                                                    // 42
      global.setImmediate(fn);                                                                            // 43
    };                                                                                                    // 44
    setImmediate.implementation = 'setImmediate';                                                         // 45
    return setImmediate;                                                                                  // 46
  }                                                                                                       // 47
}                                                                                                         // 48
                                                                                                          // 49
                                                                                                          // 50
// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51
                                                                                                          // 52
function usePostMessage() {                                                                               // 53
  // The test against `importScripts` prevents this implementation                                        // 54
  // from being installed inside a web worker, where                                                      // 55
  // `global.postMessage` means something completely different and                                        // 56
  // can't be used for this purpose.                                                                      // 57
                                                                                                          // 58
  if (!global.postMessage || global.importScripts) {                                                      // 59
    return null;                                                                                          // 60
  }                                                                                                       // 61
                                                                                                          // 62
  // Avoid synchronous post message implementations.                                                      // 63
                                                                                                          // 64
  var postMessageIsAsynchronous = true;                                                                   // 65
  var oldOnMessage = global.onmessage;                                                                    // 66
  global.onmessage = function () {                                                                        // 67
      postMessageIsAsynchronous = false;                                                                  // 68
  };                                                                                                      // 69
  global.postMessage("", "*");                                                                            // 70
  global.onmessage = oldOnMessage;                                                                        // 71
                                                                                                          // 72
  if (! postMessageIsAsynchronous)                                                                        // 73
    return null;                                                                                          // 74
                                                                                                          // 75
  var funcIndex = 0;                                                                                      // 76
  var funcs = {};                                                                                         // 77
                                                                                                          // 78
  // Installs an event handler on `global` for the `message` event: see                                   // 79
  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80
  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81
                                                                                                          // 82
  // XXX use Random.id() here?                                                                            // 83
  var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';                                     // 84
                                                                                                          // 85
  function isStringAndStartsWith(string, putativeStart) {                                                 // 86
    return (typeof string === "string" &&                                                                 // 87
            string.substring(0, putativeStart.length) === putativeStart);                                 // 88
  }                                                                                                       // 89
                                                                                                          // 90
  function onGlobalMessage(event) {                                                                       // 91
    // This will catch all incoming messages (even from other                                             // 92
    // windows!), so we need to try reasonably hard to avoid letting                                      // 93
    // anyone else trick us into firing off. We test the origin is                                        // 94
    // still this window, and that a (randomly generated)                                                 // 95
    // unpredictable identifying prefix is present.                                                       // 96
    if (event.source === global &&                                                                        // 97
        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98
      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99
      try {                                                                                               // 100
        if (funcs[index])                                                                                 // 101
          funcs[index]();                                                                                 // 102
      }                                                                                                   // 103
      finally {                                                                                           // 104
        delete funcs[index];                                                                              // 105
      }                                                                                                   // 106
    }                                                                                                     // 107
  }                                                                                                       // 108
                                                                                                          // 109
  if (global.addEventListener) {                                                                          // 110
    global.addEventListener("message", onGlobalMessage, false);                                           // 111
  } else {                                                                                                // 112
    global.attachEvent("onmessage", onGlobalMessage);                                                     // 113
  }                                                                                                       // 114
                                                                                                          // 115
  var setImmediate = function (fn) {                                                                      // 116
    // Make `global` post a message to itself with the handle and                                         // 117
    // identifying prefix, thus asynchronously invoking our                                               // 118
    // onGlobalMessage listener above.                                                                    // 119
    ++funcIndex;                                                                                          // 120
    funcs[funcIndex] = fn;                                                                                // 121
    global.postMessage(MESSAGE_PREFIX + funcIndex, "*");                                                  // 122
  };                                                                                                      // 123
  setImmediate.implementation = 'postMessage';                                                            // 124
  return setImmediate;                                                                                    // 125
}                                                                                                         // 126
                                                                                                          // 127
                                                                                                          // 128
function useTimeout() {                                                                                   // 129
  var setImmediate = function (fn) {                                                                      // 130
    global.setTimeout(fn, 0);                                                                             // 131
  };                                                                                                      // 132
  setImmediate.implementation = 'setTimeout';                                                             // 133
  return setImmediate;                                                                                    // 134
}                                                                                                         // 135
                                                                                                          // 136
                                                                                                          // 137
Meteor._setImmediate =                                                                                    // 138
  useSetImmediate() ||                                                                                    // 139
  usePostMessage() ||                                                                                     // 140
  useTimeout();                                                                                           // 141
                                                                                                          // 142
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/timers.js                                                                              //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var withoutInvocation = function (f) {                                                                    // 1
  if (Package.ddp) {                                                                                      // 2
    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3
    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4
      throw new Error("Can't set timers inside simulations");                                             // 5
    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6
  }                                                                                                       // 7
  else                                                                                                    // 8
    return f;                                                                                             // 9
};                                                                                                        // 10
                                                                                                          // 11
var bindAndCatch = function (context, f) {                                                                // 12
  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13
};                                                                                                        // 14
                                                                                                          // 15
_.extend(Meteor, {                                                                                        // 16
  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17
  // inside a server method are not part of the method invocation and                                     // 18
  // should clear out the CurrentInvocation environment variable.                                         // 19
                                                                                                          // 20
  /**                                                                                                     // 21
   * @memberOf Meteor                                                                                     // 22
   * @summary Call a function in the future after waiting for a specified delay.                          // 23
   * @locus Anywhere                                                                                      // 24
   * @param {Function} func The function to run                                                           // 25
   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26
   */                                                                                                     // 27
  setTimeout: function (f, duration) {                                                                    // 28
    return setTimeout(bindAndCatch("setTimeout callback", f), duration);                                  // 29
  },                                                                                                      // 30
                                                                                                          // 31
  /**                                                                                                     // 32
   * @memberOf Meteor                                                                                     // 33
   * @summary Call a function repeatedly, with a time delay between calls.                                // 34
   * @locus Anywhere                                                                                      // 35
   * @param {Function} func The function to run                                                           // 36
   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37
   */                                                                                                     // 38
  setInterval: function (f, duration) {                                                                   // 39
    return setInterval(bindAndCatch("setInterval callback", f), duration);                                // 40
  },                                                                                                      // 41
                                                                                                          // 42
  /**                                                                                                     // 43
   * @memberOf Meteor                                                                                     // 44
   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45
   * @locus Anywhere                                                                                      // 46
   * @param {Object} id The handle returned by `Meteor.setInterval`                                       // 47
   */                                                                                                     // 48
  clearInterval: function(x) {                                                                            // 49
    return clearInterval(x);                                                                              // 50
  },                                                                                                      // 51
                                                                                                          // 52
  /**                                                                                                     // 53
   * @memberOf Meteor                                                                                     // 54
   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55
   * @locus Anywhere                                                                                      // 56
   * @param {Object} id The handle returned by `Meteor.setTimeout`                                        // 57
   */                                                                                                     // 58
  clearTimeout: function(x) {                                                                             // 59
    return clearTimeout(x);                                                                               // 60
  },                                                                                                      // 61
                                                                                                          // 62
  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63
  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64
  //    callSomethingThatDefersSomeWork();                                                                // 65
  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66
                                                                                                          // 67
  /**                                                                                                     // 68
   * @memberOf Meteor                                                                                     // 69
   * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
   * @locus Anywhere                                                                                      // 71
   * @param {Function} func The function to run                                                           // 72
   */                                                                                                     // 73
  defer: function (f) {                                                                                   // 74
    Meteor._setImmediate(bindAndCatch("defer callback", f));                                              // 75
  }                                                                                                       // 76
});                                                                                                       // 77
                                                                                                          // 78
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/errors.js                                                                              //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Makes an error subclass which properly contains a stack trace in most                                  // 1
// environments. constructor can set fields on `this` (and should probably set                            // 2
// `message`, which is what gets displayed at the top of a stack trace).                                  // 3
//                                                                                                        // 4
Meteor.makeErrorType = function (name, constructor) {                                                     // 5
  var errorClass = function (/*arguments*/) {                                                             // 6
    // Ensure we get a proper stack trace in most Javascript environments                                 // 7
    if (Error.captureStackTrace) {                                                                        // 8
      // V8 environments (Chrome and Node.js)                                                             // 9
      Error.captureStackTrace(this, errorClass);                                                          // 10
    } else {                                                                                              // 11
      // Borrow the .stack property of a native Error object.                                             // 12
      this.stack = new Error().stack;                                                                     // 13
    }                                                                                                     // 14
    // Safari magically works.                                                                            // 15
                                                                                                          // 16
    constructor.apply(this, arguments);                                                                   // 17
                                                                                                          // 18
    this.errorType = name;                                                                                // 19
  };                                                                                                      // 20
                                                                                                          // 21
  Meteor._inherits(errorClass, Error);                                                                    // 22
                                                                                                          // 23
  return errorClass;                                                                                      // 24
};                                                                                                        // 25
                                                                                                          // 26
// This should probably be in the livedata package, but we don't want                                     // 27
// to require you to use the livedata package to get it. Eventually we                                    // 28
// should probably rename it to DDP.Error and put it back in the                                          // 29
// 'livedata' package (which we should rename to 'ddp' also.)                                             // 30
//                                                                                                        // 31
// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 32
// containing 'error' and optionally 'reason' and 'details'.                                              // 33
// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 34
// EJSON.addType here because the type is determined by location in the                                   // 35
// protocol, not text on the wire.)                                                                       // 36
                                                                                                          // 37
/**                                                                                                       // 38
 * @summary This class represents a symbolic error thrown by a method.                                    // 39
 * @locus Anywhere                                                                                        // 40
 * @class                                                                                                 // 41
 * @param {String} error A string code uniquely identifying this kind of error.                           // 42
 * This string should be used by callers of the method to determine the                                   // 43
 * appropriate action to take, instead of attempting to parse the reason                                  // 44
 * or details fields. For example:                                                                        // 45
 *                                                                                                        // 46
 * ```                                                                                                    // 47
 * // on the server, pick a code unique to this error                                                     // 48
 * // the reason field should be a useful debug message                                                   // 49
 * throw new Meteor.Error("logged-out",                                                                   // 50
 *   "The user must be logged in to post a comment.");                                                    // 51
 *                                                                                                        // 52
 * // on the client                                                                                       // 53
 * Meteor.call("methodName", function (error) {                                                           // 54
 *   // identify the error                                                                                // 55
 *   if (error && error.error === "logged-out") {                                                         // 56
 *     // show a nice error message                                                                       // 57
 *     Session.set("errorMessage", "Please log in to post a comment.");                                   // 58
 *   }                                                                                                    // 59
 * });                                                                                                    // 60
 * ```                                                                                                    // 61
 *                                                                                                        // 62
 * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 63
 * errors with a number in this field.                                                                    // 64
 *                                                                                                        // 65
 * @param {String} [reason] Optional.  A short human-readable summary of the                              // 66
 * error, like 'Not Found'.                                                                               // 67
 * @param {String} [details] Optional.  Additional information about the error,                           // 68
 * like a textual stack trace.                                                                            // 69
 */                                                                                                       // 70
Meteor.Error = Meteor.makeErrorType(                                                                      // 71
  "Meteor.Error",                                                                                         // 72
  function (error, reason, details) {                                                                     // 73
    var self = this;                                                                                      // 74
                                                                                                          // 75
    // String code uniquely identifying this kind of error.                                               // 76
    self.error = error;                                                                                   // 77
                                                                                                          // 78
    // Optional: A short human-readable summary of the error. Not                                         // 79
    // intended to be shown to end users, just developers. ("Not Found",                                  // 80
    // "Internal Server Error")                                                                           // 81
    self.reason = reason;                                                                                 // 82
                                                                                                          // 83
    // Optional: Additional information about the error, say for                                          // 84
    // debugging. It might be a (textual) stack trace if the server is                                    // 85
    // willing to provide one. The corresponding thing in HTTP would be                                   // 86
    // the body of a 404 or 500 response. (The difference is that we                                      // 87
    // never expect this to be shown to end users, only developers, so                                    // 88
    // it doesn't need to be pretty.)                                                                     // 89
    self.details = details;                                                                               // 90
                                                                                                          // 91
    // This is what gets displayed at the top of a stack trace. Current                                   // 92
    // format is "[404]" (if no reason is set) or "File not found [404]"                                  // 93
    if (self.reason)                                                                                      // 94
      self.message = self.reason + ' [' + self.error + ']';                                               // 95
    else                                                                                                  // 96
      self.message = '[' + self.error + ']';                                                              // 97
  });                                                                                                     // 98
                                                                                                          // 99
// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 100
// properly EJSON-clone it. This is especially important because if a                                     // 101
// Meteor.Error is thrown through a Future, the error, reason, and details                                // 102
// properties become non-enumerable so a standard Object clone won't preserve                             // 103
// them and they will be lost from DDP.                                                                   // 104
Meteor.Error.prototype.clone = function () {                                                              // 105
  var self = this;                                                                                        // 106
  return new Meteor.Error(self.error, self.reason, self.details);                                         // 107
};                                                                                                        // 108
                                                                                                          // 109
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/fiber_stubs_client.js                                                                  //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1
// to use a queue too, and also to call noYieldsAllowed.                                                  // 2
                                                                                                          // 3
// The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4
//                                                                                                        // 5
Meteor._noYieldsAllowed = function (f) {                                                                  // 6
  return f();                                                                                             // 7
};                                                                                                        // 8
                                                                                                          // 9
// An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10
// runs all the tasks when you call runTask or flush, synchronously.                                      // 11
//                                                                                                        // 12
Meteor._SynchronousQueue = function () {                                                                  // 13
  var self = this;                                                                                        // 14
  self._tasks = [];                                                                                       // 15
  self._running = false;                                                                                  // 16
  self._runTimeout = null;                                                                                // 17
};                                                                                                        // 18
                                                                                                          // 19
_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 20
  runTask: function (task) {                                                                              // 21
    var self = this;                                                                                      // 22
    if (!self.safeToRunTask())                                                                            // 23
      throw new Error("Could not synchronously run a task from a running task");                          // 24
    self._tasks.push(task);                                                                               // 25
    var tasks = self._tasks;                                                                              // 26
    self._tasks = [];                                                                                     // 27
    self._running = true;                                                                                 // 28
                                                                                                          // 29
    if (self._runTimeout) {                                                                               // 30
      // Since we're going to drain the queue, we can forget about the timeout                            // 31
      // which tries to run it.  (But if one of our tasks queues something else,                          // 32
      // the timeout will be correctly re-created.)                                                       // 33
      clearTimeout(self._runTimeout);                                                                     // 34
      self._runTimeout = null;                                                                            // 35
    }                                                                                                     // 36
                                                                                                          // 37
    try {                                                                                                 // 38
      while (!_.isEmpty(tasks)) {                                                                         // 39
        var t = tasks.shift();                                                                            // 40
        try {                                                                                             // 41
          t();                                                                                            // 42
        } catch (e) {                                                                                     // 43
          if (_.isEmpty(tasks)) {                                                                         // 44
            // this was the last task, that is, the one we're calling runTask                             // 45
            // for.                                                                                       // 46
            throw e;                                                                                      // 47
          } else {                                                                                        // 48
            Meteor._debug("Exception in queued task: " + (e.stack || e));                                 // 49
          }                                                                                               // 50
        }                                                                                                 // 51
      }                                                                                                   // 52
    } finally {                                                                                           // 53
      self._running = false;                                                                              // 54
    }                                                                                                     // 55
  },                                                                                                      // 56
                                                                                                          // 57
  queueTask: function (task) {                                                                            // 58
    var self = this;                                                                                      // 59
    self._tasks.push(task);                                                                               // 60
    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61
    // in stubs for now.                                                                                  // 62
    if (!self._runTimeout) {                                                                              // 63
      self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                         // 64
    }                                                                                                     // 65
  },                                                                                                      // 66
                                                                                                          // 67
  flush: function () {                                                                                    // 68
    var self = this;                                                                                      // 69
    self.runTask(function () {});                                                                         // 70
  },                                                                                                      // 71
                                                                                                          // 72
  drain: function () {                                                                                    // 73
    var self = this;                                                                                      // 74
    if (!self.safeToRunTask())                                                                            // 75
      return;                                                                                             // 76
    while (!_.isEmpty(self._tasks)) {                                                                     // 77
      self.flush();                                                                                       // 78
    }                                                                                                     // 79
  },                                                                                                      // 80
                                                                                                          // 81
  safeToRunTask: function () {                                                                            // 82
    var self = this;                                                                                      // 83
    return !self._running;                                                                                // 84
  }                                                                                                       // 85
});                                                                                                       // 86
                                                                                                          // 87
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/startup_client.js                                                                      //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var callbackQueue = [];                                                                                   // 1
var isLoadingCompleted = false;                                                                           // 2
var isReady = false;                                                                                      // 3
                                                                                                          // 4
// Keeps track of how many events to wait for in addition to loading completing,                          // 5
// before we're considered ready.                                                                         // 6
var readyHoldsCount = 0;                                                                                  // 7
                                                                                                          // 8
var holdReady =  function () {                                                                            // 9
  readyHoldsCount++;                                                                                      // 10
}                                                                                                         // 11
                                                                                                          // 12
var releaseReadyHold = function () {                                                                      // 13
  readyHoldsCount--;                                                                                      // 14
  maybeReady();                                                                                           // 15
}                                                                                                         // 16
                                                                                                          // 17
var maybeReady = function () {                                                                            // 18
  if (isReady || !isLoadingCompleted || readyHoldsCount > 0)                                              // 19
    return;                                                                                               // 20
                                                                                                          // 21
  isReady = true;                                                                                         // 22
                                                                                                          // 23
  // Run startup callbacks                                                                                // 24
  while (callbackQueue.length)                                                                            // 25
    (callbackQueue.shift())();                                                                            // 26
                                                                                                          // 27
  if (Meteor.isCordova) {                                                                                 // 28
    // Notify the WebAppLocalServer plugin that startup was completed successfully,                       // 29
    // so we can roll back faulty versions if this doesn't happen                                         // 30
    WebAppLocalServer.startupDidComplete();                                                               // 31
  }                                                                                                       // 32
};                                                                                                        // 33
                                                                                                          // 34
var loadingCompleted = function () {                                                                      // 35
  if (!isLoadingCompleted) {                                                                              // 36
    isLoadingCompleted = true;                                                                            // 37
    maybeReady();                                                                                         // 38
  }                                                                                                       // 39
}                                                                                                         // 40
                                                                                                          // 41
if (Meteor.isCordova) {                                                                                   // 42
  holdReady();                                                                                            // 43
  document.addEventListener('deviceready', releaseReadyHold, false);                                      // 44
}                                                                                                         // 45
                                                                                                          // 46
if (document.readyState === 'complete' || document.readyState === 'loaded') {                             // 47
  // Loading has completed,                                                                               // 48
  // but allow other scripts the opportunity to hold ready                                                // 49
  window.setTimeout(loadingCompleted);                                                                    // 50
} else { // Attach event listeners to wait for loading to complete                                        // 51
  if (document.addEventListener) {                                                                        // 52
    document.addEventListener('DOMContentLoaded', loadingCompleted, false);                               // 53
    window.addEventListener('load', loadingCompleted, false);                                             // 54
  } else { // Use IE event model for < IE9                                                                // 55
    document.attachEvent('onreadystatechange', function () {                                              // 56
      if (document.readyState === "complete") {                                                           // 57
        loadingCompleted();                                                                               // 58
      }                                                                                                   // 59
    });                                                                                                   // 60
    window.attachEvent('load', loadingCompleted);                                                         // 61
  }                                                                                                       // 62
}                                                                                                         // 63
                                                                                                          // 64
/**                                                                                                       // 65
 * @summary Run code when a client or a server starts.                                                    // 66
 * @locus Anywhere                                                                                        // 67
 * @param {Function} func A function to run on startup.                                                   // 68
 */                                                                                                       // 69
Meteor.startup = function (callback) {                                                                    // 70
  // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/                                      // 71
  var doScroll = !document.addEventListener &&                                                            // 72
    document.documentElement.doScroll;                                                                    // 73
                                                                                                          // 74
  if (!doScroll || window !== top) {                                                                      // 75
    if (isReady)                                                                                          // 76
      callback();                                                                                         // 77
    else                                                                                                  // 78
      callbackQueue.push(callback);                                                                       // 79
  } else {                                                                                                // 80
    try { doScroll('left'); }                                                                             // 81
    catch (error) {                                                                                       // 82
      setTimeout(function () { Meteor.startup(callback); }, 50);                                          // 83
      return;                                                                                             // 84
    };                                                                                                    // 85
    callback();                                                                                           // 86
  }                                                                                                       // 87
};                                                                                                        // 88
                                                                                                          // 89
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/debug.js                                                                               //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var suppress = 0;                                                                                         // 1
                                                                                                          // 2
// replacement for console.log. This is a temporary API. We should                                        // 3
// provide a real logging API soon (possibly just a polyfill for                                          // 4
// console?)                                                                                              // 5
//                                                                                                        // 6
// NOTE: this is used on the server to print the warning about                                            // 7
// having autopublish enabled when you probably meant to turn it                                          // 8
// off. it's not really the proper use of something called                                                // 9
// _debug. the intent is for this message to go to the terminal and                                       // 10
// be very visible. if you change _debug to go someplace else, etc,                                       // 11
// please fix the autopublish code to do something reasonable.                                            // 12
//                                                                                                        // 13
Meteor._debug = function (/* arguments */) {                                                              // 14
  if (suppress) {                                                                                         // 15
    suppress--;                                                                                           // 16
    return;                                                                                               // 17
  }                                                                                                       // 18
  if (typeof console !== 'undefined' &&                                                                   // 19
      typeof console.log !== 'undefined') {                                                               // 20
    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21
      // IE10 PP4 requires at least one argument                                                          // 22
      console.log('');                                                                                    // 23
    } else {                                                                                              // 24
      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25
      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26
      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27
      if (typeof console.log.apply === "function") {                                                      // 28
        // Most browsers                                                                                  // 29
                                                                                                          // 30
        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31
        // console.log, so try to call it with one argument if possible.                                  // 32
        // Approach taken here: If all arguments are strings, join them on space.                         // 33
        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34
        var allArgumentsOfTypeString = true;                                                              // 35
        for (var i = 0; i < arguments.length; i++)                                                        // 36
          if (typeof arguments[i] !== "string")                                                           // 37
            allArgumentsOfTypeString = false;                                                             // 38
                                                                                                          // 39
        if (allArgumentsOfTypeString)                                                                     // 40
          console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);                        // 41
        else                                                                                              // 42
          console.log.apply(console, arguments);                                                          // 43
                                                                                                          // 44
      } else if (typeof Function.prototype.bind === "function") {                                         // 45
        // IE9                                                                                            // 46
        var log = Function.prototype.bind.call(console.log, console);                                     // 47
        log.apply(console, arguments);                                                                    // 48
      } else {                                                                                            // 49
        // IE8                                                                                            // 50
        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51
      }                                                                                                   // 52
    }                                                                                                     // 53
  }                                                                                                       // 54
};                                                                                                        // 55
                                                                                                          // 56
// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57
// stop tests from spamming the console.                                                                  // 58
//                                                                                                        // 59
Meteor._suppress_log = function (count) {                                                                 // 60
  suppress += count;                                                                                      // 61
};                                                                                                        // 62
                                                                                                          // 63
Meteor._suppressed_log_expected = function () {                                                           // 64
  return suppress !== 0;                                                                                  // 65
};                                                                                                        // 66
                                                                                                          // 67
                                                                                                          // 68
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/string_utils.js                                                                        //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1
// Code taken from                                                                                        // 2
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3
Meteor._escapeRegExp = function (string) {                                                                // 4
    return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");                                         // 5
};                                                                                                        // 6
                                                                                                          // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/test_environment.js                                                                    //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
var TEST_METADATA_STR;                                                                                    // 1
if (Meteor.isClient) {                                                                                    // 2
  TEST_METADATA_STR = meteorEnv.TEST_METADATA;                                                            // 3
} else {                                                                                                  // 4
  TEST_METADATA_STR = process.env.TEST_METADATA;                                                          // 5
}                                                                                                         // 6
                                                                                                          // 7
var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");                                                // 8
var testDriverPackageName = TEST_METADATA.driverPackage;                                                  // 9
                                                                                                          // 10
// Note that if we are in test-packages mode neither of these will be set,                                // 11
// but we will have a test driver package                                                                 // 12
Meteor.isTest = !!TEST_METADATA.isTest;                                                                   // 13
Meteor.isAppTest = !!TEST_METADATA.isAppTest;                                                             // 14
Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;                    // 15
                                                                                                          // 16
if (typeof testDriverPackageName === "string") {                                                          // 17
  Meteor.startup(function() {                                                                             // 18
    var testDriverPackage = Package[testDriverPackageName];                                               // 19
    if (! testDriverPackage) {                                                                            // 20
      throw new Error("Can't find test driver package: " + testDriverPackageName);                        // 21
    }                                                                                                     // 22
                                                                                                          // 23
    // On the client, the test driver *must* define `runTests`                                            // 24
    if (Meteor.isClient) {                                                                                // 25
      if (typeof testDriverPackage.runTests !== "function") {                                             // 26
        throw new Error("Test driver package " + testDriverPackageName                                    // 27
          + " missing `runTests` export");                                                                // 28
      }                                                                                                   // 29
      testDriverPackage.runTests();                                                                       // 30
    } else {                                                                                              // 31
      // The server can optionally define `start`                                                         // 32
      if (typeof testDriverPackage.start === "function") {                                                // 33
        testDriverPackage.start();                                                                        // 34
      }                                                                                                   // 35
    }                                                                                                     // 36
  });                                                                                                     // 37
}                                                                                                         // 38
                                                                                                          // 39
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/dynamics_browser.js                                                                    //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
// Simple implementation of dynamic scoping, for use in browsers                                          // 1
                                                                                                          // 2
var nextSlot = 0;                                                                                         // 3
var currentValues = [];                                                                                   // 4
                                                                                                          // 5
Meteor.EnvironmentVariable = function () {                                                                // 6
  this.slot = nextSlot++;                                                                                 // 7
};                                                                                                        // 8
                                                                                                          // 9
_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 10
  get: function () {                                                                                      // 11
    return currentValues[this.slot];                                                                      // 12
  },                                                                                                      // 13
                                                                                                          // 14
  getOrNullIfOutsideFiber: function () {                                                                  // 15
    return this.get();                                                                                    // 16
  },                                                                                                      // 17
                                                                                                          // 18
  withValue: function (value, func) {                                                                     // 19
    var saved = currentValues[this.slot];                                                                 // 20
    try {                                                                                                 // 21
      currentValues[this.slot] = value;                                                                   // 22
      var ret = func();                                                                                   // 23
    } finally {                                                                                           // 24
      currentValues[this.slot] = saved;                                                                   // 25
    }                                                                                                     // 26
    return ret;                                                                                           // 27
  }                                                                                                       // 28
});                                                                                                       // 29
                                                                                                          // 30
Meteor.bindEnvironment = function (func, onException, _this) {                                            // 31
  // needed in order to be able to create closures inside func and                                        // 32
  // have the closed variables not change back to their original                                          // 33
  // values                                                                                               // 34
  var boundValues = _.clone(currentValues);                                                               // 35
                                                                                                          // 36
  if (!onException || typeof(onException) === 'string') {                                                 // 37
    var description = onException || "callback of async function";                                        // 38
    onException = function (error) {                                                                      // 39
      Meteor._debug(                                                                                      // 40
        "Exception in " + description + ":",                                                              // 41
        error && error.stack || error                                                                     // 42
      );                                                                                                  // 43
    };                                                                                                    // 44
  }                                                                                                       // 45
                                                                                                          // 46
  return function (/* arguments */) {                                                                     // 47
    var savedValues = currentValues;                                                                      // 48
    try {                                                                                                 // 49
      currentValues = boundValues;                                                                        // 50
      var ret = func.apply(_this, _.toArray(arguments));                                                  // 51
    } catch (e) {                                                                                         // 52
      // note: callback-hook currently relies on the fact that if onException                             // 53
      // throws in the browser, the wrapped call throws.                                                  // 54
      onException(e);                                                                                     // 55
    } finally {                                                                                           // 56
      currentValues = savedValues;                                                                        // 57
    }                                                                                                     // 58
    return ret;                                                                                           // 59
  };                                                                                                      // 60
};                                                                                                        // 61
                                                                                                          // 62
Meteor._nodeCodeMustBeInFiber = function () {                                                             // 63
  // no-op on browser                                                                                     // 64
};                                                                                                        // 65
                                                                                                          // 66
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                        //
// packages/meteor/url_common.js                                                                          //
//                                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                          //
/**                                                                                                       // 1
 * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
 * @locus Anywhere                                                                                        // 3
 * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".               // 4
 * @param {Object} [options]                                                                              // 5
 * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6
 * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
 * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
 */                                                                                                       // 9
Meteor.absoluteUrl = function (path, options) {                                                           // 10
  // path is optional                                                                                     // 11
  if (!options && typeof path === 'object') {                                                             // 12
    options = path;                                                                                       // 13
    path = undefined;                                                                                     // 14
  }                                                                                                       // 15
  // merge options with defaults                                                                          // 16
  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17
                                                                                                          // 18
  var url = options.rootUrl;                                                                              // 19
  if (!url)                                                                                               // 20
    throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");               // 21
                                                                                                          // 22
  if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23
    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24
                                                                                                          // 25
  if (!/\/$/.test(url)) // url ends with '/'                                                              // 26
    url += '/';                                                                                           // 27
                                                                                                          // 28
  if (path)                                                                                               // 29
    url += path;                                                                                          // 30
                                                                                                          // 31
  // turn http to https if secure option is set, and we're not talking                                    // 32
  // to localhost.                                                                                        // 33
  if (options.secure &&                                                                                   // 34
      /^http:/.test(url) && // url starts with 'http:'                                                    // 35
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost                                  // 36
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1                                            // 37
    url = url.replace(/^http:/, 'https:');                                                                // 38
                                                                                                          // 39
  if (options.replaceLocalhost)                                                                           // 40
    url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');                              // 41
                                                                                                          // 42
  return url;                                                                                             // 43
};                                                                                                        // 44
                                                                                                          // 45
// allow later packages to override default options                                                       // 46
Meteor.absoluteUrl.defaultOptions = { };                                                                  // 47
if (typeof __meteor_runtime_config__ === "object" &&                                                      // 48
    __meteor_runtime_config__.ROOT_URL)                                                                   // 49
  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50
                                                                                                          // 51
                                                                                                          // 52
Meteor._relativeToSiteRootUrl = function (link) {                                                         // 53
  if (typeof __meteor_runtime_config__ === "object" &&                                                    // 54
      link.substr(0, 1) === "/")                                                                          // 55
    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;                                 // 56
  return link;                                                                                            // 57
};                                                                                                        // 58
                                                                                                          // 59
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.meteor = {}, {
  Meteor: Meteor,
  global: global,
  meteorEnv: meteorEnv
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['meteor-base'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mobile-experience'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var makeInstaller, meteorInstall;

/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// packages/modules-runtime/.npm/package/node_modules/install/install.js   //
// This file is in bare mode and is not in its own closure.                //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
                                                                           //
makeInstaller = function (options) {                                       // 1
  "use strict";                                                            // 2
                                                                           // 3
  options = options || {};                                                 // 4
                                                                           // 5
  // These file extensions will be appended to required module identifiers
  // if they do not exactly match an installed module.                     // 7
  var defaultExtensions = options.extensions || [".js", ".json"];          // 8
                                                                           // 9
  // If defined, the options.onInstall function will be called any time    // 10
  // new modules are installed.                                            // 11
  var onInstall = options.onInstall;                                       // 12
                                                                           // 13
  // If defined, each module-specific require function will be passed to   // 14
  // this function, along with the module.id of the parent module, and     // 15
  // the result will be used in place of the original require function.    // 16
  var wrapRequire = options.wrapRequire;                                   // 17
                                                                           // 18
  // If defined, the options.override function will be called before       // 19
  // looking up any top-level package identifiers in node_modules          // 20
  // directories. It can either return a string to provide an alternate    // 21
  // package identifier, or a non-string value to prevent the lookup from  // 22
  // proceeding.                                                           // 23
  var override = options.override;                                         // 24
                                                                           // 25
  // If defined, the options.fallback function will be called when no      // 26
  // installed module is found for a required module identifier. Often     // 27
  // options.fallback will be implemented in terms of the native Node      // 28
  // require function, which has the ability to load binary modules.       // 29
  var fallback = options.fallback;                                         // 30
                                                                           // 31
  // If truthy, package resolution will prefer the "browser" field of      // 32
  // package.json files to the "main" field. Note that this only supports  // 33
  // string-valued "browser" fields for now, though in the future it might
  // make sense to support the object version, a la browserify.            // 35
  var browser = options.browser;                                           // 36
                                                                           // 37
  // Called below as hasOwn.call(obj, key).                                // 38
  var hasOwn = {}.hasOwnProperty;                                          // 39
                                                                           // 40
  // The file object representing the root directory of the installed      // 41
  // module tree.                                                          // 42
  var root = new File("/", new File("/.."));                               // 43
  var rootRequire = makeRequire(root);                                     // 44
                                                                           // 45
  // Merges the given tree of directories and module factory functions     // 46
  // into the tree of installed modules and returns a require function     // 47
  // that behaves as if called from a module in the root directory.        // 48
  function install(tree, options) {                                        // 49
    if (isObject(tree)) {                                                  // 50
      fileMergeContents(root, tree, options);                              // 51
      if (isFunction(onInstall)) {                                         // 52
        onInstall(rootRequire);                                            // 53
      }                                                                    // 54
    }                                                                      // 55
    return rootRequire;                                                    // 56
  }                                                                        // 57
                                                                           // 58
  // This constructor will be used to instantiate the module objects       // 59
  // passed to module factory functions (i.e. the third argument after     // 60
  // require and exports), and is exposed as install.Module in case the    // 61
  // caller of makeInstaller wishes to modify Module.prototype.            // 62
  function Module(id) {                                                    // 63
    this.id = id;                                                          // 64
                                                                           // 65
    // The Node implementation of module.children unfortunately includes   // 66
    // only those child modules that were imported for the first time by   // 67
    // this parent module (i.e., child.parent === this).                   // 68
    this.children = [];                                                    // 69
                                                                           // 70
    // This object is an install.js extension that includes all child      // 71
    // modules imported by this module, even if this module is not the     // 72
    // first to import them.                                               // 73
    this.childrenById = {};                                                // 74
  }                                                                        // 75
                                                                           // 76
  Module.prototype.resolve = function (id) {                               // 77
    return this.require.resolve(id);                                       // 78
  };                                                                       // 79
                                                                           // 80
  install.Module = Module;                                                 // 81
                                                                           // 82
  function getOwn(obj, key) {                                              // 83
    return hasOwn.call(obj, key) && obj[key];                              // 84
  }                                                                        // 85
                                                                           // 86
  function isObject(value) {                                               // 87
    return value && typeof value === "object";                             // 88
  }                                                                        // 89
                                                                           // 90
  function isFunction(value) {                                             // 91
    return typeof value === "function";                                    // 92
  }                                                                        // 93
                                                                           // 94
  function isString(value) {                                               // 95
    return typeof value === "string";                                      // 96
  }                                                                        // 97
                                                                           // 98
  function makeRequire(file) {                                             // 99
    function require(id) {                                                 // 100
      var result = fileResolve(file, id);                                  // 101
      if (result) {                                                        // 102
        return fileEvaluate(result, file.m);                               // 103
      }                                                                    // 104
                                                                           // 105
      var error = new Error("Cannot find module '" + id + "'");            // 106
                                                                           // 107
      if (isFunction(fallback)) {                                          // 108
        return fallback(                                                   // 109
          id, // The missing module identifier.                            // 110
          file.m.id, // The path of the requiring file.                    // 111
          error // The error we would have thrown.                         // 112
        );                                                                 // 113
      }                                                                    // 114
                                                                           // 115
      throw error;                                                         // 116
    }                                                                      // 117
                                                                           // 118
    if (isFunction(wrapRequire)) {                                         // 119
      require = wrapRequire(require, file.m.id);                           // 120
    }                                                                      // 121
                                                                           // 122
    require.extensions = fileGetExtensions(file).slice(0);                 // 123
                                                                           // 124
    require.resolve = function (id) {                                      // 125
      var f = fileResolve(file, id);                                       // 126
      if (f) return f.m.id;                                                // 127
      var error = new Error("Cannot find module '" + id + "'");            // 128
      if (fallback && isFunction(fallback.resolve)) {                      // 129
        return fallback.resolve(id, file.m.id, error);                     // 130
      }                                                                    // 131
      throw error;                                                         // 132
    };                                                                     // 133
                                                                           // 134
    return require;                                                        // 135
  }                                                                        // 136
                                                                           // 137
  // File objects represent either directories or modules that have been   // 138
  // installed. When a `File` respresents a directory, its `.c` (contents)
  // property is an object containing the names of the files (or           // 140
  // directories) that it contains. When a `File` represents a module, its
  // `.c` property is a function that can be invoked with the appropriate  // 142
  // `(require, exports, module)` arguments to evaluate the module. If the
  // `.c` property is a string, that string will be resolved as a module   // 144
  // identifier, and the exports of the resulting module will provide the  // 145
  // exports of the original file. The `.p` (parent) property of a File is
  // either a directory `File` or `null`. Note that a child may claim      // 147
  // another `File` as its parent even if the parent does not have an      // 148
  // entry for that child in its `.c` object.  This is important for       // 149
  // implementing anonymous files, and preventing child modules from using
  // `../relative/identifier` syntax to examine unrelated modules.         // 151
  function File(name, parent) {                                            // 152
    var file = this;                                                       // 153
                                                                           // 154
    // Link to the parent file.                                            // 155
    file.p = parent = parent || null;                                      // 156
                                                                           // 157
    // The module object for this File, which will eventually boast an     // 158
    // .exports property when/if the file is evaluated.                    // 159
    file.m = new Module(name);                                             // 160
  }                                                                        // 161
                                                                           // 162
  function fileEvaluate(file, parentModule) {                              // 163
    var contents = file && file.c;                                         // 164
    var module = file.m;                                                   // 165
                                                                           // 166
    if (! hasOwn.call(module, "exports")) {                                // 167
      if (parentModule) {                                                  // 168
        module.parent = parentModule;                                      // 169
        var children = parentModule.children;                              // 170
        if (Array.isArray(children)) {                                     // 171
          children.push(module);                                           // 172
        }                                                                  // 173
      }                                                                    // 174
                                                                           // 175
      // If a Module.prototype.useNode method is defined, give it a chance
      // to define module.exports based on module.id using Node.           // 177
      if (! isFunction(module.useNode) ||                                  // 178
          ! module.useNode()) {                                            // 179
        contents(                                                          // 180
          module.require = module.require || makeRequire(file),            // 181
          module.exports = {},                                             // 182
          module,                                                          // 183
          file.m.id,                                                       // 184
          file.p.m.id                                                      // 185
        );                                                                 // 186
      }                                                                    // 187
                                                                           // 188
      module.loaded = true;                                                // 189
    }                                                                      // 190
                                                                           // 191
    if (isFunction(module.runModuleSetters)) {                             // 192
      module.runModuleSetters();                                           // 193
    }                                                                      // 194
                                                                           // 195
    return module.exports;                                                 // 196
  }                                                                        // 197
                                                                           // 198
  function fileIsDirectory(file) {                                         // 199
    return file && isObject(file.c);                                       // 200
  }                                                                        // 201
                                                                           // 202
  function fileMergeContents(file, contents, options) {                    // 203
    // If contents is an array of strings and functions, return the last   // 204
    // function with a `.d` property containing all the strings.           // 205
    if (Array.isArray(contents)) {                                         // 206
      var deps = [];                                                       // 207
                                                                           // 208
      contents.forEach(function (item) {                                   // 209
        if (isString(item)) {                                              // 210
          deps.push(item);                                                 // 211
        } else if (isFunction(item)) {                                     // 212
          contents = item;                                                 // 213
        }                                                                  // 214
      });                                                                  // 215
                                                                           // 216
      if (isFunction(contents)) {                                          // 217
        contents.d = deps;                                                 // 218
      } else {                                                             // 219
        // If the array did not contain a function, merge nothing.         // 220
        contents = null;                                                   // 221
      }                                                                    // 222
                                                                           // 223
    } else if (isFunction(contents)) {                                     // 224
      // If contents is already a function, make sure it has `.d`.         // 225
      contents.d = contents.d || [];                                       // 226
                                                                           // 227
    } else if (! isString(contents) &&                                     // 228
               ! isObject(contents)) {                                     // 229
      // If contents is neither an array nor a function nor a string nor   // 230
      // an object, just give up and merge nothing.                        // 231
      contents = null;                                                     // 232
    }                                                                      // 233
                                                                           // 234
    if (contents) {                                                        // 235
      file.c = file.c || (isObject(contents) ? {} : contents);             // 236
      if (isObject(contents) && fileIsDirectory(file)) {                   // 237
        Object.keys(contents).forEach(function (key) {                     // 238
          if (key === "..") {                                              // 239
            child = file.p;                                                // 240
                                                                           // 241
          } else {                                                         // 242
            var child = getOwn(file.c, key);                               // 243
            if (! child) {                                                 // 244
              child = file.c[key] = new File(                              // 245
                file.m.id.replace(/\/*$/, "/") + key,                      // 246
                file                                                       // 247
              );                                                           // 248
                                                                           // 249
              child.o = options;                                           // 250
            }                                                              // 251
          }                                                                // 252
                                                                           // 253
          fileMergeContents(child, contents[key], options);                // 254
        });                                                                // 255
      }                                                                    // 256
    }                                                                      // 257
  }                                                                        // 258
                                                                           // 259
  function fileGetExtensions(file) {                                       // 260
    return file.o && file.o.extensions || defaultExtensions;               // 261
  }                                                                        // 262
                                                                           // 263
  function fileAppendIdPart(file, part, extensions) {                      // 264
    // Always append relative to a directory.                              // 265
    while (file && ! fileIsDirectory(file)) {                              // 266
      file = file.p;                                                       // 267
    }                                                                      // 268
                                                                           // 269
    if (! file || ! part || part === ".") {                                // 270
      return file;                                                         // 271
    }                                                                      // 272
                                                                           // 273
    if (part === "..") {                                                   // 274
      return file.p;                                                       // 275
    }                                                                      // 276
                                                                           // 277
    var exactChild = getOwn(file.c, part);                                 // 278
                                                                           // 279
    // Only consider multiple file extensions if this part is the last     // 280
    // part of a module identifier and not equal to `.` or `..`, and there
    // was no exact match or the exact match was a directory.              // 282
    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {     // 283
      for (var e = 0; e < extensions.length; ++e) {                        // 284
        var child = getOwn(file.c, part + extensions[e]);                  // 285
        if (child) {                                                       // 286
          return child;                                                    // 287
        }                                                                  // 288
      }                                                                    // 289
    }                                                                      // 290
                                                                           // 291
    return exactChild;                                                     // 292
  }                                                                        // 293
                                                                           // 294
  function fileAppendId(file, id, extensions) {                            // 295
    var parts = id.split("/");                                             // 296
                                                                           // 297
    // Use `Array.prototype.every` to terminate iteration early if         // 298
    // `fileAppendIdPart` returns a falsy value.                           // 299
    parts.every(function (part, i) {                                       // 300
      return file = i < parts.length - 1                                   // 301
        ? fileAppendIdPart(file, part)                                     // 302
        : fileAppendIdPart(file, part, extensions);                        // 303
    });                                                                    // 304
                                                                           // 305
    return file;                                                           // 306
  }                                                                        // 307
                                                                           // 308
  function recordChild(parentModule, childFile) {                          // 309
    var childModule = childFile && childFile.m;                            // 310
    if (parentModule && childModule) {                                     // 311
      parentModule.childrenById[childModule.id] = childModule;             // 312
    }                                                                      // 313
  }                                                                        // 314
                                                                           // 315
  function fileResolve(file, id, parentModule, seenDirFiles) {             // 316
    var parentModule = parentModule || file.m;                             // 317
    var extensions = fileGetExtensions(file);                              // 318
                                                                           // 319
    file =                                                                 // 320
      // Absolute module identifiers (i.e. those that begin with a `/`     // 321
      // character) are interpreted relative to the root directory, which  // 322
      // is a slight deviation from Node, which has access to the entire   // 323
      // file system.                                                      // 324
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :          // 325
      // Relative module identifiers are interpreted relative to the       // 326
      // current file, naturally.                                          // 327
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) :          // 328
      // Top-level module identifiers are interpreted as referring to      // 329
      // packages in `node_modules` directories.                           // 330
      nodeModulesLookup(file, id, extensions);                             // 331
                                                                           // 332
    // If the identifier resolves to a directory, we use the same logic as
    // Node to find an `index.js` or `package.json` file to evaluate.      // 334
    while (fileIsDirectory(file)) {                                        // 335
      seenDirFiles = seenDirFiles || [];                                   // 336
                                                                           // 337
      // If the "main" field of a `package.json` file resolves to a        // 338
      // directory we've already considered, then we should not attempt to
      // read the same `package.json` file again. Using an array as a set  // 340
      // is acceptable here because the number of directories to consider  // 341
      // is rarely greater than 1 or 2. Also, using indexOf allows us to   // 342
      // store File objects instead of strings.                            // 343
      if (seenDirFiles.indexOf(file) < 0) {                                // 344
        seenDirFiles.push(file);                                           // 345
                                                                           // 346
        var pkgJsonFile = fileAppendIdPart(file, "package.json"), main;    // 347
        var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);  // 348
        if (pkg && (browser &&                                             // 349
                    isString(main = pkg.browser) ||                        // 350
                    isString(main = pkg.main))) {                          // 351
          recordChild(parentModule, pkgJsonFile);                          // 352
                                                                           // 353
          // The "main" field of package.json does not have to begin with  // 354
          // ./ to be considered relative, so first we try simply          // 355
          // appending it to the directory path before falling back to a   // 356
          // full fileResolve, which might return a package from a         // 357
          // node_modules directory.                                       // 358
          file = fileAppendId(file, main, extensions) ||                   // 359
            fileResolve(file, main, parentModule, seenDirFiles);           // 360
                                                                           // 361
          if (file) {                                                      // 362
            // The fileAppendId call above may have returned a directory,  // 363
            // so continue the loop to make sure we resolve it to a        // 364
            // non-directory file.                                         // 365
            continue;                                                      // 366
          }                                                                // 367
        }                                                                  // 368
      }                                                                    // 369
                                                                           // 370
      // If we didn't find a `package.json` file, or it didn't have a      // 371
      // resolvable `.main` property, the only possibility left to         // 372
      // consider is that this directory contains an `index.js` module.    // 373
      // This assignment almost always terminates the while loop, because  // 374
      // there's very little chance `fileIsDirectory(file)` will be true   // 375
      // for the result of `fileAppendIdPart(file, "index.js")`. However,  // 376
      // in principle it is remotely possible that a file called           // 377
      // `index.js` could be a directory instead of a file.                // 378
      file = fileAppendIdPart(file, "index.js");                           // 379
    }                                                                      // 380
                                                                           // 381
    if (file && isString(file.c)) {                                        // 382
      file = fileResolve(file, file.c, parentModule, seenDirFiles);        // 383
    }                                                                      // 384
                                                                           // 385
    recordChild(parentModule, file);                                       // 386
                                                                           // 387
    return file;                                                           // 388
  };                                                                       // 389
                                                                           // 390
  function nodeModulesLookup(file, id, extensions) {                       // 391
    if (isFunction(override)) {                                            // 392
      id = override(id, file.m.id);                                        // 393
    }                                                                      // 394
                                                                           // 395
    if (isString(id)) {                                                    // 396
      for (var resolved; file && ! resolved; file = file.p) {              // 397
        resolved = fileIsDirectory(file) &&                                // 398
          fileAppendId(file, "node_modules/" + id, extensions);            // 399
      }                                                                    // 400
                                                                           // 401
      return resolved;                                                     // 402
    }                                                                      // 403
  }                                                                        // 404
                                                                           // 405
  return install;                                                          // 406
};                                                                         // 407
                                                                           // 408
if (typeof exports === "object") {                                         // 409
  exports.makeInstaller = makeInstaller;                                   // 410
}                                                                          // 411
                                                                           // 412
/////////////////////////////////////////////////////////////////////////////







(function(){

/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// packages/modules-runtime/modules-runtime.js                             //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
                                                                           //
var options = {};                                                          // 1
var hasOwn = options.hasOwnProperty;                                       // 2
                                                                           // 3
// RegExp matching strings that don't start with a `.` or a `/`.           // 4
var topLevelIdPattern = /^[^./]/;                                          // 5
                                                                           // 6
if (typeof Profile === "function" &&                                       // 7
    process.env.METEOR_PROFILE) {                                          // 8
  options.wrapRequire = function (require) {                               // 9
    return Profile(function (id) {                                         // 10
      return "require(" + JSON.stringify(id) + ")";                        // 11
    }, require);                                                           // 12
  };                                                                       // 13
}                                                                          // 14
                                                                           // 15
// On the client, make package resolution prefer the "browser" field of    // 16
// package.json files to the "main" field.                                 // 17
options.browser = Meteor.isClient;                                         // 18
                                                                           // 19
// This function will be called whenever a module identifier that hasn't   // 20
// been installed is required. For backwards compatibility, and so that we
// can require binary dependencies on the server, we implement the         // 22
// fallback in terms of Npm.require.                                       // 23
options.fallback = function (id, parentId, error) {                        // 24
  // For simplicity, we honor only top-level module identifiers here.      // 25
  // We could try to honor relative and absolute module identifiers by     // 26
  // somehow combining `id` with `dir`, but we'd have to be really careful
  // that the resulting modules were located in a known directory (not     // 28
  // some arbitrary location on the file system), and we only really need  // 29
  // the fallback for dependencies installed in node_modules directories.  // 30
  if (topLevelIdPattern.test(id)) {                                        // 31
    if (typeof Npm === "object" &&                                         // 32
        typeof Npm.require === "function") {                               // 33
      return Npm.require(id);                                              // 34
    }                                                                      // 35
  }                                                                        // 36
                                                                           // 37
  throw error;                                                             // 38
};                                                                         // 39
                                                                           // 40
options.fallback.resolve = function (id, parentId, error) {                // 41
  if (Meteor.isServer &&                                                   // 42
      topLevelIdPattern.test(id)) {                                        // 43
    // Allow any top-level identifier to resolve to itself on the server,  // 44
    // so that options.fallback can have a chance to handle it.            // 45
    return id;                                                             // 46
  }                                                                        // 47
                                                                           // 48
  throw error;                                                             // 49
};                                                                         // 50
                                                                           // 51
meteorInstall = makeInstaller(options);                                    // 52
var Mp = meteorInstall.Module.prototype;                                   // 53
                                                                           // 54
if (Meteor.isServer) {                                                     // 55
  Mp.useNode = function () {                                               // 56
    if (typeof npmRequire !== "function") {                                // 57
      // Can't use Node if npmRequire is not defined.                      // 58
      return false;                                                        // 59
    }                                                                      // 60
                                                                           // 61
    var parts = this.id.split("/");                                        // 62
    var start = 0;                                                         // 63
    if (parts[start] === "") ++start;                                      // 64
    if (parts[start] === "node_modules" &&                                 // 65
        parts[start + 1] === "meteor") {                                   // 66
      start += 2;                                                          // 67
    }                                                                      // 68
                                                                           // 69
    if (parts.indexOf("node_modules", start) < 0) {                        // 70
      // Don't try to use Node for modules that aren't in node_modules     // 71
      // directories.                                                      // 72
      return false;                                                        // 73
    }                                                                      // 74
                                                                           // 75
    try {                                                                  // 76
      npmRequire.resolve(this.id);                                         // 77
    } catch (e) {                                                          // 78
      return false;                                                        // 79
    }                                                                      // 80
                                                                           // 81
    this.exports = npmRequire(this.id);                                    // 82
                                                                           // 83
    return true;                                                           // 84
  };                                                                       // 85
}                                                                          // 86
                                                                           // 87
/////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['modules-runtime'] = {}, {
  meteorInstall: meteorInstall
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package['modules-runtime'].meteorInstall;

/* Package-scope variables */
var Buffer, process;

var require = meteorInstall({"node_modules":{"meteor":{"modules":{"client.js":["./install-packages.js","./stubs.js","./buffer.js","./process.js","reify/lib/runtime","./css",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/client.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("./install-packages.js");                                                                                      // 1
require("./stubs.js");                                                                                                 // 2
require("./buffer.js");                                                                                                // 3
require("./process.js");                                                                                               // 4
require("reify/lib/runtime").enable(module.constructor);                                                               // 5
                                                                                                                       // 6
exports.addStyles = require("./css").addStyles;                                                                        // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"buffer.js":["buffer",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/buffer.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  Buffer = global.Buffer || require("buffer").Buffer;                                                                  // 2
} catch (noBuffer) {}                                                                                                  // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"css.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/css.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var doc = document;                                                                                                    // 1
var head = doc.getElementsByTagName("head").item(0);                                                                   // 2
                                                                                                                       // 3
exports.addStyles = function (css) {                                                                                   // 4
  var style = doc.createElement("style");                                                                              // 5
                                                                                                                       // 6
  style.setAttribute("type", "text/css");                                                                              // 7
                                                                                                                       // 8
  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
  var internetExplorerSheetObject =                                                                                    // 10
    style.sheet || // Edge/IE11.                                                                                       // 11
    style.styleSheet; // Older IEs.                                                                                    // 12
                                                                                                                       // 13
  if (internetExplorerSheetObject) {                                                                                   // 14
    internetExplorerSheetObject.cssText = css;                                                                         // 15
  } else {                                                                                                             // 16
    style.appendChild(doc.createTextNode(css));                                                                        // 17
  }                                                                                                                    // 18
                                                                                                                       // 19
  return head.appendChild(style);                                                                                      // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"install-packages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/install-packages.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function install(name, mainModule) {                                                                                   // 1
  var meteorDir = {};                                                                                                  // 2
                                                                                                                       // 3
  // Given a package name <name>, install a stub module in the                                                         // 4
  // /node_modules/meteor directory called <name>.js, so that                                                          // 5
  // require.resolve("meteor/<name>") will always return                                                               // 6
  // /node_modules/meteor/<name>.js instead of something like                                                          // 7
  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
  // that the package contains a file called index.js (#6590).                                                         // 9
                                                                                                                       // 10
  if (mainModule) {                                                                                                    // 11
    meteorDir[name + ".js"] = [mainModule, function (require, e, module) {                                             // 12
      module.exports = require(mainModule);                                                                            // 13
    }];                                                                                                                // 14
  } else {                                                                                                             // 15
    // back compat with old Meteor packages                                                                            // 16
    meteorDir[name + ".js"] = function (r, e, module) {                                                                // 17
      module.exports = Package[name];                                                                                  // 18
    };                                                                                                                 // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  meteorInstall({                                                                                                      // 22
    node_modules: {                                                                                                    // 23
      meteor: meteorDir                                                                                                // 24
    }                                                                                                                  // 25
  });                                                                                                                  // 26
}                                                                                                                      // 27
                                                                                                                       // 28
// This file will be modified during computeJsOutputFilesMap to include                                                // 29
// install(<name>) calls for every Meteor package.                                                                     // 30
                                                                                                                       // 31
install("underscore");                                                                                                 // 32
install("meteor");                                                                                                     // 33
install("meteor-base");                                                                                                // 34
install("mobile-experience");                                                                                          // 35
install("modules-runtime");                                                                                            // 36
install("modules", "meteor/modules/client.js");                                                                        // 37
install("promise", "meteor/promise/client.js");                                                                        // 38
install("ecmascript-runtime", "meteor/ecmascript-runtime/runtime.js");                                                 // 39
install("babel-compiler");                                                                                             // 40
install("ecmascript");                                                                                                 // 41
install("base64");                                                                                                     // 42
install("ejson");                                                                                                      // 43
install("id-map");                                                                                                     // 44
install("ordered-dict");                                                                                               // 45
install("tracker");                                                                                                    // 46
install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");                                                     // 47
install("random");                                                                                                     // 48
install("mongo-id");                                                                                                   // 49
install("diff-sequence");                                                                                              // 50
install("geojson-utils", "meteor/geojson-utils/main.js");                                                              // 51
install("minimongo");                                                                                                  // 52
install("check", "meteor/check/match.js");                                                                             // 53
install("retry");                                                                                                      // 54
install("ddp-common");                                                                                                 // 55
install("reload");                                                                                                     // 56
install("ddp-client");                                                                                                 // 57
install("ddp");                                                                                                        // 58
install("ddp-server");                                                                                                 // 59
install("allow-deny");                                                                                                 // 60
install("mongo");                                                                                                      // 61
install("reactive-var");                                                                                               // 62
install("ddp-rate-limiter");                                                                                           // 63
install("localstorage");                                                                                               // 64
install("callback-hook");                                                                                              // 65
install("accounts-base", "meteor/accounts-base/client_main.js");                                                       // 66
install("npm-bcrypt");                                                                                                 // 67
install("sha");                                                                                                        // 68
install("srp");                                                                                                        // 69
install("accounts-password");                                                                                          // 70
install("lai:collection-extensions");                                                                                  // 71
install("dburles:mongo-collection-instances");                                                                         // 72
install("webapp");                                                                                                     // 73
install("livedata");                                                                                                   // 74
install("hot-code-push");                                                                                              // 75
install("launch-screen");                                                                                              // 76
install("autoupdate");                                                                                                 // 77
install("service-configuration");                                                                                      // 78
                                                                                                                       // 79
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"process.js":["process",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/process.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
try {                                                                                                                  // 1
  // The application can run `npm install process` to provide its own                                                  // 2
  // process stub; otherwise this module will provide a partial stub.                                                  // 3
  process = global.process || require("process");                                                                      // 4
} catch (noProcess) {                                                                                                  // 5
  process = {};                                                                                                        // 6
}                                                                                                                      // 7
                                                                                                                       // 8
if (Meteor.isServer) {                                                                                                 // 9
  // Make require("process") work on the server in all versions of Node.                                               // 10
  meteorInstall({                                                                                                      // 11
    node_modules: {                                                                                                    // 12
      "process.js": function (r, e, module) {                                                                          // 13
        module.exports = process;                                                                                      // 14
      }                                                                                                                // 15
    }                                                                                                                  // 16
  });                                                                                                                  // 17
} else {                                                                                                               // 18
  process.platform = "browser";                                                                                        // 19
  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20
}                                                                                                                      // 21
                                                                                                                       // 22
if (typeof process.env !== "object") {                                                                                 // 23
  process.env = {};                                                                                                    // 24
}                                                                                                                      // 25
                                                                                                                       // 26
_.extend(process.env, meteorEnv);                                                                                      // 27
                                                                                                                       // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"stubs.js":["meteor-node-stubs",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/stubs.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var haveStubs = false;                                                                                                 // 1
try {                                                                                                                  // 2
  require.resolve("meteor-node-stubs");                                                                                // 3
  haveStubs = true;                                                                                                    // 4
} catch (noStubs) {}                                                                                                   // 5
                                                                                                                       // 6
if (haveStubs) {                                                                                                       // 7
  // When meteor-node-stubs is installed in the application's root                                                     // 8
  // node_modules directory, requiring it here installs aliases for stubs                                              // 9
  // for all Node built-in modules, such as fs, util, and http.                                                        // 10
  require("meteor-node-stubs");                                                                                        // 11
}                                                                                                                      // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"reify":{"lib":{"runtime.js":["./entry.js","./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Entry = require("./entry.js").Entry;                                                                               // 1
var utils = require("./utils.js");                                                                                     // 2
                                                                                                                       // 3
exports.enable = function (Module) {                                                                                   // 4
  var Mp = Module.prototype;                                                                                           // 5
                                                                                                                       // 6
  if (typeof Mp.import === "function" &&                                                                               // 7
      typeof Mp.export === "function") {                                                                               // 8
    // If the Mp.{import,export} methods have already been                                                             // 9
    // defined, abandon reification immediately.                                                                       // 10
    return Module;                                                                                                     // 11
  }                                                                                                                    // 12
                                                                                                                       // 13
  // Platform-specific code should implement this method however                                                       // 14
  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 15
  // version of the given module identifier, like require.resolve.                                                     // 16
  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 17
    throw new Error("Module.prototype.resolve not implemented");                                                       // 18
  };                                                                                                                   // 19
                                                                                                                       // 20
  // Platform-specific code should find a way to call this method whenever                                             // 21
  // the module system is about to return module.exports from require. This                                            // 22
  // might happen more than once per module, in case of dependency cycles,                                             // 23
  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 24
  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 25
    var entry = Entry.get(this.id);                                                                                    // 26
    if (entry) {                                                                                                       // 27
      entry.runModuleSetters(this);                                                                                    // 28
    }                                                                                                                  // 29
                                                                                                                       // 30
    // Assignments to exported local variables get wrapped with calls to                                               // 31
    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 32
    // valueToPassThrough parameter to allow the value of the original                                                 // 33
    // expression to pass through. For example,                                                                        // 34
    //                                                                                                                 // 35
    //   export var a = 1;                                                                                             // 36
    //   console.log(a += 3);                                                                                          // 37
    //                                                                                                                 // 38
    // becomes                                                                                                         // 39
    //                                                                                                                 // 40
    //   module.export("a", () => a);                                                                                  // 41
    //   var a = 1;                                                                                                    // 42
    //   console.log(module.runModuleSetters(a += 3));                                                                 // 43
    //                                                                                                                 // 44
    // This ensures module.runModuleSetters runs immediately after the                                                 // 45
    // assignment, and does not interfere with the larger computation.                                                 // 46
    return valueToPassThrough;                                                                                         // 47
  };                                                                                                                   // 48
                                                                                                                       // 49
  function setESModule(module) {                                                                                       // 50
    var exports = module.exports;                                                                                      // 51
    if (exports && typeof exports === "object") {                                                                      // 52
      exports.__esModule = true;                                                                                       // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  // If key is provided, it will be used to identify the given setters so                                              // 57
  // that they can be replaced if module.import is called again with the                                               // 58
  // same key. This avoids potential memory leaks from import declarations                                             // 59
  // inside loops. The compiler generates these keys automatically (and                                                // 60
  // deterministically) when compiling nested import declarations.                                                     // 61
  Mp.import = function (id, setters, key) {                                                                            // 62
    var module = this;                                                                                                 // 63
    setESModule(module);                                                                                               // 64
                                                                                                                       // 65
    var absoluteId = module.resolve(id);                                                                               // 66
                                                                                                                       // 67
    if (setters && typeof setters === "object") {                                                                      // 68
      var entry = Entry.getOrCreate(absoluteId);                                                                       // 69
      entry.addSetters(module, setters, key);                                                                          // 70
    }                                                                                                                  // 71
                                                                                                                       // 72
    var countBefore = entry && entry.runCount;                                                                         // 73
    var exports = typeof module.require === "function"                                                                 // 74
      ? module.require(absoluteId)                                                                                     // 75
      : require(absoluteId);                                                                                           // 76
                                                                                                                       // 77
    if (entry && entry.runCount === countBefore) {                                                                     // 78
      // If require(absoluteId) didn't run any setters for this entry,                                                 // 79
      // perhaps because it's not the first time this module has been                                                  // 80
      // required, run the setters now using an object that passes as the                                              // 81
      // real module object.                                                                                           // 82
      entry.runModuleSetters({                                                                                         // 83
        id: absoluteId,                                                                                                // 84
        exports: exports,                                                                                              // 85
        getExportByName: Mp.getExportByName                                                                            // 86
      });                                                                                                              // 87
    }                                                                                                                  // 88
  };                                                                                                                   // 89
                                                                                                                       // 90
  // Register getter functions for local variables in the scope of an                                                  // 91
  // export statement. The keys of the getters object are exported names,                                              // 92
  // and the values are functions that return local values.                                                            // 93
  Mp.export = function (getters) {                                                                                     // 94
    var module = this;                                                                                                 // 95
    setESModule(module);                                                                                               // 96
                                                                                                                       // 97
    if (utils.isPlainObject(getters)) {                                                                                // 98
      Entry.getOrCreate(module.id).addGetters(getters);                                                                // 99
    }                                                                                                                  // 100
                                                                                                                       // 101
    if (module.loaded) {                                                                                               // 102
      // If the module has already been evaluated, then we need to trigger                                             // 103
      // another round of entry.runModuleSetters calls, which begins by                                                // 104
      // calling entry.runModuleGetters(module).                                                                       // 105
      module.runModuleSetters();                                                                                       // 106
    }                                                                                                                  // 107
  };                                                                                                                   // 108
                                                                                                                       // 109
  // This method can be overridden by client code to implement custom export                                           // 110
  // naming logic. The current implementation works well with Babel's                                                  // 111
  // __esModule convention.                                                                                            // 112
  Mp.getExportByName = function (name) {                                                                               // 113
    var exports = this.exports;                                                                                        // 114
                                                                                                                       // 115
    if (name === "*") {                                                                                                // 116
      return exports;                                                                                                  // 117
    }                                                                                                                  // 118
                                                                                                                       // 119
    if (name === "default" &&                                                                                          // 120
        ! (exports &&                                                                                                  // 121
           typeof exports === "object" &&                                                                              // 122
           exports.__esModule &&                                                                                       // 123
           "default" in exports)) {                                                                                    // 124
      return exports;                                                                                                  // 125
    }                                                                                                                  // 126
                                                                                                                       // 127
    return exports && exports[name];                                                                                   // 128
  };                                                                                                                   // 129
                                                                                                                       // 130
  return Module;                                                                                                       // 131
};                                                                                                                     // 132
                                                                                                                       // 133
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"entry.js":["./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1
var entryMap = Object.create(null);                                                                                    // 2
var utils = require("./utils.js");                                                                                     // 3
                                                                                                                       // 4
function Entry(id) {                                                                                                   // 5
  // Same as module.id for this module.                                                                                // 6
  this.id = id;                                                                                                        // 7
  // The number of times this.runModuleSetters has been called.                                                        // 8
  this.runCount = 0;                                                                                                   // 9
  // Setters for assigning to local variables in parent modules.                                                       // 10
  this.setters = Object.create(null);                                                                                  // 11
  // Getters for local variables exported from this module.                                                            // 12
  this.getters = Object.create(null);                                                                                  // 13
}                                                                                                                      // 14
                                                                                                                       // 15
var Ep = Entry.prototype;                                                                                              // 16
                                                                                                                       // 17
Entry.get = function (id) {                                                                                            // 18
  return entryMap[id] || null;                                                                                         // 19
};                                                                                                                     // 20
                                                                                                                       // 21
Entry.getOrCreate = function (id) {                                                                                    // 22
  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 23
};                                                                                                                     // 24
                                                                                                                       // 25
var keySalt = 0;                                                                                                       // 26
function makeUniqueKey() {                                                                                             // 27
  return Math.random()                                                                                                 // 28
    .toString(36)                                                                                                      // 29
    // Add an incrementing salt to help track key ordering and also                                                    // 30
    // absolutely guarantee we never return the same key twice.                                                        // 31
    .replace("0.", ++keySalt + ":");                                                                                   // 32
}                                                                                                                      // 33
                                                                                                                       // 34
Ep.addSetters = function (parent, setters, key) {                                                                      // 35
  var entry = this;                                                                                                    // 36
                                                                                                                       // 37
  if (typeof key === "undefined") {                                                                                    // 38
    // If no key was provided, make a new unique key that won't collide                                                // 39
    // with any other keys.                                                                                            // 40
    key = makeUniqueKey();                                                                                             // 41
  } else {                                                                                                             // 42
    // If a key was provided, make sure it is distinct from keys provided                                              // 43
    // by other parent modules.                                                                                        // 44
    key = parent.id + ":" + key;                                                                                       // 45
  }                                                                                                                    // 46
                                                                                                                       // 47
  Object.keys(setters).forEach(function (name) {                                                                       // 48
    var setter = setters[name];                                                                                        // 49
    if (typeof setter === "function" &&                                                                                // 50
        // Ignore any requests for the exports.__esModule property."                                                   // 51
        name !== "__esModule") {                                                                                       // 52
      setter.parent = parent;                                                                                          // 53
      (entry.setters[name] =                                                                                           // 54
       entry.setters[name] || Object.create(null)                                                                      // 55
      )[key] = setter;                                                                                                 // 56
    }                                                                                                                  // 57
  });                                                                                                                  // 58
};                                                                                                                     // 59
                                                                                                                       // 60
Ep.addGetters = function (getters) {                                                                                   // 61
  var entry = this;                                                                                                    // 62
  Object.keys(getters).forEach(function (name) {                                                                       // 63
    var getter = getters[name];                                                                                        // 64
    if (typeof getter === "function" &&                                                                                // 65
        // Ignore any requests for the exports.__esModule property."                                                   // 66
        name !== "__esModule") {                                                                                       // 67
      // Should this throw if hasOwn.call(this.getters, name)?                                                         // 68
      entry.getters[name] = getter;                                                                                    // 69
    }                                                                                                                  // 70
  });                                                                                                                  // 71
};                                                                                                                     // 72
                                                                                                                       // 73
function runModuleSetters(module) {                                                                                    // 74
  var entry = entryMap[module.id];                                                                                     // 75
  if (entry) {                                                                                                         // 76
    entry.runModuleSetters(module);                                                                                    // 77
  }                                                                                                                    // 78
}                                                                                                                      // 79
                                                                                                                       // 80
function runModuleGetters(module) {                                                                                    // 81
  var entry = entryMap[module.id];                                                                                     // 82
  return entry ? entry.runModuleGetters(module) : 0;                                                                   // 83
}                                                                                                                      // 84
                                                                                                                       // 85
Ep.runModuleGetters = function (module) {                                                                              // 86
  var entry = this;                                                                                                    // 87
  var changeCount = 0;                                                                                                 // 88
                                                                                                                       // 89
  Object.keys(entry.getters).forEach(function (name) {                                                                 // 90
    if (entry.runGetter(module, name)) {                                                                               // 91
      ++changeCount;                                                                                                   // 92
    }                                                                                                                  // 93
  });                                                                                                                  // 94
                                                                                                                       // 95
  return changeCount;                                                                                                  // 96
};                                                                                                                     // 97
                                                                                                                       // 98
// Returns true iff the getter updated module.exports with a new value.                                                // 99
Ep.runGetter = function (module, name) {                                                                               // 100
  if (! hasOwn.call(this.getters, name)) {                                                                             // 101
    return false;                                                                                                      // 102
  }                                                                                                                    // 103
                                                                                                                       // 104
  var getter = this.getters[name];                                                                                     // 105
  try {                                                                                                                // 106
    var value = getter.call(module);                                                                                   // 107
  } catch (e) {}                                                                                                       // 108
  var exports = module.exports;                                                                                        // 109
                                                                                                                       // 110
  if (! hasOwn.call(exports, name) ||                                                                                  // 111
      exports[name] !== value) {                                                                                       // 112
    // We update module.exports[name] with the current value so that                                                   // 113
    // CommonJS require calls remain consistent with module.import.                                                    // 114
    exports[name] = value;                                                                                             // 115
    return true;                                                                                                       // 116
  }                                                                                                                    // 117
                                                                                                                       // 118
  return false;                                                                                                        // 119
};                                                                                                                     // 120
                                                                                                                       // 121
// Called whenever module.exports might have changed, to trigger any                                                   // 122
// setters associated with the newly exported values.                                                                  // 123
Ep.runModuleSetters = function (module) {                                                                              // 124
  var entry = this;                                                                                                    // 125
  var names = Object.keys(entry.setters);                                                                              // 126
                                                                                                                       // 127
  // Make sure module.exports is up to date before we call                                                             // 128
  // module.getExportByName(name).                                                                                     // 129
  entry.runModuleGetters(module);                                                                                      // 130
                                                                                                                       // 131
  // Invoke the given callback once for every (setter, value, name) triple                                             // 132
  // that needs to be called. Note that forEachSetter does not call any                                                // 133
  // setters itself, only the given callback.                                                                          // 134
  function forEachSetter(callback, context) {                                                                          // 135
    names.forEach(function (name) {                                                                                    // 136
      var setters = entry.setters[name];                                                                               // 137
      Object.keys(setters).forEach(function (key) {                                                                    // 138
        var value = module.getExportByName(name);                                                                      // 139
        if (name === "*") {                                                                                            // 140
          Object.keys(value).forEach(function (name) {                                                                 // 141
            call(setters[key], value[name], name);                                                                     // 142
          });                                                                                                          // 143
        } else {                                                                                                       // 144
          call(setters[key], value, name);                                                                             // 145
        }                                                                                                              // 146
      });                                                                                                              // 147
    });                                                                                                                // 148
                                                                                                                       // 149
    function call(setter, value, name) {                                                                               // 150
      if (name === "__esModule") {                                                                                     // 151
        // Ignore setters asking for module.exports.__esModule.                                                        // 152
        return;                                                                                                        // 153
      }                                                                                                                // 154
                                                                                                                       // 155
      setter.last = setter.last || Object.create(null);                                                                // 156
                                                                                                                       // 157
      if (! hasOwn.call(setter.last, name) ||                                                                          // 158
          setter.last[name] !== value) {                                                                               // 159
        // Only invoke the callback if we have not called this setter                                                  // 160
        // (with a value of this name) before, or the current value is                                                 // 161
        // different from the last value we passed to this setter.                                                     // 162
        return callback.apply(context, arguments);                                                                     // 163
      }                                                                                                                // 164
    }                                                                                                                  // 165
  }                                                                                                                    // 166
                                                                                                                       // 167
  // Every three elements of this list form a (setter, value, name) triple                                             // 168
  // that needs to be invoked.                                                                                         // 169
  var settersToCall = [];                                                                                              // 170
                                                                                                                       // 171
  // Lazily-initialized objects mapping parent module identifiers to                                                   // 172
  // relevant parent module objects and snapshots of their exports.                                                    // 173
  var relevantParents;                                                                                                 // 174
  var parentSnapshots;                                                                                                 // 175
                                                                                                                       // 176
  // Take snapshots of setter.parent.exports for any setters that we are                                               // 177
  // planning to call, so that we can later determine if calling the                                                   // 178
  // setters modified any of those exports objects.                                                                    // 179
  forEachSetter(function (setter, value, name) {                                                                       // 180
    var parent = setter.parent;                                                                                        // 181
    parentSnapshots = parentSnapshots || Object.create(null);                                                          // 182
    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                   // 183
      relevantParents = relevantParents || Object.create(null);                                                        // 184
      relevantParents[parent.id] = parent;                                                                             // 185
      if (utils.isPlainObject(parent.exports)) {                                                                       // 186
        // If parent.exports is an object, make a shallow clone of it so                                               // 187
        // that we can see if it changes as a result of calling setters.                                               // 188
        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                                 // 189
      } else {                                                                                                         // 190
        // If parent.exports is not an object, the "snapshot" is just the                                              // 191
        // value of parent.exports.                                                                                    // 192
        parentSnapshots[parent.id] = parent.exports;                                                                   // 193
      }                                                                                                                // 194
    }                                                                                                                  // 195
                                                                                                                       // 196
    // Push three elements at a time to avoid creating wrapper arrays for                                              // 197
    // each (setter, value, name) triple. Note the i += 3 below.                                                       // 198
    settersToCall.push(setter, value, name);                                                                           // 199
  });                                                                                                                  // 200
                                                                                                                       // 201
  // Now call all the setters that we decided we need to call.                                                         // 202
  for (var i = 0; i < settersToCall.length; i += 3) {                                                                  // 203
    var setter = settersToCall[i];                                                                                     // 204
    var value = settersToCall[i + 1];                                                                                  // 205
    var name = settersToCall[i + 2];                                                                                   // 206
    setter.call(module, setter.last[name] = value, name);                                                              // 207
  }                                                                                                                    // 208
                                                                                                                       // 209
  ++entry.runCount;                                                                                                    // 210
                                                                                                                       // 211
  if (! relevantParents) {                                                                                             // 212
    // If we never called takeSnapshot, then we can avoid checking                                                     // 213
    // relevantParents and parentSnapshots below.                                                                      // 214
    return;                                                                                                            // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  // If any of the setters updated the module.exports of a parent module,                                              // 218
  // or updated local variables that are exported by that parent module,                                               // 219
  // then we must re-run any setters registered by that parent module.                                                 // 220
  Object.keys(relevantParents).forEach(function (id) {                                                                 // 221
    var parent = relevantParents[id];                                                                                  // 222
                                                                                                                       // 223
    if (runModuleGetters(parent) > 0) {                                                                                // 224
      return runModuleSetters(parent);                                                                                 // 225
    }                                                                                                                  // 226
                                                                                                                       // 227
    var exports = parent.exports;                                                                                      // 228
    var snapshot = parentSnapshots[parent.id];                                                                         // 229
    if (utils.shallowObjEqual(exports, snapshot)) {                                                                    // 230
      // If parent.exports have not changed since we took the snapshot,                                                // 231
      // then we do not need to run the parent's setters.                                                              // 232
      return;                                                                                                          // 233
    }                                                                                                                  // 234
                                                                                                                       // 235
    runModuleSetters(parent);                                                                                          // 236
  });                                                                                                                  // 237
};                                                                                                                     // 238
                                                                                                                       // 239
exports.Entry = Entry;                                                                                                 // 240
                                                                                                                       // 241
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"utils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1
var objToStr = Object.prototype.toString;                                                                              // 2
var objStr = objToStr.call({});                                                                                        // 3
                                                                                                                       // 4
function isPlainObject(value) {                                                                                        // 5
  return objToStr.call(value) === objStr;                                                                              // 6
}                                                                                                                      // 7
exports.isPlainObject = isPlainObject;                                                                                 // 8
                                                                                                                       // 9
exports.assign = Object.assign || function (obj) {                                                                     // 10
  var argc = arguments.length;                                                                                         // 11
  for (var i = 1; i < argc; ++i) {                                                                                     // 12
    var arg = arguments[i];                                                                                            // 13
    if (arg && typeof arg === "object") {                                                                              // 14
      var keys = Object.keys(arg);                                                                                     // 15
      for (var k = 0; k < keys.length; ++k) {                                                                          // 16
        var key = keys[k];                                                                                             // 17
        obj[key] = arg[key];                                                                                           // 18
      }                                                                                                                // 19
    }                                                                                                                  // 20
  }                                                                                                                    // 21
  return obj;                                                                                                          // 22
};                                                                                                                     // 23
                                                                                                                       // 24
exports.shallowObjEqual = function(a, b) {                                                                             // 25
  if (a === b) {                                                                                                       // 26
    return true;                                                                                                       // 27
  }                                                                                                                    // 28
                                                                                                                       // 29
  if (! isPlainObject(a) ||                                                                                            // 30
      ! isPlainObject(b)) {                                                                                            // 31
    return false;                                                                                                      // 32
  }                                                                                                                    // 33
                                                                                                                       // 34
  var aKeys = Object.keys(a);                                                                                          // 35
  var bKeys = Object.keys(b);                                                                                          // 36
                                                                                                                       // 37
  if (aKeys.length !== bKeys.length) {                                                                                 // 38
    return false;                                                                                                      // 39
  }                                                                                                                    // 40
                                                                                                                       // 41
  return aKeys.every(function (key) {                                                                                  // 42
    return hasOwn.call(b, key) &&                                                                                      // 43
      a[key] === b[key];                                                                                               // 44
  });                                                                                                                  // 45
};                                                                                                                     // 46
                                                                                                                       // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}},"meteor-node-stubs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/package.json                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "meteor-node-stubs";                                                                                    // 1
exports.version = "0.2.5";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["./map.json",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var map = require("./map.json");                                                                                       // 1
var meteorAliases = {};                                                                                                // 2
                                                                                                                       // 3
Object.keys(map).forEach(function (id) {                                                                               // 4
  if (typeof map[id] === "string") {                                                                                   // 5
    var aliasParts = module.id.split("/");                                                                             // 6
    aliasParts.pop();                                                                                                  // 7
    aliasParts.push("node_modules", map[id]);                                                                          // 8
    exports[id] = meteorAliases[id + ".js"] =                                                                          // 9
      aliasParts.join("/");                                                                                            // 10
  } else {                                                                                                             // 11
    exports[id] = map[id];                                                                                             // 12
    meteorAliases[id + ".js"] = function(){};                                                                          // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
if (typeof meteorInstall === "function") {                                                                             // 17
  meteorInstall({                                                                                                      // 18
    // Install the aliases into a node_modules directory one level up from                                             // 19
    // the root directory, so that they do not clutter the namespace                                                   // 20
    // available to apps and packages.                                                                                 // 21
    "..": {                                                                                                            // 22
      node_modules: meteorAliases                                                                                      // 23
    }                                                                                                                  // 24
  });                                                                                                                  // 25
}                                                                                                                      // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"map.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/map.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {                                                                                                     // 1
  "assert": "assert/",                                                                                                 // 2
  "buffer": "buffer/",                                                                                                 // 3
  "child_process": null,                                                                                               // 4
  "cluster": null,                                                                                                     // 5
  "console": "console-browserify",                                                                                     // 6
  "constants": "constants-browserify",                                                                                 // 7
  "crypto": "crypto-browserify",                                                                                       // 8
  "dgram": null,                                                                                                       // 9
  "dns": null,                                                                                                         // 10
  "domain": "domain-browser",                                                                                          // 11
  "events": "events/",                                                                                                 // 12
  "fs": null,                                                                                                          // 13
  "http": "http-browserify",                                                                                           // 14
  "https": "https-browserify",                                                                                         // 15
  "module": null,                                                                                                      // 16
  "net": null,                                                                                                         // 17
  "os": "os-browserify/browser.js",                                                                                    // 18
  "path": "path-browserify",                                                                                           // 19
  "process": "process/browser.js",                                                                                     // 20
  "punycode": "punycode/",                                                                                             // 21
  "querystring": "querystring-es3/",                                                                                   // 22
  "readline": null,                                                                                                    // 23
  "repl": null,                                                                                                        // 24
  "stream": "stream-browserify",                                                                                       // 25
  "_stream_duplex": "readable-stream/duplex.js",                                                                       // 26
  "_stream_passthrough": "readable-stream/passthrough.js",                                                             // 27
  "_stream_readable": "readable-stream/readable.js",                                                                   // 28
  "_stream_transform": "readable-stream/transform.js",                                                                 // 29
  "_stream_writable": "readable-stream/writable.js",                                                                   // 30
  "string_decoder": "string_decoder/",                                                                                 // 31
  "sys": "util/util.js",                                                                                               // 32
  "timers": "timers-browserify",                                                                                       // 33
  "tls": null,                                                                                                         // 34
  "tty": "tty-browserify",                                                                                             // 35
  "url": "url/",                                                                                                       // 36
  "util": "util/util.js",                                                                                              // 37
  "vm": "vm-browserify",                                                                                               // 38
  "zlib": "browserify-zlib"                                                                                            // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deps":{"buffer.js":["buffer/",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/buffer.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("buffer/");                                                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"process.js":["process/browser.js",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/process.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("process/browser.js");                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"domain.js":["domain-browser",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/domain.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("domain-browser");                                                                                             // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"node_modules":{"buffer":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "buffer";                                                                                               // 1
exports.version = "4.9.1";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["base64-js","ieee754","isarray",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * The buffer module from node.js, for the browser.                                                                    // 2
 *                                                                                                                     // 3
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                               // 4
 * @license  MIT                                                                                                       // 5
 */                                                                                                                    // 6
/* eslint-disable no-proto */                                                                                          // 7
                                                                                                                       // 8
'use strict'                                                                                                           // 9
                                                                                                                       // 10
var base64 = require('base64-js')                                                                                      // 11
var ieee754 = require('ieee754')                                                                                       // 12
var isArray = require('isarray')                                                                                       // 13
                                                                                                                       // 14
exports.Buffer = Buffer                                                                                                // 15
exports.SlowBuffer = SlowBuffer                                                                                        // 16
exports.INSPECT_MAX_BYTES = 50                                                                                         // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                                    // 20
 *   === true    Use Uint8Array implementation (fastest)                                                               // 21
 *   === false   Use Object implementation (most compatible, even IE6)                                                 // 22
 *                                                                                                                     // 23
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                                  // 24
 * Opera 11.6+, iOS 4.2+.                                                                                              // 25
 *                                                                                                                     // 26
 * Due to various browser bugs, sometimes the Object implementation will be used even                                  // 27
 * when the browser supports typed arrays.                                                                             // 28
 *                                                                                                                     // 29
 * Note:                                                                                                               // 30
 *                                                                                                                     // 31
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                                 // 32
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                                       // 33
 *                                                                                                                     // 34
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                            // 35
 *                                                                                                                     // 36
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                              // 37
 *     incorrect length in some situations.                                                                            // 38
                                                                                                                       // 39
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                              // 40
 * get the Object implementation, which is slower but behaves correctly.                                               // 41
 */                                                                                                                    // 42
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                                  // 43
  ? global.TYPED_ARRAY_SUPPORT                                                                                         // 44
  : typedArraySupport()                                                                                                // 45
                                                                                                                       // 46
/*                                                                                                                     // 47
 * Export kMaxLength after typed array support is determined.                                                          // 48
 */                                                                                                                    // 49
exports.kMaxLength = kMaxLength()                                                                                      // 50
                                                                                                                       // 51
function typedArraySupport () {                                                                                        // 52
  try {                                                                                                                // 53
    var arr = new Uint8Array(1)                                                                                        // 54
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}                                  // 55
    return arr.foo() === 42 && // typed array instances can be augmented                                               // 56
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                           // 57
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                              // 58
  } catch (e) {                                                                                                        // 59
    return false                                                                                                       // 60
  }                                                                                                                    // 61
}                                                                                                                      // 62
                                                                                                                       // 63
function kMaxLength () {                                                                                               // 64
  return Buffer.TYPED_ARRAY_SUPPORT                                                                                    // 65
    ? 0x7fffffff                                                                                                       // 66
    : 0x3fffffff                                                                                                       // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function createBuffer (that, length) {                                                                                 // 70
  if (kMaxLength() < length) {                                                                                         // 71
    throw new RangeError('Invalid typed array length')                                                                 // 72
  }                                                                                                                    // 73
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 74
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 75
    that = new Uint8Array(length)                                                                                      // 76
    that.__proto__ = Buffer.prototype                                                                                  // 77
  } else {                                                                                                             // 78
    // Fallback: Return an object instance of the Buffer class                                                         // 79
    if (that === null) {                                                                                               // 80
      that = new Buffer(length)                                                                                        // 81
    }                                                                                                                  // 82
    that.length = length                                                                                               // 83
  }                                                                                                                    // 84
                                                                                                                       // 85
  return that                                                                                                          // 86
}                                                                                                                      // 87
                                                                                                                       // 88
/**                                                                                                                    // 89
 * The Buffer constructor returns instances of `Uint8Array` that have their                                            // 90
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                                     // 91
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                                     // 92
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it                                       // 93
 * returns a single octet.                                                                                             // 94
 *                                                                                                                     // 95
 * The `Uint8Array` prototype remains unmodified.                                                                      // 96
 */                                                                                                                    // 97
                                                                                                                       // 98
function Buffer (arg, encodingOrOffset, length) {                                                                      // 99
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {                                                      // 100
    return new Buffer(arg, encodingOrOffset, length)                                                                   // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  // Common case.                                                                                                      // 104
  if (typeof arg === 'number') {                                                                                       // 105
    if (typeof encodingOrOffset === 'string') {                                                                        // 106
      throw new Error(                                                                                                 // 107
        'If encoding is specified then the first argument must be a string'                                            // 108
      )                                                                                                                // 109
    }                                                                                                                  // 110
    return allocUnsafe(this, arg)                                                                                      // 111
  }                                                                                                                    // 112
  return from(this, arg, encodingOrOffset, length)                                                                     // 113
}                                                                                                                      // 114
                                                                                                                       // 115
Buffer.poolSize = 8192 // not used by this implementation                                                              // 116
                                                                                                                       // 117
// TODO: Legacy, not needed anymore. Remove in next major version.                                                     // 118
Buffer._augment = function (arr) {                                                                                     // 119
  arr.__proto__ = Buffer.prototype                                                                                     // 120
  return arr                                                                                                           // 121
}                                                                                                                      // 122
                                                                                                                       // 123
function from (that, value, encodingOrOffset, length) {                                                                // 124
  if (typeof value === 'number') {                                                                                     // 125
    throw new TypeError('"value" argument must not be a number')                                                       // 126
  }                                                                                                                    // 127
                                                                                                                       // 128
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {                                            // 129
    return fromArrayBuffer(that, value, encodingOrOffset, length)                                                      // 130
  }                                                                                                                    // 131
                                                                                                                       // 132
  if (typeof value === 'string') {                                                                                     // 133
    return fromString(that, value, encodingOrOffset)                                                                   // 134
  }                                                                                                                    // 135
                                                                                                                       // 136
  return fromObject(that, value)                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/**                                                                                                                    // 140
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError                                             // 141
 * if value is a number.                                                                                               // 142
 * Buffer.from(str[, encoding])                                                                                        // 143
 * Buffer.from(array)                                                                                                  // 144
 * Buffer.from(buffer)                                                                                                 // 145
 * Buffer.from(arrayBuffer[, byteOffset[, length]])                                                                    // 146
 **/                                                                                                                   // 147
Buffer.from = function (value, encodingOrOffset, length) {                                                             // 148
  return from(null, value, encodingOrOffset, length)                                                                   // 149
}                                                                                                                      // 150
                                                                                                                       // 151
if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                      // 152
  Buffer.prototype.__proto__ = Uint8Array.prototype                                                                    // 153
  Buffer.__proto__ = Uint8Array                                                                                        // 154
  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                               // 155
      Buffer[Symbol.species] === Buffer) {                                                                             // 156
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                         // 157
    Object.defineProperty(Buffer, Symbol.species, {                                                                    // 158
      value: null,                                                                                                     // 159
      configurable: true                                                                                               // 160
    })                                                                                                                 // 161
  }                                                                                                                    // 162
}                                                                                                                      // 163
                                                                                                                       // 164
function assertSize (size) {                                                                                           // 165
  if (typeof size !== 'number') {                                                                                      // 166
    throw new TypeError('"size" argument must be a number')                                                            // 167
  } else if (size < 0) {                                                                                               // 168
    throw new RangeError('"size" argument must not be negative')                                                       // 169
  }                                                                                                                    // 170
}                                                                                                                      // 171
                                                                                                                       // 172
function alloc (that, size, fill, encoding) {                                                                          // 173
  assertSize(size)                                                                                                     // 174
  if (size <= 0) {                                                                                                     // 175
    return createBuffer(that, size)                                                                                    // 176
  }                                                                                                                    // 177
  if (fill !== undefined) {                                                                                            // 178
    // Only pay attention to encoding if it's a string. This                                                           // 179
    // prevents accidentally sending in a number that would                                                            // 180
    // be interpretted as a start offset.                                                                              // 181
    return typeof encoding === 'string'                                                                                // 182
      ? createBuffer(that, size).fill(fill, encoding)                                                                  // 183
      : createBuffer(that, size).fill(fill)                                                                            // 184
  }                                                                                                                    // 185
  return createBuffer(that, size)                                                                                      // 186
}                                                                                                                      // 187
                                                                                                                       // 188
/**                                                                                                                    // 189
 * Creates a new filled Buffer instance.                                                                               // 190
 * alloc(size[, fill[, encoding]])                                                                                     // 191
 **/                                                                                                                   // 192
Buffer.alloc = function (size, fill, encoding) {                                                                       // 193
  return alloc(null, size, fill, encoding)                                                                             // 194
}                                                                                                                      // 195
                                                                                                                       // 196
function allocUnsafe (that, size) {                                                                                    // 197
  assertSize(size)                                                                                                     // 198
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)                                                          // 199
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                                   // 200
    for (var i = 0; i < size; ++i) {                                                                                   // 201
      that[i] = 0                                                                                                      // 202
    }                                                                                                                  // 203
  }                                                                                                                    // 204
  return that                                                                                                          // 205
}                                                                                                                      // 206
                                                                                                                       // 207
/**                                                                                                                    // 208
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.                                    // 209
 * */                                                                                                                  // 210
Buffer.allocUnsafe = function (size) {                                                                                 // 211
  return allocUnsafe(null, size)                                                                                       // 212
}                                                                                                                      // 213
/**                                                                                                                    // 214
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.                                // 215
 */                                                                                                                    // 216
Buffer.allocUnsafeSlow = function (size) {                                                                             // 217
  return allocUnsafe(null, size)                                                                                       // 218
}                                                                                                                      // 219
                                                                                                                       // 220
function fromString (that, string, encoding) {                                                                         // 221
  if (typeof encoding !== 'string' || encoding === '') {                                                               // 222
    encoding = 'utf8'                                                                                                  // 223
  }                                                                                                                    // 224
                                                                                                                       // 225
  if (!Buffer.isEncoding(encoding)) {                                                                                  // 226
    throw new TypeError('"encoding" must be a valid string encoding')                                                  // 227
  }                                                                                                                    // 228
                                                                                                                       // 229
  var length = byteLength(string, encoding) | 0                                                                        // 230
  that = createBuffer(that, length)                                                                                    // 231
                                                                                                                       // 232
  var actual = that.write(string, encoding)                                                                            // 233
                                                                                                                       // 234
  if (actual !== length) {                                                                                             // 235
    // Writing a hex string, for example, that contains invalid characters will                                        // 236
    // cause everything after the first invalid character to be ignored. (e.g.                                         // 237
    // 'abxxcd' will be treated as 'ab')                                                                               // 238
    that = that.slice(0, actual)                                                                                       // 239
  }                                                                                                                    // 240
                                                                                                                       // 241
  return that                                                                                                          // 242
}                                                                                                                      // 243
                                                                                                                       // 244
function fromArrayLike (that, array) {                                                                                 // 245
  var length = array.length < 0 ? 0 : checked(array.length) | 0                                                        // 246
  that = createBuffer(that, length)                                                                                    // 247
  for (var i = 0; i < length; i += 1) {                                                                                // 248
    that[i] = array[i] & 255                                                                                           // 249
  }                                                                                                                    // 250
  return that                                                                                                          // 251
}                                                                                                                      // 252
                                                                                                                       // 253
function fromArrayBuffer (that, array, byteOffset, length) {                                                           // 254
  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                                // 255
                                                                                                                       // 256
  if (byteOffset < 0 || array.byteLength < byteOffset) {                                                               // 257
    throw new RangeError('\'offset\' is out of bounds')                                                                // 258
  }                                                                                                                    // 259
                                                                                                                       // 260
  if (array.byteLength < byteOffset + (length || 0)) {                                                                 // 261
    throw new RangeError('\'length\' is out of bounds')                                                                // 262
  }                                                                                                                    // 263
                                                                                                                       // 264
  if (byteOffset === undefined && length === undefined) {                                                              // 265
    array = new Uint8Array(array)                                                                                      // 266
  } else if (length === undefined) {                                                                                   // 267
    array = new Uint8Array(array, byteOffset)                                                                          // 268
  } else {                                                                                                             // 269
    array = new Uint8Array(array, byteOffset, length)                                                                  // 270
  }                                                                                                                    // 271
                                                                                                                       // 272
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 273
    // Return an augmented `Uint8Array` instance, for best performance                                                 // 274
    that = array                                                                                                       // 275
    that.__proto__ = Buffer.prototype                                                                                  // 276
  } else {                                                                                                             // 277
    // Fallback: Return an object instance of the Buffer class                                                         // 278
    that = fromArrayLike(that, array)                                                                                  // 279
  }                                                                                                                    // 280
  return that                                                                                                          // 281
}                                                                                                                      // 282
                                                                                                                       // 283
function fromObject (that, obj) {                                                                                      // 284
  if (Buffer.isBuffer(obj)) {                                                                                          // 285
    var len = checked(obj.length) | 0                                                                                  // 286
    that = createBuffer(that, len)                                                                                     // 287
                                                                                                                       // 288
    if (that.length === 0) {                                                                                           // 289
      return that                                                                                                      // 290
    }                                                                                                                  // 291
                                                                                                                       // 292
    obj.copy(that, 0, 0, len)                                                                                          // 293
    return that                                                                                                        // 294
  }                                                                                                                    // 295
                                                                                                                       // 296
  if (obj) {                                                                                                           // 297
    if ((typeof ArrayBuffer !== 'undefined' &&                                                                         // 298
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {                                                       // 299
      if (typeof obj.length !== 'number' || isnan(obj.length)) {                                                       // 300
        return createBuffer(that, 0)                                                                                   // 301
      }                                                                                                                // 302
      return fromArrayLike(that, obj)                                                                                  // 303
    }                                                                                                                  // 304
                                                                                                                       // 305
    if (obj.type === 'Buffer' && isArray(obj.data)) {                                                                  // 306
      return fromArrayLike(that, obj.data)                                                                             // 307
    }                                                                                                                  // 308
  }                                                                                                                    // 309
                                                                                                                       // 310
  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')            // 311
}                                                                                                                      // 312
                                                                                                                       // 313
function checked (length) {                                                                                            // 314
  // Note: cannot use `length < kMaxLength()` here because that fails when                                             // 315
  // length is NaN (which is otherwise coerced to zero.)                                                               // 316
  if (length >= kMaxLength()) {                                                                                        // 317
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                           // 318
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                            // 319
  }                                                                                                                    // 320
  return length | 0                                                                                                    // 321
}                                                                                                                      // 322
                                                                                                                       // 323
function SlowBuffer (length) {                                                                                         // 324
  if (+length != length) { // eslint-disable-line eqeqeq                                                               // 325
    length = 0                                                                                                         // 326
  }                                                                                                                    // 327
  return Buffer.alloc(+length)                                                                                         // 328
}                                                                                                                      // 329
                                                                                                                       // 330
Buffer.isBuffer = function isBuffer (b) {                                                                              // 331
  return !!(b != null && b._isBuffer)                                                                                  // 332
}                                                                                                                      // 333
                                                                                                                       // 334
Buffer.compare = function compare (a, b) {                                                                             // 335
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                                    // 336
    throw new TypeError('Arguments must be Buffers')                                                                   // 337
  }                                                                                                                    // 338
                                                                                                                       // 339
  if (a === b) return 0                                                                                                // 340
                                                                                                                       // 341
  var x = a.length                                                                                                     // 342
  var y = b.length                                                                                                     // 343
                                                                                                                       // 344
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                                // 345
    if (a[i] !== b[i]) {                                                                                               // 346
      x = a[i]                                                                                                         // 347
      y = b[i]                                                                                                         // 348
      break                                                                                                            // 349
    }                                                                                                                  // 350
  }                                                                                                                    // 351
                                                                                                                       // 352
  if (x < y) return -1                                                                                                 // 353
  if (y < x) return 1                                                                                                  // 354
  return 0                                                                                                             // 355
}                                                                                                                      // 356
                                                                                                                       // 357
Buffer.isEncoding = function isEncoding (encoding) {                                                                   // 358
  switch (String(encoding).toLowerCase()) {                                                                            // 359
    case 'hex':                                                                                                        // 360
    case 'utf8':                                                                                                       // 361
    case 'utf-8':                                                                                                      // 362
    case 'ascii':                                                                                                      // 363
    case 'latin1':                                                                                                     // 364
    case 'binary':                                                                                                     // 365
    case 'base64':                                                                                                     // 366
    case 'ucs2':                                                                                                       // 367
    case 'ucs-2':                                                                                                      // 368
    case 'utf16le':                                                                                                    // 369
    case 'utf-16le':                                                                                                   // 370
      return true                                                                                                      // 371
    default:                                                                                                           // 372
      return false                                                                                                     // 373
  }                                                                                                                    // 374
}                                                                                                                      // 375
                                                                                                                       // 376
Buffer.concat = function concat (list, length) {                                                                       // 377
  if (!isArray(list)) {                                                                                                // 378
    throw new TypeError('"list" argument must be an Array of Buffers')                                                 // 379
  }                                                                                                                    // 380
                                                                                                                       // 381
  if (list.length === 0) {                                                                                             // 382
    return Buffer.alloc(0)                                                                                             // 383
  }                                                                                                                    // 384
                                                                                                                       // 385
  var i                                                                                                                // 386
  if (length === undefined) {                                                                                          // 387
    length = 0                                                                                                         // 388
    for (i = 0; i < list.length; ++i) {                                                                                // 389
      length += list[i].length                                                                                         // 390
    }                                                                                                                  // 391
  }                                                                                                                    // 392
                                                                                                                       // 393
  var buffer = Buffer.allocUnsafe(length)                                                                              // 394
  var pos = 0                                                                                                          // 395
  for (i = 0; i < list.length; ++i) {                                                                                  // 396
    var buf = list[i]                                                                                                  // 397
    if (!Buffer.isBuffer(buf)) {                                                                                       // 398
      throw new TypeError('"list" argument must be an Array of Buffers')                                               // 399
    }                                                                                                                  // 400
    buf.copy(buffer, pos)                                                                                              // 401
    pos += buf.length                                                                                                  // 402
  }                                                                                                                    // 403
  return buffer                                                                                                        // 404
}                                                                                                                      // 405
                                                                                                                       // 406
function byteLength (string, encoding) {                                                                               // 407
  if (Buffer.isBuffer(string)) {                                                                                       // 408
    return string.length                                                                                               // 409
  }                                                                                                                    // 410
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&                                // 411
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {                                                 // 412
    return string.byteLength                                                                                           // 413
  }                                                                                                                    // 414
  if (typeof string !== 'string') {                                                                                    // 415
    string = '' + string                                                                                               // 416
  }                                                                                                                    // 417
                                                                                                                       // 418
  var len = string.length                                                                                              // 419
  if (len === 0) return 0                                                                                              // 420
                                                                                                                       // 421
  // Use a for loop to avoid recursion                                                                                 // 422
  var loweredCase = false                                                                                              // 423
  for (;;) {                                                                                                           // 424
    switch (encoding) {                                                                                                // 425
      case 'ascii':                                                                                                    // 426
      case 'latin1':                                                                                                   // 427
      case 'binary':                                                                                                   // 428
        return len                                                                                                     // 429
      case 'utf8':                                                                                                     // 430
      case 'utf-8':                                                                                                    // 431
      case undefined:                                                                                                  // 432
        return utf8ToBytes(string).length                                                                              // 433
      case 'ucs2':                                                                                                     // 434
      case 'ucs-2':                                                                                                    // 435
      case 'utf16le':                                                                                                  // 436
      case 'utf-16le':                                                                                                 // 437
        return len * 2                                                                                                 // 438
      case 'hex':                                                                                                      // 439
        return len >>> 1                                                                                               // 440
      case 'base64':                                                                                                   // 441
        return base64ToBytes(string).length                                                                            // 442
      default:                                                                                                         // 443
        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                              // 444
        encoding = ('' + encoding).toLowerCase()                                                                       // 445
        loweredCase = true                                                                                             // 446
    }                                                                                                                  // 447
  }                                                                                                                    // 448
}                                                                                                                      // 449
Buffer.byteLength = byteLength                                                                                         // 450
                                                                                                                       // 451
function slowToString (encoding, start, end) {                                                                         // 452
  var loweredCase = false                                                                                              // 453
                                                                                                                       // 454
  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only                                         // 455
  // property of a typed array.                                                                                        // 456
                                                                                                                       // 457
  // This behaves neither like String nor Uint8Array in that we set start/end                                          // 458
  // to their upper/lower bounds if the value passed is out of range.                                                  // 459
  // undefined is handled specially as per ECMA-262 6th Edition,                                                       // 460
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.                                                   // 461
  if (start === undefined || start < 0) {                                                                              // 462
    start = 0                                                                                                          // 463
  }                                                                                                                    // 464
  // Return early if start > this.length. Done here to prevent potential uint32                                        // 465
  // coercion fail below.                                                                                              // 466
  if (start > this.length) {                                                                                           // 467
    return ''                                                                                                          // 468
  }                                                                                                                    // 469
                                                                                                                       // 470
  if (end === undefined || end > this.length) {                                                                        // 471
    end = this.length                                                                                                  // 472
  }                                                                                                                    // 473
                                                                                                                       // 474
  if (end <= 0) {                                                                                                      // 475
    return ''                                                                                                          // 476
  }                                                                                                                    // 477
                                                                                                                       // 478
  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.                                           // 479
  end >>>= 0                                                                                                           // 480
  start >>>= 0                                                                                                         // 481
                                                                                                                       // 482
  if (end <= start) {                                                                                                  // 483
    return ''                                                                                                          // 484
  }                                                                                                                    // 485
                                                                                                                       // 486
  if (!encoding) encoding = 'utf8'                                                                                     // 487
                                                                                                                       // 488
  while (true) {                                                                                                       // 489
    switch (encoding) {                                                                                                // 490
      case 'hex':                                                                                                      // 491
        return hexSlice(this, start, end)                                                                              // 492
                                                                                                                       // 493
      case 'utf8':                                                                                                     // 494
      case 'utf-8':                                                                                                    // 495
        return utf8Slice(this, start, end)                                                                             // 496
                                                                                                                       // 497
      case 'ascii':                                                                                                    // 498
        return asciiSlice(this, start, end)                                                                            // 499
                                                                                                                       // 500
      case 'latin1':                                                                                                   // 501
      case 'binary':                                                                                                   // 502
        return latin1Slice(this, start, end)                                                                           // 503
                                                                                                                       // 504
      case 'base64':                                                                                                   // 505
        return base64Slice(this, start, end)                                                                           // 506
                                                                                                                       // 507
      case 'ucs2':                                                                                                     // 508
      case 'ucs-2':                                                                                                    // 509
      case 'utf16le':                                                                                                  // 510
      case 'utf-16le':                                                                                                 // 511
        return utf16leSlice(this, start, end)                                                                          // 512
                                                                                                                       // 513
      default:                                                                                                         // 514
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 515
        encoding = (encoding + '').toLowerCase()                                                                       // 516
        loweredCase = true                                                                                             // 517
    }                                                                                                                  // 518
  }                                                                                                                    // 519
}                                                                                                                      // 520
                                                                                                                       // 521
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                                 // 522
// Buffer instances.                                                                                                   // 523
Buffer.prototype._isBuffer = true                                                                                      // 524
                                                                                                                       // 525
function swap (b, n, m) {                                                                                              // 526
  var i = b[n]                                                                                                         // 527
  b[n] = b[m]                                                                                                          // 528
  b[m] = i                                                                                                             // 529
}                                                                                                                      // 530
                                                                                                                       // 531
Buffer.prototype.swap16 = function swap16 () {                                                                         // 532
  var len = this.length                                                                                                // 533
  if (len % 2 !== 0) {                                                                                                 // 534
    throw new RangeError('Buffer size must be a multiple of 16-bits')                                                  // 535
  }                                                                                                                    // 536
  for (var i = 0; i < len; i += 2) {                                                                                   // 537
    swap(this, i, i + 1)                                                                                               // 538
  }                                                                                                                    // 539
  return this                                                                                                          // 540
}                                                                                                                      // 541
                                                                                                                       // 542
Buffer.prototype.swap32 = function swap32 () {                                                                         // 543
  var len = this.length                                                                                                // 544
  if (len % 4 !== 0) {                                                                                                 // 545
    throw new RangeError('Buffer size must be a multiple of 32-bits')                                                  // 546
  }                                                                                                                    // 547
  for (var i = 0; i < len; i += 4) {                                                                                   // 548
    swap(this, i, i + 3)                                                                                               // 549
    swap(this, i + 1, i + 2)                                                                                           // 550
  }                                                                                                                    // 551
  return this                                                                                                          // 552
}                                                                                                                      // 553
                                                                                                                       // 554
Buffer.prototype.swap64 = function swap64 () {                                                                         // 555
  var len = this.length                                                                                                // 556
  if (len % 8 !== 0) {                                                                                                 // 557
    throw new RangeError('Buffer size must be a multiple of 64-bits')                                                  // 558
  }                                                                                                                    // 559
  for (var i = 0; i < len; i += 8) {                                                                                   // 560
    swap(this, i, i + 7)                                                                                               // 561
    swap(this, i + 1, i + 6)                                                                                           // 562
    swap(this, i + 2, i + 5)                                                                                           // 563
    swap(this, i + 3, i + 4)                                                                                           // 564
  }                                                                                                                    // 565
  return this                                                                                                          // 566
}                                                                                                                      // 567
                                                                                                                       // 568
Buffer.prototype.toString = function toString () {                                                                     // 569
  var length = this.length | 0                                                                                         // 570
  if (length === 0) return ''                                                                                          // 571
  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                        // 572
  return slowToString.apply(this, arguments)                                                                           // 573
}                                                                                                                      // 574
                                                                                                                       // 575
Buffer.prototype.equals = function equals (b) {                                                                        // 576
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                            // 577
  if (this === b) return true                                                                                          // 578
  return Buffer.compare(this, b) === 0                                                                                 // 579
}                                                                                                                      // 580
                                                                                                                       // 581
Buffer.prototype.inspect = function inspect () {                                                                       // 582
  var str = ''                                                                                                         // 583
  var max = exports.INSPECT_MAX_BYTES                                                                                  // 584
  if (this.length > 0) {                                                                                               // 585
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                        // 586
    if (this.length > max) str += ' ... '                                                                              // 587
  }                                                                                                                    // 588
  return '<Buffer ' + str + '>'                                                                                        // 589
}                                                                                                                      // 590
                                                                                                                       // 591
Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {                                 // 592
  if (!Buffer.isBuffer(target)) {                                                                                      // 593
    throw new TypeError('Argument must be a Buffer')                                                                   // 594
  }                                                                                                                    // 595
                                                                                                                       // 596
  if (start === undefined) {                                                                                           // 597
    start = 0                                                                                                          // 598
  }                                                                                                                    // 599
  if (end === undefined) {                                                                                             // 600
    end = target ? target.length : 0                                                                                   // 601
  }                                                                                                                    // 602
  if (thisStart === undefined) {                                                                                       // 603
    thisStart = 0                                                                                                      // 604
  }                                                                                                                    // 605
  if (thisEnd === undefined) {                                                                                         // 606
    thisEnd = this.length                                                                                              // 607
  }                                                                                                                    // 608
                                                                                                                       // 609
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {                                    // 610
    throw new RangeError('out of range index')                                                                         // 611
  }                                                                                                                    // 612
                                                                                                                       // 613
  if (thisStart >= thisEnd && start >= end) {                                                                          // 614
    return 0                                                                                                           // 615
  }                                                                                                                    // 616
  if (thisStart >= thisEnd) {                                                                                          // 617
    return -1                                                                                                          // 618
  }                                                                                                                    // 619
  if (start >= end) {                                                                                                  // 620
    return 1                                                                                                           // 621
  }                                                                                                                    // 622
                                                                                                                       // 623
  start >>>= 0                                                                                                         // 624
  end >>>= 0                                                                                                           // 625
  thisStart >>>= 0                                                                                                     // 626
  thisEnd >>>= 0                                                                                                       // 627
                                                                                                                       // 628
  if (this === target) return 0                                                                                        // 629
                                                                                                                       // 630
  var x = thisEnd - thisStart                                                                                          // 631
  var y = end - start                                                                                                  // 632
  var len = Math.min(x, y)                                                                                             // 633
                                                                                                                       // 634
  var thisCopy = this.slice(thisStart, thisEnd)                                                                        // 635
  var targetCopy = target.slice(start, end)                                                                            // 636
                                                                                                                       // 637
  for (var i = 0; i < len; ++i) {                                                                                      // 638
    if (thisCopy[i] !== targetCopy[i]) {                                                                               // 639
      x = thisCopy[i]                                                                                                  // 640
      y = targetCopy[i]                                                                                                // 641
      break                                                                                                            // 642
    }                                                                                                                  // 643
  }                                                                                                                    // 644
                                                                                                                       // 645
  if (x < y) return -1                                                                                                 // 646
  if (y < x) return 1                                                                                                  // 647
  return 0                                                                                                             // 648
}                                                                                                                      // 649
                                                                                                                       // 650
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,                                        // 651
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.                                                   // 652
//                                                                                                                     // 653
// Arguments:                                                                                                          // 654
// - buffer - a Buffer to search                                                                                       // 655
// - val - a string, Buffer, or number                                                                                 // 656
// - byteOffset - an index into `buffer`; will be clamped to an int32                                                  // 657
// - encoding - an optional encoding, relevant is val is a string                                                      // 658
// - dir - true for indexOf, false for lastIndexOf                                                                     // 659
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {                                               // 660
  // Empty buffer means no match                                                                                       // 661
  if (buffer.length === 0) return -1                                                                                   // 662
                                                                                                                       // 663
  // Normalize byteOffset                                                                                              // 664
  if (typeof byteOffset === 'string') {                                                                                // 665
    encoding = byteOffset                                                                                              // 666
    byteOffset = 0                                                                                                     // 667
  } else if (byteOffset > 0x7fffffff) {                                                                                // 668
    byteOffset = 0x7fffffff                                                                                            // 669
  } else if (byteOffset < -0x80000000) {                                                                               // 670
    byteOffset = -0x80000000                                                                                           // 671
  }                                                                                                                    // 672
  byteOffset = +byteOffset  // Coerce to Number.                                                                       // 673
  if (isNaN(byteOffset)) {                                                                                             // 674
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer                                       // 675
    byteOffset = dir ? 0 : (buffer.length - 1)                                                                         // 676
  }                                                                                                                    // 677
                                                                                                                       // 678
  // Normalize byteOffset: negative offsets start from the end of the buffer                                           // 679
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset                                                          // 680
  if (byteOffset >= buffer.length) {                                                                                   // 681
    if (dir) return -1                                                                                                 // 682
    else byteOffset = buffer.length - 1                                                                                // 683
  } else if (byteOffset < 0) {                                                                                         // 684
    if (dir) byteOffset = 0                                                                                            // 685
    else return -1                                                                                                     // 686
  }                                                                                                                    // 687
                                                                                                                       // 688
  // Normalize val                                                                                                     // 689
  if (typeof val === 'string') {                                                                                       // 690
    val = Buffer.from(val, encoding)                                                                                   // 691
  }                                                                                                                    // 692
                                                                                                                       // 693
  // Finally, search either indexOf (if dir is true) or lastIndexOf                                                    // 694
  if (Buffer.isBuffer(val)) {                                                                                          // 695
    // Special case: looking for empty string/buffer always fails                                                      // 696
    if (val.length === 0) {                                                                                            // 697
      return -1                                                                                                        // 698
    }                                                                                                                  // 699
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)                                                        // 700
  } else if (typeof val === 'number') {                                                                                // 701
    val = val & 0xFF // Search for a byte value [0-255]                                                                // 702
    if (Buffer.TYPED_ARRAY_SUPPORT &&                                                                                  // 703
        typeof Uint8Array.prototype.indexOf === 'function') {                                                          // 704
      if (dir) {                                                                                                       // 705
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)                                              // 706
      } else {                                                                                                         // 707
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)                                          // 708
      }                                                                                                                // 709
    }                                                                                                                  // 710
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)                                                    // 711
  }                                                                                                                    // 712
                                                                                                                       // 713
  throw new TypeError('val must be string, number or Buffer')                                                          // 714
}                                                                                                                      // 715
                                                                                                                       // 716
function arrayIndexOf (arr, val, byteOffset, encoding, dir) {                                                          // 717
  var indexSize = 1                                                                                                    // 718
  var arrLength = arr.length                                                                                           // 719
  var valLength = val.length                                                                                           // 720
                                                                                                                       // 721
  if (encoding !== undefined) {                                                                                        // 722
    encoding = String(encoding).toLowerCase()                                                                          // 723
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||                                                                 // 724
        encoding === 'utf16le' || encoding === 'utf-16le') {                                                           // 725
      if (arr.length < 2 || val.length < 2) {                                                                          // 726
        return -1                                                                                                      // 727
      }                                                                                                                // 728
      indexSize = 2                                                                                                    // 729
      arrLength /= 2                                                                                                   // 730
      valLength /= 2                                                                                                   // 731
      byteOffset /= 2                                                                                                  // 732
    }                                                                                                                  // 733
  }                                                                                                                    // 734
                                                                                                                       // 735
  function read (buf, i) {                                                                                             // 736
    if (indexSize === 1) {                                                                                             // 737
      return buf[i]                                                                                                    // 738
    } else {                                                                                                           // 739
      return buf.readUInt16BE(i * indexSize)                                                                           // 740
    }                                                                                                                  // 741
  }                                                                                                                    // 742
                                                                                                                       // 743
  var i                                                                                                                // 744
  if (dir) {                                                                                                           // 745
    var foundIndex = -1                                                                                                // 746
    for (i = byteOffset; i < arrLength; i++) {                                                                         // 747
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {                                        // 748
        if (foundIndex === -1) foundIndex = i                                                                          // 749
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize                                            // 750
      } else {                                                                                                         // 751
        if (foundIndex !== -1) i -= i - foundIndex                                                                     // 752
        foundIndex = -1                                                                                                // 753
      }                                                                                                                // 754
    }                                                                                                                  // 755
  } else {                                                                                                             // 756
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength                                         // 757
    for (i = byteOffset; i >= 0; i--) {                                                                                // 758
      var found = true                                                                                                 // 759
      for (var j = 0; j < valLength; j++) {                                                                            // 760
        if (read(arr, i + j) !== read(val, j)) {                                                                       // 761
          found = false                                                                                                // 762
          break                                                                                                        // 763
        }                                                                                                              // 764
      }                                                                                                                // 765
      if (found) return i                                                                                              // 766
    }                                                                                                                  // 767
  }                                                                                                                    // 768
                                                                                                                       // 769
  return -1                                                                                                            // 770
}                                                                                                                      // 771
                                                                                                                       // 772
Buffer.prototype.includes = function includes (val, byteOffset, encoding) {                                            // 773
  return this.indexOf(val, byteOffset, encoding) !== -1                                                                // 774
}                                                                                                                      // 775
                                                                                                                       // 776
Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {                                              // 777
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)                                                   // 778
}                                                                                                                      // 779
                                                                                                                       // 780
Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {                                      // 781
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)                                                  // 782
}                                                                                                                      // 783
                                                                                                                       // 784
function hexWrite (buf, string, offset, length) {                                                                      // 785
  offset = Number(offset) || 0                                                                                         // 786
  var remaining = buf.length - offset                                                                                  // 787
  if (!length) {                                                                                                       // 788
    length = remaining                                                                                                 // 789
  } else {                                                                                                             // 790
    length = Number(length)                                                                                            // 791
    if (length > remaining) {                                                                                          // 792
      length = remaining                                                                                               // 793
    }                                                                                                                  // 794
  }                                                                                                                    // 795
                                                                                                                       // 796
  // must be an even number of digits                                                                                  // 797
  var strLen = string.length                                                                                           // 798
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')                                                      // 799
                                                                                                                       // 800
  if (length > strLen / 2) {                                                                                           // 801
    length = strLen / 2                                                                                                // 802
  }                                                                                                                    // 803
  for (var i = 0; i < length; ++i) {                                                                                   // 804
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                                 // 805
    if (isNaN(parsed)) return i                                                                                        // 806
    buf[offset + i] = parsed                                                                                           // 807
  }                                                                                                                    // 808
  return i                                                                                                             // 809
}                                                                                                                      // 810
                                                                                                                       // 811
function utf8Write (buf, string, offset, length) {                                                                     // 812
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                                     // 813
}                                                                                                                      // 814
                                                                                                                       // 815
function asciiWrite (buf, string, offset, length) {                                                                    // 816
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                         // 817
}                                                                                                                      // 818
                                                                                                                       // 819
function latin1Write (buf, string, offset, length) {                                                                   // 820
  return asciiWrite(buf, string, offset, length)                                                                       // 821
}                                                                                                                      // 822
                                                                                                                       // 823
function base64Write (buf, string, offset, length) {                                                                   // 824
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                        // 825
}                                                                                                                      // 826
                                                                                                                       // 827
function ucs2Write (buf, string, offset, length) {                                                                     // 828
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                                  // 829
}                                                                                                                      // 830
                                                                                                                       // 831
Buffer.prototype.write = function write (string, offset, length, encoding) {                                           // 832
  // Buffer#write(string)                                                                                              // 833
  if (offset === undefined) {                                                                                          // 834
    encoding = 'utf8'                                                                                                  // 835
    length = this.length                                                                                               // 836
    offset = 0                                                                                                         // 837
  // Buffer#write(string, encoding)                                                                                    // 838
  } else if (length === undefined && typeof offset === 'string') {                                                     // 839
    encoding = offset                                                                                                  // 840
    length = this.length                                                                                               // 841
    offset = 0                                                                                                         // 842
  // Buffer#write(string, offset[, length][, encoding])                                                                // 843
  } else if (isFinite(offset)) {                                                                                       // 844
    offset = offset | 0                                                                                                // 845
    if (isFinite(length)) {                                                                                            // 846
      length = length | 0                                                                                              // 847
      if (encoding === undefined) encoding = 'utf8'                                                                    // 848
    } else {                                                                                                           // 849
      encoding = length                                                                                                // 850
      length = undefined                                                                                               // 851
    }                                                                                                                  // 852
  // legacy write(string, encoding, offset, length) - remove in v0.13                                                  // 853
  } else {                                                                                                             // 854
    throw new Error(                                                                                                   // 855
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'                                        // 856
    )                                                                                                                  // 857
  }                                                                                                                    // 858
                                                                                                                       // 859
  var remaining = this.length - offset                                                                                 // 860
  if (length === undefined || length > remaining) length = remaining                                                   // 861
                                                                                                                       // 862
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                                     // 863
    throw new RangeError('Attempt to write outside buffer bounds')                                                     // 864
  }                                                                                                                    // 865
                                                                                                                       // 866
  if (!encoding) encoding = 'utf8'                                                                                     // 867
                                                                                                                       // 868
  var loweredCase = false                                                                                              // 869
  for (;;) {                                                                                                           // 870
    switch (encoding) {                                                                                                // 871
      case 'hex':                                                                                                      // 872
        return hexWrite(this, string, offset, length)                                                                  // 873
                                                                                                                       // 874
      case 'utf8':                                                                                                     // 875
      case 'utf-8':                                                                                                    // 876
        return utf8Write(this, string, offset, length)                                                                 // 877
                                                                                                                       // 878
      case 'ascii':                                                                                                    // 879
        return asciiWrite(this, string, offset, length)                                                                // 880
                                                                                                                       // 881
      case 'latin1':                                                                                                   // 882
      case 'binary':                                                                                                   // 883
        return latin1Write(this, string, offset, length)                                                               // 884
                                                                                                                       // 885
      case 'base64':                                                                                                   // 886
        // Warning: maxLength not taken into account in base64Write                                                    // 887
        return base64Write(this, string, offset, length)                                                               // 888
                                                                                                                       // 889
      case 'ucs2':                                                                                                     // 890
      case 'ucs-2':                                                                                                    // 891
      case 'utf16le':                                                                                                  // 892
      case 'utf-16le':                                                                                                 // 893
        return ucs2Write(this, string, offset, length)                                                                 // 894
                                                                                                                       // 895
      default:                                                                                                         // 896
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                          // 897
        encoding = ('' + encoding).toLowerCase()                                                                       // 898
        loweredCase = true                                                                                             // 899
    }                                                                                                                  // 900
  }                                                                                                                    // 901
}                                                                                                                      // 902
                                                                                                                       // 903
Buffer.prototype.toJSON = function toJSON () {                                                                         // 904
  return {                                                                                                             // 905
    type: 'Buffer',                                                                                                    // 906
    data: Array.prototype.slice.call(this._arr || this, 0)                                                             // 907
  }                                                                                                                    // 908
}                                                                                                                      // 909
                                                                                                                       // 910
function base64Slice (buf, start, end) {                                                                               // 911
  if (start === 0 && end === buf.length) {                                                                             // 912
    return base64.fromByteArray(buf)                                                                                   // 913
  } else {                                                                                                             // 914
    return base64.fromByteArray(buf.slice(start, end))                                                                 // 915
  }                                                                                                                    // 916
}                                                                                                                      // 917
                                                                                                                       // 918
function utf8Slice (buf, start, end) {                                                                                 // 919
  end = Math.min(buf.length, end)                                                                                      // 920
  var res = []                                                                                                         // 921
                                                                                                                       // 922
  var i = start                                                                                                        // 923
  while (i < end) {                                                                                                    // 924
    var firstByte = buf[i]                                                                                             // 925
    var codePoint = null                                                                                               // 926
    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                                      // 927
      : (firstByte > 0xDF) ? 3                                                                                         // 928
      : (firstByte > 0xBF) ? 2                                                                                         // 929
      : 1                                                                                                              // 930
                                                                                                                       // 931
    if (i + bytesPerSequence <= end) {                                                                                 // 932
      var secondByte, thirdByte, fourthByte, tempCodePoint                                                             // 933
                                                                                                                       // 934
      switch (bytesPerSequence) {                                                                                      // 935
        case 1:                                                                                                        // 936
          if (firstByte < 0x80) {                                                                                      // 937
            codePoint = firstByte                                                                                      // 938
          }                                                                                                            // 939
          break                                                                                                        // 940
        case 2:                                                                                                        // 941
          secondByte = buf[i + 1]                                                                                      // 942
          if ((secondByte & 0xC0) === 0x80) {                                                                          // 943
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                            // 944
            if (tempCodePoint > 0x7F) {                                                                                // 945
              codePoint = tempCodePoint                                                                                // 946
            }                                                                                                          // 947
          }                                                                                                            // 948
          break                                                                                                        // 949
        case 3:                                                                                                        // 950
          secondByte = buf[i + 1]                                                                                      // 951
          thirdByte = buf[i + 2]                                                                                       // 952
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                           // 953
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)                 // 954
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                         // 955
              codePoint = tempCodePoint                                                                                // 956
            }                                                                                                          // 957
          }                                                                                                            // 958
          break                                                                                                        // 959
        case 4:                                                                                                        // 960
          secondByte = buf[i + 1]                                                                                      // 961
          thirdByte = buf[i + 2]                                                                                       // 962
          fourthByte = buf[i + 3]                                                                                      // 963
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {           // 964
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                                  // 966
              codePoint = tempCodePoint                                                                                // 967
            }                                                                                                          // 968
          }                                                                                                            // 969
      }                                                                                                                // 970
    }                                                                                                                  // 971
                                                                                                                       // 972
    if (codePoint === null) {                                                                                          // 973
      // we did not generate a valid codePoint so insert a                                                             // 974
      // replacement char (U+FFFD) and advance only 1 byte                                                             // 975
      codePoint = 0xFFFD                                                                                               // 976
      bytesPerSequence = 1                                                                                             // 977
    } else if (codePoint > 0xFFFF) {                                                                                   // 978
      // encode to utf16 (surrogate pair dance)                                                                        // 979
      codePoint -= 0x10000                                                                                             // 980
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                                      // 981
      codePoint = 0xDC00 | codePoint & 0x3FF                                                                           // 982
    }                                                                                                                  // 983
                                                                                                                       // 984
    res.push(codePoint)                                                                                                // 985
    i += bytesPerSequence                                                                                              // 986
  }                                                                                                                    // 987
                                                                                                                       // 988
  return decodeCodePointsArray(res)                                                                                    // 989
}                                                                                                                      // 990
                                                                                                                       // 991
// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                               // 992
// the lowest limit is Chrome, with 0x10000 args.                                                                      // 993
// We go 1 magnitude less, for safety                                                                                  // 994
var MAX_ARGUMENTS_LENGTH = 0x1000                                                                                      // 995
                                                                                                                       // 996
function decodeCodePointsArray (codePoints) {                                                                          // 997
  var len = codePoints.length                                                                                          // 998
  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                                   // 999
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                        // 1000
  }                                                                                                                    // 1001
                                                                                                                       // 1002
  // Decode in chunks to avoid "call stack size exceeded".                                                             // 1003
  var res = ''                                                                                                         // 1004
  var i = 0                                                                                                            // 1005
  while (i < len) {                                                                                                    // 1006
    res += String.fromCharCode.apply(                                                                                  // 1007
      String,                                                                                                          // 1008
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                                   // 1009
    )                                                                                                                  // 1010
  }                                                                                                                    // 1011
  return res                                                                                                           // 1012
}                                                                                                                      // 1013
                                                                                                                       // 1014
function asciiSlice (buf, start, end) {                                                                                // 1015
  var ret = ''                                                                                                         // 1016
  end = Math.min(buf.length, end)                                                                                      // 1017
                                                                                                                       // 1018
  for (var i = start; i < end; ++i) {                                                                                  // 1019
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                          // 1020
  }                                                                                                                    // 1021
  return ret                                                                                                           // 1022
}                                                                                                                      // 1023
                                                                                                                       // 1024
function latin1Slice (buf, start, end) {                                                                               // 1025
  var ret = ''                                                                                                         // 1026
  end = Math.min(buf.length, end)                                                                                      // 1027
                                                                                                                       // 1028
  for (var i = start; i < end; ++i) {                                                                                  // 1029
    ret += String.fromCharCode(buf[i])                                                                                 // 1030
  }                                                                                                                    // 1031
  return ret                                                                                                           // 1032
}                                                                                                                      // 1033
                                                                                                                       // 1034
function hexSlice (buf, start, end) {                                                                                  // 1035
  var len = buf.length                                                                                                 // 1036
                                                                                                                       // 1037
  if (!start || start < 0) start = 0                                                                                   // 1038
  if (!end || end < 0 || end > len) end = len                                                                          // 1039
                                                                                                                       // 1040
  var out = ''                                                                                                         // 1041
  for (var i = start; i < end; ++i) {                                                                                  // 1042
    out += toHex(buf[i])                                                                                               // 1043
  }                                                                                                                    // 1044
  return out                                                                                                           // 1045
}                                                                                                                      // 1046
                                                                                                                       // 1047
function utf16leSlice (buf, start, end) {                                                                              // 1048
  var bytes = buf.slice(start, end)                                                                                    // 1049
  var res = ''                                                                                                         // 1050
  for (var i = 0; i < bytes.length; i += 2) {                                                                          // 1051
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                          // 1052
  }                                                                                                                    // 1053
  return res                                                                                                           // 1054
}                                                                                                                      // 1055
                                                                                                                       // 1056
Buffer.prototype.slice = function slice (start, end) {                                                                 // 1057
  var len = this.length                                                                                                // 1058
  start = ~~start                                                                                                      // 1059
  end = end === undefined ? len : ~~end                                                                                // 1060
                                                                                                                       // 1061
  if (start < 0) {                                                                                                     // 1062
    start += len                                                                                                       // 1063
    if (start < 0) start = 0                                                                                           // 1064
  } else if (start > len) {                                                                                            // 1065
    start = len                                                                                                        // 1066
  }                                                                                                                    // 1067
                                                                                                                       // 1068
  if (end < 0) {                                                                                                       // 1069
    end += len                                                                                                         // 1070
    if (end < 0) end = 0                                                                                               // 1071
  } else if (end > len) {                                                                                              // 1072
    end = len                                                                                                          // 1073
  }                                                                                                                    // 1074
                                                                                                                       // 1075
  if (end < start) end = start                                                                                         // 1076
                                                                                                                       // 1077
  var newBuf                                                                                                           // 1078
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1079
    newBuf = this.subarray(start, end)                                                                                 // 1080
    newBuf.__proto__ = Buffer.prototype                                                                                // 1081
  } else {                                                                                                             // 1082
    var sliceLen = end - start                                                                                         // 1083
    newBuf = new Buffer(sliceLen, undefined)                                                                           // 1084
    for (var i = 0; i < sliceLen; ++i) {                                                                               // 1085
      newBuf[i] = this[i + start]                                                                                      // 1086
    }                                                                                                                  // 1087
  }                                                                                                                    // 1088
                                                                                                                       // 1089
  return newBuf                                                                                                        // 1090
}                                                                                                                      // 1091
                                                                                                                       // 1092
/*                                                                                                                     // 1093
 * Need to make sure that buffer isn't trying to write out of bounds.                                                  // 1094
 */                                                                                                                    // 1095
function checkOffset (offset, ext, length) {                                                                           // 1096
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                                     // 1097
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                             // 1098
}                                                                                                                      // 1099
                                                                                                                       // 1100
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                                     // 1101
  offset = offset | 0                                                                                                  // 1102
  byteLength = byteLength | 0                                                                                          // 1103
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1104
                                                                                                                       // 1105
  var val = this[offset]                                                                                               // 1106
  var mul = 1                                                                                                          // 1107
  var i = 0                                                                                                            // 1108
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1109
    val += this[offset + i] * mul                                                                                      // 1110
  }                                                                                                                    // 1111
                                                                                                                       // 1112
  return val                                                                                                           // 1113
}                                                                                                                      // 1114
                                                                                                                       // 1115
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                                     // 1116
  offset = offset | 0                                                                                                  // 1117
  byteLength = byteLength | 0                                                                                          // 1118
  if (!noAssert) {                                                                                                     // 1119
    checkOffset(offset, byteLength, this.length)                                                                       // 1120
  }                                                                                                                    // 1121
                                                                                                                       // 1122
  var val = this[offset + --byteLength]                                                                                // 1123
  var mul = 1                                                                                                          // 1124
  while (byteLength > 0 && (mul *= 0x100)) {                                                                           // 1125
    val += this[offset + --byteLength] * mul                                                                           // 1126
  }                                                                                                                    // 1127
                                                                                                                       // 1128
  return val                                                                                                           // 1129
}                                                                                                                      // 1130
                                                                                                                       // 1131
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                                   // 1132
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1133
  return this[offset]                                                                                                  // 1134
}                                                                                                                      // 1135
                                                                                                                       // 1136
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                             // 1137
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1138
  return this[offset] | (this[offset + 1] << 8)                                                                        // 1139
}                                                                                                                      // 1140
                                                                                                                       // 1141
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                             // 1142
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1143
  return (this[offset] << 8) | this[offset + 1]                                                                        // 1144
}                                                                                                                      // 1145
                                                                                                                       // 1146
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                             // 1147
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1148
                                                                                                                       // 1149
  return ((this[offset]) |                                                                                             // 1150
      (this[offset + 1] << 8) |                                                                                        // 1151
      (this[offset + 2] << 16)) +                                                                                      // 1152
      (this[offset + 3] * 0x1000000)                                                                                   // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                             // 1156
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1157
                                                                                                                       // 1158
  return (this[offset] * 0x1000000) +                                                                                  // 1159
    ((this[offset + 1] << 16) |                                                                                        // 1160
    (this[offset + 2] << 8) |                                                                                          // 1161
    this[offset + 3])                                                                                                  // 1162
}                                                                                                                      // 1163
                                                                                                                       // 1164
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                                       // 1165
  offset = offset | 0                                                                                                  // 1166
  byteLength = byteLength | 0                                                                                          // 1167
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1168
                                                                                                                       // 1169
  var val = this[offset]                                                                                               // 1170
  var mul = 1                                                                                                          // 1171
  var i = 0                                                                                                            // 1172
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1173
    val += this[offset + i] * mul                                                                                      // 1174
  }                                                                                                                    // 1175
  mul *= 0x80                                                                                                          // 1176
                                                                                                                       // 1177
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1178
                                                                                                                       // 1179
  return val                                                                                                           // 1180
}                                                                                                                      // 1181
                                                                                                                       // 1182
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                                       // 1183
  offset = offset | 0                                                                                                  // 1184
  byteLength = byteLength | 0                                                                                          // 1185
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                          // 1186
                                                                                                                       // 1187
  var i = byteLength                                                                                                   // 1188
  var mul = 1                                                                                                          // 1189
  var val = this[offset + --i]                                                                                         // 1190
  while (i > 0 && (mul *= 0x100)) {                                                                                    // 1191
    val += this[offset + --i] * mul                                                                                    // 1192
  }                                                                                                                    // 1193
  mul *= 0x80                                                                                                          // 1194
                                                                                                                       // 1195
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                                   // 1196
                                                                                                                       // 1197
  return val                                                                                                           // 1198
}                                                                                                                      // 1199
                                                                                                                       // 1200
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                                     // 1201
  if (!noAssert) checkOffset(offset, 1, this.length)                                                                   // 1202
  if (!(this[offset] & 0x80)) return (this[offset])                                                                    // 1203
  return ((0xff - this[offset] + 1) * -1)                                                                              // 1204
}                                                                                                                      // 1205
                                                                                                                       // 1206
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                               // 1207
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1208
  var val = this[offset] | (this[offset + 1] << 8)                                                                     // 1209
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1210
}                                                                                                                      // 1211
                                                                                                                       // 1212
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                               // 1213
  if (!noAssert) checkOffset(offset, 2, this.length)                                                                   // 1214
  var val = this[offset + 1] | (this[offset] << 8)                                                                     // 1215
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                                       // 1216
}                                                                                                                      // 1217
                                                                                                                       // 1218
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                               // 1219
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1220
                                                                                                                       // 1221
  return (this[offset]) |                                                                                              // 1222
    (this[offset + 1] << 8) |                                                                                          // 1223
    (this[offset + 2] << 16) |                                                                                         // 1224
    (this[offset + 3] << 24)                                                                                           // 1225
}                                                                                                                      // 1226
                                                                                                                       // 1227
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                               // 1228
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1229
                                                                                                                       // 1230
  return (this[offset] << 24) |                                                                                        // 1231
    (this[offset + 1] << 16) |                                                                                         // 1232
    (this[offset + 2] << 8) |                                                                                          // 1233
    (this[offset + 3])                                                                                                 // 1234
}                                                                                                                      // 1235
                                                                                                                       // 1236
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                               // 1237
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1238
  return ieee754.read(this, offset, true, 23, 4)                                                                       // 1239
}                                                                                                                      // 1240
                                                                                                                       // 1241
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                               // 1242
  if (!noAssert) checkOffset(offset, 4, this.length)                                                                   // 1243
  return ieee754.read(this, offset, false, 23, 4)                                                                      // 1244
}                                                                                                                      // 1245
                                                                                                                       // 1246
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                             // 1247
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1248
  return ieee754.read(this, offset, true, 52, 8)                                                                       // 1249
}                                                                                                                      // 1250
                                                                                                                       // 1251
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                             // 1252
  if (!noAssert) checkOffset(offset, 8, this.length)                                                                   // 1253
  return ieee754.read(this, offset, false, 52, 8)                                                                      // 1254
}                                                                                                                      // 1255
                                                                                                                       // 1256
function checkInt (buf, value, offset, ext, max, min) {                                                                // 1257
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')                        // 1258
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')                            // 1259
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1260
}                                                                                                                      // 1261
                                                                                                                       // 1262
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                            // 1263
  value = +value                                                                                                       // 1264
  offset = offset | 0                                                                                                  // 1265
  byteLength = byteLength | 0                                                                                          // 1266
  if (!noAssert) {                                                                                                     // 1267
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1268
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1269
  }                                                                                                                    // 1270
                                                                                                                       // 1271
  var mul = 1                                                                                                          // 1272
  var i = 0                                                                                                            // 1273
  this[offset] = value & 0xFF                                                                                          // 1274
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1275
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1276
  }                                                                                                                    // 1277
                                                                                                                       // 1278
  return offset + byteLength                                                                                           // 1279
}                                                                                                                      // 1280
                                                                                                                       // 1281
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                            // 1282
  value = +value                                                                                                       // 1283
  offset = offset | 0                                                                                                  // 1284
  byteLength = byteLength | 0                                                                                          // 1285
  if (!noAssert) {                                                                                                     // 1286
    var maxBytes = Math.pow(2, 8 * byteLength) - 1                                                                     // 1287
    checkInt(this, value, offset, byteLength, maxBytes, 0)                                                             // 1288
  }                                                                                                                    // 1289
                                                                                                                       // 1290
  var i = byteLength - 1                                                                                               // 1291
  var mul = 1                                                                                                          // 1292
  this[offset + i] = value & 0xFF                                                                                      // 1293
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1294
    this[offset + i] = (value / mul) & 0xFF                                                                            // 1295
  }                                                                                                                    // 1296
                                                                                                                       // 1297
  return offset + byteLength                                                                                           // 1298
}                                                                                                                      // 1299
                                                                                                                       // 1300
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                          // 1301
  value = +value                                                                                                       // 1302
  offset = offset | 0                                                                                                  // 1303
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                             // 1304
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1305
  this[offset] = (value & 0xff)                                                                                        // 1306
  return offset + 1                                                                                                    // 1307
}                                                                                                                      // 1308
                                                                                                                       // 1309
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                        // 1310
  if (value < 0) value = 0xffff + value + 1                                                                            // 1311
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {                                                  // 1312
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                         // 1313
      (littleEndian ? i : 1 - i) * 8                                                                                   // 1314
  }                                                                                                                    // 1315
}                                                                                                                      // 1316
                                                                                                                       // 1317
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                                    // 1318
  value = +value                                                                                                       // 1319
  offset = offset | 0                                                                                                  // 1320
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1321
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1322
    this[offset] = (value & 0xff)                                                                                      // 1323
    this[offset + 1] = (value >>> 8)                                                                                   // 1324
  } else {                                                                                                             // 1325
    objectWriteUInt16(this, value, offset, true)                                                                       // 1326
  }                                                                                                                    // 1327
  return offset + 2                                                                                                    // 1328
}                                                                                                                      // 1329
                                                                                                                       // 1330
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                                    // 1331
  value = +value                                                                                                       // 1332
  offset = offset | 0                                                                                                  // 1333
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                           // 1334
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1335
    this[offset] = (value >>> 8)                                                                                       // 1336
    this[offset + 1] = (value & 0xff)                                                                                  // 1337
  } else {                                                                                                             // 1338
    objectWriteUInt16(this, value, offset, false)                                                                      // 1339
  }                                                                                                                    // 1340
  return offset + 2                                                                                                    // 1341
}                                                                                                                      // 1342
                                                                                                                       // 1343
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                        // 1344
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1345
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {                                                  // 1346
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                                // 1347
  }                                                                                                                    // 1348
}                                                                                                                      // 1349
                                                                                                                       // 1350
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                                    // 1351
  value = +value                                                                                                       // 1352
  offset = offset | 0                                                                                                  // 1353
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1354
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1355
    this[offset + 3] = (value >>> 24)                                                                                  // 1356
    this[offset + 2] = (value >>> 16)                                                                                  // 1357
    this[offset + 1] = (value >>> 8)                                                                                   // 1358
    this[offset] = (value & 0xff)                                                                                      // 1359
  } else {                                                                                                             // 1360
    objectWriteUInt32(this, value, offset, true)                                                                       // 1361
  }                                                                                                                    // 1362
  return offset + 4                                                                                                    // 1363
}                                                                                                                      // 1364
                                                                                                                       // 1365
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                                    // 1366
  value = +value                                                                                                       // 1367
  offset = offset | 0                                                                                                  // 1368
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                                       // 1369
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1370
    this[offset] = (value >>> 24)                                                                                      // 1371
    this[offset + 1] = (value >>> 16)                                                                                  // 1372
    this[offset + 2] = (value >>> 8)                                                                                   // 1373
    this[offset + 3] = (value & 0xff)                                                                                  // 1374
  } else {                                                                                                             // 1375
    objectWriteUInt32(this, value, offset, false)                                                                      // 1376
  }                                                                                                                    // 1377
  return offset + 4                                                                                                    // 1378
}                                                                                                                      // 1379
                                                                                                                       // 1380
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                              // 1381
  value = +value                                                                                                       // 1382
  offset = offset | 0                                                                                                  // 1383
  if (!noAssert) {                                                                                                     // 1384
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1385
                                                                                                                       // 1386
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1387
  }                                                                                                                    // 1388
                                                                                                                       // 1389
  var i = 0                                                                                                            // 1390
  var mul = 1                                                                                                          // 1391
  var sub = 0                                                                                                          // 1392
  this[offset] = value & 0xFF                                                                                          // 1393
  while (++i < byteLength && (mul *= 0x100)) {                                                                         // 1394
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {                                                        // 1395
      sub = 1                                                                                                          // 1396
    }                                                                                                                  // 1397
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1398
  }                                                                                                                    // 1399
                                                                                                                       // 1400
  return offset + byteLength                                                                                           // 1401
}                                                                                                                      // 1402
                                                                                                                       // 1403
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                              // 1404
  value = +value                                                                                                       // 1405
  offset = offset | 0                                                                                                  // 1406
  if (!noAssert) {                                                                                                     // 1407
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                        // 1408
                                                                                                                       // 1409
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                                       // 1410
  }                                                                                                                    // 1411
                                                                                                                       // 1412
  var i = byteLength - 1                                                                                               // 1413
  var mul = 1                                                                                                          // 1414
  var sub = 0                                                                                                          // 1415
  this[offset + i] = value & 0xFF                                                                                      // 1416
  while (--i >= 0 && (mul *= 0x100)) {                                                                                 // 1417
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {                                                        // 1418
      sub = 1                                                                                                          // 1419
    }                                                                                                                  // 1420
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                               // 1421
  }                                                                                                                    // 1422
                                                                                                                       // 1423
  return offset + byteLength                                                                                           // 1424
}                                                                                                                      // 1425
                                                                                                                       // 1426
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                            // 1427
  value = +value                                                                                                       // 1428
  offset = offset | 0                                                                                                  // 1429
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                         // 1430
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                           // 1431
  if (value < 0) value = 0xff + value + 1                                                                              // 1432
  this[offset] = (value & 0xff)                                                                                        // 1433
  return offset + 1                                                                                                    // 1434
}                                                                                                                      // 1435
                                                                                                                       // 1436
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                                      // 1437
  value = +value                                                                                                       // 1438
  offset = offset | 0                                                                                                  // 1439
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1440
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1441
    this[offset] = (value & 0xff)                                                                                      // 1442
    this[offset + 1] = (value >>> 8)                                                                                   // 1443
  } else {                                                                                                             // 1444
    objectWriteUInt16(this, value, offset, true)                                                                       // 1445
  }                                                                                                                    // 1446
  return offset + 2                                                                                                    // 1447
}                                                                                                                      // 1448
                                                                                                                       // 1449
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                                      // 1450
  value = +value                                                                                                       // 1451
  offset = offset | 0                                                                                                  // 1452
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                                     // 1453
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1454
    this[offset] = (value >>> 8)                                                                                       // 1455
    this[offset + 1] = (value & 0xff)                                                                                  // 1456
  } else {                                                                                                             // 1457
    objectWriteUInt16(this, value, offset, false)                                                                      // 1458
  }                                                                                                                    // 1459
  return offset + 2                                                                                                    // 1460
}                                                                                                                      // 1461
                                                                                                                       // 1462
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                                      // 1463
  value = +value                                                                                                       // 1464
  offset = offset | 0                                                                                                  // 1465
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1466
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1467
    this[offset] = (value & 0xff)                                                                                      // 1468
    this[offset + 1] = (value >>> 8)                                                                                   // 1469
    this[offset + 2] = (value >>> 16)                                                                                  // 1470
    this[offset + 3] = (value >>> 24)                                                                                  // 1471
  } else {                                                                                                             // 1472
    objectWriteUInt32(this, value, offset, true)                                                                       // 1473
  }                                                                                                                    // 1474
  return offset + 4                                                                                                    // 1475
}                                                                                                                      // 1476
                                                                                                                       // 1477
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                                      // 1478
  value = +value                                                                                                       // 1479
  offset = offset | 0                                                                                                  // 1480
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                             // 1481
  if (value < 0) value = 0xffffffff + value + 1                                                                        // 1482
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                                    // 1483
    this[offset] = (value >>> 24)                                                                                      // 1484
    this[offset + 1] = (value >>> 16)                                                                                  // 1485
    this[offset + 2] = (value >>> 8)                                                                                   // 1486
    this[offset + 3] = (value & 0xff)                                                                                  // 1487
  } else {                                                                                                             // 1488
    objectWriteUInt32(this, value, offset, false)                                                                      // 1489
  }                                                                                                                    // 1490
  return offset + 4                                                                                                    // 1491
}                                                                                                                      // 1492
                                                                                                                       // 1493
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                            // 1494
  if (offset + ext > buf.length) throw new RangeError('Index out of range')                                            // 1495
  if (offset < 0) throw new RangeError('Index out of range')                                                           // 1496
}                                                                                                                      // 1497
                                                                                                                       // 1498
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                                     // 1499
  if (!noAssert) {                                                                                                     // 1500
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                               // 1501
  }                                                                                                                    // 1502
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                               // 1503
  return offset + 4                                                                                                    // 1504
}                                                                                                                      // 1505
                                                                                                                       // 1506
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                                      // 1507
  return writeFloat(this, value, offset, true, noAssert)                                                               // 1508
}                                                                                                                      // 1509
                                                                                                                       // 1510
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                                      // 1511
  return writeFloat(this, value, offset, false, noAssert)                                                              // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                                    // 1515
  if (!noAssert) {                                                                                                     // 1516
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                             // 1517
  }                                                                                                                    // 1518
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                               // 1519
  return offset + 8                                                                                                    // 1520
}                                                                                                                      // 1521
                                                                                                                       // 1522
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                                    // 1523
  return writeDouble(this, value, offset, true, noAssert)                                                              // 1524
}                                                                                                                      // 1525
                                                                                                                       // 1526
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                                    // 1527
  return writeDouble(this, value, offset, false, noAssert)                                                             // 1528
}                                                                                                                      // 1529
                                                                                                                       // 1530
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                           // 1531
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                              // 1532
  if (!start) start = 0                                                                                                // 1533
  if (!end && end !== 0) end = this.length                                                                             // 1534
  if (targetStart >= target.length) targetStart = target.length                                                        // 1535
  if (!targetStart) targetStart = 0                                                                                    // 1536
  if (end > 0 && end < start) end = start                                                                              // 1537
                                                                                                                       // 1538
  // Copy 0 bytes; we're done                                                                                          // 1539
  if (end === start) return 0                                                                                          // 1540
  if (target.length === 0 || this.length === 0) return 0                                                               // 1541
                                                                                                                       // 1542
  // Fatal error conditions                                                                                            // 1543
  if (targetStart < 0) {                                                                                               // 1544
    throw new RangeError('targetStart out of bounds')                                                                  // 1545
  }                                                                                                                    // 1546
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                             // 1547
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                         // 1548
                                                                                                                       // 1549
  // Are we oob?                                                                                                       // 1550
  if (end > this.length) end = this.length                                                                             // 1551
  if (target.length - targetStart < end - start) {                                                                     // 1552
    end = target.length - targetStart + start                                                                          // 1553
  }                                                                                                                    // 1554
                                                                                                                       // 1555
  var len = end - start                                                                                                // 1556
  var i                                                                                                                // 1557
                                                                                                                       // 1558
  if (this === target && start < targetStart && targetStart < end) {                                                   // 1559
    // descending copy from end                                                                                        // 1560
    for (i = len - 1; i >= 0; --i) {                                                                                   // 1561
      target[i + targetStart] = this[i + start]                                                                        // 1562
    }                                                                                                                  // 1563
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                              // 1564
    // ascending copy from start                                                                                       // 1565
    for (i = 0; i < len; ++i) {                                                                                        // 1566
      target[i + targetStart] = this[i + start]                                                                        // 1567
    }                                                                                                                  // 1568
  } else {                                                                                                             // 1569
    Uint8Array.prototype.set.call(                                                                                     // 1570
      target,                                                                                                          // 1571
      this.subarray(start, start + len),                                                                               // 1572
      targetStart                                                                                                      // 1573
    )                                                                                                                  // 1574
  }                                                                                                                    // 1575
                                                                                                                       // 1576
  return len                                                                                                           // 1577
}                                                                                                                      // 1578
                                                                                                                       // 1579
// Usage:                                                                                                              // 1580
//    buffer.fill(number[, offset[, end]])                                                                             // 1581
//    buffer.fill(buffer[, offset[, end]])                                                                             // 1582
//    buffer.fill(string[, offset[, end]][, encoding])                                                                 // 1583
Buffer.prototype.fill = function fill (val, start, end, encoding) {                                                    // 1584
  // Handle string cases:                                                                                              // 1585
  if (typeof val === 'string') {                                                                                       // 1586
    if (typeof start === 'string') {                                                                                   // 1587
      encoding = start                                                                                                 // 1588
      start = 0                                                                                                        // 1589
      end = this.length                                                                                                // 1590
    } else if (typeof end === 'string') {                                                                              // 1591
      encoding = end                                                                                                   // 1592
      end = this.length                                                                                                // 1593
    }                                                                                                                  // 1594
    if (val.length === 1) {                                                                                            // 1595
      var code = val.charCodeAt(0)                                                                                     // 1596
      if (code < 256) {                                                                                                // 1597
        val = code                                                                                                     // 1598
      }                                                                                                                // 1599
    }                                                                                                                  // 1600
    if (encoding !== undefined && typeof encoding !== 'string') {                                                      // 1601
      throw new TypeError('encoding must be a string')                                                                 // 1602
    }                                                                                                                  // 1603
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {                                                // 1604
      throw new TypeError('Unknown encoding: ' + encoding)                                                             // 1605
    }                                                                                                                  // 1606
  } else if (typeof val === 'number') {                                                                                // 1607
    val = val & 255                                                                                                    // 1608
  }                                                                                                                    // 1609
                                                                                                                       // 1610
  // Invalid ranges are not set to a default, so can range check early.                                                // 1611
  if (start < 0 || this.length < start || this.length < end) {                                                         // 1612
    throw new RangeError('Out of range index')                                                                         // 1613
  }                                                                                                                    // 1614
                                                                                                                       // 1615
  if (end <= start) {                                                                                                  // 1616
    return this                                                                                                        // 1617
  }                                                                                                                    // 1618
                                                                                                                       // 1619
  start = start >>> 0                                                                                                  // 1620
  end = end === undefined ? this.length : end >>> 0                                                                    // 1621
                                                                                                                       // 1622
  if (!val) val = 0                                                                                                    // 1623
                                                                                                                       // 1624
  var i                                                                                                                // 1625
  if (typeof val === 'number') {                                                                                       // 1626
    for (i = start; i < end; ++i) {                                                                                    // 1627
      this[i] = val                                                                                                    // 1628
    }                                                                                                                  // 1629
  } else {                                                                                                             // 1630
    var bytes = Buffer.isBuffer(val)                                                                                   // 1631
      ? val                                                                                                            // 1632
      : utf8ToBytes(new Buffer(val, encoding).toString())                                                              // 1633
    var len = bytes.length                                                                                             // 1634
    for (i = 0; i < end - start; ++i) {                                                                                // 1635
      this[i + start] = bytes[i % len]                                                                                 // 1636
    }                                                                                                                  // 1637
  }                                                                                                                    // 1638
                                                                                                                       // 1639
  return this                                                                                                          // 1640
}                                                                                                                      // 1641
                                                                                                                       // 1642
// HELPER FUNCTIONS                                                                                                    // 1643
// ================                                                                                                    // 1644
                                                                                                                       // 1645
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g                                                                           // 1646
                                                                                                                       // 1647
function base64clean (str) {                                                                                           // 1648
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                             // 1649
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                                 // 1650
  // Node converts strings with length < 2 to ''                                                                       // 1651
  if (str.length < 2) return ''                                                                                        // 1652
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                              // 1653
  while (str.length % 4 !== 0) {                                                                                       // 1654
    str = str + '='                                                                                                    // 1655
  }                                                                                                                    // 1656
  return str                                                                                                           // 1657
}                                                                                                                      // 1658
                                                                                                                       // 1659
function stringtrim (str) {                                                                                            // 1660
  if (str.trim) return str.trim()                                                                                      // 1661
  return str.replace(/^\s+|\s+$/g, '')                                                                                 // 1662
}                                                                                                                      // 1663
                                                                                                                       // 1664
function toHex (n) {                                                                                                   // 1665
  if (n < 16) return '0' + n.toString(16)                                                                              // 1666
  return n.toString(16)                                                                                                // 1667
}                                                                                                                      // 1668
                                                                                                                       // 1669
function utf8ToBytes (string, units) {                                                                                 // 1670
  units = units || Infinity                                                                                            // 1671
  var codePoint                                                                                                        // 1672
  var length = string.length                                                                                           // 1673
  var leadSurrogate = null                                                                                             // 1674
  var bytes = []                                                                                                       // 1675
                                                                                                                       // 1676
  for (var i = 0; i < length; ++i) {                                                                                   // 1677
    codePoint = string.charCodeAt(i)                                                                                   // 1678
                                                                                                                       // 1679
    // is surrogate component                                                                                          // 1680
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                                    // 1681
      // last char was a lead                                                                                          // 1682
      if (!leadSurrogate) {                                                                                            // 1683
        // no lead yet                                                                                                 // 1684
        if (codePoint > 0xDBFF) {                                                                                      // 1685
          // unexpected trail                                                                                          // 1686
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1687
          continue                                                                                                     // 1688
        } else if (i + 1 === length) {                                                                                 // 1689
          // unpaired lead                                                                                             // 1690
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                          // 1691
          continue                                                                                                     // 1692
        }                                                                                                              // 1693
                                                                                                                       // 1694
        // valid lead                                                                                                  // 1695
        leadSurrogate = codePoint                                                                                      // 1696
                                                                                                                       // 1697
        continue                                                                                                       // 1698
      }                                                                                                                // 1699
                                                                                                                       // 1700
      // 2 leads in a row                                                                                              // 1701
      if (codePoint < 0xDC00) {                                                                                        // 1702
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                            // 1703
        leadSurrogate = codePoint                                                                                      // 1704
        continue                                                                                                       // 1705
      }                                                                                                                // 1706
                                                                                                                       // 1707
      // valid surrogate pair                                                                                          // 1708
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                        // 1709
    } else if (leadSurrogate) {                                                                                        // 1710
      // valid bmp char, but last char was a lead                                                                      // 1711
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                              // 1712
    }                                                                                                                  // 1713
                                                                                                                       // 1714
    leadSurrogate = null                                                                                               // 1715
                                                                                                                       // 1716
    // encode utf8                                                                                                     // 1717
    if (codePoint < 0x80) {                                                                                            // 1718
      if ((units -= 1) < 0) break                                                                                      // 1719
      bytes.push(codePoint)                                                                                            // 1720
    } else if (codePoint < 0x800) {                                                                                    // 1721
      if ((units -= 2) < 0) break                                                                                      // 1722
      bytes.push(                                                                                                      // 1723
        codePoint >> 0x6 | 0xC0,                                                                                       // 1724
        codePoint & 0x3F | 0x80                                                                                        // 1725
      )                                                                                                                // 1726
    } else if (codePoint < 0x10000) {                                                                                  // 1727
      if ((units -= 3) < 0) break                                                                                      // 1728
      bytes.push(                                                                                                      // 1729
        codePoint >> 0xC | 0xE0,                                                                                       // 1730
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1731
        codePoint & 0x3F | 0x80                                                                                        // 1732
      )                                                                                                                // 1733
    } else if (codePoint < 0x110000) {                                                                                 // 1734
      if ((units -= 4) < 0) break                                                                                      // 1735
      bytes.push(                                                                                                      // 1736
        codePoint >> 0x12 | 0xF0,                                                                                      // 1737
        codePoint >> 0xC & 0x3F | 0x80,                                                                                // 1738
        codePoint >> 0x6 & 0x3F | 0x80,                                                                                // 1739
        codePoint & 0x3F | 0x80                                                                                        // 1740
      )                                                                                                                // 1741
    } else {                                                                                                           // 1742
      throw new Error('Invalid code point')                                                                            // 1743
    }                                                                                                                  // 1744
  }                                                                                                                    // 1745
                                                                                                                       // 1746
  return bytes                                                                                                         // 1747
}                                                                                                                      // 1748
                                                                                                                       // 1749
function asciiToBytes (str) {                                                                                          // 1750
  var byteArray = []                                                                                                   // 1751
  for (var i = 0; i < str.length; ++i) {                                                                               // 1752
    // Node's code seems to be doing this and not & 0x7F..                                                             // 1753
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                           // 1754
  }                                                                                                                    // 1755
  return byteArray                                                                                                     // 1756
}                                                                                                                      // 1757
                                                                                                                       // 1758
function utf16leToBytes (str, units) {                                                                                 // 1759
  var c, hi, lo                                                                                                        // 1760
  var byteArray = []                                                                                                   // 1761
  for (var i = 0; i < str.length; ++i) {                                                                               // 1762
    if ((units -= 2) < 0) break                                                                                        // 1763
                                                                                                                       // 1764
    c = str.charCodeAt(i)                                                                                              // 1765
    hi = c >> 8                                                                                                        // 1766
    lo = c % 256                                                                                                       // 1767
    byteArray.push(lo)                                                                                                 // 1768
    byteArray.push(hi)                                                                                                 // 1769
  }                                                                                                                    // 1770
                                                                                                                       // 1771
  return byteArray                                                                                                     // 1772
}                                                                                                                      // 1773
                                                                                                                       // 1774
function base64ToBytes (str) {                                                                                         // 1775
  return base64.toByteArray(base64clean(str))                                                                          // 1776
}                                                                                                                      // 1777
                                                                                                                       // 1778
function blitBuffer (src, dst, offset, length) {                                                                       // 1779
  for (var i = 0; i < length; ++i) {                                                                                   // 1780
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                         // 1781
    dst[i + offset] = src[i]                                                                                           // 1782
  }                                                                                                                    // 1783
  return i                                                                                                             // 1784
}                                                                                                                      // 1785
                                                                                                                       // 1786
function isnan (val) {                                                                                                 // 1787
  return val !== val // eslint-disable-line no-self-compare                                                            // 1788
}                                                                                                                      // 1789
                                                                                                                       // 1790
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"base64-js":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/package.json                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "base64-js";                                                                                            // 1
exports.version = "1.2.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/base64-js/index.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict'                                                                                                           // 1
                                                                                                                       // 2
exports.byteLength = byteLength                                                                                        // 3
exports.toByteArray = toByteArray                                                                                      // 4
exports.fromByteArray = fromByteArray                                                                                  // 5
                                                                                                                       // 6
var lookup = []                                                                                                        // 7
var revLookup = []                                                                                                     // 8
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                                       // 9
                                                                                                                       // 10
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                          // 11
for (var i = 0, len = code.length; i < len; ++i) {                                                                     // 12
  lookup[i] = code[i]                                                                                                  // 13
  revLookup[code.charCodeAt(i)] = i                                                                                    // 14
}                                                                                                                      // 15
                                                                                                                       // 16
revLookup['-'.charCodeAt(0)] = 62                                                                                      // 17
revLookup['_'.charCodeAt(0)] = 63                                                                                      // 18
                                                                                                                       // 19
function placeHoldersCount (b64) {                                                                                     // 20
  var len = b64.length                                                                                                 // 21
  if (len % 4 > 0) {                                                                                                   // 22
    throw new Error('Invalid string. Length must be a multiple of 4')                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       // 25
  // the number of equal signs (place holders)                                                                         // 26
  // if there are two placeholders, than the two characters before it                                                  // 27
  // represent one byte                                                                                                // 28
  // if there is only one, then the three characters before it represent 2 bytes                                       // 29
  // this is just a cheap hack to not do indexOf twice                                                                 // 30
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                                       // 31
}                                                                                                                      // 32
                                                                                                                       // 33
function byteLength (b64) {                                                                                            // 34
  // base64 is 4/3 + up to two characters of the original data                                                         // 35
  return b64.length * 3 / 4 - placeHoldersCount(b64)                                                                   // 36
}                                                                                                                      // 37
                                                                                                                       // 38
function toByteArray (b64) {                                                                                           // 39
  var i, j, l, tmp, placeHolders, arr                                                                                  // 40
  var len = b64.length                                                                                                 // 41
  placeHolders = placeHoldersCount(b64)                                                                                // 42
                                                                                                                       // 43
  arr = new Arr(len * 3 / 4 - placeHolders)                                                                            // 44
                                                                                                                       // 45
  // if there are placeholders, only get up to the last complete 4 chars                                               // 46
  l = placeHolders > 0 ? len - 4 : len                                                                                 // 47
                                                                                                                       // 48
  var L = 0                                                                                                            // 49
                                                                                                                       // 50
  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                          // 51
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF                                                                                      // 53
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 54
    arr[L++] = tmp & 0xFF                                                                                              // 55
  }                                                                                                                    // 56
                                                                                                                       // 57
  if (placeHolders === 2) {                                                                                            // 58
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                                // 59
    arr[L++] = tmp & 0xFF                                                                                              // 60
  } else if (placeHolders === 1) {                                                                                     // 61
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF                                                                                       // 63
    arr[L++] = tmp & 0xFF                                                                                              // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  return arr                                                                                                           // 67
}                                                                                                                      // 68
                                                                                                                       // 69
function tripletToBase64 (num) {                                                                                       // 70
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]            // 71
}                                                                                                                      // 72
                                                                                                                       // 73
function encodeChunk (uint8, start, end) {                                                                             // 74
  var tmp                                                                                                              // 75
  var output = []                                                                                                      // 76
  for (var i = start; i < end; i += 3) {                                                                               // 77
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                                      // 78
    output.push(tripletToBase64(tmp))                                                                                  // 79
  }                                                                                                                    // 80
  return output.join('')                                                                                               // 81
}                                                                                                                      // 82
                                                                                                                       // 83
function fromByteArray (uint8) {                                                                                       // 84
  var tmp                                                                                                              // 85
  var len = uint8.length                                                                                               // 86
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                                      // 87
  var output = ''                                                                                                      // 88
  var parts = []                                                                                                       // 89
  var maxChunkLength = 16383 // must be multiple of 3                                                                  // 90
                                                                                                                       // 91
  // go through the array every three bytes, we'll deal with trailing stuff later                                      // 92
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                            // 93
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))                       // 94
  }                                                                                                                    // 95
                                                                                                                       // 96
  // pad the end with zeros, but make sure to not forget the extra bytes                                               // 97
  if (extraBytes === 1) {                                                                                              // 98
    tmp = uint8[len - 1]                                                                                               // 99
    output += lookup[tmp >> 2]                                                                                         // 100
    output += lookup[(tmp << 4) & 0x3F]                                                                                // 101
    output += '=='                                                                                                     // 102
  } else if (extraBytes === 2) {                                                                                       // 103
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                                     // 104
    output += lookup[tmp >> 10]                                                                                        // 105
    output += lookup[(tmp >> 4) & 0x3F]                                                                                // 106
    output += lookup[(tmp << 2) & 0x3F]                                                                                // 107
    output += '='                                                                                                      // 108
  }                                                                                                                    // 109
                                                                                                                       // 110
  parts.push(output)                                                                                                   // 111
                                                                                                                       // 112
  return parts.join('')                                                                                                // 113
}                                                                                                                      // 114
                                                                                                                       // 115
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"ieee754":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "ieee754";                                                                                              // 1
exports.version = "1.1.8";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/ieee754/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                         // 1
  var e, m                                                                                                             // 2
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 3
  var eMax = (1 << eLen) - 1                                                                                           // 4
  var eBias = eMax >> 1                                                                                                // 5
  var nBits = -7                                                                                                       // 6
  var i = isLE ? (nBytes - 1) : 0                                                                                      // 7
  var d = isLE ? -1 : 1                                                                                                // 8
  var s = buffer[offset + i]                                                                                           // 9
                                                                                                                       // 10
  i += d                                                                                                               // 11
                                                                                                                       // 12
  e = s & ((1 << (-nBits)) - 1)                                                                                        // 13
  s >>= (-nBits)                                                                                                       // 14
  nBits += eLen                                                                                                        // 15
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 16
                                                                                                                       // 17
  m = e & ((1 << (-nBits)) - 1)                                                                                        // 18
  e >>= (-nBits)                                                                                                       // 19
  nBits += mLen                                                                                                        // 20
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                           // 21
                                                                                                                       // 22
  if (e === 0) {                                                                                                       // 23
    e = 1 - eBias                                                                                                      // 24
  } else if (e === eMax) {                                                                                             // 25
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                         // 26
  } else {                                                                                                             // 27
    m = m + Math.pow(2, mLen)                                                                                          // 28
    e = e - eBias                                                                                                      // 29
  }                                                                                                                    // 30
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                                      // 31
}                                                                                                                      // 32
                                                                                                                       // 33
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                                 // 34
  var e, m, c                                                                                                          // 35
  var eLen = nBytes * 8 - mLen - 1                                                                                     // 36
  var eMax = (1 << eLen) - 1                                                                                           // 37
  var eBias = eMax >> 1                                                                                                // 38
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                                     // 39
  var i = isLE ? 0 : (nBytes - 1)                                                                                      // 40
  var d = isLE ? 1 : -1                                                                                                // 41
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                          // 42
                                                                                                                       // 43
  value = Math.abs(value)                                                                                              // 44
                                                                                                                       // 45
  if (isNaN(value) || value === Infinity) {                                                                            // 46
    m = isNaN(value) ? 1 : 0                                                                                           // 47
    e = eMax                                                                                                           // 48
  } else {                                                                                                             // 49
    e = Math.floor(Math.log(value) / Math.LN2)                                                                         // 50
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                           // 51
      e--                                                                                                              // 52
      c *= 2                                                                                                           // 53
    }                                                                                                                  // 54
    if (e + eBias >= 1) {                                                                                              // 55
      value += rt / c                                                                                                  // 56
    } else {                                                                                                           // 57
      value += rt * Math.pow(2, 1 - eBias)                                                                             // 58
    }                                                                                                                  // 59
    if (value * c >= 2) {                                                                                              // 60
      e++                                                                                                              // 61
      c /= 2                                                                                                           // 62
    }                                                                                                                  // 63
                                                                                                                       // 64
    if (e + eBias >= eMax) {                                                                                           // 65
      m = 0                                                                                                            // 66
      e = eMax                                                                                                         // 67
    } else if (e + eBias >= 1) {                                                                                       // 68
      m = (value * c - 1) * Math.pow(2, mLen)                                                                          // 69
      e = e + eBias                                                                                                    // 70
    } else {                                                                                                           // 71
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                           // 72
      e = 0                                                                                                            // 73
    }                                                                                                                  // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                                     // 77
                                                                                                                       // 78
  e = (e << mLen) | m                                                                                                  // 79
  eLen += mLen                                                                                                         // 80
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                                      // 81
                                                                                                                       // 82
  buffer[offset + i - d] |= s * 128                                                                                    // 83
}                                                                                                                      // 84
                                                                                                                       // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"isarray":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/package.json                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "isarray";                                                                                              // 1
exports.version = "1.0.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/isarray/index.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = Array.isArray || function (arr) {                                                                     // 3
  return toString.call(arr) == '[object Array]';                                                                       // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"process":{"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// shim for using process in browser                                                                                   // 1
var process = module.exports = {};                                                                                     // 2
                                                                                                                       // 3
// cached from whatever global is present so that test runners that stub it                                            // 4
// don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
// wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
// function because try/catches deoptimize in certain engines.                                                         // 7
                                                                                                                       // 8
var cachedSetTimeout;                                                                                                  // 9
var cachedClearTimeout;                                                                                                // 10
                                                                                                                       // 11
function defaultSetTimout() {                                                                                          // 12
    throw new Error('setTimeout has not been defined');                                                                // 13
}                                                                                                                      // 14
function defaultClearTimeout () {                                                                                      // 15
    throw new Error('clearTimeout has not been defined');                                                              // 16
}                                                                                                                      // 17
(function () {                                                                                                         // 18
    try {                                                                                                              // 19
        if (typeof setTimeout === 'function') {                                                                        // 20
            cachedSetTimeout = setTimeout;                                                                             // 21
        } else {                                                                                                       // 22
            cachedSetTimeout = defaultSetTimout;                                                                       // 23
        }                                                                                                              // 24
    } catch (e) {                                                                                                      // 25
        cachedSetTimeout = defaultSetTimout;                                                                           // 26
    }                                                                                                                  // 27
    try {                                                                                                              // 28
        if (typeof clearTimeout === 'function') {                                                                      // 29
            cachedClearTimeout = clearTimeout;                                                                         // 30
        } else {                                                                                                       // 31
            cachedClearTimeout = defaultClearTimeout;                                                                  // 32
        }                                                                                                              // 33
    } catch (e) {                                                                                                      // 34
        cachedClearTimeout = defaultClearTimeout;                                                                      // 35
    }                                                                                                                  // 36
} ())                                                                                                                  // 37
function runTimeout(fun) {                                                                                             // 38
    if (cachedSetTimeout === setTimeout) {                                                                             // 39
        //normal enviroments in sane situations                                                                        // 40
        return setTimeout(fun, 0);                                                                                     // 41
    }                                                                                                                  // 42
    // if setTimeout wasn't available but was latter defined                                                           // 43
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {                                  // 44
        cachedSetTimeout = setTimeout;                                                                                 // 45
        return setTimeout(fun, 0);                                                                                     // 46
    }                                                                                                                  // 47
    try {                                                                                                              // 48
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
        return cachedSetTimeout(fun, 0);                                                                               // 50
    } catch(e){                                                                                                        // 51
        try {                                                                                                          // 52
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);                                                                // 54
        } catch(e){                                                                                                    // 55
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);                                                                // 57
        }                                                                                                              // 58
    }                                                                                                                  // 59
                                                                                                                       // 60
                                                                                                                       // 61
}                                                                                                                      // 62
function runClearTimeout(marker) {                                                                                     // 63
    if (cachedClearTimeout === clearTimeout) {                                                                         // 64
        //normal enviroments in sane situations                                                                        // 65
        return clearTimeout(marker);                                                                                   // 66
    }                                                                                                                  // 67
    // if clearTimeout wasn't available but was latter defined                                                         // 68
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {                         // 69
        cachedClearTimeout = clearTimeout;                                                                             // 70
        return clearTimeout(marker);                                                                                   // 71
    }                                                                                                                  // 72
    try {                                                                                                              // 73
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
        return cachedClearTimeout(marker);                                                                             // 75
    } catch (e){                                                                                                       // 76
        try {                                                                                                          // 77
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);                                                              // 79
        } catch (e){                                                                                                   // 80
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
            return cachedClearTimeout.call(this, marker);                                                              // 83
        }                                                                                                              // 84
    }                                                                                                                  // 85
                                                                                                                       // 86
                                                                                                                       // 87
                                                                                                                       // 88
}                                                                                                                      // 89
var queue = [];                                                                                                        // 90
var draining = false;                                                                                                  // 91
var currentQueue;                                                                                                      // 92
var queueIndex = -1;                                                                                                   // 93
                                                                                                                       // 94
function cleanUpNextTick() {                                                                                           // 95
    if (!draining || !currentQueue) {                                                                                  // 96
        return;                                                                                                        // 97
    }                                                                                                                  // 98
    draining = false;                                                                                                  // 99
    if (currentQueue.length) {                                                                                         // 100
        queue = currentQueue.concat(queue);                                                                            // 101
    } else {                                                                                                           // 102
        queueIndex = -1;                                                                                               // 103
    }                                                                                                                  // 104
    if (queue.length) {                                                                                                // 105
        drainQueue();                                                                                                  // 106
    }                                                                                                                  // 107
}                                                                                                                      // 108
                                                                                                                       // 109
function drainQueue() {                                                                                                // 110
    if (draining) {                                                                                                    // 111
        return;                                                                                                        // 112
    }                                                                                                                  // 113
    var timeout = runTimeout(cleanUpNextTick);                                                                         // 114
    draining = true;                                                                                                   // 115
                                                                                                                       // 116
    var len = queue.length;                                                                                            // 117
    while(len) {                                                                                                       // 118
        currentQueue = queue;                                                                                          // 119
        queue = [];                                                                                                    // 120
        while (++queueIndex < len) {                                                                                   // 121
            if (currentQueue) {                                                                                        // 122
                currentQueue[queueIndex].run();                                                                        // 123
            }                                                                                                          // 124
        }                                                                                                              // 125
        queueIndex = -1;                                                                                               // 126
        len = queue.length;                                                                                            // 127
    }                                                                                                                  // 128
    currentQueue = null;                                                                                               // 129
    draining = false;                                                                                                  // 130
    runClearTimeout(timeout);                                                                                          // 131
}                                                                                                                      // 132
                                                                                                                       // 133
process.nextTick = function (fun) {                                                                                    // 134
    var args = new Array(arguments.length - 1);                                                                        // 135
    if (arguments.length > 1) {                                                                                        // 136
        for (var i = 1; i < arguments.length; i++) {                                                                   // 137
            args[i - 1] = arguments[i];                                                                                // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
    queue.push(new Item(fun, args));                                                                                   // 141
    if (queue.length === 1 && !draining) {                                                                             // 142
        runTimeout(drainQueue);                                                                                        // 143
    }                                                                                                                  // 144
};                                                                                                                     // 145
                                                                                                                       // 146
// v8 likes predictible objects                                                                                        // 147
function Item(fun, array) {                                                                                            // 148
    this.fun = fun;                                                                                                    // 149
    this.array = array;                                                                                                // 150
}                                                                                                                      // 151
Item.prototype.run = function () {                                                                                     // 152
    this.fun.apply(null, this.array);                                                                                  // 153
};                                                                                                                     // 154
process.title = 'browser';                                                                                             // 155
process.browser = true;                                                                                                // 156
process.env = {};                                                                                                      // 157
process.argv = [];                                                                                                     // 158
process.version = ''; // empty string to avoid regexp issues                                                           // 159
process.versions = {};                                                                                                 // 160
                                                                                                                       // 161
function noop() {}                                                                                                     // 162
                                                                                                                       // 163
process.on = noop;                                                                                                     // 164
process.addListener = noop;                                                                                            // 165
process.once = noop;                                                                                                   // 166
process.off = noop;                                                                                                    // 167
process.removeListener = noop;                                                                                         // 168
process.removeAllListeners = noop;                                                                                     // 169
process.emit = noop;                                                                                                   // 170
                                                                                                                       // 171
process.binding = function (name) {                                                                                    // 172
    throw new Error('process.binding is not supported');                                                               // 173
};                                                                                                                     // 174
                                                                                                                       // 175
process.cwd = function () { return '/' };                                                                              // 176
process.chdir = function (dir) {                                                                                       // 177
    throw new Error('process.chdir is not supported');                                                                 // 178
};                                                                                                                     // 179
process.umask = function() { return 0; };                                                                              // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"domain-browser":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "domain-browser";                                                                                       // 1
exports.version = "1.1.7";                                                                                             // 2
exports.main = "./index.js";                                                                                           // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["events",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This file should be ES5 compatible                                                                                  // 1
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2
'use strict'                                                                                                           // 3
module.exports = (function () {                                                                                        // 4
	// Import Events                                                                                                      // 5
	var events = require('events')                                                                                        // 6
                                                                                                                       // 7
	// Export Domain                                                                                                      // 8
	var domain = {}                                                                                                       // 9
	domain.createDomain = domain.create = function () {                                                                   // 10
		var d = new events.EventEmitter()                                                                                    // 11
                                                                                                                       // 12
		function emitError (e) {                                                                                             // 13
			d.emit('error', e)                                                                                                  // 14
		}                                                                                                                    // 15
                                                                                                                       // 16
		d.add = function (emitter) {                                                                                         // 17
			emitter.on('error', emitError)                                                                                      // 18
		}                                                                                                                    // 19
		d.remove = function (emitter) {                                                                                      // 20
			emitter.removeListener('error', emitError)                                                                          // 21
		}                                                                                                                    // 22
		d.bind = function (fn) {                                                                                             // 23
			return function () {                                                                                                // 24
				var args = Array.prototype.slice.call(arguments)                                                                   // 25
				try {                                                                                                              // 26
					fn.apply(null, args)                                                                                              // 27
				}                                                                                                                  // 28
				catch (err) {                                                                                                      // 29
					emitError(err)                                                                                                    // 30
				}                                                                                                                  // 31
			}                                                                                                                   // 32
		}                                                                                                                    // 33
		d.intercept = function (fn) {                                                                                        // 34
			return function (err) {                                                                                             // 35
				if ( err ) {                                                                                                       // 36
					emitError(err)                                                                                                    // 37
				}                                                                                                                  // 38
				else {                                                                                                             // 39
					var args = Array.prototype.slice.call(arguments, 1)                                                               // 40
					try {                                                                                                             // 41
						fn.apply(null, args)                                                                                             // 42
					}                                                                                                                 // 43
					catch (err) {                                                                                                     // 44
						emitError(err)                                                                                                   // 45
					}                                                                                                                 // 46
				}                                                                                                                  // 47
			}                                                                                                                   // 48
		}                                                                                                                    // 49
		d.run = function (fn) {                                                                                              // 50
			try {                                                                                                               // 51
				fn()                                                                                                               // 52
			}                                                                                                                   // 53
			catch (err) {                                                                                                       // 54
				emitError(err)                                                                                                     // 55
			}                                                                                                                   // 56
			return this                                                                                                         // 57
		}                                                                                                                    // 58
		d.dispose = function () {                                                                                            // 59
			this.removeAllListeners()                                                                                           // 60
			return this                                                                                                         // 61
		}                                                                                                                    // 62
		d.enter = d.exit = function () {                                                                                     // 63
			return this                                                                                                         // 64
		}                                                                                                                    // 65
		return d                                                                                                             // 66
	}                                                                                                                     // 67
	return domain                                                                                                         // 68
}).call(this)                                                                                                          // 69
                                                                                                                       // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"events":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "events";                                                                                               // 1
exports.version = "1.1.1";                                                                                             // 2
exports.main = "./events.js";                                                                                          // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
function EventEmitter() {                                                                                              // 22
  this._events = this._events || {};                                                                                   // 23
  this._maxListeners = this._maxListeners || undefined;                                                                // 24
}                                                                                                                      // 25
module.exports = EventEmitter;                                                                                         // 26
                                                                                                                       // 27
// Backwards-compat with node 0.10.x                                                                                   // 28
EventEmitter.EventEmitter = EventEmitter;                                                                              // 29
                                                                                                                       // 30
EventEmitter.prototype._events = undefined;                                                                            // 31
EventEmitter.prototype._maxListeners = undefined;                                                                      // 32
                                                                                                                       // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
// added to it. This is a useful default which helps finding memory leaks.                                             // 35
EventEmitter.defaultMaxListeners = 10;                                                                                 // 36
                                                                                                                       // 37
// Obviously not all Emitters should be limited to 10. This function allows                                            // 38
// that to be increased. Set to zero for unlimited.                                                                    // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41
    throw TypeError('n must be a positive number');                                                                    // 42
  this._maxListeners = n;                                                                                              // 43
  return this;                                                                                                         // 44
};                                                                                                                     // 45
                                                                                                                       // 46
EventEmitter.prototype.emit = function(type) {                                                                         // 47
  var er, handler, len, args, i, listeners;                                                                            // 48
                                                                                                                       // 49
  if (!this._events)                                                                                                   // 50
    this._events = {};                                                                                                 // 51
                                                                                                                       // 52
  // If there is no 'error' event listener then throw.                                                                 // 53
  if (type === 'error') {                                                                                              // 54
    if (!this._events.error ||                                                                                         // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56
      er = arguments[1];                                                                                               // 57
      if (er instanceof Error) {                                                                                       // 58
        throw er; // Unhandled 'error' event                                                                           // 59
      } else {                                                                                                         // 60
        // At least give some kind of context to the user                                                              // 61
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');                                      // 62
        err.context = er;                                                                                              // 63
        throw err;                                                                                                     // 64
      }                                                                                                                // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
                                                                                                                       // 68
  handler = this._events[type];                                                                                        // 69
                                                                                                                       // 70
  if (isUndefined(handler))                                                                                            // 71
    return false;                                                                                                      // 72
                                                                                                                       // 73
  if (isFunction(handler)) {                                                                                           // 74
    switch (arguments.length) {                                                                                        // 75
      // fast cases                                                                                                    // 76
      case 1:                                                                                                          // 77
        handler.call(this);                                                                                            // 78
        break;                                                                                                         // 79
      case 2:                                                                                                          // 80
        handler.call(this, arguments[1]);                                                                              // 81
        break;                                                                                                         // 82
      case 3:                                                                                                          // 83
        handler.call(this, arguments[1], arguments[2]);                                                                // 84
        break;                                                                                                         // 85
      // slower                                                                                                        // 86
      default:                                                                                                         // 87
        args = Array.prototype.slice.call(arguments, 1);                                                               // 88
        handler.apply(this, args);                                                                                     // 89
    }                                                                                                                  // 90
  } else if (isObject(handler)) {                                                                                      // 91
    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92
    listeners = handler.slice();                                                                                       // 93
    len = listeners.length;                                                                                            // 94
    for (i = 0; i < len; i++)                                                                                          // 95
      listeners[i].apply(this, args);                                                                                  // 96
  }                                                                                                                    // 97
                                                                                                                       // 98
  return true;                                                                                                         // 99
};                                                                                                                     // 100
                                                                                                                       // 101
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 102
  var m;                                                                                                               // 103
                                                                                                                       // 104
  if (!isFunction(listener))                                                                                           // 105
    throw TypeError('listener must be a function');                                                                    // 106
                                                                                                                       // 107
  if (!this._events)                                                                                                   // 108
    this._events = {};                                                                                                 // 109
                                                                                                                       // 110
  // To avoid recursion in the case that type === "newListener"! Before                                                // 111
  // adding it to the listeners, first emit "newListener".                                                             // 112
  if (this._events.newListener)                                                                                        // 113
    this.emit('newListener', type,                                                                                     // 114
              isFunction(listener.listener) ?                                                                          // 115
              listener.listener : listener);                                                                           // 116
                                                                                                                       // 117
  if (!this._events[type])                                                                                             // 118
    // Optimize the case of one listener. Don't need the extra array object.                                           // 119
    this._events[type] = listener;                                                                                     // 120
  else if (isObject(this._events[type]))                                                                               // 121
    // If we've already got an array, just append.                                                                     // 122
    this._events[type].push(listener);                                                                                 // 123
  else                                                                                                                 // 124
    // Adding the second element, need to change to array.                                                             // 125
    this._events[type] = [this._events[type], listener];                                                               // 126
                                                                                                                       // 127
  // Check for listener leak                                                                                           // 128
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129
    if (!isUndefined(this._maxListeners)) {                                                                            // 130
      m = this._maxListeners;                                                                                          // 131
    } else {                                                                                                           // 132
      m = EventEmitter.defaultMaxListeners;                                                                            // 133
    }                                                                                                                  // 134
                                                                                                                       // 135
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136
      this._events[type].warned = true;                                                                                // 137
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138
                    'leak detected. %d listeners added. ' +                                                            // 139
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140
                    this._events[type].length);                                                                        // 141
      if (typeof console.trace === 'function') {                                                                       // 142
        // not supported in IE 10                                                                                      // 143
        console.trace();                                                                                               // 144
      }                                                                                                                // 145
    }                                                                                                                  // 146
  }                                                                                                                    // 147
                                                                                                                       // 148
  return this;                                                                                                         // 149
};                                                                                                                     // 150
                                                                                                                       // 151
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152
                                                                                                                       // 153
EventEmitter.prototype.once = function(type, listener) {                                                               // 154
  if (!isFunction(listener))                                                                                           // 155
    throw TypeError('listener must be a function');                                                                    // 156
                                                                                                                       // 157
  var fired = false;                                                                                                   // 158
                                                                                                                       // 159
  function g() {                                                                                                       // 160
    this.removeListener(type, g);                                                                                      // 161
                                                                                                                       // 162
    if (!fired) {                                                                                                      // 163
      fired = true;                                                                                                    // 164
      listener.apply(this, arguments);                                                                                 // 165
    }                                                                                                                  // 166
  }                                                                                                                    // 167
                                                                                                                       // 168
  g.listener = listener;                                                                                               // 169
  this.on(type, g);                                                                                                    // 170
                                                                                                                       // 171
  return this;                                                                                                         // 172
};                                                                                                                     // 173
                                                                                                                       // 174
// emits a 'removeListener' event iff the listener was removed                                                         // 175
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176
  var list, position, length, i;                                                                                       // 177
                                                                                                                       // 178
  if (!isFunction(listener))                                                                                           // 179
    throw TypeError('listener must be a function');                                                                    // 180
                                                                                                                       // 181
  if (!this._events || !this._events[type])                                                                            // 182
    return this;                                                                                                       // 183
                                                                                                                       // 184
  list = this._events[type];                                                                                           // 185
  length = list.length;                                                                                                // 186
  position = -1;                                                                                                       // 187
                                                                                                                       // 188
  if (list === listener ||                                                                                             // 189
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190
    delete this._events[type];                                                                                         // 191
    if (this._events.removeListener)                                                                                   // 192
      this.emit('removeListener', type, listener);                                                                     // 193
                                                                                                                       // 194
  } else if (isObject(list)) {                                                                                         // 195
    for (i = length; i-- > 0;) {                                                                                       // 196
      if (list[i] === listener ||                                                                                      // 197
          (list[i].listener && list[i].listener === listener)) {                                                       // 198
        position = i;                                                                                                  // 199
        break;                                                                                                         // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
                                                                                                                       // 203
    if (position < 0)                                                                                                  // 204
      return this;                                                                                                     // 205
                                                                                                                       // 206
    if (list.length === 1) {                                                                                           // 207
      list.length = 0;                                                                                                 // 208
      delete this._events[type];                                                                                       // 209
    } else {                                                                                                           // 210
      list.splice(position, 1);                                                                                        // 211
    }                                                                                                                  // 212
                                                                                                                       // 213
    if (this._events.removeListener)                                                                                   // 214
      this.emit('removeListener', type, listener);                                                                     // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  return this;                                                                                                         // 218
};                                                                                                                     // 219
                                                                                                                       // 220
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221
  var key, listeners;                                                                                                  // 222
                                                                                                                       // 223
  if (!this._events)                                                                                                   // 224
    return this;                                                                                                       // 225
                                                                                                                       // 226
  // not listening for removeListener, no need to emit                                                                 // 227
  if (!this._events.removeListener) {                                                                                  // 228
    if (arguments.length === 0)                                                                                        // 229
      this._events = {};                                                                                               // 230
    else if (this._events[type])                                                                                       // 231
      delete this._events[type];                                                                                       // 232
    return this;                                                                                                       // 233
  }                                                                                                                    // 234
                                                                                                                       // 235
  // emit removeListener for all listeners on all events                                                               // 236
  if (arguments.length === 0) {                                                                                        // 237
    for (key in this._events) {                                                                                        // 238
      if (key === 'removeListener') continue;                                                                          // 239
      this.removeAllListeners(key);                                                                                    // 240
    }                                                                                                                  // 241
    this.removeAllListeners('removeListener');                                                                         // 242
    this._events = {};                                                                                                 // 243
    return this;                                                                                                       // 244
  }                                                                                                                    // 245
                                                                                                                       // 246
  listeners = this._events[type];                                                                                      // 247
                                                                                                                       // 248
  if (isFunction(listeners)) {                                                                                         // 249
    this.removeListener(type, listeners);                                                                              // 250
  } else if (listeners) {                                                                                              // 251
    // LIFO order                                                                                                      // 252
    while (listeners.length)                                                                                           // 253
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254
  }                                                                                                                    // 255
  delete this._events[type];                                                                                           // 256
                                                                                                                       // 257
  return this;                                                                                                         // 258
};                                                                                                                     // 259
                                                                                                                       // 260
EventEmitter.prototype.listeners = function(type) {                                                                    // 261
  var ret;                                                                                                             // 262
  if (!this._events || !this._events[type])                                                                            // 263
    ret = [];                                                                                                          // 264
  else if (isFunction(this._events[type]))                                                                             // 265
    ret = [this._events[type]];                                                                                        // 266
  else                                                                                                                 // 267
    ret = this._events[type].slice();                                                                                  // 268
  return ret;                                                                                                          // 269
};                                                                                                                     // 270
                                                                                                                       // 271
EventEmitter.prototype.listenerCount = function(type) {                                                                // 272
  if (this._events) {                                                                                                  // 273
    var evlistener = this._events[type];                                                                               // 274
                                                                                                                       // 275
    if (isFunction(evlistener))                                                                                        // 276
      return 1;                                                                                                        // 277
    else if (evlistener)                                                                                               // 278
      return evlistener.length;                                                                                        // 279
  }                                                                                                                    // 280
  return 0;                                                                                                            // 281
};                                                                                                                     // 282
                                                                                                                       // 283
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 284
  return emitter.listenerCount(type);                                                                                  // 285
};                                                                                                                     // 286
                                                                                                                       // 287
function isFunction(arg) {                                                                                             // 288
  return typeof arg === 'function';                                                                                    // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function isNumber(arg) {                                                                                               // 292
  return typeof arg === 'number';                                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function isObject(arg) {                                                                                               // 296
  return typeof arg === 'object' && arg !== null;                                                                      // 297
}                                                                                                                      // 298
                                                                                                                       // 299
function isUndefined(arg) {                                                                                            // 300
  return arg === void 0;                                                                                               // 301
}                                                                                                                      // 302
                                                                                                                       // 303
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"babel-runtime":{"regenerator":{"index.js":["regenerator-runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/regenerator/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("regenerator-runtime");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"helpers":{"typeof.js":["../core-js/symbol/iterator","../core-js/symbol",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/typeof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _iterator = require("../core-js/symbol/iterator");                                                                 // 5
                                                                                                                       // 6
var _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7
                                                                                                                       // 8
var _symbol = require("../core-js/symbol");                                                                            // 9
                                                                                                                       // 10
var _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11
                                                                                                                       // 12
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 14
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15
                                                                                                                       // 16
exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);                                                      // 18
} : function (obj) {                                                                                                   // 19
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"classCallCheck.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
exports.default = function (instance, Constructor) {                                                                   // 5
  if (!(instance instanceof Constructor)) {                                                                            // 6
    throw new TypeError("Cannot call a class as a function");                                                          // 7
  }                                                                                                                    // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"possibleConstructorReturn.js":["../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof2 = require("../helpers/typeof");                                                                           // 5
                                                                                                                       // 6
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = function (self, call) {                                                                              // 11
  if (!self) {                                                                                                         // 12
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                             // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"inherits.js":["../core-js/object/set-prototype-of","../core-js/object/create","../helpers/typeof",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/inherits.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _setPrototypeOf = require("../core-js/object/set-prototype-of");                                                   // 5
                                                                                                                       // 6
var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7
                                                                                                                       // 8
var _create = require("../core-js/object/create");                                                                     // 9
                                                                                                                       // 10
var _create2 = _interopRequireDefault(_create);                                                                        // 11
                                                                                                                       // 12
var _typeof2 = require("../helpers/typeof");                                                                           // 13
                                                                                                                       // 14
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15
                                                                                                                       // 16
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17
                                                                                                                       // 18
exports.default = function (subClass, superClass) {                                                                    // 19
  if (typeof superClass !== "function" && superClass !== null) {                                                       // 20
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }                                                                                                                    // 22
                                                                                                                       // 23
  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24
    constructor: {                                                                                                     // 25
      value: subClass,                                                                                                 // 26
      enumerable: false,                                                                                               // 27
      writable: true,                                                                                                  // 28
      configurable: true                                                                                               // 29
    }                                                                                                                  // 30
  });                                                                                                                  // 31
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};                                                                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"core-js":{"symbol":{"iterator.js":["core-js/library/fn/symbol/iterator",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"symbol.js":["core-js/library/fn/symbol",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"object":{"set-prototype-of.js":["core-js/library/fn/object/set-prototype-of",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["core-js/library/fn/object/create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}},"regenerator-runtime":{"package.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/package.json                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "regenerator-runtime";                                                                                  // 1
exports.version = "0.10.3";                                                                                            // 2
exports.main = "runtime-module.js";                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"runtime-module.js":["./runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime-module.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This method of obtaining a reference to the global object needs to be                                               // 1
// kept identical to the way it is obtained in runtime.js                                                              // 2
var g =                                                                                                                // 3
  typeof global === "object" ? global :                                                                                // 4
  typeof window === "object" ? window :                                                                                // 5
  typeof self === "object" ? self : this;                                                                              // 6
                                                                                                                       // 7
// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8
// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9
var hadRuntime = g.regeneratorRuntime &&                                                                               // 10
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;                                                    // 11
                                                                                                                       // 12
// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13
var oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 14
                                                                                                                       // 15
// Force reevalutation of runtime.js.                                                                                  // 16
g.regeneratorRuntime = undefined;                                                                                      // 17
                                                                                                                       // 18
module.exports = require("./runtime");                                                                                 // 19
                                                                                                                       // 20
if (hadRuntime) {                                                                                                      // 21
  // Restore the original runtime.                                                                                     // 22
  g.regeneratorRuntime = oldRuntime;                                                                                   // 23
} else {                                                                                                               // 24
  // Remove the global property added by runtime.js.                                                                   // 25
  try {                                                                                                                // 26
    delete g.regeneratorRuntime;                                                                                       // 27
  } catch(e) {                                                                                                         // 28
    g.regeneratorRuntime = undefined;                                                                                  // 29
  }                                                                                                                    // 30
}                                                                                                                      // 31
                                                                                                                       // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"runtime.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6
 * additional grant of patent rights can be found in the PATENTS file in                                               // 7
 * the same directory.                                                                                                 // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
!(function(global) {                                                                                                   // 11
  "use strict";                                                                                                        // 12
                                                                                                                       // 13
  var Op = Object.prototype;                                                                                           // 14
  var hasOwn = Op.hasOwnProperty;                                                                                      // 15
  var undefined; // More compressible than void 0.                                                                     // 16
  var $Symbol = typeof Symbol === "function" ? Symbol : {};                                                            // 17
  var iteratorSymbol = $Symbol.iterator || "@@iterator";                                                               // 18
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";                                                      // 19
                                                                                                                       // 20
  var inModule = typeof module === "object";                                                                           // 21
  var runtime = global.regeneratorRuntime;                                                                             // 22
  if (runtime) {                                                                                                       // 23
    if (inModule) {                                                                                                    // 24
      // If regeneratorRuntime is defined globally and we're in a module,                                              // 25
      // make the exports object identical to regeneratorRuntime.                                                      // 26
      module.exports = runtime;                                                                                        // 27
    }                                                                                                                  // 28
    // Don't bother evaluating the rest of this file if the runtime was                                                // 29
    // already defined globally.                                                                                       // 30
    return;                                                                                                            // 31
  }                                                                                                                    // 32
                                                                                                                       // 33
  // Define the runtime globally (as expected by generated code) as either                                             // 34
  // module.exports (if we're in a module) or a new, empty object.                                                     // 35
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 36
                                                                                                                       // 37
  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 38
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 39
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 40
    var generator = Object.create(protoGenerator.prototype);                                                           // 41
    var context = new Context(tryLocsList || []);                                                                      // 42
                                                                                                                       // 43
    // The ._invoke method unifies the implementations of the .next,                                                   // 44
    // .throw, and .return methods.                                                                                    // 45
    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 46
                                                                                                                       // 47
    return generator;                                                                                                  // 48
  }                                                                                                                    // 49
  runtime.wrap = wrap;                                                                                                 // 50
                                                                                                                       // 51
  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 52
  // record like context.tryEntries[i].completion. This interface could                                                // 53
  // have been (and was previously) designed to take a closure to be                                                   // 54
  // invoked without arguments, but in all the cases we care about we                                                  // 55
  // already have an existing method we want to call, so there's no need                                               // 56
  // to create a new function object. We can even get away with assuming                                               // 57
  // the method takes exactly one argument, since that happens to be true                                              // 58
  // in every case, so we don't have to touch the arguments object. The                                                // 59
  // only additional allocation required is the completion record, which                                               // 60
  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 61
  function tryCatch(fn, obj, arg) {                                                                                    // 62
    try {                                                                                                              // 63
      return { type: "normal", arg: fn.call(obj, arg) };                                                               // 64
    } catch (err) {                                                                                                    // 65
      return { type: "throw", arg: err };                                                                              // 66
    }                                                                                                                  // 67
  }                                                                                                                    // 68
                                                                                                                       // 69
  var GenStateSuspendedStart = "suspendedStart";                                                                       // 70
  var GenStateSuspendedYield = "suspendedYield";                                                                       // 71
  var GenStateExecuting = "executing";                                                                                 // 72
  var GenStateCompleted = "completed";                                                                                 // 73
                                                                                                                       // 74
  // Returning this object from the innerFn has the same effect as                                                     // 75
  // breaking out of the dispatch switch statement.                                                                    // 76
  var ContinueSentinel = {};                                                                                           // 77
                                                                                                                       // 78
  // Dummy constructor functions that we use as the .constructor and                                                   // 79
  // .constructor.prototype properties for functions that return Generator                                             // 80
  // objects. For full spec compliance, you may wish to configure your                                                 // 81
  // minifier not to mangle the names of these two functions.                                                          // 82
  function Generator() {}                                                                                              // 83
  function GeneratorFunction() {}                                                                                      // 84
  function GeneratorFunctionPrototype() {}                                                                             // 85
                                                                                                                       // 86
  // This is a polyfill for %IteratorPrototype% for environments that                                                  // 87
  // don't natively support it.                                                                                        // 88
  var IteratorPrototype = {};                                                                                          // 89
  IteratorPrototype[iteratorSymbol] = function () {                                                                    // 90
    return this;                                                                                                       // 91
  };                                                                                                                   // 92
                                                                                                                       // 93
  var getProto = Object.getPrototypeOf;                                                                                // 94
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));                                            // 95
  if (NativeIteratorPrototype &&                                                                                       // 96
      NativeIteratorPrototype !== Op &&                                                                                // 97
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {                                                          // 98
    // This environment has a native %IteratorPrototype%; use it instead                                               // 99
    // of the polyfill.                                                                                                // 100
    IteratorPrototype = NativeIteratorPrototype;                                                                       // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  var Gp = GeneratorFunctionPrototype.prototype =                                                                      // 104
    Generator.prototype = Object.create(IteratorPrototype);                                                            // 105
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 106
  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 107
  GeneratorFunctionPrototype[toStringTagSymbol] =                                                                      // 108
    GeneratorFunction.displayName = "GeneratorFunction";                                                               // 109
                                                                                                                       // 110
  // Helper for defining the .next, .throw, and .return methods of the                                                 // 111
  // Iterator interface in terms of a single ._invoke method.                                                          // 112
  function defineIteratorMethods(prototype) {                                                                          // 113
    ["next", "throw", "return"].forEach(function(method) {                                                             // 114
      prototype[method] = function(arg) {                                                                              // 115
        return this._invoke(method, arg);                                                                              // 116
      };                                                                                                               // 117
    });                                                                                                                // 118
  }                                                                                                                    // 119
                                                                                                                       // 120
  runtime.isGeneratorFunction = function(genFun) {                                                                     // 121
    var ctor = typeof genFun === "function" && genFun.constructor;                                                     // 122
    return ctor                                                                                                        // 123
      ? ctor === GeneratorFunction ||                                                                                  // 124
        // For the native GeneratorFunction constructor, the best we can                                               // 125
        // do is to check its .name property.                                                                          // 126
        (ctor.displayName || ctor.name) === "GeneratorFunction"                                                        // 127
      : false;                                                                                                         // 128
  };                                                                                                                   // 129
                                                                                                                       // 130
  runtime.mark = function(genFun) {                                                                                    // 131
    if (Object.setPrototypeOf) {                                                                                       // 132
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 133
    } else {                                                                                                           // 134
      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 135
      if (!(toStringTagSymbol in genFun)) {                                                                            // 136
        genFun[toStringTagSymbol] = "GeneratorFunction";                                                               // 137
      }                                                                                                                // 138
    }                                                                                                                  // 139
    genFun.prototype = Object.create(Gp);                                                                              // 140
    return genFun;                                                                                                     // 141
  };                                                                                                                   // 142
                                                                                                                       // 143
  // Within the body of any async function, `await x` is transformed to                                                // 144
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 145
  // `hasOwn.call(value, "__await")` to determine if the yielded value is                                              // 146
  // meant to be awaited.                                                                                              // 147
  runtime.awrap = function(arg) {                                                                                      // 148
    return { __await: arg };                                                                                           // 149
  };                                                                                                                   // 150
                                                                                                                       // 151
  function AsyncIterator(generator) {                                                                                  // 152
    function invoke(method, arg, resolve, reject) {                                                                    // 153
      var record = tryCatch(generator[method], generator, arg);                                                        // 154
      if (record.type === "throw") {                                                                                   // 155
        reject(record.arg);                                                                                            // 156
      } else {                                                                                                         // 157
        var result = record.arg;                                                                                       // 158
        var value = result.value;                                                                                      // 159
        if (value &&                                                                                                   // 160
            typeof value === "object" &&                                                                               // 161
            hasOwn.call(value, "__await")) {                                                                           // 162
          return Promise.resolve(value.__await).then(function(value) {                                                 // 163
            invoke("next", value, resolve, reject);                                                                    // 164
          }, function(err) {                                                                                           // 165
            invoke("throw", err, resolve, reject);                                                                     // 166
          });                                                                                                          // 167
        }                                                                                                              // 168
                                                                                                                       // 169
        return Promise.resolve(value).then(function(unwrapped) {                                                       // 170
          // When a yielded Promise is resolved, its final value becomes                                               // 171
          // the .value of the Promise<{value,done}> result for the                                                    // 172
          // current iteration. If the Promise is rejected, however, the                                               // 173
          // result for this iteration will be rejected with the same                                                  // 174
          // reason. Note that rejections of yielded Promises are not                                                  // 175
          // thrown back into the generator function, as is the case                                                   // 176
          // when an awaited Promise is rejected. This difference in                                                   // 177
          // behavior between yield and await is important, because it                                                 // 178
          // allows the consumer to decide what to do with the yielded                                                 // 179
          // rejection (swallow it and continue, manually .throw it back                                               // 180
          // into the generator, abandon iteration, whatever). With                                                    // 181
          // await, by contrast, there is no opportunity to examine the                                                // 182
          // rejection reason outside the generator function, so the                                                   // 183
          // only option is to throw it from the await expression, and                                                 // 184
          // let the generator function handle the exception.                                                          // 185
          result.value = unwrapped;                                                                                    // 186
          resolve(result);                                                                                             // 187
        }, reject);                                                                                                    // 188
      }                                                                                                                // 189
    }                                                                                                                  // 190
                                                                                                                       // 191
    if (typeof process === "object" && process.domain) {                                                               // 192
      invoke = process.domain.bind(invoke);                                                                            // 193
    }                                                                                                                  // 194
                                                                                                                       // 195
    var previousPromise;                                                                                               // 196
                                                                                                                       // 197
    function enqueue(method, arg) {                                                                                    // 198
      function callInvokeWithMethodAndArg() {                                                                          // 199
        return new Promise(function(resolve, reject) {                                                                 // 200
          invoke(method, arg, resolve, reject);                                                                        // 201
        });                                                                                                            // 202
      }                                                                                                                // 203
                                                                                                                       // 204
      return previousPromise =                                                                                         // 205
        // If enqueue has been called before, then we want to wait until                                               // 206
        // all previous Promises have been resolved before calling invoke,                                             // 207
        // so that results are always delivered in the correct order. If                                               // 208
        // enqueue has not been called before, then it is important to                                                 // 209
        // call invoke immediately, without waiting on a callback to fire,                                             // 210
        // so that the async generator function has the opportunity to do                                              // 211
        // any necessary setup in a predictable way. This predictability                                               // 212
        // is why the Promise constructor synchronously invokes its                                                    // 213
        // executor callback, and why async functions synchronously                                                    // 214
        // execute code before the first await. Since we implement simple                                              // 215
        // async functions in terms of async generators, it is especially                                              // 216
        // important to get this right, even though it requires care.                                                  // 217
        previousPromise ? previousPromise.then(                                                                        // 218
          callInvokeWithMethodAndArg,                                                                                  // 219
          // Avoid propagating failures to Promises returned by later                                                  // 220
          // invocations of the iterator.                                                                              // 221
          callInvokeWithMethodAndArg                                                                                   // 222
        ) : callInvokeWithMethodAndArg();                                                                              // 223
    }                                                                                                                  // 224
                                                                                                                       // 225
    // Define the unified helper method that is used to implement .next,                                               // 226
    // .throw, and .return (see defineIteratorMethods).                                                                // 227
    this._invoke = enqueue;                                                                                            // 228
  }                                                                                                                    // 229
                                                                                                                       // 230
  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 231
  runtime.AsyncIterator = AsyncIterator;                                                                               // 232
                                                                                                                       // 233
  // Note that simple async functions are implemented on top of                                                        // 234
  // AsyncIterator objects; they just return a Promise for the value of                                                // 235
  // the final result produced by the iterator.                                                                        // 236
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 237
    var iter = new AsyncIterator(                                                                                      // 238
      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 239
    );                                                                                                                 // 240
                                                                                                                       // 241
    return runtime.isGeneratorFunction(outerFn)                                                                        // 242
      ? iter // If outerFn is a generator, return the full iterator.                                                   // 243
      : iter.next().then(function(result) {                                                                            // 244
          return result.done ? result.value : iter.next();                                                             // 245
        });                                                                                                            // 246
  };                                                                                                                   // 247
                                                                                                                       // 248
  function makeInvokeMethod(innerFn, self, context) {                                                                  // 249
    var state = GenStateSuspendedStart;                                                                                // 250
                                                                                                                       // 251
    return function invoke(method, arg) {                                                                              // 252
      if (state === GenStateExecuting) {                                                                               // 253
        throw new Error("Generator is already running");                                                               // 254
      }                                                                                                                // 255
                                                                                                                       // 256
      if (state === GenStateCompleted) {                                                                               // 257
        if (method === "throw") {                                                                                      // 258
          throw arg;                                                                                                   // 259
        }                                                                                                              // 260
                                                                                                                       // 261
        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 262
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 263
        return doneResult();                                                                                           // 264
      }                                                                                                                // 265
                                                                                                                       // 266
      context.method = method;                                                                                         // 267
      context.arg = arg;                                                                                               // 268
                                                                                                                       // 269
      while (true) {                                                                                                   // 270
        var delegate = context.delegate;                                                                               // 271
        if (delegate) {                                                                                                // 272
          var delegateResult = maybeInvokeDelegate(delegate, context);                                                 // 273
          if (delegateResult) {                                                                                        // 274
            if (delegateResult === ContinueSentinel) continue;                                                         // 275
            return delegateResult;                                                                                     // 276
          }                                                                                                            // 277
        }                                                                                                              // 278
                                                                                                                       // 279
        if (context.method === "next") {                                                                               // 280
          // Setting context._sent for legacy support of Babel's                                                       // 281
          // function.sent implementation.                                                                             // 282
          context.sent = context._sent = context.arg;                                                                  // 283
                                                                                                                       // 284
        } else if (context.method === "throw") {                                                                       // 285
          if (state === GenStateSuspendedStart) {                                                                      // 286
            state = GenStateCompleted;                                                                                 // 287
            throw context.arg;                                                                                         // 288
          }                                                                                                            // 289
                                                                                                                       // 290
          context.dispatchException(context.arg);                                                                      // 291
                                                                                                                       // 292
        } else if (context.method === "return") {                                                                      // 293
          context.abrupt("return", context.arg);                                                                       // 294
        }                                                                                                              // 295
                                                                                                                       // 296
        state = GenStateExecuting;                                                                                     // 297
                                                                                                                       // 298
        var record = tryCatch(innerFn, self, context);                                                                 // 299
        if (record.type === "normal") {                                                                                // 300
          // If an exception is thrown from innerFn, we leave state ===                                                // 301
          // GenStateExecuting and loop back for another invocation.                                                   // 302
          state = context.done                                                                                         // 303
            ? GenStateCompleted                                                                                        // 304
            : GenStateSuspendedYield;                                                                                  // 305
                                                                                                                       // 306
          if (record.arg === ContinueSentinel) {                                                                       // 307
            continue;                                                                                                  // 308
          }                                                                                                            // 309
                                                                                                                       // 310
          return {                                                                                                     // 311
            value: record.arg,                                                                                         // 312
            done: context.done                                                                                         // 313
          };                                                                                                           // 314
                                                                                                                       // 315
        } else if (record.type === "throw") {                                                                          // 316
          state = GenStateCompleted;                                                                                   // 317
          // Dispatch the exception by looping back around to the                                                      // 318
          // context.dispatchException(context.arg) call above.                                                        // 319
          context.method = "throw";                                                                                    // 320
          context.arg = record.arg;                                                                                    // 321
        }                                                                                                              // 322
      }                                                                                                                // 323
    };                                                                                                                 // 324
  }                                                                                                                    // 325
                                                                                                                       // 326
  // Call delegate.iterator[context.method](context.arg) and handle the                                                // 327
  // result, either by returning a { value, done } result from the                                                     // 328
  // delegate iterator, or by modifying context.method and context.arg,                                                // 329
  // setting context.delegate to null, and returning the ContinueSentinel.                                             // 330
  function maybeInvokeDelegate(delegate, context) {                                                                    // 331
    var method = delegate.iterator[context.method];                                                                    // 332
    if (method === undefined) {                                                                                        // 333
      // A .throw or .return when the delegate iterator has no .throw                                                  // 334
      // method always terminates the yield* loop.                                                                     // 335
      context.delegate = null;                                                                                         // 336
                                                                                                                       // 337
      if (context.method === "throw") {                                                                                // 338
        if (delegate.iterator.return) {                                                                                // 339
          // If the delegate iterator has a return method, give it a                                                   // 340
          // chance to clean up.                                                                                       // 341
          context.method = "return";                                                                                   // 342
          context.arg = undefined;                                                                                     // 343
          maybeInvokeDelegate(delegate, context);                                                                      // 344
                                                                                                                       // 345
          if (context.method === "throw") {                                                                            // 346
            // If maybeInvokeDelegate(context) changed context.method from                                             // 347
            // "return" to "throw", let that override the TypeError below.                                             // 348
            return ContinueSentinel;                                                                                   // 349
          }                                                                                                            // 350
        }                                                                                                              // 351
                                                                                                                       // 352
        context.method = "throw";                                                                                      // 353
        context.arg = new TypeError(                                                                                   // 354
          "The iterator does not provide a 'throw' method");                                                           // 355
      }                                                                                                                // 356
                                                                                                                       // 357
      return ContinueSentinel;                                                                                         // 358
    }                                                                                                                  // 359
                                                                                                                       // 360
    var record = tryCatch(method, delegate.iterator, context.arg);                                                     // 361
                                                                                                                       // 362
    if (record.type === "throw") {                                                                                     // 363
      context.method = "throw";                                                                                        // 364
      context.arg = record.arg;                                                                                        // 365
      context.delegate = null;                                                                                         // 366
      return ContinueSentinel;                                                                                         // 367
    }                                                                                                                  // 368
                                                                                                                       // 369
    var info = record.arg;                                                                                             // 370
                                                                                                                       // 371
    if (! info) {                                                                                                      // 372
      context.method = "throw";                                                                                        // 373
      context.arg = new TypeError("iterator result is not an object");                                                 // 374
      context.delegate = null;                                                                                         // 375
      return ContinueSentinel;                                                                                         // 376
    }                                                                                                                  // 377
                                                                                                                       // 378
    if (info.done) {                                                                                                   // 379
      // Assign the result of the finished delegate to the temporary                                                   // 380
      // variable specified by delegate.resultName (see delegateYield).                                                // 381
      context[delegate.resultName] = info.value;                                                                       // 382
                                                                                                                       // 383
      // Resume execution at the desired location (see delegateYield).                                                 // 384
      context.next = delegate.nextLoc;                                                                                 // 385
                                                                                                                       // 386
      // If context.method was "throw" but the delegate handled the                                                    // 387
      // exception, let the outer generator proceed normally. If                                                       // 388
      // context.method was "next", forget context.arg since it has been                                               // 389
      // "consumed" by the delegate iterator. If context.method was                                                    // 390
      // "return", allow the original .return call to continue in the                                                  // 391
      // outer generator.                                                                                              // 392
      if (context.method !== "return") {                                                                               // 393
        context.method = "next";                                                                                       // 394
        context.arg = undefined;                                                                                       // 395
      }                                                                                                                // 396
                                                                                                                       // 397
    } else {                                                                                                           // 398
      // Re-yield the result returned by the delegate method.                                                          // 399
      return info;                                                                                                     // 400
    }                                                                                                                  // 401
                                                                                                                       // 402
    // The delegate iterator is finished, so forget it and continue with                                               // 403
    // the outer generator.                                                                                            // 404
    context.delegate = null;                                                                                           // 405
    return ContinueSentinel;                                                                                           // 406
  }                                                                                                                    // 407
                                                                                                                       // 408
  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 409
  // unified ._invoke helper method.                                                                                   // 410
  defineIteratorMethods(Gp);                                                                                           // 411
                                                                                                                       // 412
  Gp[toStringTagSymbol] = "Generator";                                                                                 // 413
                                                                                                                       // 414
  Gp.toString = function() {                                                                                           // 415
    return "[object Generator]";                                                                                       // 416
  };                                                                                                                   // 417
                                                                                                                       // 418
  function pushTryEntry(locs) {                                                                                        // 419
    var entry = { tryLoc: locs[0] };                                                                                   // 420
                                                                                                                       // 421
    if (1 in locs) {                                                                                                   // 422
      entry.catchLoc = locs[1];                                                                                        // 423
    }                                                                                                                  // 424
                                                                                                                       // 425
    if (2 in locs) {                                                                                                   // 426
      entry.finallyLoc = locs[2];                                                                                      // 427
      entry.afterLoc = locs[3];                                                                                        // 428
    }                                                                                                                  // 429
                                                                                                                       // 430
    this.tryEntries.push(entry);                                                                                       // 431
  }                                                                                                                    // 432
                                                                                                                       // 433
  function resetTryEntry(entry) {                                                                                      // 434
    var record = entry.completion || {};                                                                               // 435
    record.type = "normal";                                                                                            // 436
    delete record.arg;                                                                                                 // 437
    entry.completion = record;                                                                                         // 438
  }                                                                                                                    // 439
                                                                                                                       // 440
  function Context(tryLocsList) {                                                                                      // 441
    // The root entry object (effectively a try statement without a catch                                              // 442
    // or a finally block) gives us a place to store values thrown from                                                // 443
    // locations where there is no enclosing try statement.                                                            // 444
    this.tryEntries = [{ tryLoc: "root" }];                                                                            // 445
    tryLocsList.forEach(pushTryEntry, this);                                                                           // 446
    this.reset(true);                                                                                                  // 447
  }                                                                                                                    // 448
                                                                                                                       // 449
  runtime.keys = function(object) {                                                                                    // 450
    var keys = [];                                                                                                     // 451
    for (var key in object) {                                                                                          // 452
      keys.push(key);                                                                                                  // 453
    }                                                                                                                  // 454
    keys.reverse();                                                                                                    // 455
                                                                                                                       // 456
    // Rather than returning an object with a next method, we keep                                                     // 457
    // things simple and return the next function itself.                                                              // 458
    return function next() {                                                                                           // 459
      while (keys.length) {                                                                                            // 460
        var key = keys.pop();                                                                                          // 461
        if (key in object) {                                                                                           // 462
          next.value = key;                                                                                            // 463
          next.done = false;                                                                                           // 464
          return next;                                                                                                 // 465
        }                                                                                                              // 466
      }                                                                                                                // 467
                                                                                                                       // 468
      // To avoid creating an additional object, we just hang the .value                                               // 469
      // and .done properties off the next function object itself. This                                                // 470
      // also ensures that the minifier will not anonymize the function.                                               // 471
      next.done = true;                                                                                                // 472
      return next;                                                                                                     // 473
    };                                                                                                                 // 474
  };                                                                                                                   // 475
                                                                                                                       // 476
  function values(iterable) {                                                                                          // 477
    if (iterable) {                                                                                                    // 478
      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 479
      if (iteratorMethod) {                                                                                            // 480
        return iteratorMethod.call(iterable);                                                                          // 481
      }                                                                                                                // 482
                                                                                                                       // 483
      if (typeof iterable.next === "function") {                                                                       // 484
        return iterable;                                                                                               // 485
      }                                                                                                                // 486
                                                                                                                       // 487
      if (!isNaN(iterable.length)) {                                                                                   // 488
        var i = -1, next = function next() {                                                                           // 489
          while (++i < iterable.length) {                                                                              // 490
            if (hasOwn.call(iterable, i)) {                                                                            // 491
              next.value = iterable[i];                                                                                // 492
              next.done = false;                                                                                       // 493
              return next;                                                                                             // 494
            }                                                                                                          // 495
          }                                                                                                            // 496
                                                                                                                       // 497
          next.value = undefined;                                                                                      // 498
          next.done = true;                                                                                            // 499
                                                                                                                       // 500
          return next;                                                                                                 // 501
        };                                                                                                             // 502
                                                                                                                       // 503
        return next.next = next;                                                                                       // 504
      }                                                                                                                // 505
    }                                                                                                                  // 506
                                                                                                                       // 507
    // Return an iterator with no values.                                                                              // 508
    return { next: doneResult };                                                                                       // 509
  }                                                                                                                    // 510
  runtime.values = values;                                                                                             // 511
                                                                                                                       // 512
  function doneResult() {                                                                                              // 513
    return { value: undefined, done: true };                                                                           // 514
  }                                                                                                                    // 515
                                                                                                                       // 516
  Context.prototype = {                                                                                                // 517
    constructor: Context,                                                                                              // 518
                                                                                                                       // 519
    reset: function(skipTempReset) {                                                                                   // 520
      this.prev = 0;                                                                                                   // 521
      this.next = 0;                                                                                                   // 522
      // Resetting context._sent for legacy support of Babel's                                                         // 523
      // function.sent implementation.                                                                                 // 524
      this.sent = this._sent = undefined;                                                                              // 525
      this.done = false;                                                                                               // 526
      this.delegate = null;                                                                                            // 527
                                                                                                                       // 528
      this.method = "next";                                                                                            // 529
      this.arg = undefined;                                                                                            // 530
                                                                                                                       // 531
      this.tryEntries.forEach(resetTryEntry);                                                                          // 532
                                                                                                                       // 533
      if (!skipTempReset) {                                                                                            // 534
        for (var name in this) {                                                                                       // 535
          // Not sure about the optimal order of these conditions:                                                     // 536
          if (name.charAt(0) === "t" &&                                                                                // 537
              hasOwn.call(this, name) &&                                                                               // 538
              !isNaN(+name.slice(1))) {                                                                                // 539
            this[name] = undefined;                                                                                    // 540
          }                                                                                                            // 541
        }                                                                                                              // 542
      }                                                                                                                // 543
    },                                                                                                                 // 544
                                                                                                                       // 545
    stop: function() {                                                                                                 // 546
      this.done = true;                                                                                                // 547
                                                                                                                       // 548
      var rootEntry = this.tryEntries[0];                                                                              // 549
      var rootRecord = rootEntry.completion;                                                                           // 550
      if (rootRecord.type === "throw") {                                                                               // 551
        throw rootRecord.arg;                                                                                          // 552
      }                                                                                                                // 553
                                                                                                                       // 554
      return this.rval;                                                                                                // 555
    },                                                                                                                 // 556
                                                                                                                       // 557
    dispatchException: function(exception) {                                                                           // 558
      if (this.done) {                                                                                                 // 559
        throw exception;                                                                                               // 560
      }                                                                                                                // 561
                                                                                                                       // 562
      var context = this;                                                                                              // 563
      function handle(loc, caught) {                                                                                   // 564
        record.type = "throw";                                                                                         // 565
        record.arg = exception;                                                                                        // 566
        context.next = loc;                                                                                            // 567
                                                                                                                       // 568
        if (caught) {                                                                                                  // 569
          // If the dispatched exception was caught by a catch block,                                                  // 570
          // then let that catch block handle the exception normally.                                                  // 571
          context.method = "next";                                                                                     // 572
          context.arg = undefined;                                                                                     // 573
        }                                                                                                              // 574
                                                                                                                       // 575
        return !! caught;                                                                                              // 576
      }                                                                                                                // 577
                                                                                                                       // 578
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 579
        var entry = this.tryEntries[i];                                                                                // 580
        var record = entry.completion;                                                                                 // 581
                                                                                                                       // 582
        if (entry.tryLoc === "root") {                                                                                 // 583
          // Exception thrown outside of any try block that could handle                                               // 584
          // it, so set the completion value of the entire function to                                                 // 585
          // throw the exception.                                                                                      // 586
          return handle("end");                                                                                        // 587
        }                                                                                                              // 588
                                                                                                                       // 589
        if (entry.tryLoc <= this.prev) {                                                                               // 590
          var hasCatch = hasOwn.call(entry, "catchLoc");                                                               // 591
          var hasFinally = hasOwn.call(entry, "finallyLoc");                                                           // 592
                                                                                                                       // 593
          if (hasCatch && hasFinally) {                                                                                // 594
            if (this.prev < entry.catchLoc) {                                                                          // 595
              return handle(entry.catchLoc, true);                                                                     // 596
            } else if (this.prev < entry.finallyLoc) {                                                                 // 597
              return handle(entry.finallyLoc);                                                                         // 598
            }                                                                                                          // 599
                                                                                                                       // 600
          } else if (hasCatch) {                                                                                       // 601
            if (this.prev < entry.catchLoc) {                                                                          // 602
              return handle(entry.catchLoc, true);                                                                     // 603
            }                                                                                                          // 604
                                                                                                                       // 605
          } else if (hasFinally) {                                                                                     // 606
            if (this.prev < entry.finallyLoc) {                                                                        // 607
              return handle(entry.finallyLoc);                                                                         // 608
            }                                                                                                          // 609
                                                                                                                       // 610
          } else {                                                                                                     // 611
            throw new Error("try statement without catch or finally");                                                 // 612
          }                                                                                                            // 613
        }                                                                                                              // 614
      }                                                                                                                // 615
    },                                                                                                                 // 616
                                                                                                                       // 617
    abrupt: function(type, arg) {                                                                                      // 618
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 619
        var entry = this.tryEntries[i];                                                                                // 620
        if (entry.tryLoc <= this.prev &&                                                                               // 621
            hasOwn.call(entry, "finallyLoc") &&                                                                        // 622
            this.prev < entry.finallyLoc) {                                                                            // 623
          var finallyEntry = entry;                                                                                    // 624
          break;                                                                                                       // 625
        }                                                                                                              // 626
      }                                                                                                                // 627
                                                                                                                       // 628
      if (finallyEntry &&                                                                                              // 629
          (type === "break" ||                                                                                         // 630
           type === "continue") &&                                                                                     // 631
          finallyEntry.tryLoc <= arg &&                                                                                // 632
          arg <= finallyEntry.finallyLoc) {                                                                            // 633
        // Ignore the finally entry if control is not jumping to a                                                     // 634
        // location outside the try/catch block.                                                                       // 635
        finallyEntry = null;                                                                                           // 636
      }                                                                                                                // 637
                                                                                                                       // 638
      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 639
      record.type = type;                                                                                              // 640
      record.arg = arg;                                                                                                // 641
                                                                                                                       // 642
      if (finallyEntry) {                                                                                              // 643
        this.method = "next";                                                                                          // 644
        this.next = finallyEntry.finallyLoc;                                                                           // 645
        return ContinueSentinel;                                                                                       // 646
      }                                                                                                                // 647
                                                                                                                       // 648
      return this.complete(record);                                                                                    // 649
    },                                                                                                                 // 650
                                                                                                                       // 651
    complete: function(record, afterLoc) {                                                                             // 652
      if (record.type === "throw") {                                                                                   // 653
        throw record.arg;                                                                                              // 654
      }                                                                                                                // 655
                                                                                                                       // 656
      if (record.type === "break" ||                                                                                   // 657
          record.type === "continue") {                                                                                // 658
        this.next = record.arg;                                                                                        // 659
      } else if (record.type === "return") {                                                                           // 660
        this.rval = this.arg = record.arg;                                                                             // 661
        this.method = "return";                                                                                        // 662
        this.next = "end";                                                                                             // 663
      } else if (record.type === "normal" && afterLoc) {                                                               // 664
        this.next = afterLoc;                                                                                          // 665
      }                                                                                                                // 666
                                                                                                                       // 667
      return ContinueSentinel;                                                                                         // 668
    },                                                                                                                 // 669
                                                                                                                       // 670
    finish: function(finallyLoc) {                                                                                     // 671
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 672
        var entry = this.tryEntries[i];                                                                                // 673
        if (entry.finallyLoc === finallyLoc) {                                                                         // 674
          this.complete(entry.completion, entry.afterLoc);                                                             // 675
          resetTryEntry(entry);                                                                                        // 676
          return ContinueSentinel;                                                                                     // 677
        }                                                                                                              // 678
      }                                                                                                                // 679
    },                                                                                                                 // 680
                                                                                                                       // 681
    "catch": function(tryLoc) {                                                                                        // 682
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 683
        var entry = this.tryEntries[i];                                                                                // 684
        if (entry.tryLoc === tryLoc) {                                                                                 // 685
          var record = entry.completion;                                                                               // 686
          if (record.type === "throw") {                                                                               // 687
            var thrown = record.arg;                                                                                   // 688
            resetTryEntry(entry);                                                                                      // 689
          }                                                                                                            // 690
          return thrown;                                                                                               // 691
        }                                                                                                              // 692
      }                                                                                                                // 693
                                                                                                                       // 694
      // The context.catch method must only be called with a location                                                  // 695
      // argument that corresponds to a known catch block.                                                             // 696
      throw new Error("illegal catch attempt");                                                                        // 697
    },                                                                                                                 // 698
                                                                                                                       // 699
    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 700
      this.delegate = {                                                                                                // 701
        iterator: values(iterable),                                                                                    // 702
        resultName: resultName,                                                                                        // 703
        nextLoc: nextLoc                                                                                               // 704
      };                                                                                                               // 705
                                                                                                                       // 706
      if (this.method === "next") {                                                                                    // 707
        // Deliberately forget the last sent value so that we don't                                                    // 708
        // accidentally pass it on to the delegate.                                                                    // 709
        this.arg = undefined;                                                                                          // 710
      }                                                                                                                // 711
                                                                                                                       // 712
      return ContinueSentinel;                                                                                         // 713
    }                                                                                                                  // 714
  };                                                                                                                   // 715
})(                                                                                                                    // 716
  // Among the various tricks for obtaining a reference to the global                                                  // 717
  // object, this seems to be the most reliable technique that does not                                                // 718
  // use indirect eval (which violates Content Security Policy).                                                       // 719
  typeof global === "object" ? global :                                                                                // 720
  typeof window === "object" ? window :                                                                                // 721
  typeof self === "object" ? self : this                                                                               // 722
);                                                                                                                     // 723
                                                                                                                       // 724
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"core-js":{"library":{"fn":{"symbol":{"iterator.js":["../../modules/es6.string.iterator","../../modules/web.dom.iterable","../../modules/_wks-ext",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.string.iterator');                                                                          // 1
require('../../modules/web.dom.iterable');                                                                             // 2
module.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"index.js":["../../modules/es6.symbol","../../modules/es6.object.to-string","../../modules/es7.symbol.async-iterator","../../modules/es7.symbol.observable","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.symbol');                                                                                   // 1
require('../../modules/es6.object.to-string');                                                                         // 2
require('../../modules/es7.symbol.async-iterator');                                                                    // 3
require('../../modules/es7.symbol.observable');                                                                        // 4
module.exports = require('../../modules/_core').Symbol;                                                                // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"object":{"set-prototype-of.js":["../../modules/es6.object.set-prototype-of","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.set-prototype-of');                                                                  // 1
module.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"create.js":["../../modules/es6.object.create","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/create.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.create');                                                                            // 1
var $Object = require('../../modules/_core').Object;                                                                   // 2
module.exports = function create(P, D){                                                                                // 3
  return $Object.create(P, D);                                                                                         // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"modules":{"es6.string.iterator.js":["./_string-at","./_iter-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at  = require('./_string-at')(true);                                                                              // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function(iterated){                                                        // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function(){                                                                                                         // 9
  var O     = this._t                                                                                                  // 10
    , index = this._i                                                                                                  // 11
    , point;                                                                                                           // 12
  if(index >= O.length)return {value: undefined, done: true};                                                          // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return {value: point, done: false};                                                                                  // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-at.js":["./_to-integer","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_string-at.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , defined   = require('./_defined');                                                                                 // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function(TO_STRING){                                                                                  // 5
  return function(that, pos){                                                                                          // 6
    var s = String(defined(that))                                                                                      // 7
      , i = toInteger(pos)                                                                                             // 8
      , l = s.length                                                                                                   // 9
      , a, b;                                                                                                          // 10
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-integer.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil  = Math.ceil                                                                                                  // 2
  , floor = Math.floor;                                                                                                // 3
module.exports = function(it){                                                                                         // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_defined.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function(it){                                                                                         // 2
  if(it == undefined)throw TypeError("Can't call method on  " + it);                                                   // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-define.js":["./_library","./_export","./_redefine","./_hide","./_has","./_iterators","./_iter-create","./_set-to-string-tag","./_object-gpo","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-define.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY        = require('./_library')                                                                             // 2
  , $export        = require('./_export')                                                                              // 3
  , redefine       = require('./_redefine')                                                                            // 4
  , hide           = require('./_hide')                                                                                // 5
  , has            = require('./_has')                                                                                 // 6
  , Iterators      = require('./_iterators')                                                                           // 7
  , $iterCreate    = require('./_iter-create')                                                                         // 8
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9
  , getPrototypeOf = require('./_object-gpo')                                                                          // 10
  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
  , FF_ITERATOR    = '@@iterator'                                                                                      // 13
  , KEYS           = 'keys'                                                                                            // 14
  , VALUES         = 'values';                                                                                         // 15
                                                                                                                       // 16
var returnThis = function(){ return this; };                                                                           // 17
                                                                                                                       // 18
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function(kind){                                                                                      // 21
    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22
    switch(kind){                                                                                                      // 23
      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24
      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25
    } return function entries(){ return new Constructor(this, kind); };                                                // 26
  };                                                                                                                   // 27
  var TAG        = NAME + ' Iterator'                                                                                  // 28
    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29
    , VALUES_BUG = false                                                                                               // 30
    , proto      = Base.prototype                                                                                      // 31
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32
    , $default   = $native || getMethod(DEFAULT)                                                                       // 33
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35
    , methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if($anyNative){                                                                                                      // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39
    if(IteratorPrototype !== Object.prototype){                                                                        // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values(){ return $native.call(this); };                                                        // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG]  = returnThis;                                                                                        // 58
  if(DEFAULT){                                                                                                         // 59
    methods = {                                                                                                        // 60
      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61
      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if(FORCED)for(key in methods){                                                                                     // 65
      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_library.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = true;                                                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_export.js":["./_global","./_core","./_ctx","./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_export.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global    = require('./_global')                                                                                   // 1
  , core      = require('./_core')                                                                                     // 2
  , ctx       = require('./_ctx')                                                                                      // 3
  , hide      = require('./_hide')                                                                                     // 4
  , PROTOTYPE = 'prototype';                                                                                           // 5
                                                                                                                       // 6
var $export = function(type, name, source){                                                                            // 7
  var IS_FORCED = type & $export.F                                                                                     // 8
    , IS_GLOBAL = type & $export.G                                                                                     // 9
    , IS_STATIC = type & $export.S                                                                                     // 10
    , IS_PROTO  = type & $export.P                                                                                     // 11
    , IS_BIND   = type & $export.B                                                                                     // 12
    , IS_WRAP   = type & $export.W                                                                                     // 13
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14
    , expProto  = exports[PROTOTYPE]                                                                                   // 15
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16
    , key, own, out;                                                                                                   // 17
  if(IS_GLOBAL)source = name;                                                                                          // 18
  for(key in source){                                                                                                  // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    if(own && key in exports)continue;                                                                                 // 22
    // export native or passed                                                                                         // 23
    out = own ? target[key] : source[key];                                                                             // 24
    // prevent global pollution for namespaces                                                                         // 25
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26
    // bind timers to global for call from export context                                                              // 27
    : IS_BIND && own ? ctx(out, global)                                                                                // 28
    // wrap global constructors for prevent change them in library                                                     // 29
    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30
      var F = function(a, b, c){                                                                                       // 31
        if(this instanceof C){                                                                                         // 32
          switch(arguments.length){                                                                                    // 33
            case 0: return new C;                                                                                      // 34
            case 1: return new C(a);                                                                                   // 35
            case 2: return new C(a, b);                                                                                // 36
          } return new C(a, b, c);                                                                                     // 37
        } return C.apply(this, arguments);                                                                             // 38
      };                                                                                                               // 39
      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40
      return F;                                                                                                        // 41
    // make static versions for prototype methods                                                                      // 42
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
    if(IS_PROTO){                                                                                                      // 45
      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48
    }                                                                                                                  // 49
  }                                                                                                                    // 50
};                                                                                                                     // 51
// type bitmap                                                                                                         // 52
$export.F = 1;   // forced                                                                                             // 53
$export.G = 2;   // global                                                                                             // 54
$export.S = 4;   // static                                                                                             // 55
$export.P = 8;   // proto                                                                                              // 56
$export.B = 16;  // bind                                                                                               // 57
$export.W = 32;  // wrap                                                                                               // 58
$export.U = 64;  // safe                                                                                               // 59
$export.R = 128; // real proto method for `library`                                                                    // 60
module.exports = $export;                                                                                              // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_global.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_core.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = {version: '2.4.0'};                                                                        // 1
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":["./_a-function",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ctx.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function(fn, that, length){                                                                           // 3
  aFunction(fn);                                                                                                       // 4
  if(that === undefined)return fn;                                                                                     // 5
  switch(length){                                                                                                      // 6
    case 1: return function(a){                                                                                        // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function(a, b){                                                                                     // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function(a, b, c){                                                                                  // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function(/* ...args */){                                                                                      // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_a-function.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":["./_object-dp","./_property-desc","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_hide.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP         = require('./_object-dp')                                                                               // 1
  , createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function(object, key, value){                                             // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function(object, key, value){                                                                                      // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dp.js":["./_an-object","./_ie8-dom-define","./_to-primitive","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dp.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject       = require('./_an-object')                                                                           // 1
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2
  , toPrimitive    = require('./_to-primitive')                                                                        // 3
  , dP             = Object.defineProperty;                                                                            // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if(IE8_DOM_DEFINE)try {                                                                                              // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch(e){ /* empty */ }                                                                                            // 12
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13
  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_an-object.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_an-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function(it){                                                                                         // 2
  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":["./_descriptors","./_fails","./_dom-create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_descriptors.js":["./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_descriptors.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function(){                                                                      // 2
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_fails.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(exec){                                                                                       // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch(e){                                                                                                          // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_dom-create.js":["./_is-object","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_dom-create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object')                                                                                 // 1
  , document = require('./_global').document                                                                           // 2
  // in old IE typeof document.createElement is 'object'                                                               // 3
  , is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function(it){                                                                                         // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-primitive.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-primitive.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function(it, S){                                                                                      // 5
  if(!isObject(it))return it;                                                                                          // 6
  var fn, val;                                                                                                         // 7
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_property-desc.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(bitmap, value){                                                                              // 1
  return {                                                                                                             // 2
    enumerable  : !(bitmap & 1),                                                                                       // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable    : !(bitmap & 4),                                                                                       // 5
    value       : value                                                                                                // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":["./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_redefine.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_hide');                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_has.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function(it, key){                                                                                    // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iterators.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":["./_object-create","./_property-desc","./_set-to-string-tag","./_hide","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-create.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create         = require('./_object-create')                                                                       // 2
  , descriptor     = require('./_property-desc')                                                                       // 3
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4
  , IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8
                                                                                                                       // 9
module.exports = function(Constructor, NAME, next){                                                                    // 10
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-create.js":["./_an-object","./_object-dps","./_enum-bug-keys","./_shared-key","./_dom-create","./_html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-create.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject    = require('./_an-object')                                                                              // 2
  , dPs         = require('./_object-dps')                                                                             // 3
  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5
  , Empty       = function(){ /* empty */ }                                                                            // 6
  , PROTOTYPE   = 'prototype';                                                                                         // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function(){                                                                                           // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe')                                                                      // 12
    , i      = enumBugKeys.length                                                                                      // 13
    , lt     = '<'                                                                                                     // 14
    , gt     = '>'                                                                                                     // 15
    , iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties){                                                      // 31
  var result;                                                                                                          // 32
  if(O !== null){                                                                                                      // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty;                                                                                                // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dps.js":["./_object-dp","./_an-object","./_object-keys","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dps.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP       = require('./_object-dp')                                                                                 // 1
  , anObject = require('./_an-object')                                                                                 // 2
  , getKeys  = require('./_object-keys');                                                                              // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5
  anObject(O);                                                                                                         // 6
  var keys   = getKeys(Properties)                                                                                     // 7
    , length = keys.length                                                                                             // 8
    , i = 0                                                                                                            // 9
    , P;                                                                                                               // 10
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys       = require('./_object-keys-internal')                                                                   // 2
  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O){                                                                      // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys-internal.js":["./_has","./_to-iobject","./_array-includes","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has          = require('./_has')                                                                                   // 1
  , toIObject    = require('./_to-iobject')                                                                            // 2
  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4
                                                                                                                       // 5
module.exports = function(object, names){                                                                              // 6
  var O      = toIObject(object)                                                                                       // 7
    , i      = 0                                                                                                       // 8
    , result = []                                                                                                      // 9
    , key;                                                                                                             // 10
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-iobject.js":["./_iobject","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-iobject.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject')                                                                                    // 2
  , defined = require('./_defined');                                                                                   // 3
module.exports = function(it){                                                                                         // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iobject.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iobject.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_cof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function(it){                                                                                         // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":["./_to-iobject","./_to-length","./_to-index",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_array-includes.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject')                                                                               // 3
  , toLength  = require('./_to-length')                                                                                // 4
  , toIndex   = require('./_to-index');                                                                                // 5
module.exports = function(IS_INCLUDES){                                                                                // 6
  return function($this, el, fromIndex){                                                                               // 7
    var O      = toIObject($this)                                                                                      // 8
      , length = toLength(O.length)                                                                                    // 9
      , index  = toIndex(fromIndex, length)                                                                            // 10
      , value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13
      value = O[index++];                                                                                              // 14
      if(value != value)return true;                                                                                   // 15
    // Array#toIndex ignores holes, Array#includes - not                                                               // 16
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17
      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18
    } return !IS_INCLUDES && -1;                                                                                       // 19
  };                                                                                                                   // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-length.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-length.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer')                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(it){                                                                                         // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-index.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-index.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , max       = Math.max                                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(index, length){                                                                              // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared-key.js":["./_shared","./_uid",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared-key.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys')                                                                              // 1
  , uid    = require('./_uid');                                                                                        // 2
module.exports = function(key){                                                                                        // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global')                                                                                      // 1
  , SHARED = '__core-js_shared__'                                                                                      // 2
  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3
module.exports = function(key){                                                                                        // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_uid.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0                                                                                                             // 1
  , px = Math.random();                                                                                                // 2
module.exports = function(key){                                                                                        // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_html.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_html.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_global').document && document.documentElement;                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-to-string-tag.js":["./_object-dp","./_has","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f                                                                                    // 1
  , has = require('./_has')                                                                                            // 2
  , TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function(it, tag, stat){                                                                              // 5
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks.js":["./_shared","./_uid","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store      = require('./_shared')('wks')                                                                           // 1
  , uid        = require('./_uid')                                                                                     // 2
  , Symbol     = require('./_global').Symbol                                                                           // 3
  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function(name){                                                                        // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gpo.js":["./_has","./_to-object","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gpo.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has         = require('./_has')                                                                                    // 2
  , toObject    = require('./_to-object')                                                                              // 3
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4
  , ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function(O){                                                                 // 7
  O = toObject(O);                                                                                                     // 8
  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9
  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-object.js":["./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function(it){                                                                                         // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"web.dom.iterable.js":["./es6.array.iterator","./_global","./_hide","./_iterators","./_wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./es6.array.iterator');                                                                                       // 1
var global        = require('./_global')                                                                               // 2
  , hide          = require('./_hide')                                                                                 // 3
  , Iterators     = require('./_iterators')                                                                            // 4
  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5
                                                                                                                       // 6
for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7
  var NAME       = collections[i]                                                                                      // 8
    , Collection = global[NAME]                                                                                        // 9
    , proto      = Collection && Collection.prototype;                                                                 // 10
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11
  Iterators[NAME] = Iterators.Array;                                                                                   // 12
}                                                                                                                      // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.iterator.js":["./_add-to-unscopables","./_iter-step","./_iterators","./_to-iobject","./_iter-define",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables')                                                                // 2
  , step             = require('./_iter-step')                                                                         // 3
  , Iterators        = require('./_iterators')                                                                         // 4
  , toIObject        = require('./_to-iobject');                                                                       // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function(){                                                                                                         // 16
  var O     = this._t                                                                                                  // 17
    , kind  = this._k                                                                                                  // 18
    , index = this._i++;                                                                                               // 19
  if(!O || index >= O.length){                                                                                         // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if(kind == 'keys'  )return step(0, index);                                                                           // 24
  if(kind == 'values')return step(0, O[index]);                                                                        // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_add-to-unscopables.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(){ /* empty */ };                                                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-step.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(done, value){                                                                                // 1
  return {value: value, done: !!done};                                                                                 // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-ext.js":["./_wks",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-ext.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.symbol.js":["./_global","./_has","./_descriptors","./_export","./_redefine","./_meta","./_fails","./_shared","./_set-to-string-tag","./_uid","./_wks","./_wks-ext","./_wks-define","./_keyof","./_enum-keys","./_is-array","./_an-object","./_to-iobject","./_to-primitive","./_property-desc","./_object-create","./_object-gopn-ext","./_object-gopd","./_object-dp","./_object-keys","./_object-gopn","./_object-pie","./_object-gops","./_library","./_hide",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.symbol.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global         = require('./_global')                                                                              // 3
  , has            = require('./_has')                                                                                 // 4
  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5
  , $export        = require('./_export')                                                                              // 6
  , redefine       = require('./_redefine')                                                                            // 7
  , META           = require('./_meta').KEY                                                                            // 8
  , $fails         = require('./_fails')                                                                               // 9
  , shared         = require('./_shared')                                                                              // 10
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11
  , uid            = require('./_uid')                                                                                 // 12
  , wks            = require('./_wks')                                                                                 // 13
  , wksExt         = require('./_wks-ext')                                                                             // 14
  , wksDefine      = require('./_wks-define')                                                                          // 15
  , keyOf          = require('./_keyof')                                                                               // 16
  , enumKeys       = require('./_enum-keys')                                                                           // 17
  , isArray        = require('./_is-array')                                                                            // 18
  , anObject       = require('./_an-object')                                                                           // 19
  , toIObject      = require('./_to-iobject')                                                                          // 20
  , toPrimitive    = require('./_to-primitive')                                                                        // 21
  , createDesc     = require('./_property-desc')                                                                       // 22
  , _create        = require('./_object-create')                                                                       // 23
  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24
  , $GOPD          = require('./_object-gopd')                                                                         // 25
  , $DP            = require('./_object-dp')                                                                           // 26
  , $keys          = require('./_object-keys')                                                                         // 27
  , gOPD           = $GOPD.f                                                                                           // 28
  , dP             = $DP.f                                                                                             // 29
  , gOPN           = gOPNExt.f                                                                                         // 30
  , $Symbol        = global.Symbol                                                                                     // 31
  , $JSON          = global.JSON                                                                                       // 32
  , _stringify     = $JSON && $JSON.stringify                                                                          // 33
  , PROTOTYPE      = 'prototype'                                                                                       // 34
  , HIDDEN         = wks('_hidden')                                                                                    // 35
  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36
  , isEnum         = {}.propertyIsEnumerable                                                                           // 37
  , SymbolRegistry = shared('symbol-registry')                                                                         // 38
  , AllSymbols     = shared('symbols')                                                                                 // 39
  , OPSymbols      = shared('op-symbols')                                                                              // 40
  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41
  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42
  , QObject        = global.QObject;                                                                                   // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50
  })).a != 7;                                                                                                          // 51
}) ? function(it, key, D){                                                                                             // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if(protoDesc)delete ObjectProto[key];                                                                                // 54
  dP(it, key, D);                                                                                                      // 55
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function(tag){                                                                                              // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function(it){                                                                                                      // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D){                                                             // 71
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if(has(AllSymbols, key)){                                                                                            // 76
    if(!D.enumerable){                                                                                                 // 77
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81
      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P){                                                              // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P))                                                                                // 88
    , i    = 0                                                                                                         // 89
    , l = keys.length                                                                                                  // 90
    , key;                                                                                                             // 91
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P){                                                                                  // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103
  it  = toIObject(it);                                                                                                 // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106
  var D = gOPD(it, key);                                                                                               // 107
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111
  var names  = gOPN(toIObject(it))                                                                                     // 112
    , result = []                                                                                                      // 113
    , i      = 0                                                                                                       // 114
    , key;                                                                                                             // 115
  while(names.length > i){                                                                                             // 116
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120
  var IS_OP  = it === ObjectProto                                                                                      // 121
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122
    , result = []                                                                                                      // 123
    , i      = 0                                                                                                       // 124
    , key;                                                                                                             // 125
  while(names.length > i){                                                                                             // 126
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if(!USE_NATIVE){                                                                                                       // 132
  $Symbol = function Symbol(){                                                                                         // 133
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function(value){                                                                                        // 136
      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f   = $defineProperty;                                                                                           // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if(DESCRIPTORS && !require('./_library')){                                                                           // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function(name){                                                                                           // 158
    return wrap(wks(name));                                                                                            // 159
  }                                                                                                                    // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163
                                                                                                                       // 164
for(var symbols = (                                                                                                    // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168
                                                                                                                       // 169
for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function(key){                                                                                                // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(key){                                                                                        // 180
    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181
    throw TypeError(key + ' is not a symbol!');                                                                        // 182
  },                                                                                                                   // 183
  useSetter: function(){ setter = true; },                                                                             // 184
  useSimple: function(){ setter = false; }                                                                             // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it){                                                                                   // 211
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212
    var args = [it]                                                                                                    // 213
      , i    = 1                                                                                                       // 214
      , replacer, $replacer;                                                                                           // 215
    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216
    replacer = args[1];                                                                                                // 217
    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218
    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219
      if($replacer)value = $replacer.call(this, key, value);                                                           // 220
      if(!isSymbol(value))return value;                                                                                // 221
    };                                                                                                                 // 222
    args[1] = replacer;                                                                                                // 223
    return _stringify.apply($JSON, args);                                                                              // 224
  }                                                                                                                    // 225
});                                                                                                                    // 226
                                                                                                                       // 227
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
setToStringTag($Symbol, 'Symbol');                                                                                     // 231
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
setToStringTag(Math, 'Math', true);                                                                                    // 233
// 24.3.3 JSON[@@toStringTag]                                                                                          // 234
setToStringTag(global.JSON, 'JSON', true);                                                                             // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_meta.js":["./_uid","./_is-object","./_has","./_object-dp","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_meta.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META     = require('./_uid')('meta')                                                                               // 1
  , isObject = require('./_is-object')                                                                                 // 2
  , has      = require('./_has')                                                                                       // 3
  , setDesc  = require('./_object-dp').f                                                                               // 4
  , id       = 0;                                                                                                      // 5
var isExtensible = Object.isExtensible || function(){                                                                  // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function(){                                                                          // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function(it){                                                                                            // 12
  setDesc(it, META, {value: {                                                                                          // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  }});                                                                                                                 // 16
};                                                                                                                     // 17
var fastKey = function(it, create){                                                                                    // 18
  // return primitive with prefix                                                                                      // 19
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20
  if(!has(it, META)){                                                                                                  // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if(!isExtensible(it))return 'F';                                                                                   // 23
    // not necessary to add metadata                                                                                   // 24
    if(!create)return 'E';                                                                                             // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function(it, create){                                                                                    // 31
  if(!has(it, META)){                                                                                                  // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if(!isExtensible(it))return true;                                                                                  // 34
    // not necessary to add metadata                                                                                   // 35
    if(!create)return false;                                                                                           // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function(it){                                                                                           // 43
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY:      META,                                                                                                      // 48
  NEED:     false,                                                                                                     // 49
  fastKey:  fastKey,                                                                                                   // 50
  getWeak:  getWeak,                                                                                                   // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks-define.js":["./_global","./_core","./_library","./_wks-ext","./_object-dp",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-define.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global         = require('./_global')                                                                              // 1
  , core           = require('./_core')                                                                                // 2
  , LIBRARY        = require('./_library')                                                                             // 3
  , wksExt         = require('./_wks-ext')                                                                             // 4
  , defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function(name){                                                                                       // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_keyof.js":["./_object-keys","./_to-iobject",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_keyof.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys   = require('./_object-keys')                                                                              // 1
  , toIObject = require('./_to-iobject');                                                                              // 2
module.exports = function(object, el){                                                                                 // 3
  var O      = toIObject(object)                                                                                       // 4
    , keys   = getKeys(O)                                                                                              // 5
    , length = keys.length                                                                                             // 6
    , index  = 0                                                                                                       // 7
    , key;                                                                                                             // 8
  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_enum-keys.js":["./_object-keys","./_object-gops","./_object-pie",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-keys.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys')                                                                                // 2
  , gOPS    = require('./_object-gops')                                                                                // 3
  , pIE     = require('./_object-pie');                                                                                // 4
module.exports = function(it){                                                                                         // 5
  var result     = getKeys(it)                                                                                         // 6
    , getSymbols = gOPS.f;                                                                                             // 7
  if(getSymbols){                                                                                                      // 8
    var symbols = getSymbols(it)                                                                                       // 9
      , isEnum  = pIE.f                                                                                                // 10
      , i       = 0                                                                                                    // 11
      , key;                                                                                                           // 12
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gops.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-pie.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-array.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg){                                                               // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn-ext.js":["./_to-iobject","./_object-gopn",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject')                                                                               // 2
  , gOPN      = require('./_object-gopn').f                                                                            // 3
  , toString  = {}.toString;                                                                                           // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function(it){                                                                                     // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch(e){                                                                                                          // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it){                                                                   // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys      = require('./_object-keys-internal')                                                                    // 2
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopd.js":["./_object-pie","./_property-desc","./_to-iobject","./_to-primitive","./_has","./_ie8-dom-define","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopd.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE            = require('./_object-pie')                                                                          // 1
  , createDesc     = require('./_property-desc')                                                                       // 2
  , toIObject      = require('./_to-iobject')                                                                          // 3
  , toPrimitive    = require('./_to-primitive')                                                                        // 4
  , has            = require('./_has')                                                                                 // 5
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6
  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if(IE8_DOM_DEFINE)try {                                                                                              // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch(e){ /* empty */ }                                                                                            // 14
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.to-string.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.symbol.async-iterator.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('asyncIterator');                                                                             // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.symbol.observable.js":["./_wks-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('observable');                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.set-prototype-of.js":["./_export","./_set-proto",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-proto.js":["./_is-object","./_an-object","./_ctx","./_object-gopd",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-proto.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object')                                                                                 // 3
  , anObject = require('./_an-object');                                                                                // 4
var check = function(O, proto){                                                                                        // 5
  anObject(O);                                                                                                         // 6
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");                          // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function(test, buggy, set){                                                                                        // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch(e){ buggy = true; }                                                                                      // 16
      return function setPrototypeOf(O, proto){                                                                        // 17
        check(O, proto);                                                                                               // 18
        if(buggy)O.__proto__ = proto;                                                                                  // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.create.js":["./_export","./_object-create",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.create.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/modules/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.modules = exports, {
  meteorInstall: meteorInstall,
  Buffer: Buffer,
  process: process
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;

/* Package-scope variables */
var Promise;

var require = meteorInstall({"node_modules":{"meteor":{"promise":{"client.js":["meteor-promise","./common.js",function(require,exports){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// packages/promise/client.js                                                                                       //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
require("meteor-promise").makeCompatible(                                                                           // 1
  exports.Promise = require("./common.js").Promise                                                                  // 2
);                                                                                                                  // 3
                                                                                                                    // 4
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"common.js":["promise/lib/es6-extensions",function(require,exports){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// packages/promise/common.js                                                                                       //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
var global = this;                                                                                                  // 1
                                                                                                                    // 2
if (typeof global.Promise === "function") {                                                                         // 3
  exports.Promise = global.Promise;                                                                                 // 4
} else {                                                                                                            // 5
  exports.Promise = require("promise/lib/es6-extensions");                                                          // 6
}                                                                                                                   // 7
                                                                                                                    // 8
exports.Promise.prototype.done = function (onFulfilled, onRejected) {                                               // 9
  var self = this;                                                                                                  // 10
                                                                                                                    // 11
  if (arguments.length > 0) {                                                                                       // 12
    self = this.then.apply(this, arguments);                                                                        // 13
  }                                                                                                                 // 14
                                                                                                                    // 15
  self.then(null, function (err) {                                                                                  // 16
    Meteor._setImmediate(function () {                                                                              // 17
      throw err;                                                                                                    // 18
    });                                                                                                             // 19
  });                                                                                                               // 20
};                                                                                                                  // 21
                                                                                                                    // 22
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"meteor-promise":{"package.json":function(require,exports){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// ../../.0.8.8.d6nkb0++os+web.browser+web.cordova/npm/node_modules/meteor-promise/package.json                     //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
exports.name = "meteor-promise";                                                                                    // 1
exports.version = "0.8.0";                                                                                          // 2
exports.main = "promise_server.js";                                                                                 // 3
exports.browser = "promise_client.js";                                                                              // 4
                                                                                                                    // 5
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"promise_client.js":function(require,exports){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// node_modules/meteor/promise/node_modules/meteor-promise/promise_client.js                                        //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
exports.makeCompatible = function (Promise) {                                                                       // 1
  var es6PromiseThen = Promise.prototype.then;                                                                      // 2
                                                                                                                    // 3
  Promise.prototype.then = function (onResolved, onRejected) {                                                      // 4
    if (typeof Meteor === "object" &&                                                                               // 5
        typeof Meteor.bindEnvironment === "function") {                                                             // 6
      return es6PromiseThen.call(                                                                                   // 7
        this,                                                                                                       // 8
        onResolved && Meteor.bindEnvironment(onResolved, raise),                                                    // 9
        onRejected && Meteor.bindEnvironment(onRejected, raise)                                                     // 10
      );                                                                                                            // 11
    }                                                                                                               // 12
                                                                                                                    // 13
    return es6PromiseThen.call(this, onResolved, onRejected);                                                       // 14
  };                                                                                                                // 15
};                                                                                                                  // 16
                                                                                                                    // 17
function raise(exception) {                                                                                         // 18
  throw exception;                                                                                                  // 19
}                                                                                                                   // 20
                                                                                                                    // 21
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"promise":{"lib":{"es6-extensions.js":["./core.js",function(require,exports,module){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// node_modules/meteor/promise/node_modules/promise/lib/es6-extensions.js                                           //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
'use strict';                                                                                                       // 1
                                                                                                                    // 2
//This file contains the ES6 extensions to the core Promises/A+ API                                                 // 3
                                                                                                                    // 4
var Promise = require('./core.js');                                                                                 // 5
                                                                                                                    // 6
module.exports = Promise;                                                                                           // 7
                                                                                                                    // 8
/* Static Functions */                                                                                              // 9
                                                                                                                    // 10
var TRUE = valuePromise(true);                                                                                      // 11
var FALSE = valuePromise(false);                                                                                    // 12
var NULL = valuePromise(null);                                                                                      // 13
var UNDEFINED = valuePromise(undefined);                                                                            // 14
var ZERO = valuePromise(0);                                                                                         // 15
var EMPTYSTRING = valuePromise('');                                                                                 // 16
                                                                                                                    // 17
function valuePromise(value) {                                                                                      // 18
  var p = new Promise(Promise._61);                                                                                 // 19
  p._81 = 1;                                                                                                        // 20
  p._65 = value;                                                                                                    // 21
  return p;                                                                                                         // 22
}                                                                                                                   // 23
Promise.resolve = function (value) {                                                                                // 24
  if (value instanceof Promise) return value;                                                                       // 25
                                                                                                                    // 26
  if (value === null) return NULL;                                                                                  // 27
  if (value === undefined) return UNDEFINED;                                                                        // 28
  if (value === true) return TRUE;                                                                                  // 29
  if (value === false) return FALSE;                                                                                // 30
  if (value === 0) return ZERO;                                                                                     // 31
  if (value === '') return EMPTYSTRING;                                                                             // 32
                                                                                                                    // 33
  if (typeof value === 'object' || typeof value === 'function') {                                                   // 34
    try {                                                                                                           // 35
      var then = value.then;                                                                                        // 36
      if (typeof then === 'function') {                                                                             // 37
        return new Promise(then.bind(value));                                                                       // 38
      }                                                                                                             // 39
    } catch (ex) {                                                                                                  // 40
      return new Promise(function (resolve, reject) {                                                               // 41
        reject(ex);                                                                                                 // 42
      });                                                                                                           // 43
    }                                                                                                               // 44
  }                                                                                                                 // 45
  return valuePromise(value);                                                                                       // 46
};                                                                                                                  // 47
                                                                                                                    // 48
Promise.all = function (arr) {                                                                                      // 49
  var args = Array.prototype.slice.call(arr);                                                                       // 50
                                                                                                                    // 51
  return new Promise(function (resolve, reject) {                                                                   // 52
    if (args.length === 0) return resolve([]);                                                                      // 53
    var remaining = args.length;                                                                                    // 54
    function res(i, val) {                                                                                          // 55
      if (val && (typeof val === 'object' || typeof val === 'function')) {                                          // 56
        if (val instanceof Promise && val.then === Promise.prototype.then) {                                        // 57
          while (val._81 === 3) {                                                                                   // 58
            val = val._65;                                                                                          // 59
          }                                                                                                         // 60
          if (val._81 === 1) return res(i, val._65);                                                                // 61
          if (val._81 === 2) reject(val._65);                                                                       // 62
          val.then(function (val) {                                                                                 // 63
            res(i, val);                                                                                            // 64
          }, reject);                                                                                               // 65
          return;                                                                                                   // 66
        } else {                                                                                                    // 67
          var then = val.then;                                                                                      // 68
          if (typeof then === 'function') {                                                                         // 69
            var p = new Promise(then.bind(val));                                                                    // 70
            p.then(function (val) {                                                                                 // 71
              res(i, val);                                                                                          // 72
            }, reject);                                                                                             // 73
            return;                                                                                                 // 74
          }                                                                                                         // 75
        }                                                                                                           // 76
      }                                                                                                             // 77
      args[i] = val;                                                                                                // 78
      if (--remaining === 0) {                                                                                      // 79
        resolve(args);                                                                                              // 80
      }                                                                                                             // 81
    }                                                                                                               // 82
    for (var i = 0; i < args.length; i++) {                                                                         // 83
      res(i, args[i]);                                                                                              // 84
    }                                                                                                               // 85
  });                                                                                                               // 86
};                                                                                                                  // 87
                                                                                                                    // 88
Promise.reject = function (value) {                                                                                 // 89
  return new Promise(function (resolve, reject) {                                                                   // 90
    reject(value);                                                                                                  // 91
  });                                                                                                               // 92
};                                                                                                                  // 93
                                                                                                                    // 94
Promise.race = function (values) {                                                                                  // 95
  return new Promise(function (resolve, reject) {                                                                   // 96
    values.forEach(function(value){                                                                                 // 97
      Promise.resolve(value).then(resolve, reject);                                                                 // 98
    });                                                                                                             // 99
  });                                                                                                               // 100
};                                                                                                                  // 101
                                                                                                                    // 102
/* Prototype Methods */                                                                                             // 103
                                                                                                                    // 104
Promise.prototype['catch'] = function (onRejected) {                                                                // 105
  return this.then(null, onRejected);                                                                               // 106
};                                                                                                                  // 107
                                                                                                                    // 108
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"core.js":["asap/raw",function(require,exports,module){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// node_modules/meteor/promise/node_modules/promise/lib/core.js                                                     //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
'use strict';                                                                                                       // 1
                                                                                                                    // 2
var asap = require('asap/raw');                                                                                     // 3
                                                                                                                    // 4
function noop() {}                                                                                                  // 5
                                                                                                                    // 6
// States:                                                                                                          // 7
//                                                                                                                  // 8
// 0 - pending                                                                                                      // 9
// 1 - fulfilled with _value                                                                                        // 10
// 2 - rejected with _value                                                                                         // 11
// 3 - adopted the state of another promise, _value                                                                 // 12
//                                                                                                                  // 13
// once the state is no longer pending (0) it is immutable                                                          // 14
                                                                                                                    // 15
// All `_` prefixed properties will be reduced to `_{random number}`                                                // 16
// at build time to obfuscate them and discourage their use.                                                        // 17
// We don't use symbols or Object.defineProperty to fully hide them                                                 // 18
// because the performance isn't good enough.                                                                       // 19
                                                                                                                    // 20
                                                                                                                    // 21
// to avoid using try/catch inside critical functions, we                                                           // 22
// extract them to here.                                                                                            // 23
var LAST_ERROR = null;                                                                                              // 24
var IS_ERROR = {};                                                                                                  // 25
function getThen(obj) {                                                                                             // 26
  try {                                                                                                             // 27
    return obj.then;                                                                                                // 28
  } catch (ex) {                                                                                                    // 29
    LAST_ERROR = ex;                                                                                                // 30
    return IS_ERROR;                                                                                                // 31
  }                                                                                                                 // 32
}                                                                                                                   // 33
                                                                                                                    // 34
function tryCallOne(fn, a) {                                                                                        // 35
  try {                                                                                                             // 36
    return fn(a);                                                                                                   // 37
  } catch (ex) {                                                                                                    // 38
    LAST_ERROR = ex;                                                                                                // 39
    return IS_ERROR;                                                                                                // 40
  }                                                                                                                 // 41
}                                                                                                                   // 42
function tryCallTwo(fn, a, b) {                                                                                     // 43
  try {                                                                                                             // 44
    fn(a, b);                                                                                                       // 45
  } catch (ex) {                                                                                                    // 46
    LAST_ERROR = ex;                                                                                                // 47
    return IS_ERROR;                                                                                                // 48
  }                                                                                                                 // 49
}                                                                                                                   // 50
                                                                                                                    // 51
module.exports = Promise;                                                                                           // 52
                                                                                                                    // 53
function Promise(fn) {                                                                                              // 54
  if (typeof this !== 'object') {                                                                                   // 55
    throw new TypeError('Promises must be constructed via new');                                                    // 56
  }                                                                                                                 // 57
  if (typeof fn !== 'function') {                                                                                   // 58
    throw new TypeError('not a function');                                                                          // 59
  }                                                                                                                 // 60
  this._45 = 0;                                                                                                     // 61
  this._81 = 0;                                                                                                     // 62
  this._65 = null;                                                                                                  // 63
  this._54 = null;                                                                                                  // 64
  if (fn === noop) return;                                                                                          // 65
  doResolve(fn, this);                                                                                              // 66
}                                                                                                                   // 67
Promise._10 = null;                                                                                                 // 68
Promise._97 = null;                                                                                                 // 69
Promise._61 = noop;                                                                                                 // 70
                                                                                                                    // 71
Promise.prototype.then = function(onFulfilled, onRejected) {                                                        // 72
  if (this.constructor !== Promise) {                                                                               // 73
    return safeThen(this, onFulfilled, onRejected);                                                                 // 74
  }                                                                                                                 // 75
  var res = new Promise(noop);                                                                                      // 76
  handle(this, new Handler(onFulfilled, onRejected, res));                                                          // 77
  return res;                                                                                                       // 78
};                                                                                                                  // 79
                                                                                                                    // 80
function safeThen(self, onFulfilled, onRejected) {                                                                  // 81
  return new self.constructor(function (resolve, reject) {                                                          // 82
    var res = new Promise(noop);                                                                                    // 83
    res.then(resolve, reject);                                                                                      // 84
    handle(self, new Handler(onFulfilled, onRejected, res));                                                        // 85
  });                                                                                                               // 86
};                                                                                                                  // 87
function handle(self, deferred) {                                                                                   // 88
  while (self._81 === 3) {                                                                                          // 89
    self = self._65;                                                                                                // 90
  }                                                                                                                 // 91
  if (Promise._10) {                                                                                                // 92
    Promise._10(self);                                                                                              // 93
  }                                                                                                                 // 94
  if (self._81 === 0) {                                                                                             // 95
    if (self._45 === 0) {                                                                                           // 96
      self._45 = 1;                                                                                                 // 97
      self._54 = deferred;                                                                                          // 98
      return;                                                                                                       // 99
    }                                                                                                               // 100
    if (self._45 === 1) {                                                                                           // 101
      self._45 = 2;                                                                                                 // 102
      self._54 = [self._54, deferred];                                                                              // 103
      return;                                                                                                       // 104
    }                                                                                                               // 105
    self._54.push(deferred);                                                                                        // 106
    return;                                                                                                         // 107
  }                                                                                                                 // 108
  handleResolved(self, deferred);                                                                                   // 109
}                                                                                                                   // 110
                                                                                                                    // 111
function handleResolved(self, deferred) {                                                                           // 112
  asap(function() {                                                                                                 // 113
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;                                           // 114
    if (cb === null) {                                                                                              // 115
      if (self._81 === 1) {                                                                                         // 116
        resolve(deferred.promise, self._65);                                                                        // 117
      } else {                                                                                                      // 118
        reject(deferred.promise, self._65);                                                                         // 119
      }                                                                                                             // 120
      return;                                                                                                       // 121
    }                                                                                                               // 122
    var ret = tryCallOne(cb, self._65);                                                                             // 123
    if (ret === IS_ERROR) {                                                                                         // 124
      reject(deferred.promise, LAST_ERROR);                                                                         // 125
    } else {                                                                                                        // 126
      resolve(deferred.promise, ret);                                                                               // 127
    }                                                                                                               // 128
  });                                                                                                               // 129
}                                                                                                                   // 130
function resolve(self, newValue) {                                                                                  // 131
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {                                                                                          // 133
    return reject(                                                                                                  // 134
      self,                                                                                                         // 135
      new TypeError('A promise cannot be resolved with itself.')                                                    // 136
    );                                                                                                              // 137
  }                                                                                                                 // 138
  if (                                                                                                              // 139
    newValue &&                                                                                                     // 140
    (typeof newValue === 'object' || typeof newValue === 'function')                                                // 141
  ) {                                                                                                               // 142
    var then = getThen(newValue);                                                                                   // 143
    if (then === IS_ERROR) {                                                                                        // 144
      return reject(self, LAST_ERROR);                                                                              // 145
    }                                                                                                               // 146
    if (                                                                                                            // 147
      then === self.then &&                                                                                         // 148
      newValue instanceof Promise                                                                                   // 149
    ) {                                                                                                             // 150
      self._81 = 3;                                                                                                 // 151
      self._65 = newValue;                                                                                          // 152
      finale(self);                                                                                                 // 153
      return;                                                                                                       // 154
    } else if (typeof then === 'function') {                                                                        // 155
      doResolve(then.bind(newValue), self);                                                                         // 156
      return;                                                                                                       // 157
    }                                                                                                               // 158
  }                                                                                                                 // 159
  self._81 = 1;                                                                                                     // 160
  self._65 = newValue;                                                                                              // 161
  finale(self);                                                                                                     // 162
}                                                                                                                   // 163
                                                                                                                    // 164
function reject(self, newValue) {                                                                                   // 165
  self._81 = 2;                                                                                                     // 166
  self._65 = newValue;                                                                                              // 167
  if (Promise._97) {                                                                                                // 168
    Promise._97(self, newValue);                                                                                    // 169
  }                                                                                                                 // 170
  finale(self);                                                                                                     // 171
}                                                                                                                   // 172
function finale(self) {                                                                                             // 173
  if (self._45 === 1) {                                                                                             // 174
    handle(self, self._54);                                                                                         // 175
    self._54 = null;                                                                                                // 176
  }                                                                                                                 // 177
  if (self._45 === 2) {                                                                                             // 178
    for (var i = 0; i < self._54.length; i++) {                                                                     // 179
      handle(self, self._54[i]);                                                                                    // 180
    }                                                                                                               // 181
    self._54 = null;                                                                                                // 182
  }                                                                                                                 // 183
}                                                                                                                   // 184
                                                                                                                    // 185
function Handler(onFulfilled, onRejected, promise){                                                                 // 186
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;                                        // 187
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;                                           // 188
  this.promise = promise;                                                                                           // 189
}                                                                                                                   // 190
                                                                                                                    // 191
/**                                                                                                                 // 192
 * Take a potentially misbehaving resolver function and make sure                                                   // 193
 * onFulfilled and onRejected are only called once.                                                                 // 194
 *                                                                                                                  // 195
 * Makes no guarantees about asynchrony.                                                                            // 196
 */                                                                                                                 // 197
function doResolve(fn, promise) {                                                                                   // 198
  var done = false;                                                                                                 // 199
  var res = tryCallTwo(fn, function (value) {                                                                       // 200
    if (done) return;                                                                                               // 201
    done = true;                                                                                                    // 202
    resolve(promise, value);                                                                                        // 203
  }, function (reason) {                                                                                            // 204
    if (done) return;                                                                                               // 205
    done = true;                                                                                                    // 206
    reject(promise, reason);                                                                                        // 207
  })                                                                                                                // 208
  if (!done && res === IS_ERROR) {                                                                                  // 209
    done = true;                                                                                                    // 210
    reject(promise, LAST_ERROR);                                                                                    // 211
  }                                                                                                                 // 212
}                                                                                                                   // 213
                                                                                                                    // 214
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"asap":{"raw.js":["domain",function(require,exports,module){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// node_modules/meteor/promise/node_modules/asap/raw.js                                                             //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
"use strict";                                                                                                       // 1
                                                                                                                    // 2
var domain; // The domain module is executed on demand                                                              // 3
var hasSetImmediate = typeof setImmediate === "function";                                                           // 4
                                                                                                                    // 5
// Use the fastest means possible to execute a task in its own turn, with                                           // 6
// priority over other events including network IO events in Node.js.                                               // 7
//                                                                                                                  // 8
// An exception thrown by a task will permanently interrupt the processing of                                       // 9
// subsequent tasks. The higher level `asap` function ensures that if an                                            // 10
// exception is thrown by a task, that the task queue will continue flushing as                                     // 11
// soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 12
// either ensure that no exceptions are thrown from your task, or to manually                                       // 13
// call `rawAsap.requestFlush` if an exception is thrown.                                                           // 14
module.exports = rawAsap;                                                                                           // 15
function rawAsap(task) {                                                                                            // 16
    if (!queue.length) {                                                                                            // 17
        requestFlush();                                                                                             // 18
        flushing = true;                                                                                            // 19
    }                                                                                                               // 20
    // Avoids a function call                                                                                       // 21
    queue[queue.length] = task;                                                                                     // 22
}                                                                                                                   // 23
                                                                                                                    // 24
var queue = [];                                                                                                     // 25
// Once a flush has been requested, no further calls to `requestFlush` are                                          // 26
// necessary until the next `flush` completes.                                                                      // 27
var flushing = false;                                                                                               // 28
// The position of the next task to execute in the task queue. This is                                              // 29
// preserved between calls to `flush` so that it can be resumed if                                                  // 30
// a task throws an exception.                                                                                      // 31
var index = 0;                                                                                                      // 32
// If a task schedules additional tasks recursively, the task queue can grow                                        // 33
// unbounded. To prevent memory excaustion, the task queue will periodically                                        // 34
// truncate already-completed tasks.                                                                                // 35
var capacity = 1024;                                                                                                // 36
                                                                                                                    // 37
// The flush function processes all tasks that have been scheduled with                                             // 38
// `rawAsap` unless and until one of those tasks throws an exception.                                               // 39
// If a task throws an exception, `flush` ensures that its state will remain                                        // 40
// consistent and will resume where it left off when called again.                                                  // 41
// However, `flush` does not make any arrangements to be called again if an                                         // 42
// exception is thrown.                                                                                             // 43
function flush() {                                                                                                  // 44
    while (index < queue.length) {                                                                                  // 45
        var currentIndex = index;                                                                                   // 46
        // Advance the index before calling the task. This ensures that we will                                     // 47
        // begin flushing on the next task the task throws an error.                                                // 48
        index = index + 1;                                                                                          // 49
        queue[currentIndex].call();                                                                                 // 50
        // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 51
        // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 52
        // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 53
        // shift tasks off the queue after they have been executed.                                                 // 54
        // Instead, we periodically shift 1024 tasks off the queue.                                                 // 55
        if (index > capacity) {                                                                                     // 56
            // Manually shift all values starting at the index back to the                                          // 57
            // beginning of the queue.                                                                              // 58
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {                        // 59
                queue[scan] = queue[scan + index];                                                                  // 60
            }                                                                                                       // 61
            queue.length -= index;                                                                                  // 62
            index = 0;                                                                                              // 63
        }                                                                                                           // 64
    }                                                                                                               // 65
    queue.length = 0;                                                                                               // 66
    index = 0;                                                                                                      // 67
    flushing = false;                                                                                               // 68
}                                                                                                                   // 69
                                                                                                                    // 70
rawAsap.requestFlush = requestFlush;                                                                                // 71
function requestFlush() {                                                                                           // 72
    // Ensure flushing is not bound to any domain.                                                                  // 73
    // It is not sufficient to exit the domain, because domains exist on a stack.                                   // 74
    // To execute code outside of any domain, the following dance is necessary.                                     // 75
    var parentDomain = process.domain;                                                                              // 76
    if (parentDomain) {                                                                                             // 77
        if (!domain) {                                                                                              // 78
            // Lazy execute the domain module.                                                                      // 79
            // Only employed if the user elects to use domains.                                                     // 80
            domain = require("domain");                                                                             // 81
        }                                                                                                           // 82
        domain.active = process.domain = null;                                                                      // 83
    }                                                                                                               // 84
                                                                                                                    // 85
    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`                                     // 86
    // cannot handle recursion.                                                                                     // 87
    // `requestFlush` will only be called recursively from `asap.js`, to resume                                     // 88
    // flushing after an error is thrown into a domain.                                                             // 89
    // Conveniently, `setImmediate` was introduced in the same version                                              // 90
    // `process.nextTick` started throwing recursion errors.                                                        // 91
    if (flushing && hasSetImmediate) {                                                                              // 92
        setImmediate(flush);                                                                                        // 93
    } else {                                                                                                        // 94
        process.nextTick(flush);                                                                                    // 95
    }                                                                                                               // 96
                                                                                                                    // 97
    if (parentDomain) {                                                                                             // 98
        domain.active = process.domain = parentDomain;                                                              // 99
    }                                                                                                               // 100
}                                                                                                                   // 101
                                                                                                                    // 102
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/promise/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.promise = exports, {
  Promise: Promise
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var Symbol, Map, Set, __g, __e;

var require = meteorInstall({"node_modules":{"meteor":{"ecmascript-runtime":{"runtime.js":["meteor-ecmascript-runtime",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/ecmascript-runtime/runtime.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// TODO Allow just api.mainModule("meteor-ecmascript-runtime");                                                        // 1
module.exports = require("meteor-ecmascript-runtime");                                                                 // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"meteor-ecmascript-runtime":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.0.3.15.1pzmsgt++os+web.browser+web.cordova/npm/node_modules/meteor-ecmascript-runtime/package.json           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "meteor-ecmascript-runtime";                                                                            // 1
exports.version = "0.2.9";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["core-js/es6/object","core-js/es6/array","core-js/es6/string","core-js/es6/function","core-js/fn/array/includes","core-js/fn/object/values","core-js/fn/object/entries","core-js/fn/object/get-own-property-descriptors","core-js/fn/string/pad-start","core-js/fn/string/pad-end","core-js/fn/string/trim-start","core-js/fn/string/trim-end","core-js/es6/symbol","core-js/es6/map","core-js/es6/set",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/meteor-ecmascript-runtime/index.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("core-js/es6/object");                                                                                         // 1
require("core-js/es6/array");                                                                                          // 2
require("core-js/es6/string");                                                                                         // 3
require("core-js/es6/function");                                                                                       // 4
require("core-js/fn/array/includes");                                                                                  // 5
require("core-js/fn/object/values");                                                                                   // 6
require("core-js/fn/object/entries");                                                                                  // 7
require("core-js/fn/object/get-own-property-descriptors");                                                             // 8
require("core-js/fn/string/pad-start");                                                                                // 9
require("core-js/fn/string/pad-end");                                                                                  // 10
require("core-js/fn/string/trim-start");                                                                               // 11
require("core-js/fn/string/trim-end");                                                                                 // 12
                                                                                                                       // 13
Symbol = exports.Symbol = global.Symbol ||                                                                             // 14
  require("core-js/es6/symbol");                                                                                       // 15
                                                                                                                       // 16
Map = exports.Map = require("core-js/es6/map");                                                                        // 17
Set = exports.Set = require("core-js/es6/set");                                                                        // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"core-js":{"es6":{"object.js":["../modules/es6.symbol","../modules/es6.object.create","../modules/es6.object.define-property","../modules/es6.object.define-properties","../modules/es6.object.get-own-property-descriptor","../modules/es6.object.get-prototype-of","../modules/es6.object.keys","../modules/es6.object.get-own-property-names","../modules/es6.object.freeze","../modules/es6.object.seal","../modules/es6.object.prevent-extensions","../modules/es6.object.is-frozen","../modules/es6.object.is-sealed","../modules/es6.object.is-extensible","../modules/es6.object.assign","../modules/es6.object.is","../modules/es6.object.set-prototype-of","../modules/es6.object.to-string","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/object.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.symbol');                                                                                      // 1
require('../modules/es6.object.create');                                                                               // 2
require('../modules/es6.object.define-property');                                                                      // 3
require('../modules/es6.object.define-properties');                                                                    // 4
require('../modules/es6.object.get-own-property-descriptor');                                                          // 5
require('../modules/es6.object.get-prototype-of');                                                                     // 6
require('../modules/es6.object.keys');                                                                                 // 7
require('../modules/es6.object.get-own-property-names');                                                               // 8
require('../modules/es6.object.freeze');                                                                               // 9
require('../modules/es6.object.seal');                                                                                 // 10
require('../modules/es6.object.prevent-extensions');                                                                   // 11
require('../modules/es6.object.is-frozen');                                                                            // 12
require('../modules/es6.object.is-sealed');                                                                            // 13
require('../modules/es6.object.is-extensible');                                                                        // 14
require('../modules/es6.object.assign');                                                                               // 15
require('../modules/es6.object.is');                                                                                   // 16
require('../modules/es6.object.set-prototype-of');                                                                     // 17
require('../modules/es6.object.to-string');                                                                            // 18
                                                                                                                       // 19
module.exports = require('../modules/_core').Object;                                                                   // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"array.js":["../modules/es6.string.iterator","../modules/es6.array.is-array","../modules/es6.array.from","../modules/es6.array.of","../modules/es6.array.join","../modules/es6.array.slice","../modules/es6.array.sort","../modules/es6.array.for-each","../modules/es6.array.map","../modules/es6.array.filter","../modules/es6.array.some","../modules/es6.array.every","../modules/es6.array.reduce","../modules/es6.array.reduce-right","../modules/es6.array.index-of","../modules/es6.array.last-index-of","../modules/es6.array.copy-within","../modules/es6.array.fill","../modules/es6.array.find","../modules/es6.array.find-index","../modules/es6.array.species","../modules/es6.array.iterator","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/array.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.string.iterator');                                                                             // 1
require('../modules/es6.array.is-array');                                                                              // 2
require('../modules/es6.array.from');                                                                                  // 3
require('../modules/es6.array.of');                                                                                    // 4
require('../modules/es6.array.join');                                                                                  // 5
require('../modules/es6.array.slice');                                                                                 // 6
require('../modules/es6.array.sort');                                                                                  // 7
require('../modules/es6.array.for-each');                                                                              // 8
require('../modules/es6.array.map');                                                                                   // 9
require('../modules/es6.array.filter');                                                                                // 10
require('../modules/es6.array.some');                                                                                  // 11
require('../modules/es6.array.every');                                                                                 // 12
require('../modules/es6.array.reduce');                                                                                // 13
require('../modules/es6.array.reduce-right');                                                                          // 14
require('../modules/es6.array.index-of');                                                                              // 15
require('../modules/es6.array.last-index-of');                                                                         // 16
require('../modules/es6.array.copy-within');                                                                           // 17
require('../modules/es6.array.fill');                                                                                  // 18
require('../modules/es6.array.find');                                                                                  // 19
require('../modules/es6.array.find-index');                                                                            // 20
require('../modules/es6.array.species');                                                                               // 21
require('../modules/es6.array.iterator');                                                                              // 22
module.exports = require('../modules/_core').Array;                                                                    // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"string.js":["../modules/es6.string.from-code-point","../modules/es6.string.raw","../modules/es6.string.trim","../modules/es6.string.iterator","../modules/es6.string.code-point-at","../modules/es6.string.ends-with","../modules/es6.string.includes","../modules/es6.string.repeat","../modules/es6.string.starts-with","../modules/es6.string.anchor","../modules/es6.string.big","../modules/es6.string.blink","../modules/es6.string.bold","../modules/es6.string.fixed","../modules/es6.string.fontcolor","../modules/es6.string.fontsize","../modules/es6.string.italics","../modules/es6.string.link","../modules/es6.string.small","../modules/es6.string.strike","../modules/es6.string.sub","../modules/es6.string.sup","../modules/es6.regexp.match","../modules/es6.regexp.replace","../modules/es6.regexp.search","../modules/es6.regexp.split","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/string.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.string.from-code-point');                                                                      // 1
require('../modules/es6.string.raw');                                                                                  // 2
require('../modules/es6.string.trim');                                                                                 // 3
require('../modules/es6.string.iterator');                                                                             // 4
require('../modules/es6.string.code-point-at');                                                                        // 5
require('../modules/es6.string.ends-with');                                                                            // 6
require('../modules/es6.string.includes');                                                                             // 7
require('../modules/es6.string.repeat');                                                                               // 8
require('../modules/es6.string.starts-with');                                                                          // 9
require('../modules/es6.string.anchor');                                                                               // 10
require('../modules/es6.string.big');                                                                                  // 11
require('../modules/es6.string.blink');                                                                                // 12
require('../modules/es6.string.bold');                                                                                 // 13
require('../modules/es6.string.fixed');                                                                                // 14
require('../modules/es6.string.fontcolor');                                                                            // 15
require('../modules/es6.string.fontsize');                                                                             // 16
require('../modules/es6.string.italics');                                                                              // 17
require('../modules/es6.string.link');                                                                                 // 18
require('../modules/es6.string.small');                                                                                // 19
require('../modules/es6.string.strike');                                                                               // 20
require('../modules/es6.string.sub');                                                                                  // 21
require('../modules/es6.string.sup');                                                                                  // 22
require('../modules/es6.regexp.match');                                                                                // 23
require('../modules/es6.regexp.replace');                                                                              // 24
require('../modules/es6.regexp.search');                                                                               // 25
require('../modules/es6.regexp.split');                                                                                // 26
module.exports = require('../modules/_core').String;                                                                   // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"function.js":["../modules/es6.function.bind","../modules/es6.function.name","../modules/es6.function.has-instance","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/function.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.function.bind');                                                                               // 1
require('../modules/es6.function.name');                                                                               // 2
require('../modules/es6.function.has-instance');                                                                       // 3
module.exports = require('../modules/_core').Function;                                                                 // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"symbol.js":["../modules/es6.symbol","../modules/es6.object.to-string","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/symbol.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.symbol');                                                                                      // 1
require('../modules/es6.object.to-string');                                                                            // 2
module.exports = require('../modules/_core').Symbol;                                                                   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"map.js":["../modules/es6.object.to-string","../modules/es6.string.iterator","../modules/web.dom.iterable","../modules/es6.map","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/map.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.object.to-string');                                                                            // 1
require('../modules/es6.string.iterator');                                                                             // 2
require('../modules/web.dom.iterable');                                                                                // 3
require('../modules/es6.map');                                                                                         // 4
module.exports = require('../modules/_core').Map;                                                                      // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"set.js":["../modules/es6.object.to-string","../modules/es6.string.iterator","../modules/web.dom.iterable","../modules/es6.set","../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/es6/set.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.object.to-string');                                                                            // 1
require('../modules/es6.string.iterator');                                                                             // 2
require('../modules/web.dom.iterable');                                                                                // 3
require('../modules/es6.set');                                                                                         // 4
module.exports = require('../modules/_core').Set;                                                                      // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"modules":{"es6.symbol.js":["./_global","./_has","./_descriptors","./_export","./_redefine","./_meta","./_fails","./_shared","./_set-to-string-tag","./_uid","./_wks","./_wks-ext","./_wks-define","./_keyof","./_enum-keys","./_is-array","./_an-object","./_to-iobject","./_to-primitive","./_property-desc","./_object-create","./_object-gopn-ext","./_object-gopd","./_object-dp","./_object-keys","./_object-gopn","./_object-pie","./_object-gops","./_library","./_hide",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.symbol.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global         = require('./_global')                                                                              // 3
  , has            = require('./_has')                                                                                 // 4
  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5
  , $export        = require('./_export')                                                                              // 6
  , redefine       = require('./_redefine')                                                                            // 7
  , META           = require('./_meta').KEY                                                                            // 8
  , $fails         = require('./_fails')                                                                               // 9
  , shared         = require('./_shared')                                                                              // 10
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11
  , uid            = require('./_uid')                                                                                 // 12
  , wks            = require('./_wks')                                                                                 // 13
  , wksExt         = require('./_wks-ext')                                                                             // 14
  , wksDefine      = require('./_wks-define')                                                                          // 15
  , keyOf          = require('./_keyof')                                                                               // 16
  , enumKeys       = require('./_enum-keys')                                                                           // 17
  , isArray        = require('./_is-array')                                                                            // 18
  , anObject       = require('./_an-object')                                                                           // 19
  , toIObject      = require('./_to-iobject')                                                                          // 20
  , toPrimitive    = require('./_to-primitive')                                                                        // 21
  , createDesc     = require('./_property-desc')                                                                       // 22
  , _create        = require('./_object-create')                                                                       // 23
  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24
  , $GOPD          = require('./_object-gopd')                                                                         // 25
  , $DP            = require('./_object-dp')                                                                           // 26
  , $keys          = require('./_object-keys')                                                                         // 27
  , gOPD           = $GOPD.f                                                                                           // 28
  , dP             = $DP.f                                                                                             // 29
  , gOPN           = gOPNExt.f                                                                                         // 30
  , $Symbol        = global.Symbol                                                                                     // 31
  , $JSON          = global.JSON                                                                                       // 32
  , _stringify     = $JSON && $JSON.stringify                                                                          // 33
  , PROTOTYPE      = 'prototype'                                                                                       // 34
  , HIDDEN         = wks('_hidden')                                                                                    // 35
  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36
  , isEnum         = {}.propertyIsEnumerable                                                                           // 37
  , SymbolRegistry = shared('symbol-registry')                                                                         // 38
  , AllSymbols     = shared('symbols')                                                                                 // 39
  , OPSymbols      = shared('op-symbols')                                                                              // 40
  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41
  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42
  , QObject        = global.QObject;                                                                                   // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50
  })).a != 7;                                                                                                          // 51
}) ? function(it, key, D){                                                                                             // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if(protoDesc)delete ObjectProto[key];                                                                                // 54
  dP(it, key, D);                                                                                                      // 55
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function(tag){                                                                                              // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function(it){                                                                                                      // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D){                                                             // 71
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if(has(AllSymbols, key)){                                                                                            // 76
    if(!D.enumerable){                                                                                                 // 77
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81
      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P){                                                              // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P))                                                                                // 88
    , i    = 0                                                                                                         // 89
    , l = keys.length                                                                                                  // 90
    , key;                                                                                                             // 91
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P){                                                                                  // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103
  it  = toIObject(it);                                                                                                 // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106
  var D = gOPD(it, key);                                                                                               // 107
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111
  var names  = gOPN(toIObject(it))                                                                                     // 112
    , result = []                                                                                                      // 113
    , i      = 0                                                                                                       // 114
    , key;                                                                                                             // 115
  while(names.length > i){                                                                                             // 116
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120
  var IS_OP  = it === ObjectProto                                                                                      // 121
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122
    , result = []                                                                                                      // 123
    , i      = 0                                                                                                       // 124
    , key;                                                                                                             // 125
  while(names.length > i){                                                                                             // 126
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if(!USE_NATIVE){                                                                                                       // 132
  $Symbol = function Symbol(){                                                                                         // 133
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function(value){                                                                                        // 136
      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f   = $defineProperty;                                                                                           // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if(DESCRIPTORS && !require('./_library')){                                                                           // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function(name){                                                                                           // 158
    return wrap(wks(name));                                                                                            // 159
  }                                                                                                                    // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163
                                                                                                                       // 164
for(var symbols = (                                                                                                    // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168
                                                                                                                       // 169
for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function(key){                                                                                                // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(key){                                                                                        // 180
    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181
    throw TypeError(key + ' is not a symbol!');                                                                        // 182
  },                                                                                                                   // 183
  useSetter: function(){ setter = true; },                                                                             // 184
  useSimple: function(){ setter = false; }                                                                             // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it){                                                                                   // 211
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212
    var args = [it]                                                                                                    // 213
      , i    = 1                                                                                                       // 214
      , replacer, $replacer;                                                                                           // 215
    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216
    replacer = args[1];                                                                                                // 217
    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218
    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219
      if($replacer)value = $replacer.call(this, key, value);                                                           // 220
      if(!isSymbol(value))return value;                                                                                // 221
    };                                                                                                                 // 222
    args[1] = replacer;                                                                                                // 223
    return _stringify.apply($JSON, args);                                                                              // 224
  }                                                                                                                    // 225
});                                                                                                                    // 226
                                                                                                                       // 227
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230
setToStringTag($Symbol, 'Symbol');                                                                                     // 231
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232
setToStringTag(Math, 'Math', true);                                                                                    // 233
// 24.3.3 JSON[@@toStringTag]                                                                                          // 234
setToStringTag(global.JSON, 'JSON', true);                                                                             // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_global.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_has.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function(it, key){                                                                                    // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_descriptors.js":["./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_descriptors.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function(){                                                                      // 2
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_fails.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(exec){                                                                                       // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch(e){                                                                                                          // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_export.js":["./_global","./_core","./_hide","./_redefine","./_ctx",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_export.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global    = require('./_global')                                                                                   // 1
  , core      = require('./_core')                                                                                     // 2
  , hide      = require('./_hide')                                                                                     // 3
  , redefine  = require('./_redefine')                                                                                 // 4
  , ctx       = require('./_ctx')                                                                                      // 5
  , PROTOTYPE = 'prototype';                                                                                           // 6
                                                                                                                       // 7
var $export = function(type, name, source){                                                                            // 8
  var IS_FORCED = type & $export.F                                                                                     // 9
    , IS_GLOBAL = type & $export.G                                                                                     // 10
    , IS_STATIC = type & $export.S                                                                                     // 11
    , IS_PROTO  = type & $export.P                                                                                     // 12
    , IS_BIND   = type & $export.B                                                                                     // 13
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 15
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})                                                      // 16
    , key, own, out, exp;                                                                                              // 17
  if(IS_GLOBAL)source = name;                                                                                          // 18
  for(key in source){                                                                                                  // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    // export native or passed                                                                                         // 22
    out = (own ? target : source)[key];                                                                                // 23
    // bind timers to global for call from export context                                                              // 24
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;    // 25
    // extend global                                                                                                   // 26
    if(target)redefine(target, key, out, type & $export.U);                                                            // 27
    // export                                                                                                          // 28
    if(exports[key] != out)hide(exports, key, exp);                                                                    // 29
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;                                                           // 30
  }                                                                                                                    // 31
};                                                                                                                     // 32
global.core = core;                                                                                                    // 33
// type bitmap                                                                                                         // 34
$export.F = 1;   // forced                                                                                             // 35
$export.G = 2;   // global                                                                                             // 36
$export.S = 4;   // static                                                                                             // 37
$export.P = 8;   // proto                                                                                              // 38
$export.B = 16;  // bind                                                                                               // 39
$export.W = 32;  // wrap                                                                                               // 40
$export.U = 64;  // safe                                                                                               // 41
$export.R = 128; // real proto method for `library`                                                                    // 42
module.exports = $export;                                                                                              // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_core.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = {version: '2.4.0'};                                                                        // 1
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":["./_object-dp","./_property-desc","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_hide.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP         = require('./_object-dp')                                                                               // 1
  , createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function(object, key, value){                                             // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function(object, key, value){                                                                                      // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dp.js":["./_an-object","./_ie8-dom-define","./_to-primitive","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-dp.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject       = require('./_an-object')                                                                           // 1
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2
  , toPrimitive    = require('./_to-primitive')                                                                        // 3
  , dP             = Object.defineProperty;                                                                            // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if(IE8_DOM_DEFINE)try {                                                                                              // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch(e){ /* empty */ }                                                                                            // 12
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13
  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_an-object.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_an-object.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function(it){                                                                                         // 2
  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_is-object.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":["./_descriptors","./_fails","./_dom-create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_ie8-dom-define.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2
});                                                                                                                    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_dom-create.js":["./_is-object","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_dom-create.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object')                                                                                 // 1
  , document = require('./_global').document                                                                           // 2
  // in old IE typeof document.createElement is 'object'                                                               // 3
  , is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function(it){                                                                                         // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-primitive.js":["./_is-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-primitive.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function(it, S){                                                                                      // 5
  if(!isObject(it))return it;                                                                                          // 6
  var fn, val;                                                                                                         // 7
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_property-desc.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(bitmap, value){                                                                              // 1
  return {                                                                                                             // 2
    enumerable  : !(bitmap & 1),                                                                                       // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable    : !(bitmap & 4),                                                                                       // 5
    value       : value                                                                                                // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":["./_global","./_hide","./_has","./_uid","./_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_redefine.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global    = require('./_global')                                                                                   // 1
  , hide      = require('./_hide')                                                                                     // 2
  , has       = require('./_has')                                                                                      // 3
  , SRC       = require('./_uid')('src')                                                                               // 4
  , TO_STRING = 'toString'                                                                                             // 5
  , $toString = Function[TO_STRING]                                                                                    // 6
  , TPL       = ('' + $toString).split(TO_STRING);                                                                     // 7
                                                                                                                       // 8
require('./_core').inspectSource = function(it){                                                                       // 9
  return $toString.call(it);                                                                                           // 10
};                                                                                                                     // 11
                                                                                                                       // 12
(module.exports = function(O, key, val, safe){                                                                         // 13
  var isFunction = typeof val == 'function';                                                                           // 14
  if(isFunction)has(val, 'name') || hide(val, 'name', key);                                                            // 15
  if(O[key] === val)return;                                                                                            // 16
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));                         // 17
  if(O === global){                                                                                                    // 18
    O[key] = val;                                                                                                      // 19
  } else {                                                                                                             // 20
    if(!safe){                                                                                                         // 21
      delete O[key];                                                                                                   // 22
      hide(O, key, val);                                                                                               // 23
    } else {                                                                                                           // 24
      if(O[key])O[key] = val;                                                                                          // 25
      else hide(O, key, val);                                                                                          // 26
    }                                                                                                                  // 27
  }                                                                                                                    // 28
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative        // 29
})(Function.prototype, TO_STRING, function toString(){                                                                 // 30
  return typeof this == 'function' && this[SRC] || $toString.call(this);                                               // 31
});                                                                                                                    // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_uid.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0                                                                                                             // 1
  , px = Math.random();                                                                                                // 2
module.exports = function(key){                                                                                        // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":["./_a-function",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_ctx.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function(fn, that, length){                                                                           // 3
  aFunction(fn);                                                                                                       // 4
  if(that === undefined)return fn;                                                                                     // 5
  switch(length){                                                                                                      // 6
    case 1: return function(a){                                                                                        // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function(a, b){                                                                                     // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function(a, b, c){                                                                                  // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function(/* ...args */){                                                                                      // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_a-function.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it){                                                                                         // 1
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_meta.js":["./_uid","./_is-object","./_has","./_object-dp","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_meta.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META     = require('./_uid')('meta')                                                                               // 1
  , isObject = require('./_is-object')                                                                                 // 2
  , has      = require('./_has')                                                                                       // 3
  , setDesc  = require('./_object-dp').f                                                                               // 4
  , id       = 0;                                                                                                      // 5
var isExtensible = Object.isExtensible || function(){                                                                  // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function(){                                                                          // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function(it){                                                                                            // 12
  setDesc(it, META, {value: {                                                                                          // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  }});                                                                                                                 // 16
};                                                                                                                     // 17
var fastKey = function(it, create){                                                                                    // 18
  // return primitive with prefix                                                                                      // 19
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20
  if(!has(it, META)){                                                                                                  // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if(!isExtensible(it))return 'F';                                                                                   // 23
    // not necessary to add metadata                                                                                   // 24
    if(!create)return 'E';                                                                                             // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function(it, create){                                                                                    // 31
  if(!has(it, META)){                                                                                                  // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if(!isExtensible(it))return true;                                                                                  // 34
    // not necessary to add metadata                                                                                   // 35
    if(!create)return false;                                                                                           // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function(it){                                                                                           // 43
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY:      META,                                                                                                      // 48
  NEED:     false,                                                                                                     // 49
  fastKey:  fastKey,                                                                                                   // 50
  getWeak:  getWeak,                                                                                                   // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_shared.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global')                                                                                      // 1
  , SHARED = '__core-js_shared__'                                                                                      // 2
  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3
module.exports = function(key){                                                                                        // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-to-string-tag.js":["./_object-dp","./_has","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_set-to-string-tag.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f                                                                                    // 1
  , has = require('./_has')                                                                                            // 2
  , TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function(it, tag, stat){                                                                              // 5
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks.js":["./_shared","./_uid","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_wks.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store      = require('./_shared')('wks')                                                                           // 1
  , uid        = require('./_uid')                                                                                     // 2
  , Symbol     = require('./_global').Symbol                                                                           // 3
  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function(name){                                                                        // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks-ext.js":["./_wks",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_wks-ext.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_wks-define.js":["./_global","./_core","./_library","./_wks-ext","./_object-dp",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_wks-define.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global         = require('./_global')                                                                              // 1
  , core           = require('./_core')                                                                                // 2
  , LIBRARY        = require('./_library')                                                                             // 3
  , wksExt         = require('./_wks-ext')                                                                             // 4
  , defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function(name){                                                                                       // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_library.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = false;                                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_keyof.js":["./_object-keys","./_to-iobject",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_keyof.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys   = require('./_object-keys')                                                                              // 1
  , toIObject = require('./_to-iobject');                                                                              // 2
module.exports = function(object, el){                                                                                 // 3
  var O      = toIObject(object)                                                                                       // 4
    , keys   = getKeys(O)                                                                                              // 5
    , length = keys.length                                                                                             // 6
    , index  = 0                                                                                                       // 7
    , key;                                                                                                             // 8
  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-keys.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys       = require('./_object-keys-internal')                                                                   // 2
  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O){                                                                      // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-keys-internal.js":["./_has","./_to-iobject","./_array-includes","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-keys-internal.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has          = require('./_has')                                                                                   // 1
  , toIObject    = require('./_to-iobject')                                                                            // 2
  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4
                                                                                                                       // 5
module.exports = function(object, names){                                                                              // 6
  var O      = toIObject(object)                                                                                       // 7
    , i      = 0                                                                                                       // 8
    , result = []                                                                                                      // 9
    , key;                                                                                                             // 10
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-iobject.js":["./_iobject","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-iobject.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject')                                                                                    // 2
  , defined = require('./_defined');                                                                                   // 3
module.exports = function(it){                                                                                         // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iobject.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iobject.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_cof.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function(it){                                                                                         // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_defined.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function(it){                                                                                         // 2
  if(it == undefined)throw TypeError("Can't call method on  " + it);                                                   // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":["./_to-iobject","./_to-length","./_to-index",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-includes.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject')                                                                               // 3
  , toLength  = require('./_to-length')                                                                                // 4
  , toIndex   = require('./_to-index');                                                                                // 5
module.exports = function(IS_INCLUDES){                                                                                // 6
  return function($this, el, fromIndex){                                                                               // 7
    var O      = toIObject($this)                                                                                      // 8
      , length = toLength(O.length)                                                                                    // 9
      , index  = toIndex(fromIndex, length)                                                                            // 10
      , value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13
      value = O[index++];                                                                                              // 14
      if(value != value)return true;                                                                                   // 15
    // Array#toIndex ignores holes, Array#includes - not                                                               // 16
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17
      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18
    } return !IS_INCLUDES && -1;                                                                                       // 19
  };                                                                                                                   // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-length.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-length.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer')                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(it){                                                                                         // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-integer.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil  = Math.ceil                                                                                                  // 2
  , floor = Math.floor;                                                                                                // 3
module.exports = function(it){                                                                                         // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-index.js":["./_to-integer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-index.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , max       = Math.max                                                                                               // 2
  , min       = Math.min;                                                                                              // 3
module.exports = function(index, length){                                                                              // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_shared-key.js":["./_shared","./_uid",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_shared-key.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys')                                                                              // 1
  , uid    = require('./_uid');                                                                                        // 2
module.exports = function(key){                                                                                        // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_enum-bug-keys.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-keys.js":["./_object-keys","./_object-gops","./_object-pie",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_enum-keys.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys')                                                                                // 2
  , gOPS    = require('./_object-gops')                                                                                // 3
  , pIE     = require('./_object-pie');                                                                                // 4
module.exports = function(it){                                                                                         // 5
  var result     = getKeys(it)                                                                                         // 6
    , getSymbols = gOPS.f;                                                                                             // 7
  if(getSymbols){                                                                                                      // 8
    var symbols = getSymbols(it)                                                                                       // 9
      , isEnum  = pIE.f                                                                                                // 10
      , i       = 0                                                                                                    // 11
      , key;                                                                                                           // 12
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-gops.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-pie.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array.js":["./_cof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_is-array.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg){                                                               // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-create.js":["./_an-object","./_object-dps","./_enum-bug-keys","./_shared-key","./_dom-create","./_html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-create.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject    = require('./_an-object')                                                                              // 2
  , dPs         = require('./_object-dps')                                                                             // 3
  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5
  , Empty       = function(){ /* empty */ }                                                                            // 6
  , PROTOTYPE   = 'prototype';                                                                                         // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function(){                                                                                           // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe')                                                                      // 12
    , i      = enumBugKeys.length                                                                                      // 13
    , lt     = '<'                                                                                                     // 14
    , gt     = '>'                                                                                                     // 15
    , iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties){                                                      // 31
  var result;                                                                                                          // 32
  if(O !== null){                                                                                                      // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty;                                                                                                // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-dps.js":["./_object-dp","./_an-object","./_object-keys","./_descriptors",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-dps.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP       = require('./_object-dp')                                                                                 // 1
  , anObject = require('./_an-object')                                                                                 // 2
  , getKeys  = require('./_object-keys');                                                                              // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5
  anObject(O);                                                                                                         // 6
  var keys   = getKeys(Properties)                                                                                     // 7
    , length = keys.length                                                                                             // 8
    , i = 0                                                                                                            // 9
    , P;                                                                                                               // 10
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_html.js":["./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_html.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_global').document && document.documentElement;                                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn-ext.js":["./_to-iobject","./_object-gopn",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-gopn-ext.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject')                                                                               // 2
  , gOPN      = require('./_object-gopn').f                                                                            // 3
  , toString  = {}.toString;                                                                                           // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function(it){                                                                                     // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch(e){                                                                                                          // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it){                                                                   // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopn.js":["./_object-keys-internal","./_enum-bug-keys",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-gopn.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys      = require('./_object-keys-internal')                                                                    // 2
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gopd.js":["./_object-pie","./_property-desc","./_to-iobject","./_to-primitive","./_has","./_ie8-dom-define","./_descriptors",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-gopd.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE            = require('./_object-pie')                                                                          // 1
  , createDesc     = require('./_property-desc')                                                                       // 2
  , toIObject      = require('./_to-iobject')                                                                          // 3
  , toPrimitive    = require('./_to-primitive')                                                                        // 4
  , has            = require('./_has')                                                                                 // 5
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6
  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if(IE8_DOM_DEFINE)try {                                                                                              // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch(e){ /* empty */ }                                                                                            // 14
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.create.js":["./_export","./_object-create",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.create.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', {create: require('./_object-create')});                                                   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.define-property.js":["./_export","./_descriptors","./_object-dp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.define-property.js                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)                                                         // 2
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});    // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.define-properties.js":["./_export","./_descriptors","./_object-dps",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.define-properties.js                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)                                                          // 2
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});   // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.get-own-property-descriptor.js":["./_to-iobject","./_object-gopd","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                      // 1
var toIObject                 = require('./_to-iobject')                                                               // 2
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;                                                           // 3
                                                                                                                       // 4
require('./_object-sap')('getOwnPropertyDescriptor', function(){                                                       // 5
  return function getOwnPropertyDescriptor(it, key){                                                                   // 6
    return $getOwnPropertyDescriptor(toIObject(it), key);                                                              // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-sap.js":["./_export","./_core","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-sap.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// most Object methods by ES6 should accept primitives                                                                 // 1
var $export = require('./_export')                                                                                     // 2
  , core    = require('./_core')                                                                                       // 3
  , fails   = require('./_fails');                                                                                     // 4
module.exports = function(KEY, exec){                                                                                  // 5
  var fn  = (core.Object || {})[KEY] || Object[KEY]                                                                    // 6
    , exp = {};                                                                                                        // 7
  exp[KEY] = exec(fn);                                                                                                 // 8
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);                                         // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.get-prototype-of.js":["./_to-object","./_object-gpo","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.get-prototype-of.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 Object.getPrototypeOf(O)                                                                                   // 1
var toObject        = require('./_to-object')                                                                          // 2
  , $getPrototypeOf = require('./_object-gpo');                                                                        // 3
                                                                                                                       // 4
require('./_object-sap')('getPrototypeOf', function(){                                                                 // 5
  return function getPrototypeOf(it){                                                                                  // 6
    return $getPrototypeOf(toObject(it));                                                                              // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_to-object.js":["./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_to-object.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function(it){                                                                                         // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-gpo.js":["./_has","./_to-object","./_shared-key",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-gpo.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has         = require('./_has')                                                                                    // 2
  , toObject    = require('./_to-object')                                                                              // 3
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4
  , ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function(O){                                                                 // 7
  O = toObject(O);                                                                                                     // 8
  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9
  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.keys.js":["./_to-object","./_object-keys","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.keys.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 Object.keys(O)                                                                                            // 1
var toObject = require('./_to-object')                                                                                 // 2
  , $keys    = require('./_object-keys');                                                                              // 3
                                                                                                                       // 4
require('./_object-sap')('keys', function(){                                                                           // 5
  return function keys(it){                                                                                            // 6
    return $keys(toObject(it));                                                                                        // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.get-own-property-names.js":["./_object-sap","./_object-gopn-ext",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.get-own-property-names.js            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 Object.getOwnPropertyNames(O)                                                                              // 1
require('./_object-sap')('getOwnPropertyNames', function(){                                                            // 2
  return require('./_object-gopn-ext').f;                                                                              // 3
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.freeze.js":["./_is-object","./_meta","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.freeze.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.5 Object.freeze(O)                                                                                           // 1
var isObject = require('./_is-object')                                                                                 // 2
  , meta     = require('./_meta').onFreeze;                                                                            // 3
                                                                                                                       // 4
require('./_object-sap')('freeze', function($freeze){                                                                  // 5
  return function freeze(it){                                                                                          // 6
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;                                                           // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.seal.js":["./_is-object","./_meta","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.seal.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.17 Object.seal(O)                                                                                            // 1
var isObject = require('./_is-object')                                                                                 // 2
  , meta     = require('./_meta').onFreeze;                                                                            // 3
                                                                                                                       // 4
require('./_object-sap')('seal', function($seal){                                                                      // 5
  return function seal(it){                                                                                            // 6
    return $seal && isObject(it) ? $seal(meta(it)) : it;                                                               // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.prevent-extensions.js":["./_is-object","./_meta","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.prevent-extensions.js                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.15 Object.preventExtensions(O)                                                                               // 1
var isObject = require('./_is-object')                                                                                 // 2
  , meta     = require('./_meta').onFreeze;                                                                            // 3
                                                                                                                       // 4
require('./_object-sap')('preventExtensions', function($preventExtensions){                                            // 5
  return function preventExtensions(it){                                                                               // 6
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;                                     // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.is-frozen.js":["./_is-object","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.is-frozen.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.12 Object.isFrozen(O)                                                                                        // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isFrozen', function($isFrozen){                                                              // 4
  return function isFrozen(it){                                                                                        // 5
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;                                                    // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.is-sealed.js":["./_is-object","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.is-sealed.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.13 Object.isSealed(O)                                                                                        // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isSealed', function($isSealed){                                                              // 4
  return function isSealed(it){                                                                                        // 5
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;                                                    // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.is-extensible.js":["./_is-object","./_object-sap",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.is-extensible.js                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.11 Object.isExtensible(O)                                                                                    // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isExtensible', function($isExtensible){                                                      // 4
  return function isExtensible(it){                                                                                    // 5
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;                                            // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.assign.js":["./_export","./_object-assign",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.assign.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.1 Object.assign(target, source)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-assign.js":["./_object-keys","./_object-gops","./_object-pie","./_to-object","./_iobject","./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-assign.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2
var getKeys  = require('./_object-keys')                                                                               // 3
  , gOPS     = require('./_object-gops')                                                                               // 4
  , pIE      = require('./_object-pie')                                                                                // 5
  , toObject = require('./_to-object')                                                                                 // 6
  , IObject  = require('./_iobject')                                                                                   // 7
  , $assign  = Object.assign;                                                                                          // 8
                                                                                                                       // 9
// should work with symbols and should have deterministic property order (V8 bug)                                      // 10
module.exports = !$assign || require('./_fails')(function(){                                                           // 11
  var A = {}                                                                                                           // 12
    , B = {}                                                                                                           // 13
    , S = Symbol()                                                                                                     // 14
    , K = 'abcdefghijklmnopqrst';                                                                                      // 15
  A[S] = 7;                                                                                                            // 16
  K.split('').forEach(function(k){ B[k] = k; });                                                                       // 17
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;                                          // 18
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars                                            // 19
  var T     = toObject(target)                                                                                         // 20
    , aLen  = arguments.length                                                                                         // 21
    , index = 1                                                                                                        // 22
    , getSymbols = gOPS.f                                                                                              // 23
    , isEnum     = pIE.f;                                                                                              // 24
  while(aLen > index){                                                                                                 // 25
    var S      = IObject(arguments[index++])                                                                           // 26
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)                                            // 27
      , length = keys.length                                                                                           // 28
      , j      = 0                                                                                                     // 29
      , key;                                                                                                           // 30
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];                                               // 31
  } return T;                                                                                                          // 32
} : $assign;                                                                                                           // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.is.js":["./_export","./_same-value",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.is.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.10 Object.is(value1, value2)                                                                                 // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', {is: require('./_same-value')});                                                          // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_same-value.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_same-value.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.9 SameValue(x, y)                                                                                               // 1
module.exports = Object.is || function is(x, y){                                                                       // 2
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;                                                      // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.set-prototype-of.js":["./_export","./_set-proto",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.set-prototype-of.js                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});                                           // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-proto.js":["./_is-object","./_an-object","./_ctx","./_object-gopd",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_set-proto.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object')                                                                                 // 3
  , anObject = require('./_an-object');                                                                                // 4
var check = function(O, proto){                                                                                        // 5
  anObject(O);                                                                                                         // 6
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");                          // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function(test, buggy, set){                                                                                        // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch(e){ buggy = true; }                                                                                      // 16
      return function setPrototypeOf(O, proto){                                                                        // 17
        check(O, proto);                                                                                               // 18
        if(buggy)O.__proto__ = proto;                                                                                  // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.object.to-string.js":["./_classof","./_wks","./_redefine",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.object.to-string.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.3.6 Object.prototype.toString()                                                                                // 2
var classof = require('./_classof')                                                                                    // 3
  , test    = {};                                                                                                      // 4
test[require('./_wks')('toStringTag')] = 'z';                                                                          // 5
if(test + '' != '[object z]'){                                                                                         // 6
  require('./_redefine')(Object.prototype, 'toString', function toString(){                                            // 7
    return '[object ' + classof(this) + ']';                                                                           // 8
  }, true);                                                                                                            // 9
}                                                                                                                      // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_classof.js":["./_cof","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_classof.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
var cof = require('./_cof')                                                                                            // 2
  , TAG = require('./_wks')('toStringTag')                                                                             // 3
  // ES3 wrong here                                                                                                    // 4
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';                                                       // 5
                                                                                                                       // 6
// fallback for IE11 Script Access Denied error                                                                        // 7
var tryGet = function(it, key){                                                                                        // 8
  try {                                                                                                                // 9
    return it[key];                                                                                                    // 10
  } catch(e){ /* empty */ }                                                                                            // 11
};                                                                                                                     // 12
                                                                                                                       // 13
module.exports = function(it){                                                                                         // 14
  var O, T, B;                                                                                                         // 15
  return it === undefined ? 'Undefined' : it === null ? 'Null'                                                         // 16
    // @@toStringTag case                                                                                              // 17
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T                                                         // 18
    // builtinTag case                                                                                                 // 19
    : ARG ? cof(O)                                                                                                     // 20
    // ES3 arguments fallback                                                                                          // 21
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                                     // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.iterator.js":["./_string-at","./_iter-define",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.iterator.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at  = require('./_string-at')(true);                                                                              // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function(iterated){                                                        // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function(){                                                                                                         // 9
  var O     = this._t                                                                                                  // 10
    , index = this._i                                                                                                  // 11
    , point;                                                                                                           // 12
  if(index >= O.length)return {value: undefined, done: true};                                                          // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return {value: point, done: false};                                                                                  // 16
});                                                                                                                    // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-at.js":["./_to-integer","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-at.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer')                                                                               // 1
  , defined   = require('./_defined');                                                                                 // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function(TO_STRING){                                                                                  // 5
  return function(that, pos){                                                                                          // 6
    var s = String(defined(that))                                                                                      // 7
      , i = toInteger(pos)                                                                                             // 8
      , l = s.length                                                                                                   // 9
      , a, b;                                                                                                          // 10
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iter-define.js":["./_library","./_export","./_redefine","./_hide","./_has","./_iterators","./_iter-create","./_set-to-string-tag","./_object-gpo","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iter-define.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY        = require('./_library')                                                                             // 2
  , $export        = require('./_export')                                                                              // 3
  , redefine       = require('./_redefine')                                                                            // 4
  , hide           = require('./_hide')                                                                                // 5
  , has            = require('./_has')                                                                                 // 6
  , Iterators      = require('./_iterators')                                                                           // 7
  , $iterCreate    = require('./_iter-create')                                                                         // 8
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9
  , getPrototypeOf = require('./_object-gpo')                                                                          // 10
  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12
  , FF_ITERATOR    = '@@iterator'                                                                                      // 13
  , KEYS           = 'keys'                                                                                            // 14
  , VALUES         = 'values';                                                                                         // 15
                                                                                                                       // 16
var returnThis = function(){ return this; };                                                                           // 17
                                                                                                                       // 18
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function(kind){                                                                                      // 21
    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22
    switch(kind){                                                                                                      // 23
      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24
      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25
    } return function entries(){ return new Constructor(this, kind); };                                                // 26
  };                                                                                                                   // 27
  var TAG        = NAME + ' Iterator'                                                                                  // 28
    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29
    , VALUES_BUG = false                                                                                               // 30
    , proto      = Base.prototype                                                                                      // 31
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32
    , $default   = $native || getMethod(DEFAULT)                                                                       // 33
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35
    , methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if($anyNative){                                                                                                      // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39
    if(IteratorPrototype !== Object.prototype){                                                                        // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values(){ return $native.call(this); };                                                        // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG]  = returnThis;                                                                                        // 58
  if(DEFAULT){                                                                                                         // 59
    methods = {                                                                                                        // 60
      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61
      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if(FORCED)for(key in methods){                                                                                     // 65
      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iterators.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":["./_object-create","./_property-desc","./_set-to-string-tag","./_hide","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iter-create.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create         = require('./_object-create')                                                                       // 2
  , descriptor     = require('./_property-desc')                                                                       // 3
  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4
  , IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8
                                                                                                                       // 9
module.exports = function(Constructor, NAME, next){                                                                    // 10
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.is-array.js":["./_export","./_is-array",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.is-array.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Array', {isArray: require('./_is-array')});                                                        // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.from.js":["./_ctx","./_export","./_to-object","./_iter-call","./_is-array-iter","./_to-length","./_create-property","./core.get-iterator-method","./_iter-detect",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.from.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var ctx            = require('./_ctx')                                                                                 // 2
  , $export        = require('./_export')                                                                              // 3
  , toObject       = require('./_to-object')                                                                           // 4
  , call           = require('./_iter-call')                                                                           // 5
  , isArrayIter    = require('./_is-array-iter')                                                                       // 6
  , toLength       = require('./_to-length')                                                                           // 7
  , createProperty = require('./_create-property')                                                                     // 8
  , getIterFn      = require('./core.get-iterator-method');                                                            // 9
                                                                                                                       // 10
$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {            // 11
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){                                          // 13
    var O       = toObject(arrayLike)                                                                                  // 14
      , C       = typeof this == 'function' ? this : Array                                                             // 15
      , aLen    = arguments.length                                                                                     // 16
      , mapfn   = aLen > 1 ? arguments[1] : undefined                                                                  // 17
      , mapping = mapfn !== undefined                                                                                  // 18
      , index   = 0                                                                                                    // 19
      , iterFn  = getIterFn(O)                                                                                         // 20
      , length, result, step, iterator;                                                                                // 21
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);                                             // 22
    // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){                                                   // 24
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){                         // 25
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);        // 26
      }                                                                                                                // 27
    } else {                                                                                                           // 28
      length = toLength(O.length);                                                                                     // 29
      for(result = new C(length); length > index; index++){                                                            // 30
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);                                    // 31
      }                                                                                                                // 32
    }                                                                                                                  // 33
    result.length = index;                                                                                             // 34
    return result;                                                                                                     // 35
  }                                                                                                                    // 36
});                                                                                                                    // 37
                                                                                                                       // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iter-call.js":["./_an-object",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iter-call.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// call something on iterator step with safe closing on error                                                          // 1
var anObject = require('./_an-object');                                                                                // 2
module.exports = function(iterator, fn, value, entries){                                                               // 3
  try {                                                                                                                // 4
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);                                                     // 5
  // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
  } catch(e){                                                                                                          // 7
    var ret = iterator['return'];                                                                                      // 8
    if(ret !== undefined)anObject(ret.call(iterator));                                                                 // 9
    throw e;                                                                                                           // 10
  }                                                                                                                    // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-array-iter.js":["./_iterators","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_is-array-iter.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// check on default Array iterator                                                                                     // 1
var Iterators  = require('./_iterators')                                                                               // 2
  , ITERATOR   = require('./_wks')('iterator')                                                                         // 3
  , ArrayProto = Array.prototype;                                                                                      // 4
                                                                                                                       // 5
module.exports = function(it){                                                                                         // 6
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);                                  // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_create-property.js":["./_object-dp","./_property-desc",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_create-property.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $defineProperty = require('./_object-dp')                                                                          // 2
  , createDesc      = require('./_property-desc');                                                                     // 3
                                                                                                                       // 4
module.exports = function(object, index, value){                                                                       // 5
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));                                           // 6
  else object[index] = value;                                                                                          // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"core.get-iterator-method.js":["./_classof","./_wks","./_iterators","./_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/core.get-iterator-method.js                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classof   = require('./_classof')                                                                                  // 1
  , ITERATOR  = require('./_wks')('iterator')                                                                          // 2
  , Iterators = require('./_iterators');                                                                               // 3
module.exports = require('./_core').getIteratorMethod = function(it){                                                  // 4
  if(it != undefined)return it[ITERATOR]                                                                               // 5
    || it['@@iterator']                                                                                                // 6
    || Iterators[classof(it)];                                                                                         // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iter-detect.js":["./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iter-detect.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ITERATOR     = require('./_wks')('iterator')                                                                       // 1
  , SAFE_CLOSING = false;                                                                                              // 2
                                                                                                                       // 3
try {                                                                                                                  // 4
  var riter = [7][ITERATOR]();                                                                                         // 5
  riter['return'] = function(){ SAFE_CLOSING = true; };                                                                // 6
  Array.from(riter, function(){ throw 2; });                                                                           // 7
} catch(e){ /* empty */ }                                                                                              // 8
                                                                                                                       // 9
module.exports = function(exec, skipClosing){                                                                          // 10
  if(!skipClosing && !SAFE_CLOSING)return false;                                                                       // 11
  var safe = false;                                                                                                    // 12
  try {                                                                                                                // 13
    var arr  = [7]                                                                                                     // 14
      , iter = arr[ITERATOR]();                                                                                        // 15
    iter.next = function(){ return {done: safe = true}; };                                                             // 16
    arr[ITERATOR] = function(){ return iter; };                                                                        // 17
    exec(arr);                                                                                                         // 18
  } catch(e){ /* empty */ }                                                                                            // 19
  return safe;                                                                                                         // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.of.js":["./_export","./_create-property","./_fails",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.of.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export        = require('./_export')                                                                              // 2
  , createProperty = require('./_create-property');                                                                    // 3
                                                                                                                       // 4
// WebKit Array.of isn't generic                                                                                       // 5
$export($export.S + $export.F * require('./_fails')(function(){                                                        // 6
  function F(){}                                                                                                       // 7
  return !(Array.of.call(F) instanceof F);                                                                             // 8
}), 'Array', {                                                                                                         // 9
  // 22.1.2.3 Array.of( ...items)                                                                                      // 10
  of: function of(/* ...args */){                                                                                      // 11
    var index  = 0                                                                                                     // 12
      , aLen   = arguments.length                                                                                      // 13
      , result = new (typeof this == 'function' ? this : Array)(aLen);                                                 // 14
    while(aLen > index)createProperty(result, index, arguments[index++]);                                              // 15
    result.length = aLen;                                                                                              // 16
    return result;                                                                                                     // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.join.js":["./_export","./_to-iobject","./_iobject","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.join.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.13 Array.prototype.join(separator)                                                                           // 2
var $export   = require('./_export')                                                                                   // 3
  , toIObject = require('./_to-iobject')                                                                               // 4
  , arrayJoin = [].join;                                                                                               // 5
                                                                                                                       // 6
// fallback for not array-like strings                                                                                 // 7
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){                                                                                      // 9
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);                                 // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_strict-method.js":["./_fails",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_strict-method.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var fails = require('./_fails');                                                                                       // 1
                                                                                                                       // 2
module.exports = function(method, arg){                                                                                // 3
  return !!method && fails(function(){                                                                                 // 4
    arg ? method.call(null, function(){}, 1) : method.call(null);                                                      // 5
  });                                                                                                                  // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.slice.js":["./_export","./_html","./_cof","./_to-index","./_to-length","./_fails",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.slice.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export    = require('./_export')                                                                                  // 2
  , html       = require('./_html')                                                                                    // 3
  , cof        = require('./_cof')                                                                                     // 4
  , toIndex    = require('./_to-index')                                                                                // 5
  , toLength   = require('./_to-length')                                                                               // 6
  , arraySlice = [].slice;                                                                                             // 7
                                                                                                                       // 8
// fallback for not array-like ES3 strings and DOM objects                                                             // 9
$export($export.P + $export.F * require('./_fails')(function(){                                                        // 10
  if(html)arraySlice.call(html);                                                                                       // 11
}), 'Array', {                                                                                                         // 12
  slice: function slice(begin, end){                                                                                   // 13
    var len   = toLength(this.length)                                                                                  // 14
      , klass = cof(this);                                                                                             // 15
    end = end === undefined ? len : end;                                                                               // 16
    if(klass == 'Array')return arraySlice.call(this, begin, end);                                                      // 17
    var start  = toIndex(begin, len)                                                                                   // 18
      , upTo   = toIndex(end, len)                                                                                     // 19
      , size   = toLength(upTo - start)                                                                                // 20
      , cloned = Array(size)                                                                                           // 21
      , i      = 0;                                                                                                    // 22
    for(; i < size; i++)cloned[i] = klass == 'String'                                                                  // 23
      ? this.charAt(start + i)                                                                                         // 24
      : this[start + i];                                                                                               // 25
    return cloned;                                                                                                     // 26
  }                                                                                                                    // 27
});                                                                                                                    // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.sort.js":["./_export","./_a-function","./_to-object","./_fails","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.sort.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export   = require('./_export')                                                                                   // 2
  , aFunction = require('./_a-function')                                                                               // 3
  , toObject  = require('./_to-object')                                                                                // 4
  , fails     = require('./_fails')                                                                                    // 5
  , $sort     = [].sort                                                                                                // 6
  , test      = [1, 2, 3];                                                                                             // 7
                                                                                                                       // 8
$export($export.P + $export.F * (fails(function(){                                                                     // 9
  // IE8-                                                                                                              // 10
  test.sort(undefined);                                                                                                // 11
}) || !fails(function(){                                                                                               // 12
  // V8 bug                                                                                                            // 13
  test.sort(null);                                                                                                     // 14
  // Old WebKit                                                                                                        // 15
}) || !require('./_strict-method')($sort)), 'Array', {                                                                 // 16
  // 22.1.3.25 Array.prototype.sort(comparefn)                                                                         // 17
  sort: function sort(comparefn){                                                                                      // 18
    return comparefn === undefined                                                                                     // 19
      ? $sort.call(toObject(this))                                                                                     // 20
      : $sort.call(toObject(this), aFunction(comparefn));                                                              // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.for-each.js":["./_export","./_array-methods","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.for-each.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export  = require('./_export')                                                                                    // 2
  , $forEach = require('./_array-methods')(0)                                                                          // 3
  , STRICT   = require('./_strict-method')([].forEach, true);                                                          // 4
                                                                                                                       // 5
$export($export.P + $export.F * !STRICT, 'Array', {                                                                    // 6
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])                                             // 7
  forEach: function forEach(callbackfn /* , thisArg */){                                                               // 8
    return $forEach(this, callbackfn, arguments[1]);                                                                   // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-methods.js":["./_ctx","./_iobject","./_to-object","./_to-length","./_array-species-create",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-methods.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 0 -> Array#forEach                                                                                                  // 1
// 1 -> Array#map                                                                                                      // 2
// 2 -> Array#filter                                                                                                   // 3
// 3 -> Array#some                                                                                                     // 4
// 4 -> Array#every                                                                                                    // 5
// 5 -> Array#find                                                                                                     // 6
// 6 -> Array#findIndex                                                                                                // 7
var ctx      = require('./_ctx')                                                                                       // 8
  , IObject  = require('./_iobject')                                                                                   // 9
  , toObject = require('./_to-object')                                                                                 // 10
  , toLength = require('./_to-length')                                                                                 // 11
  , asc      = require('./_array-species-create');                                                                     // 12
module.exports = function(TYPE, $create){                                                                              // 13
  var IS_MAP        = TYPE == 1                                                                                        // 14
    , IS_FILTER     = TYPE == 2                                                                                        // 15
    , IS_SOME       = TYPE == 3                                                                                        // 16
    , IS_EVERY      = TYPE == 4                                                                                        // 17
    , IS_FIND_INDEX = TYPE == 6                                                                                        // 18
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX                                                                       // 19
    , create        = $create || asc;                                                                                  // 20
  return function($this, callbackfn, that){                                                                            // 21
    var O      = toObject($this)                                                                                       // 22
      , self   = IObject(O)                                                                                            // 23
      , f      = ctx(callbackfn, that, 3)                                                                              // 24
      , length = toLength(self.length)                                                                                 // 25
      , index  = 0                                                                                                     // 26
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined                             // 27
      , val, res;                                                                                                      // 28
    for(;length > index; index++)if(NO_HOLES || index in self){                                                        // 29
      val = self[index];                                                                                               // 30
      res = f(val, index, O);                                                                                          // 31
      if(TYPE){                                                                                                        // 32
        if(IS_MAP)result[index] = res;            // map                                                               // 33
        else if(res)switch(TYPE){                                                                                      // 34
          case 3: return true;                    // some                                                              // 35
          case 5: return val;                     // find                                                              // 36
          case 6: return index;                   // findIndex                                                         // 37
          case 2: result.push(val);               // filter                                                            // 38
        } else if(IS_EVERY)return false;          // every                                                             // 39
      }                                                                                                                // 40
    }                                                                                                                  // 41
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;                                               // 42
  };                                                                                                                   // 43
};                                                                                                                     // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-species-create.js":["./_array-species-constructor",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-species-create.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                                   // 1
var speciesConstructor = require('./_array-species-constructor');                                                      // 2
                                                                                                                       // 3
module.exports = function(original, length){                                                                           // 4
  return new (speciesConstructor(original))(length);                                                                   // 5
};                                                                                                                     // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-species-constructor.js":["./_is-object","./_is-array","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-species-constructor.js                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object')                                                                                 // 1
  , isArray  = require('./_is-array')                                                                                  // 2
  , SPECIES  = require('./_wks')('species');                                                                           // 3
                                                                                                                       // 4
module.exports = function(original){                                                                                   // 5
  var C;                                                                                                               // 6
  if(isArray(original)){                                                                                               // 7
    C = original.constructor;                                                                                          // 8
    // cross-realm fallback                                                                                            // 9
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;                                  // 10
    if(isObject(C)){                                                                                                   // 11
      C = C[SPECIES];                                                                                                  // 12
      if(C === null)C = undefined;                                                                                     // 13
    }                                                                                                                  // 14
  } return C === undefined ? Array : C;                                                                                // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.map.js":["./_export","./_array-methods","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.map.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $map    = require('./_array-methods')(1);                                                                          // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {                                 // 5
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])                                                 // 6
  map: function map(callbackfn /* , thisArg */){                                                                       // 7
    return $map(this, callbackfn, arguments[1]);                                                                       // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.filter.js":["./_export","./_array-methods","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.filter.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $filter = require('./_array-methods')(2);                                                                          // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {                              // 5
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])                                               // 6
  filter: function filter(callbackfn /* , thisArg */){                                                                 // 7
    return $filter(this, callbackfn, arguments[1]);                                                                    // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.some.js":["./_export","./_array-methods","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.some.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $some   = require('./_array-methods')(3);                                                                          // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {                                // 5
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])                                                // 6
  some: function some(callbackfn /* , thisArg */){                                                                     // 7
    return $some(this, callbackfn, arguments[1]);                                                                      // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.every.js":["./_export","./_array-methods","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.every.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $every  = require('./_array-methods')(4);                                                                          // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {                               // 5
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])                                                // 6
  every: function every(callbackfn /* , thisArg */){                                                                   // 7
    return $every(this, callbackfn, arguments[1]);                                                                     // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.reduce.js":["./_export","./_array-reduce","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.reduce.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $reduce = require('./_array-reduce');                                                                              // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {                              // 5
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])                                         // 6
  reduce: function reduce(callbackfn /* , initialValue */){                                                            // 7
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);                                           // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-reduce.js":["./_a-function","./_to-object","./_iobject","./_to-length",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-reduce.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var aFunction = require('./_a-function')                                                                               // 1
  , toObject  = require('./_to-object')                                                                                // 2
  , IObject   = require('./_iobject')                                                                                  // 3
  , toLength  = require('./_to-length');                                                                               // 4
                                                                                                                       // 5
module.exports = function(that, callbackfn, aLen, memo, isRight){                                                      // 6
  aFunction(callbackfn);                                                                                               // 7
  var O      = toObject(that)                                                                                          // 8
    , self   = IObject(O)                                                                                              // 9
    , length = toLength(O.length)                                                                                      // 10
    , index  = isRight ? length - 1 : 0                                                                                // 11
    , i      = isRight ? -1 : 1;                                                                                       // 12
  if(aLen < 2)for(;;){                                                                                                 // 13
    if(index in self){                                                                                                 // 14
      memo = self[index];                                                                                              // 15
      index += i;                                                                                                      // 16
      break;                                                                                                           // 17
    }                                                                                                                  // 18
    index += i;                                                                                                        // 19
    if(isRight ? index < 0 : length <= index){                                                                         // 20
      throw TypeError('Reduce of empty array with no initial value');                                                  // 21
    }                                                                                                                  // 22
  }                                                                                                                    // 23
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){                                            // 24
    memo = callbackfn(memo, self[index], index, O);                                                                    // 25
  }                                                                                                                    // 26
  return memo;                                                                                                         // 27
};                                                                                                                     // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.reduce-right.js":["./_export","./_array-reduce","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.reduce-right.js                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $reduce = require('./_array-reduce');                                                                              // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {                         // 5
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])                                    // 6
  reduceRight: function reduceRight(callbackfn /* , initialValue */){                                                  // 7
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);                                            // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.index-of.js":["./_export","./_array-includes","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.index-of.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export       = require('./_export')                                                                               // 2
  , $indexOf      = require('./_array-includes')(false)                                                                // 3
  , $native       = [].indexOf                                                                                         // 4
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;                                                           // 5
                                                                                                                       // 6
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {                   // 7
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])                                        // 8
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){                                                       // 9
    return NEGATIVE_ZERO                                                                                               // 10
      // convert -0 to +0                                                                                              // 11
      ? $native.apply(this, arguments) || 0                                                                            // 12
      : $indexOf(this, searchElement, arguments[1]);                                                                   // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.last-index-of.js":["./_export","./_to-iobject","./_to-integer","./_to-length","./_strict-method",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.last-index-of.js                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export       = require('./_export')                                                                               // 2
  , toIObject     = require('./_to-iobject')                                                                           // 3
  , toInteger     = require('./_to-integer')                                                                           // 4
  , toLength      = require('./_to-length')                                                                            // 5
  , $native       = [].lastIndexOf                                                                                     // 6
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;                                                       // 7
                                                                                                                       // 8
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {                   // 9
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])                                    // 10
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){                                          // 11
    // convert -0 to +0                                                                                                // 12
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;                                                       // 13
    var O      = toIObject(this)                                                                                       // 14
      , length = toLength(O.length)                                                                                    // 15
      , index  = length - 1;                                                                                           // 16
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));                                          // 17
    if(index < 0)index = length + index;                                                                               // 18
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;                            // 19
    return -1;                                                                                                         // 20
  }                                                                                                                    // 21
});                                                                                                                    // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.copy-within.js":["./_export","./_array-copy-within","./_add-to-unscopables",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.copy-within.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});                                            // 4
                                                                                                                       // 5
require('./_add-to-unscopables')('copyWithin');                                                                        // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-copy-within.js":["./_to-object","./_to-index","./_to-length",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-copy-within.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
'use strict';                                                                                                          // 2
var toObject = require('./_to-object')                                                                                 // 3
  , toIndex  = require('./_to-index')                                                                                  // 4
  , toLength = require('./_to-length');                                                                                // 5
                                                                                                                       // 6
module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){                     // 7
  var O     = toObject(this)                                                                                           // 8
    , len   = toLength(O.length)                                                                                       // 9
    , to    = toIndex(target, len)                                                                                     // 10
    , from  = toIndex(start, len)                                                                                      // 11
    , end   = arguments.length > 2 ? arguments[2] : undefined                                                          // 12
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)                                 // 13
    , inc   = 1;                                                                                                       // 14
  if(from < to && to < from + count){                                                                                  // 15
    inc  = -1;                                                                                                         // 16
    from += count - 1;                                                                                                 // 17
    to   += count - 1;                                                                                                 // 18
  }                                                                                                                    // 19
  while(count-- > 0){                                                                                                  // 20
    if(from in O)O[to] = O[from];                                                                                      // 21
    else delete O[to];                                                                                                 // 22
    to   += inc;                                                                                                       // 23
    from += inc;                                                                                                       // 24
  } return O;                                                                                                          // 25
};                                                                                                                     // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_add-to-unscopables.js":["./_wks","./_hide",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_add-to-unscopables.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.31 Array.prototype[@@unscopables]                                                                            // 1
var UNSCOPABLES = require('./_wks')('unscopables')                                                                     // 2
  , ArrayProto  = Array.prototype;                                                                                     // 3
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});                               // 4
module.exports = function(key){                                                                                        // 5
  ArrayProto[UNSCOPABLES][key] = true;                                                                                 // 6
};                                                                                                                     // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.fill.js":["./_export","./_array-fill","./_add-to-unscopables",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.fill.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Array', {fill: require('./_array-fill')});                                                         // 4
                                                                                                                       // 5
require('./_add-to-unscopables')('fill');                                                                              // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_array-fill.js":["./_to-object","./_to-index","./_to-length",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_array-fill.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
'use strict';                                                                                                          // 2
var toObject = require('./_to-object')                                                                                 // 3
  , toIndex  = require('./_to-index')                                                                                  // 4
  , toLength = require('./_to-length');                                                                                // 5
module.exports = function fill(value /*, start = 0, end = @length */){                                                 // 6
  var O      = toObject(this)                                                                                          // 7
    , length = toLength(O.length)                                                                                      // 8
    , aLen   = arguments.length                                                                                        // 9
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)                                                    // 10
    , end    = aLen > 2 ? arguments[2] : undefined                                                                     // 11
    , endPos = end === undefined ? length : toIndex(end, length);                                                      // 12
  while(endPos > index)O[index++] = value;                                                                             // 13
  return O;                                                                                                            // 14
};                                                                                                                     // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.find.js":["./_export","./_array-methods","./_add-to-unscopables",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.find.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                                       // 2
var $export = require('./_export')                                                                                     // 3
  , $find   = require('./_array-methods')(5)                                                                           // 4
  , KEY     = 'find'                                                                                                   // 5
  , forced  = true;                                                                                                    // 6
// Shouldn't skip holes                                                                                                // 7
if(KEY in [])Array(1)[KEY](function(){ forced = false; });                                                             // 8
$export($export.P + $export.F * forced, 'Array', {                                                                     // 9
  find: function find(callbackfn/*, that = undefined */){                                                              // 10
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);                                   // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
require('./_add-to-unscopables')(KEY);                                                                                 // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.find-index.js":["./_export","./_array-methods","./_add-to-unscopables",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.find-index.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                                  // 2
var $export = require('./_export')                                                                                     // 3
  , $find   = require('./_array-methods')(6)                                                                           // 4
  , KEY     = 'findIndex'                                                                                              // 5
  , forced  = true;                                                                                                    // 6
// Shouldn't skip holes                                                                                                // 7
if(KEY in [])Array(1)[KEY](function(){ forced = false; });                                                             // 8
$export($export.P + $export.F * forced, 'Array', {                                                                     // 9
  findIndex: function findIndex(callbackfn/*, that = undefined */){                                                    // 10
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);                                   // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
require('./_add-to-unscopables')(KEY);                                                                                 // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.species.js":["./_set-species",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.species.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_set-species')('Array');                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_set-species.js":["./_global","./_object-dp","./_descriptors","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_set-species.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var global      = require('./_global')                                                                                 // 2
  , dP          = require('./_object-dp')                                                                              // 3
  , DESCRIPTORS = require('./_descriptors')                                                                            // 4
  , SPECIES     = require('./_wks')('species');                                                                        // 5
                                                                                                                       // 6
module.exports = function(KEY){                                                                                        // 7
  var C = global[KEY];                                                                                                 // 8
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {                                                                // 9
    configurable: true,                                                                                                // 10
    get: function(){ return this; }                                                                                    // 11
  });                                                                                                                  // 12
};                                                                                                                     // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.array.iterator.js":["./_add-to-unscopables","./_iter-step","./_iterators","./_to-iobject","./_iter-define",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.array.iterator.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables')                                                                // 2
  , step             = require('./_iter-step')                                                                         // 3
  , Iterators        = require('./_iterators')                                                                         // 4
  , toIObject        = require('./_to-iobject');                                                                       // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function(){                                                                                                         // 16
  var O     = this._t                                                                                                  // 17
    , kind  = this._k                                                                                                  // 18
    , index = this._i++;                                                                                               // 19
  if(!O || index >= O.length){                                                                                         // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if(kind == 'keys'  )return step(0, index);                                                                           // 24
  if(kind == 'values')return step(0, O[index]);                                                                        // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_iter-step.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(done, value){                                                                                // 1
  return {value: value, done: !!done};                                                                                 // 2
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.from-code-point.js":["./_export","./_to-index",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.from-code-point.js                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export        = require('./_export')                                                                              // 1
  , toIndex        = require('./_to-index')                                                                            // 2
  , fromCharCode   = String.fromCharCode                                                                               // 3
  , $fromCodePoint = String.fromCodePoint;                                                                             // 4
                                                                                                                       // 5
// length should be 1, old FF problem                                                                                  // 6
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {                          // 7
  // 21.1.2.2 String.fromCodePoint(...codePoints)                                                                      // 8
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars                                      // 9
    var res  = []                                                                                                      // 10
      , aLen = arguments.length                                                                                        // 11
      , i    = 0                                                                                                       // 12
      , code;                                                                                                          // 13
    while(aLen > i){                                                                                                   // 14
      code = +arguments[i++];                                                                                          // 15
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');                       // 16
      res.push(code < 0x10000                                                                                          // 17
        ? fromCharCode(code)                                                                                           // 18
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)                                      // 19
      );                                                                                                               // 20
    } return res.join('');                                                                                             // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.raw.js":["./_export","./_to-iobject","./_to-length",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.raw.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export   = require('./_export')                                                                                   // 1
  , toIObject = require('./_to-iobject')                                                                               // 2
  , toLength  = require('./_to-length');                                                                               // 3
                                                                                                                       // 4
$export($export.S, 'String', {                                                                                         // 5
  // 21.1.2.4 String.raw(callSite, ...substitutions)                                                                   // 6
  raw: function raw(callSite){                                                                                         // 7
    var tpl  = toIObject(callSite.raw)                                                                                 // 8
      , len  = toLength(tpl.length)                                                                                    // 9
      , aLen = arguments.length                                                                                        // 10
      , res  = []                                                                                                      // 11
      , i    = 0;                                                                                                      // 12
    while(len > i){                                                                                                    // 13
      res.push(String(tpl[i++]));                                                                                      // 14
      if(i < aLen)res.push(String(arguments[i]));                                                                      // 15
    } return res.join('');                                                                                             // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.trim.js":["./_string-trim",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.trim.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 21.1.3.25 String.prototype.trim()                                                                                   // 2
require('./_string-trim')('trim', function($trim){                                                                     // 3
  return function trim(){                                                                                              // 4
    return $trim(this, 3);                                                                                             // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-trim.js":["./_export","./_defined","./_fails","./_string-ws",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-trim.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
  , defined = require('./_defined')                                                                                    // 2
  , fails   = require('./_fails')                                                                                      // 3
  , spaces  = require('./_string-ws')                                                                                  // 4
  , space   = '[' + spaces + ']'                                                                                       // 5
  , non     = '\u200b\u0085'                                                                                           // 6
  , ltrim   = RegExp('^' + space + space + '*')                                                                        // 7
  , rtrim   = RegExp(space + space + '*$');                                                                            // 8
                                                                                                                       // 9
var exporter = function(KEY, exec, ALIAS){                                                                             // 10
  var exp   = {};                                                                                                      // 11
  var FORCE = fails(function(){                                                                                        // 12
    return !!spaces[KEY]() || non[KEY]() != non;                                                                       // 13
  });                                                                                                                  // 14
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];                                                                // 15
  if(ALIAS)exp[ALIAS] = fn;                                                                                            // 16
  $export($export.P + $export.F * FORCE, 'String', exp);                                                               // 17
};                                                                                                                     // 18
                                                                                                                       // 19
// 1 -> String#trimLeft                                                                                                // 20
// 2 -> String#trimRight                                                                                               // 21
// 3 -> String#trim                                                                                                    // 22
var trim = exporter.trim = function(string, TYPE){                                                                     // 23
  string = String(defined(string));                                                                                    // 24
  if(TYPE & 1)string = string.replace(ltrim, '');                                                                      // 25
  if(TYPE & 2)string = string.replace(rtrim, '');                                                                      // 26
  return string;                                                                                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
module.exports = exporter;                                                                                             // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-ws.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-ws.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +                                  // 1
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';                                    // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.code-point-at.js":["./_export","./_string-at",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.code-point-at.js                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export')                                                                                     // 2
  , $at     = require('./_string-at')(false);                                                                          // 3
$export($export.P, 'String', {                                                                                         // 4
  // 21.1.3.3 String.prototype.codePointAt(pos)                                                                        // 5
  codePointAt: function codePointAt(pos){                                                                              // 6
    return $at(this, pos);                                                                                             // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.ends-with.js":["./_export","./_to-length","./_string-context","./_fails-is-regexp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.ends-with.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])                                                    // 1
'use strict';                                                                                                          // 2
var $export   = require('./_export')                                                                                   // 3
  , toLength  = require('./_to-length')                                                                                // 4
  , context   = require('./_string-context')                                                                           // 5
  , ENDS_WITH = 'endsWith'                                                                                             // 6
  , $endsWith = ''[ENDS_WITH];                                                                                         // 7
                                                                                                                       // 8
$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {                                  // 9
  endsWith: function endsWith(searchString /*, endPosition = @length */){                                              // 10
    var that = context(this, searchString, ENDS_WITH)                                                                  // 11
      , endPosition = arguments.length > 1 ? arguments[1] : undefined                                                  // 12
      , len    = toLength(that.length)                                                                                 // 13
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)                                // 14
      , search = String(searchString);                                                                                 // 15
    return $endsWith                                                                                                   // 16
      ? $endsWith.call(that, search, end)                                                                              // 17
      : that.slice(end - search.length, end) === search;                                                               // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-context.js":["./_is-regexp","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-context.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// helper for String#{startsWith, endsWith, includes}                                                                  // 1
var isRegExp = require('./_is-regexp')                                                                                 // 2
  , defined  = require('./_defined');                                                                                  // 3
                                                                                                                       // 4
module.exports = function(that, searchString, NAME){                                                                   // 5
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");                              // 6
  return String(defined(that));                                                                                        // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_is-regexp.js":["./_is-object","./_cof","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_is-regexp.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.8 IsRegExp(argument)                                                                                            // 1
var isObject = require('./_is-object')                                                                                 // 2
  , cof      = require('./_cof')                                                                                       // 3
  , MATCH    = require('./_wks')('match');                                                                             // 4
module.exports = function(it){                                                                                         // 5
  var isRegExp;                                                                                                        // 6
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');                    // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fails-is-regexp.js":["./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_fails-is-regexp.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var MATCH = require('./_wks')('match');                                                                                // 1
module.exports = function(KEY){                                                                                        // 2
  var re = /./;                                                                                                        // 3
  try {                                                                                                                // 4
    '/./'[KEY](re);                                                                                                    // 5
  } catch(e){                                                                                                          // 6
    try {                                                                                                              // 7
      re[MATCH] = false;                                                                                               // 8
      return !'/./'[KEY](re);                                                                                          // 9
    } catch(f){ /* empty */ }                                                                                          // 10
  } return true;                                                                                                       // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.includes.js":["./_export","./_string-context","./_fails-is-regexp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.includes.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.7 String.prototype.includes(searchString, position = 0)                                                      // 1
'use strict';                                                                                                          // 2
var $export  = require('./_export')                                                                                    // 3
  , context  = require('./_string-context')                                                                            // 4
  , INCLUDES = 'includes';                                                                                             // 5
                                                                                                                       // 6
$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {                                   // 7
  includes: function includes(searchString /*, position = 0 */){                                                       // 8
    return !!~context(this, searchString, INCLUDES)                                                                    // 9
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);                                         // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.repeat.js":["./_export","./_string-repeat",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.repeat.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
                                                                                                                       // 2
$export($export.P, 'String', {                                                                                         // 3
  // 21.1.3.13 String.prototype.repeat(count)                                                                          // 4
  repeat: require('./_string-repeat')                                                                                  // 5
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-repeat.js":["./_to-integer","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-repeat.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var toInteger = require('./_to-integer')                                                                               // 2
  , defined   = require('./_defined');                                                                                 // 3
                                                                                                                       // 4
module.exports = function repeat(count){                                                                               // 5
  var str = String(defined(this))                                                                                      // 6
    , res = ''                                                                                                         // 7
    , n   = toInteger(count);                                                                                          // 8
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");                                               // 9
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;                                                          // 10
  return res;                                                                                                          // 11
};                                                                                                                     // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.starts-with.js":["./_export","./_to-length","./_string-context","./_fails-is-regexp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.starts-with.js                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])                                                   // 1
'use strict';                                                                                                          // 2
var $export     = require('./_export')                                                                                 // 3
  , toLength    = require('./_to-length')                                                                              // 4
  , context     = require('./_string-context')                                                                         // 5
  , STARTS_WITH = 'startsWith'                                                                                         // 6
  , $startsWith = ''[STARTS_WITH];                                                                                     // 7
                                                                                                                       // 8
$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {                                // 9
  startsWith: function startsWith(searchString /*, position = 0 */){                                                   // 10
    var that   = context(this, searchString, STARTS_WITH)                                                              // 11
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))                      // 12
      , search = String(searchString);                                                                                 // 13
    return $startsWith                                                                                                 // 14
      ? $startsWith.call(that, search, index)                                                                          // 15
      : that.slice(index, index + search.length) === search;                                                           // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.anchor.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.anchor.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.2 String.prototype.anchor(name)                                                                               // 2
require('./_string-html')('anchor', function(createHTML){                                                              // 3
  return function anchor(name){                                                                                        // 4
    return createHTML(this, 'a', 'name', name);                                                                        // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-html.js":["./_export","./_fails","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-html.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export')                                                                                     // 1
  , fails   = require('./_fails')                                                                                      // 2
  , defined = require('./_defined')                                                                                    // 3
  , quot    = /"/g;                                                                                                    // 4
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)                                                                 // 5
var createHTML = function(string, tag, attribute, value) {                                                             // 6
  var S  = String(defined(string))                                                                                     // 7
    , p1 = '<' + tag;                                                                                                  // 8
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';                      // 9
  return p1 + '>' + S + '</' + tag + '>';                                                                              // 10
};                                                                                                                     // 11
module.exports = function(NAME, exec){                                                                                 // 12
  var O = {};                                                                                                          // 13
  O[NAME] = exec(createHTML);                                                                                          // 14
  $export($export.P + $export.F * fails(function(){                                                                    // 15
    var test = ''[NAME]('"');                                                                                          // 16
    return test !== test.toLowerCase() || test.split('"').length > 3;                                                  // 17
  }), 'String', O);                                                                                                    // 18
};                                                                                                                     // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.big.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.big.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.3 String.prototype.big()                                                                                      // 2
require('./_string-html')('big', function(createHTML){                                                                 // 3
  return function big(){                                                                                               // 4
    return createHTML(this, 'big', '', '');                                                                            // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.blink.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.blink.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.4 String.prototype.blink()                                                                                    // 2
require('./_string-html')('blink', function(createHTML){                                                               // 3
  return function blink(){                                                                                             // 4
    return createHTML(this, 'blink', '', '');                                                                          // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.bold.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.bold.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.5 String.prototype.bold()                                                                                     // 2
require('./_string-html')('bold', function(createHTML){                                                                // 3
  return function bold(){                                                                                              // 4
    return createHTML(this, 'b', '', '');                                                                              // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.fixed.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.fixed.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.6 String.prototype.fixed()                                                                                    // 2
require('./_string-html')('fixed', function(createHTML){                                                               // 3
  return function fixed(){                                                                                             // 4
    return createHTML(this, 'tt', '', '');                                                                             // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.fontcolor.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.fontcolor.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.7 String.prototype.fontcolor(color)                                                                           // 2
require('./_string-html')('fontcolor', function(createHTML){                                                           // 3
  return function fontcolor(color){                                                                                    // 4
    return createHTML(this, 'font', 'color', color);                                                                   // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.fontsize.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.fontsize.js                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.8 String.prototype.fontsize(size)                                                                             // 2
require('./_string-html')('fontsize', function(createHTML){                                                            // 3
  return function fontsize(size){                                                                                      // 4
    return createHTML(this, 'font', 'size', size);                                                                     // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.italics.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.italics.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.9 String.prototype.italics()                                                                                  // 2
require('./_string-html')('italics', function(createHTML){                                                             // 3
  return function italics(){                                                                                           // 4
    return createHTML(this, 'i', '', '');                                                                              // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.link.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.link.js                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.10 String.prototype.link(url)                                                                                 // 2
require('./_string-html')('link', function(createHTML){                                                                // 3
  return function link(url){                                                                                           // 4
    return createHTML(this, 'a', 'href', url);                                                                         // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.small.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.small.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.11 String.prototype.small()                                                                                   // 2
require('./_string-html')('small', function(createHTML){                                                               // 3
  return function small(){                                                                                             // 4
    return createHTML(this, 'small', '', '');                                                                          // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.strike.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.strike.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.12 String.prototype.strike()                                                                                  // 2
require('./_string-html')('strike', function(createHTML){                                                              // 3
  return function strike(){                                                                                            // 4
    return createHTML(this, 'strike', '', '');                                                                         // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.sub.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.sub.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.13 String.prototype.sub()                                                                                     // 2
require('./_string-html')('sub', function(createHTML){                                                                 // 3
  return function sub(){                                                                                               // 4
    return createHTML(this, 'sub', '', '');                                                                            // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.string.sup.js":["./_string-html",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.string.sup.js                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.14 String.prototype.sup()                                                                                     // 2
require('./_string-html')('sup', function(createHTML){                                                                 // 3
  return function sup(){                                                                                               // 4
    return createHTML(this, 'sup', '', '');                                                                            // 5
  }                                                                                                                    // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.regexp.match.js":["./_fix-re-wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.regexp.match.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@match logic                                                                                                       // 1
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){                                                 // 2
  // 21.1.3.11 String.prototype.match(regexp)                                                                          // 3
  return [function match(regexp){                                                                                      // 4
    'use strict';                                                                                                      // 5
    var O  = defined(this)                                                                                             // 6
      , fn = regexp == undefined ? undefined : regexp[MATCH];                                                          // 7
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));                               // 8
  }, $match];                                                                                                          // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_fix-re-wks.js":["./_hide","./_redefine","./_fails","./_defined","./_wks",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_fix-re-wks.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var hide     = require('./_hide')                                                                                      // 2
  , redefine = require('./_redefine')                                                                                  // 3
  , fails    = require('./_fails')                                                                                     // 4
  , defined  = require('./_defined')                                                                                   // 5
  , wks      = require('./_wks');                                                                                      // 6
                                                                                                                       // 7
module.exports = function(KEY, length, exec){                                                                          // 8
  var SYMBOL   = wks(KEY)                                                                                              // 9
    , fns      = exec(defined, SYMBOL, ''[KEY])                                                                        // 10
    , strfn    = fns[0]                                                                                                // 11
    , rxfn     = fns[1];                                                                                               // 12
  if(fails(function(){                                                                                                 // 13
    var O = {};                                                                                                        // 14
    O[SYMBOL] = function(){ return 7; };                                                                               // 15
    return ''[KEY](O) != 7;                                                                                            // 16
  })){                                                                                                                 // 17
    redefine(String.prototype, KEY, strfn);                                                                            // 18
    hide(RegExp.prototype, SYMBOL, length == 2                                                                         // 19
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                                    // 20
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                                            // 21
      ? function(string, arg){ return rxfn.call(string, this, arg); }                                                  // 22
      // 21.2.5.6 RegExp.prototype[@@match](string)                                                                    // 23
      // 21.2.5.9 RegExp.prototype[@@search](string)                                                                   // 24
      : function(string){ return rxfn.call(string, this); }                                                            // 25
    );                                                                                                                 // 26
  }                                                                                                                    // 27
};                                                                                                                     // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.regexp.replace.js":["./_fix-re-wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.regexp.replace.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@replace logic                                                                                                     // 1
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){                                           // 2
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                                     // 3
  return [function replace(searchValue, replaceValue){                                                                 // 4
    'use strict';                                                                                                      // 5
    var O  = defined(this)                                                                                             // 6
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];                                              // 7
    return fn !== undefined                                                                                            // 8
      ? fn.call(searchValue, O, replaceValue)                                                                          // 9
      : $replace.call(String(O), searchValue, replaceValue);                                                           // 10
  }, $replace];                                                                                                        // 11
});                                                                                                                    // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.regexp.search.js":["./_fix-re-wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.regexp.search.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@search logic                                                                                                      // 1
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){                                              // 2
  // 21.1.3.15 String.prototype.search(regexp)                                                                         // 3
  return [function search(regexp){                                                                                     // 4
    'use strict';                                                                                                      // 5
    var O  = defined(this)                                                                                             // 6
      , fn = regexp == undefined ? undefined : regexp[SEARCH];                                                         // 7
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));                              // 8
  }, $search];                                                                                                         // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.regexp.split.js":["./_fix-re-wks","./_is-regexp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.regexp.split.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@split logic                                                                                                       // 1
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){                                                 // 2
  'use strict';                                                                                                        // 3
  var isRegExp   = require('./_is-regexp')                                                                             // 4
    , _split     = $split                                                                                              // 5
    , $push      = [].push                                                                                             // 6
    , $SPLIT     = 'split'                                                                                             // 7
    , LENGTH     = 'length'                                                                                            // 8
    , LAST_INDEX = 'lastIndex';                                                                                        // 9
  if(                                                                                                                  // 10
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||                                                                                // 11
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||                                                                         // 12
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||                                                                            // 13
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||                                                                            // 14
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||                                                                                 // 15
    ''[$SPLIT](/.?/)[LENGTH]                                                                                           // 16
  ){                                                                                                                   // 17
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group                                   // 18
    // based on es5-shim implementation, need to rework it                                                             // 19
    $split = function(separator, limit){                                                                               // 20
      var string = String(this);                                                                                       // 21
      if(separator === undefined && limit === 0)return [];                                                             // 22
      // If `separator` is not a regex, use native split                                                               // 23
      if(!isRegExp(separator))return _split.call(string, separator, limit);                                            // 24
      var output = [];                                                                                                 // 25
      var flags = (separator.ignoreCase ? 'i' : '') +                                                                  // 26
                  (separator.multiline ? 'm' : '') +                                                                   // 27
                  (separator.unicode ? 'u' : '') +                                                                     // 28
                  (separator.sticky ? 'y' : '');                                                                       // 29
      var lastLastIndex = 0;                                                                                           // 30
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;                                                 // 31
      // Make `global` and avoid `lastIndex` issues by working with a copy                                             // 32
      var separatorCopy = new RegExp(separator.source, flags + 'g');                                                   // 33
      var separator2, match, lastIndex, lastLength, i;                                                                 // 34
      // Doesn't need flags gy, but they don't hurt                                                                    // 35
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);                                // 36
      while(match = separatorCopy.exec(string)){                                                                       // 37
        // `separatorCopy.lastIndex` is not reliable cross-browser                                                     // 38
        lastIndex = match.index + match[0][LENGTH];                                                                    // 39
        if(lastIndex > lastLastIndex){                                                                                 // 40
          output.push(string.slice(lastLastIndex, match.index));                                                       // 41
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG                          // 42
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){                                       // 43
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;              // 44
          });                                                                                                          // 45
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));                    // 46
          lastLength = match[0][LENGTH];                                                                               // 47
          lastLastIndex = lastIndex;                                                                                   // 48
          if(output[LENGTH] >= splitLimit)break;                                                                       // 49
        }                                                                                                              // 50
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop            // 51
      }                                                                                                                // 52
      if(lastLastIndex === string[LENGTH]){                                                                            // 53
        if(lastLength || !separatorCopy.test(''))output.push('');                                                      // 54
      } else output.push(string.slice(lastLastIndex));                                                                 // 55
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;                                       // 56
    };                                                                                                                 // 57
  // Chakra, V8                                                                                                        // 58
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){                                                                        // 59
    $split = function(separator, limit){                                                                               // 60
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);                        // 61
    };                                                                                                                 // 62
  }                                                                                                                    // 63
  // 21.1.3.17 String.prototype.split(separator, limit)                                                                // 64
  return [function split(separator, limit){                                                                            // 65
    var O  = defined(this)                                                                                             // 66
      , fn = separator == undefined ? undefined : separator[SPLIT];                                                    // 67
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);                 // 68
  }, $split];                                                                                                          // 69
});                                                                                                                    // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.function.bind.js":["./_export","./_bind",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.function.bind.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)                                                       // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Function', {bind: require('./_bind')});                                                            // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_bind.js":["./_a-function","./_is-object","./_invoke",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_bind.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var aFunction  = require('./_a-function')                                                                              // 2
  , isObject   = require('./_is-object')                                                                               // 3
  , invoke     = require('./_invoke')                                                                                  // 4
  , arraySlice = [].slice                                                                                              // 5
  , factories  = {};                                                                                                   // 6
                                                                                                                       // 7
var construct = function(F, len, args){                                                                                // 8
  if(!(len in factories)){                                                                                             // 9
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';                                                         // 10
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');                                             // 11
  } return factories[len](F, args);                                                                                    // 12
};                                                                                                                     // 13
                                                                                                                       // 14
module.exports = Function.bind || function bind(that /*, args... */){                                                  // 15
  var fn       = aFunction(this)                                                                                       // 16
    , partArgs = arraySlice.call(arguments, 1);                                                                        // 17
  var bound = function(/* args... */){                                                                                 // 18
    var args = partArgs.concat(arraySlice.call(arguments));                                                            // 19
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);                          // 20
  };                                                                                                                   // 21
  if(isObject(fn.prototype))bound.prototype = fn.prototype;                                                            // 22
  return bound;                                                                                                        // 23
};                                                                                                                     // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_invoke.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_invoke.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fast apply, http://jsperf.lnkit.com/fast-apply/5                                                                    // 1
module.exports = function(fn, args, that){                                                                             // 2
  var un = that === undefined;                                                                                         // 3
  switch(args.length){                                                                                                 // 4
    case 0: return un ? fn()                                                                                           // 5
                      : fn.call(that);                                                                                 // 6
    case 1: return un ? fn(args[0])                                                                                    // 7
                      : fn.call(that, args[0]);                                                                        // 8
    case 2: return un ? fn(args[0], args[1])                                                                           // 9
                      : fn.call(that, args[0], args[1]);                                                               // 10
    case 3: return un ? fn(args[0], args[1], args[2])                                                                  // 11
                      : fn.call(that, args[0], args[1], args[2]);                                                      // 12
    case 4: return un ? fn(args[0], args[1], args[2], args[3])                                                         // 13
                      : fn.call(that, args[0], args[1], args[2], args[3]);                                             // 14
  } return              fn.apply(that, args);                                                                          // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.function.name.js":["./_object-dp","./_property-desc","./_has","./_descriptors",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.function.name.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP         = require('./_object-dp').f                                                                             // 1
  , createDesc = require('./_property-desc')                                                                           // 2
  , has        = require('./_has')                                                                                     // 3
  , FProto     = Function.prototype                                                                                    // 4
  , nameRE     = /^\s*function ([^ (]*)/                                                                               // 5
  , NAME       = 'name';                                                                                               // 6
                                                                                                                       // 7
var isExtensible = Object.isExtensible || function(){                                                                  // 8
  return true;                                                                                                         // 9
};                                                                                                                     // 10
                                                                                                                       // 11
// 19.2.4.2 name                                                                                                       // 12
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {                                                      // 13
  configurable: true,                                                                                                  // 14
  get: function(){                                                                                                     // 15
    try {                                                                                                              // 16
      var that = this                                                                                                  // 17
        , name = ('' + that).match(nameRE)[1];                                                                         // 18
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));                                   // 19
      return name;                                                                                                     // 20
    } catch(e){                                                                                                        // 21
      return '';                                                                                                       // 22
    }                                                                                                                  // 23
  }                                                                                                                    // 24
});                                                                                                                    // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.function.has-instance.js":["./_is-object","./_object-gpo","./_wks","./_object-dp",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.function.has-instance.js                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var isObject       = require('./_is-object')                                                                           // 2
  , getPrototypeOf = require('./_object-gpo')                                                                          // 3
  , HAS_INSTANCE   = require('./_wks')('hasInstance')                                                                  // 4
  , FunctionProto  = Function.prototype;                                                                               // 5
// 19.2.3.6 Function.prototype[@@hasInstance](V)                                                                       // 6
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){        // 7
  if(typeof this != 'function' || !isObject(O))return false;                                                           // 8
  if(!isObject(this.prototype))return O instanceof this;                                                               // 9
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:                               // 10
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;                                                     // 11
  return false;                                                                                                        // 12
}});                                                                                                                   // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.array.includes.js":["./_export","./_array-includes","./_add-to-unscopables",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.array.includes.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/tc39/Array.prototype.includes                                                                    // 2
var $export   = require('./_export')                                                                                   // 3
  , $includes = require('./_array-includes')(true);                                                                    // 4
                                                                                                                       // 5
$export($export.P, 'Array', {                                                                                          // 6
  includes: function includes(el /*, fromIndex = 0 */){                                                                // 7
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);                                       // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
require('./_add-to-unscopables')('includes');                                                                          // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.object.values.js":["./_export","./_object-to-array",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.object.values.js                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-values-entries                                                              // 1
var $export = require('./_export')                                                                                     // 2
  , $values = require('./_object-to-array')(false);                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Object', {                                                                                         // 5
  values: function values(it){                                                                                         // 6
    return $values(it);                                                                                                // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_object-to-array.js":["./_object-keys","./_to-iobject","./_object-pie",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_object-to-array.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys   = require('./_object-keys')                                                                              // 1
  , toIObject = require('./_to-iobject')                                                                               // 2
  , isEnum    = require('./_object-pie').f;                                                                            // 3
module.exports = function(isEntries){                                                                                  // 4
  return function(it){                                                                                                 // 5
    var O      = toIObject(it)                                                                                         // 6
      , keys   = getKeys(O)                                                                                            // 7
      , length = keys.length                                                                                           // 8
      , i      = 0                                                                                                     // 9
      , result = []                                                                                                    // 10
      , key;                                                                                                           // 11
    while(length > i)if(isEnum.call(O, key = keys[i++])){                                                              // 12
      result.push(isEntries ? [key, O[key]] : O[key]);                                                                 // 13
    } return result;                                                                                                   // 14
  };                                                                                                                   // 15
};                                                                                                                     // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.object.entries.js":["./_export","./_object-to-array",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.object.entries.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-values-entries                                                              // 1
var $export  = require('./_export')                                                                                    // 2
  , $entries = require('./_object-to-array')(true);                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Object', {                                                                                         // 5
  entries: function entries(it){                                                                                       // 6
    return $entries(it);                                                                                               // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.object.get-own-property-descriptors.js":["./_export","./_own-keys","./_to-iobject","./_object-gopd","./_create-property",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-getownpropertydescriptors                                                   // 1
var $export        = require('./_export')                                                                              // 2
  , ownKeys        = require('./_own-keys')                                                                            // 3
  , toIObject      = require('./_to-iobject')                                                                          // 4
  , gOPD           = require('./_object-gopd')                                                                         // 5
  , createProperty = require('./_create-property');                                                                    // 6
                                                                                                                       // 7
$export($export.S, 'Object', {                                                                                         // 8
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){                                               // 9
    var O       = toIObject(object)                                                                                    // 10
      , getDesc = gOPD.f                                                                                               // 11
      , keys    = ownKeys(O)                                                                                           // 12
      , result  = {}                                                                                                   // 13
      , i       = 0                                                                                                    // 14
      , key;                                                                                                           // 15
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));                                    // 16
    return result;                                                                                                     // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_own-keys.js":["./_object-gopn","./_object-gops","./_an-object","./_global",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_own-keys.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all object keys, includes non-enumerable and symbols                                                                // 1
var gOPN     = require('./_object-gopn')                                                                               // 2
  , gOPS     = require('./_object-gops')                                                                               // 3
  , anObject = require('./_an-object')                                                                                 // 4
  , Reflect  = require('./_global').Reflect;                                                                           // 5
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){                                                   // 6
  var keys       = gOPN.f(anObject(it))                                                                                // 7
    , getSymbols = gOPS.f;                                                                                             // 8
  return getSymbols ? keys.concat(getSymbols(it)) : keys;                                                              // 9
};                                                                                                                     // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.string.pad-start.js":["./_export","./_string-pad",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.string.pad-start.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/tc39/proposal-string-pad-start-end                                                               // 2
var $export = require('./_export')                                                                                     // 3
  , $pad    = require('./_string-pad');                                                                                // 4
                                                                                                                       // 5
$export($export.P, 'String', {                                                                                         // 6
  padStart: function padStart(maxLength /*, fillString = ' ' */){                                                      // 7
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);                               // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_string-pad.js":["./_to-length","./_string-repeat","./_defined",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_string-pad.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-string-pad-start-end                                                               // 1
var toLength = require('./_to-length')                                                                                 // 2
  , repeat   = require('./_string-repeat')                                                                             // 3
  , defined  = require('./_defined');                                                                                  // 4
                                                                                                                       // 5
module.exports = function(that, maxLength, fillString, left){                                                          // 6
  var S            = String(defined(that))                                                                             // 7
    , stringLength = S.length                                                                                          // 8
    , fillStr      = fillString === undefined ? ' ' : String(fillString)                                               // 9
    , intMaxLength = toLength(maxLength);                                                                              // 10
  if(intMaxLength <= stringLength || fillStr == '')return S;                                                           // 11
  var fillLen = intMaxLength - stringLength                                                                            // 12
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));                                        // 13
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);                                      // 14
  return left ? stringFiller + S : S + stringFiller;                                                                   // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.string.pad-end.js":["./_export","./_string-pad",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.string.pad-end.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/tc39/proposal-string-pad-start-end                                                               // 2
var $export = require('./_export')                                                                                     // 3
  , $pad    = require('./_string-pad');                                                                                // 4
                                                                                                                       // 5
$export($export.P, 'String', {                                                                                         // 6
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){                                                          // 7
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);                              // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.string.trim-left.js":["./_string-trim",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.string.trim-left.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim                                                    // 2
require('./_string-trim')('trimLeft', function($trim){                                                                 // 3
  return function trimLeft(){                                                                                          // 4
    return $trim(this, 1);                                                                                             // 5
  };                                                                                                                   // 6
}, 'trimStart');                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es7.string.trim-right.js":["./_string-trim",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es7.string.trim-right.js                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim                                                    // 2
require('./_string-trim')('trimRight', function($trim){                                                                // 3
  return function trimRight(){                                                                                         // 4
    return $trim(this, 2);                                                                                             // 5
  };                                                                                                                   // 6
}, 'trimEnd');                                                                                                         // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"web.dom.iterable.js":["./es6.array.iterator","./_redefine","./_global","./_hide","./_iterators","./_wks",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/web.dom.iterable.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $iterators    = require('./es6.array.iterator')                                                                    // 1
  , redefine      = require('./_redefine')                                                                             // 2
  , global        = require('./_global')                                                                               // 3
  , hide          = require('./_hide')                                                                                 // 4
  , Iterators     = require('./_iterators')                                                                            // 5
  , wks           = require('./_wks')                                                                                  // 6
  , ITERATOR      = wks('iterator')                                                                                    // 7
  , TO_STRING_TAG = wks('toStringTag')                                                                                 // 8
  , ArrayValues   = Iterators.Array;                                                                                   // 9
                                                                                                                       // 10
for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 11
  var NAME       = collections[i]                                                                                      // 12
    , Collection = global[NAME]                                                                                        // 13
    , proto      = Collection && Collection.prototype                                                                  // 14
    , key;                                                                                                             // 15
  if(proto){                                                                                                           // 16
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);                                                            // 17
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                         // 18
    Iterators[NAME] = ArrayValues;                                                                                     // 19
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);                                  // 20
  }                                                                                                                    // 21
}                                                                                                                      // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.map.js":["./_collection-strong","./_collection",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.map.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var strong = require('./_collection-strong');                                                                          // 2
                                                                                                                       // 3
// 23.1 Map Objects                                                                                                    // 4
module.exports = require('./_collection')('Map', function(get){                                                        // 5
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };                         // 6
}, {                                                                                                                   // 7
  // 23.1.3.6 Map.prototype.get(key)                                                                                   // 8
  get: function get(key){                                                                                              // 9
    var entry = strong.getEntry(this, key);                                                                            // 10
    return entry && entry.v;                                                                                           // 11
  },                                                                                                                   // 12
  // 23.1.3.9 Map.prototype.set(key, value)                                                                            // 13
  set: function set(key, value){                                                                                       // 14
    return strong.def(this, key === 0 ? 0 : key, value);                                                               // 15
  }                                                                                                                    // 16
}, strong, true);                                                                                                      // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_collection-strong.js":["./_object-dp","./_object-create","./_redefine-all","./_ctx","./_an-instance","./_defined","./_for-of","./_iter-define","./_iter-step","./_set-species","./_descriptors","./_meta",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_collection-strong.js                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var dP          = require('./_object-dp').f                                                                            // 2
  , create      = require('./_object-create')                                                                          // 3
  , redefineAll = require('./_redefine-all')                                                                           // 4
  , ctx         = require('./_ctx')                                                                                    // 5
  , anInstance  = require('./_an-instance')                                                                            // 6
  , defined     = require('./_defined')                                                                                // 7
  , forOf       = require('./_for-of')                                                                                 // 8
  , $iterDefine = require('./_iter-define')                                                                            // 9
  , step        = require('./_iter-step')                                                                              // 10
  , setSpecies  = require('./_set-species')                                                                            // 11
  , DESCRIPTORS = require('./_descriptors')                                                                            // 12
  , fastKey     = require('./_meta').fastKey                                                                           // 13
  , SIZE        = DESCRIPTORS ? '_s' : 'size';                                                                         // 14
                                                                                                                       // 15
var getEntry = function(that, key){                                                                                    // 16
  // fast case                                                                                                         // 17
  var index = fastKey(key), entry;                                                                                     // 18
  if(index !== 'F')return that._i[index];                                                                              // 19
  // frozen object case                                                                                                // 20
  for(entry = that._f; entry; entry = entry.n){                                                                        // 21
    if(entry.k == key)return entry;                                                                                    // 22
  }                                                                                                                    // 23
};                                                                                                                     // 24
                                                                                                                       // 25
module.exports = {                                                                                                     // 26
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){                                                              // 27
    var C = wrapper(function(that, iterable){                                                                          // 28
      anInstance(that, C, NAME, '_i');                                                                                 // 29
      that._i = create(null); // index                                                                                 // 30
      that._f = undefined;    // first entry                                                                           // 31
      that._l = undefined;    // last entry                                                                            // 32
      that[SIZE] = 0;         // size                                                                                  // 33
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);                                             // 34
    });                                                                                                                // 35
    redefineAll(C.prototype, {                                                                                         // 36
      // 23.1.3.1 Map.prototype.clear()                                                                                // 37
      // 23.2.3.2 Set.prototype.clear()                                                                                // 38
      clear: function clear(){                                                                                         // 39
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){                                 // 40
          entry.r = true;                                                                                              // 41
          if(entry.p)entry.p = entry.p.n = undefined;                                                                  // 42
          delete data[entry.i];                                                                                        // 43
        }                                                                                                              // 44
        that._f = that._l = undefined;                                                                                 // 45
        that[SIZE] = 0;                                                                                                // 46
      },                                                                                                               // 47
      // 23.1.3.3 Map.prototype.delete(key)                                                                            // 48
      // 23.2.3.4 Set.prototype.delete(value)                                                                          // 49
      'delete': function(key){                                                                                         // 50
        var that  = this                                                                                               // 51
          , entry = getEntry(that, key);                                                                               // 52
        if(entry){                                                                                                     // 53
          var next = entry.n                                                                                           // 54
            , prev = entry.p;                                                                                          // 55
          delete that._i[entry.i];                                                                                     // 56
          entry.r = true;                                                                                              // 57
          if(prev)prev.n = next;                                                                                       // 58
          if(next)next.p = prev;                                                                                       // 59
          if(that._f == entry)that._f = next;                                                                          // 60
          if(that._l == entry)that._l = prev;                                                                          // 61
          that[SIZE]--;                                                                                                // 62
        } return !!entry;                                                                                              // 63
      },                                                                                                               // 64
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                                               // 65
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                                               // 66
      forEach: function forEach(callbackfn /*, that = undefined */){                                                   // 67
        anInstance(this, C, 'forEach');                                                                                // 68
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)                                    // 69
          , entry;                                                                                                     // 70
        while(entry = entry ? entry.n : this._f){                                                                      // 71
          f(entry.v, entry.k, this);                                                                                   // 72
          // revert to the last existing entry                                                                         // 73
          while(entry && entry.r)entry = entry.p;                                                                      // 74
        }                                                                                                              // 75
      },                                                                                                               // 76
      // 23.1.3.7 Map.prototype.has(key)                                                                               // 77
      // 23.2.3.7 Set.prototype.has(value)                                                                             // 78
      has: function has(key){                                                                                          // 79
        return !!getEntry(this, key);                                                                                  // 80
      }                                                                                                                // 81
    });                                                                                                                // 82
    if(DESCRIPTORS)dP(C.prototype, 'size', {                                                                           // 83
      get: function(){                                                                                                 // 84
        return defined(this[SIZE]);                                                                                    // 85
      }                                                                                                                // 86
    });                                                                                                                // 87
    return C;                                                                                                          // 88
  },                                                                                                                   // 89
  def: function(that, key, value){                                                                                     // 90
    var entry = getEntry(that, key)                                                                                    // 91
      , prev, index;                                                                                                   // 92
    // change existing entry                                                                                           // 93
    if(entry){                                                                                                         // 94
      entry.v = value;                                                                                                 // 95
    // create new entry                                                                                                // 96
    } else {                                                                                                           // 97
      that._l = entry = {                                                                                              // 98
        i: index = fastKey(key, true), // <- index                                                                     // 99
        k: key,                        // <- key                                                                       // 100
        v: value,                      // <- value                                                                     // 101
        p: prev = that._l,             // <- previous entry                                                            // 102
        n: undefined,                  // <- next entry                                                                // 103
        r: false                       // <- removed                                                                   // 104
      };                                                                                                               // 105
      if(!that._f)that._f = entry;                                                                                     // 106
      if(prev)prev.n = entry;                                                                                          // 107
      that[SIZE]++;                                                                                                    // 108
      // add to index                                                                                                  // 109
      if(index !== 'F')that._i[index] = entry;                                                                         // 110
    } return that;                                                                                                     // 111
  },                                                                                                                   // 112
  getEntry: getEntry,                                                                                                  // 113
  setStrong: function(C, NAME, IS_MAP){                                                                                // 114
    // add .keys, .values, .entries, [@@iterator]                                                                      // 115
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11                              // 116
    $iterDefine(C, NAME, function(iterated, kind){                                                                     // 117
      this._t = iterated;  // target                                                                                   // 118
      this._k = kind;      // kind                                                                                     // 119
      this._l = undefined; // previous                                                                                 // 120
    }, function(){                                                                                                     // 121
      var that  = this                                                                                                 // 122
        , kind  = that._k                                                                                              // 123
        , entry = that._l;                                                                                             // 124
      // revert to the last existing entry                                                                             // 125
      while(entry && entry.r)entry = entry.p;                                                                          // 126
      // get next entry                                                                                                // 127
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){                                               // 128
        // or finish the iteration                                                                                     // 129
        that._t = undefined;                                                                                           // 130
        return step(1);                                                                                                // 131
      }                                                                                                                // 132
      // return step by kind                                                                                           // 133
      if(kind == 'keys'  )return step(0, entry.k);                                                                     // 134
      if(kind == 'values')return step(0, entry.v);                                                                     // 135
      return step(0, [entry.k, entry.v]);                                                                              // 136
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);                                                                 // 137
                                                                                                                       // 138
    // add [@@species], 23.1.2.2, 23.2.2.2                                                                             // 139
    setSpecies(NAME);                                                                                                  // 140
  }                                                                                                                    // 141
};                                                                                                                     // 142
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_redefine-all.js":["./_redefine",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_redefine-all.js                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var redefine = require('./_redefine');                                                                                 // 1
module.exports = function(target, src, safe){                                                                          // 2
  for(var key in src)redefine(target, key, src[key], safe);                                                            // 3
  return target;                                                                                                       // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_an-instance.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_an-instance.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function(it, Constructor, name, forbiddenField){                                                      // 1
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){                          // 2
    throw TypeError(name + ': incorrect invocation!');                                                                 // 3
  } return it;                                                                                                         // 4
};                                                                                                                     // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_for-of.js":["./_ctx","./_iter-call","./_is-array-iter","./_an-object","./_to-length","./core.get-iterator-method",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_for-of.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ctx         = require('./_ctx')                                                                                    // 1
  , call        = require('./_iter-call')                                                                              // 2
  , isArrayIter = require('./_is-array-iter')                                                                          // 3
  , anObject    = require('./_an-object')                                                                              // 4
  , toLength    = require('./_to-length')                                                                              // 5
  , getIterFn   = require('./core.get-iterator-method')                                                                // 6
  , BREAK       = {}                                                                                                   // 7
  , RETURN      = {};                                                                                                  // 8
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){                                        // 9
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)                                         // 10
    , f      = ctx(fn, that, entries ? 2 : 1)                                                                          // 11
    , index  = 0                                                                                                       // 12
    , length, step, iterator, result;                                                                                  // 13
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');                                      // 14
  // fast case for arrays with default iterator                                                                        // 15
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){                             // 16
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);                           // 17
    if(result === BREAK || result === RETURN)return result;                                                            // 18
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){                                      // 19
    result = call(iterator, f, step.value, entries);                                                                   // 20
    if(result === BREAK || result === RETURN)return result;                                                            // 21
  }                                                                                                                    // 22
};                                                                                                                     // 23
exports.BREAK  = BREAK;                                                                                                // 24
exports.RETURN = RETURN;                                                                                               // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_collection.js":["./_global","./_export","./_redefine","./_redefine-all","./_meta","./_for-of","./_an-instance","./_is-object","./_fails","./_iter-detect","./_set-to-string-tag","./_inherit-if-required",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_collection.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var global            = require('./_global')                                                                           // 2
  , $export           = require('./_export')                                                                           // 3
  , redefine          = require('./_redefine')                                                                         // 4
  , redefineAll       = require('./_redefine-all')                                                                     // 5
  , meta              = require('./_meta')                                                                             // 6
  , forOf             = require('./_for-of')                                                                           // 7
  , anInstance        = require('./_an-instance')                                                                      // 8
  , isObject          = require('./_is-object')                                                                        // 9
  , fails             = require('./_fails')                                                                            // 10
  , $iterDetect       = require('./_iter-detect')                                                                      // 11
  , setToStringTag    = require('./_set-to-string-tag')                                                                // 12
  , inheritIfRequired = require('./_inherit-if-required');                                                             // 13
                                                                                                                       // 14
module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){                                            // 15
  var Base  = global[NAME]                                                                                             // 16
    , C     = Base                                                                                                     // 17
    , ADDER = IS_MAP ? 'set' : 'add'                                                                                   // 18
    , proto = C && C.prototype                                                                                         // 19
    , O     = {};                                                                                                      // 20
  var fixMethod = function(KEY){                                                                                       // 21
    var fn = proto[KEY];                                                                                               // 22
    redefine(proto, KEY,                                                                                               // 23
      KEY == 'delete' ? function(a){                                                                                   // 24
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);                                       // 25
      } : KEY == 'has' ? function has(a){                                                                              // 26
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);                                       // 27
      } : KEY == 'get' ? function get(a){                                                                              // 28
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);                                   // 29
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }                               // 30
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }                                        // 31
    );                                                                                                                 // 32
  };                                                                                                                   // 33
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){                                        // 34
    new C().entries().next();                                                                                          // 35
  }))){                                                                                                                // 36
    // create collection constructor                                                                                   // 37
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);                                                           // 38
    redefineAll(C.prototype, methods);                                                                                 // 39
    meta.NEED = true;                                                                                                  // 40
  } else {                                                                                                             // 41
    var instance             = new C                                                                                   // 42
      // early implementations not supports chaining                                                                   // 43
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance                                       // 44
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false                             // 45
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })                                                   // 46
      // most early implementations doesn't supports iterables, most modern - not close it correctly                   // 47
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new               // 48
      // for early implementations -0 and +0 not the same                                                              // 49
      , BUGGY_ZERO = !IS_WEAK && fails(function(){                                                                     // 50
        // V8 ~ Chromium 42- fails only with 5+ elements                                                               // 51
        var $instance = new C()                                                                                        // 52
          , index     = 5;                                                                                             // 53
        while(index--)$instance[ADDER](index, index);                                                                  // 54
        return !$instance.has(-0);                                                                                     // 55
      });                                                                                                              // 56
    if(!ACCEPT_ITERABLES){                                                                                             // 57
      C = wrapper(function(target, iterable){                                                                          // 58
        anInstance(target, C, NAME);                                                                                   // 59
        var that = inheritIfRequired(new Base, target, C);                                                             // 60
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);                                           // 61
        return that;                                                                                                   // 62
      });                                                                                                              // 63
      C.prototype = proto;                                                                                             // 64
      proto.constructor = C;                                                                                           // 65
    }                                                                                                                  // 66
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){                                                                            // 67
      fixMethod('delete');                                                                                             // 68
      fixMethod('has');                                                                                                // 69
      IS_MAP && fixMethod('get');                                                                                      // 70
    }                                                                                                                  // 71
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);                                                                  // 72
    // weak collections should not contains .clear method                                                              // 73
    if(IS_WEAK && proto.clear)delete proto.clear;                                                                      // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  setToStringTag(C, NAME);                                                                                             // 77
                                                                                                                       // 78
  O[NAME] = C;                                                                                                         // 79
  $export($export.G + $export.W + $export.F * (C != Base), O);                                                         // 80
                                                                                                                       // 81
  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);                                                                       // 82
                                                                                                                       // 83
  return C;                                                                                                            // 84
};                                                                                                                     // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"_inherit-if-required.js":["./_is-object","./_set-proto",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/_inherit-if-required.js                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject       = require('./_is-object')                                                                           // 1
  , setPrototypeOf = require('./_set-proto').set;                                                                      // 2
module.exports = function(that, target, C){                                                                            // 3
  var P, S = target.constructor;                                                                                       // 4
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){         // 5
    setPrototypeOf(that, P);                                                                                           // 6
  } return that;                                                                                                       // 7
};                                                                                                                     // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"es6.set.js":["./_collection-strong","./_collection",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/modules/es6.set.js                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var strong = require('./_collection-strong');                                                                          // 2
                                                                                                                       // 3
// 23.2 Set Objects                                                                                                    // 4
module.exports = require('./_collection')('Set', function(get){                                                        // 5
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };                         // 6
}, {                                                                                                                   // 7
  // 23.2.3.1 Set.prototype.add(value)                                                                                 // 8
  add: function add(value){                                                                                            // 9
    return strong.def(this, value = value === 0 ? 0 : value, value);                                                   // 10
  }                                                                                                                    // 11
}, strong);                                                                                                            // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"fn":{"array":{"includes.js":["../../modules/es7.array.includes","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/array/includes.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.array.includes');                                                                           // 1
module.exports = require('../../modules/_core').Array.includes;                                                        // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"object":{"values.js":["../../modules/es7.object.values","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/object/values.js                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.object.values');                                                                            // 1
module.exports = require('../../modules/_core').Object.values;                                                         // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"entries.js":["../../modules/es7.object.entries","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/object/entries.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.object.entries');                                                                           // 1
module.exports = require('../../modules/_core').Object.entries;                                                        // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"get-own-property-descriptors.js":["../../modules/es7.object.get-own-property-descriptors","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/object/get-own-property-descriptors.js               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.object.get-own-property-descriptors');                                                      // 1
module.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;                                      // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"string":{"pad-start.js":["../../modules/es7.string.pad-start","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/string/pad-start.js                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.string.pad-start');                                                                         // 1
module.exports = require('../../modules/_core').String.padStart;                                                       // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"pad-end.js":["../../modules/es7.string.pad-end","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/string/pad-end.js                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.string.pad-end');                                                                           // 1
module.exports = require('../../modules/_core').String.padEnd;                                                         // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trim-start.js":["../../modules/es7.string.trim-left","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/string/trim-start.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.string.trim-left');                                                                         // 1
module.exports = require('../../modules/_core').String.trimLeft;                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"trim-end.js":["../../modules/es7.string.trim-right","../../modules/_core",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/ecmascript-runtime/node_modules/core-js/fn/string/trim-end.js                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es7.string.trim-right');                                                                        // 1
module.exports = require('../../modules/_core').String.trimRight;                                                      // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/ecmascript-runtime/runtime.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ecmascript-runtime'] = exports, {
  Symbol: Symbol,
  Map: Map,
  Set: Set
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['babel-compiler'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.ecmascript = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var Base64;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/base64/base64.js                                                            //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
// Base 64 encoding                                                                     // 1
                                                                                        // 2
var BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                                                                                        // 4
var BASE_64_VALS = {};                                                                  // 5
                                                                                        // 6
for (var i = 0; i < BASE_64_CHARS.length; i++) {                                        // 7
  BASE_64_VALS[BASE_64_CHARS.charAt(i)] = i;                                            // 8
};                                                                                      // 9
                                                                                        // 10
Base64 = {};                                                                            // 11
                                                                                        // 12
Base64.encode = function (array) {                                                      // 13
                                                                                        // 14
  if (typeof array === "string") {                                                      // 15
    var str = array;                                                                    // 16
    array = Base64.newBinary(str.length);                                               // 17
    for (var i = 0; i < str.length; i++) {                                              // 18
      var ch = str.charCodeAt(i);                                                       // 19
      if (ch > 0xFF) {                                                                  // 20
        throw new Error(                                                                // 21
          "Not ascii. Base64.encode can only take ascii strings.");                     // 22
      }                                                                                 // 23
      array[i] = ch;                                                                    // 24
    }                                                                                   // 25
  }                                                                                     // 26
                                                                                        // 27
  var answer = [];                                                                      // 28
  var a = null;                                                                         // 29
  var b = null;                                                                         // 30
  var c = null;                                                                         // 31
  var d = null;                                                                         // 32
  for (var i = 0; i < array.length; i++) {                                              // 33
    switch (i % 3) {                                                                    // 34
    case 0:                                                                             // 35
      a = (array[i] >> 2) & 0x3F;                                                       // 36
      b = (array[i] & 0x03) << 4;                                                       // 37
      break;                                                                            // 38
    case 1:                                                                             // 39
      b = b | (array[i] >> 4) & 0xF;                                                    // 40
      c = (array[i] & 0xF) << 2;                                                        // 41
      break;                                                                            // 42
    case 2:                                                                             // 43
      c = c | (array[i] >> 6) & 0x03;                                                   // 44
      d = array[i] & 0x3F;                                                              // 45
      answer.push(getChar(a));                                                          // 46
      answer.push(getChar(b));                                                          // 47
      answer.push(getChar(c));                                                          // 48
      answer.push(getChar(d));                                                          // 49
      a = null;                                                                         // 50
      b = null;                                                                         // 51
      c = null;                                                                         // 52
      d = null;                                                                         // 53
      break;                                                                            // 54
    }                                                                                   // 55
  }                                                                                     // 56
  if (a != null) {                                                                      // 57
    answer.push(getChar(a));                                                            // 58
    answer.push(getChar(b));                                                            // 59
    if (c == null)                                                                      // 60
      answer.push('=');                                                                 // 61
    else                                                                                // 62
      answer.push(getChar(c));                                                          // 63
    if (d == null)                                                                      // 64
      answer.push('=');                                                                 // 65
  }                                                                                     // 66
  return answer.join("");                                                               // 67
};                                                                                      // 68
                                                                                        // 69
var getChar = function (val) {                                                          // 70
  return BASE_64_CHARS.charAt(val);                                                     // 71
};                                                                                      // 72
                                                                                        // 73
var getVal = function (ch) {                                                            // 74
  if (ch === '=') {                                                                     // 75
    return -1;                                                                          // 76
  }                                                                                     // 77
  return BASE_64_VALS[ch];                                                              // 78
};                                                                                      // 79
                                                                                        // 80
// XXX This is a weird place for this to live, but it's used both by                    // 81
// this package and 'ejson', and we can't put it in 'ejson' without                     // 82
// introducing a circular dependency. It should probably be in its own                  // 83
// package or as a helper in a package that both 'base64' and 'ejson'                   // 84
// use.                                                                                 // 85
Base64.newBinary = function (len) {                                                     // 86
  if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {        // 87
    var ret = [];                                                                       // 88
    for (var i = 0; i < len; i++) {                                                     // 89
      ret.push(0);                                                                      // 90
    }                                                                                   // 91
    ret.$Uint8ArrayPolyfill = true;                                                     // 92
    return ret;                                                                         // 93
  }                                                                                     // 94
  return new Uint8Array(new ArrayBuffer(len));                                          // 95
};                                                                                      // 96
                                                                                        // 97
Base64.decode = function (str) {                                                        // 98
  var len = Math.floor((str.length*3)/4);                                               // 99
  if (str.charAt(str.length - 1) == '=') {                                              // 100
    len--;                                                                              // 101
    if (str.charAt(str.length - 2) == '=')                                              // 102
      len--;                                                                            // 103
  }                                                                                     // 104
  var arr = Base64.newBinary(len);                                                      // 105
                                                                                        // 106
  var one = null;                                                                       // 107
  var two = null;                                                                       // 108
  var three = null;                                                                     // 109
                                                                                        // 110
  var j = 0;                                                                            // 111
                                                                                        // 112
  for (var i = 0; i < str.length; i++) {                                                // 113
    var c = str.charAt(i);                                                              // 114
    var v = getVal(c);                                                                  // 115
    switch (i % 4) {                                                                    // 116
    case 0:                                                                             // 117
      if (v < 0)                                                                        // 118
        throw new Error('invalid base64 string');                                       // 119
      one = v << 2;                                                                     // 120
      break;                                                                            // 121
    case 1:                                                                             // 122
      if (v < 0)                                                                        // 123
        throw new Error('invalid base64 string');                                       // 124
      one = one | (v >> 4);                                                             // 125
      arr[j++] = one;                                                                   // 126
      two = (v & 0x0F) << 4;                                                            // 127
      break;                                                                            // 128
    case 2:                                                                             // 129
      if (v >= 0) {                                                                     // 130
        two = two | (v >> 2);                                                           // 131
        arr[j++] = two;                                                                 // 132
        three = (v & 0x03) << 6;                                                        // 133
      }                                                                                 // 134
      break;                                                                            // 135
    case 3:                                                                             // 136
      if (v >= 0) {                                                                     // 137
        arr[j++] = three | v;                                                           // 138
      }                                                                                 // 139
      break;                                                                            // 140
    }                                                                                   // 141
  }                                                                                     // 142
  return arr;                                                                           // 143
};                                                                                      // 144
                                                                                        // 145
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.base64 = {}, {
  Base64: Base64
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Base64 = Package.base64.Base64;

/* Package-scope variables */
var EJSON, EJSONTest;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ejson/ejson.js                                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/**                                                                                                                  // 1
 * @namespace                                                                                                        // 2
 * @summary Namespace for EJSON functions                                                                            // 3
 */                                                                                                                  // 4
EJSON = {};                                                                                                          // 5
EJSONTest = {};                                                                                                      // 6
                                                                                                                     // 7
                                                                                                                     // 8
                                                                                                                     // 9
// Custom type interface definition                                                                                  // 10
/**                                                                                                                  // 11
 * @class CustomType                                                                                                 // 12
 * @instanceName customType                                                                                          // 13
 * @memberOf EJSON                                                                                                   // 14
 * @summary The interface that a class must satisfy to be able to become an                                          // 15
 * EJSON custom type via EJSON.addType.                                                                              // 16
 */                                                                                                                  // 17
                                                                                                                     // 18
/**                                                                                                                  // 19
 * @function typeName                                                                                                // 20
 * @memberOf EJSON.CustomType                                                                                        // 21
 * @summary Return the tag used to identify this type.  This must match the tag used to register this type with [`EJSON.addType`](#ejson_add_type).
 * @locus Anywhere                                                                                                   // 23
 * @instance                                                                                                         // 24
 */                                                                                                                  // 25
                                                                                                                     // 26
/**                                                                                                                  // 27
 * @function toJSONValue                                                                                             // 28
 * @memberOf EJSON.CustomType                                                                                        // 29
 * @summary Serialize this instance into a JSON-compatible value.                                                    // 30
 * @locus Anywhere                                                                                                   // 31
 * @instance                                                                                                         // 32
 */                                                                                                                  // 33
                                                                                                                     // 34
/**                                                                                                                  // 35
 * @function clone                                                                                                   // 36
 * @memberOf EJSON.CustomType                                                                                        // 37
 * @summary Return a value `r` such that `this.equals(r)` is true, and modifications to `r` do not affect `this` and vice versa.
 * @locus Anywhere                                                                                                   // 39
 * @instance                                                                                                         // 40
 */                                                                                                                  // 41
                                                                                                                     // 42
/**                                                                                                                  // 43
 * @function equals                                                                                                  // 44
 * @memberOf EJSON.CustomType                                                                                        // 45
 * @summary Return `true` if `other` has a value equal to `this`; `false` otherwise.                                 // 46
 * @locus Anywhere                                                                                                   // 47
 * @param {Object} other Another object to compare this to.                                                          // 48
 * @instance                                                                                                         // 49
 */                                                                                                                  // 50
                                                                                                                     // 51
                                                                                                                     // 52
var customTypes = {};                                                                                                // 53
// Add a custom type, using a method of your choice to get to and                                                    // 54
// from a basic JSON-able representation.  The factory argument                                                      // 55
// is a function of JSON-able --> your object                                                                        // 56
// The type you add must have:                                                                                       // 57
// - A toJSONValue() method, so that Meteor can serialize it                                                         // 58
// - a typeName() method, to show how to look it up in our type table.                                               // 59
// It is okay if these methods are monkey-patched on.                                                                // 60
// EJSON.clone will use toJSONValue and the given factory to produce                                                 // 61
// a clone, but you may specify a method clone() that will be                                                        // 62
// used instead.                                                                                                     // 63
// Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                 // 64
// but you may provide a method equals() instead.                                                                    // 65
/**                                                                                                                  // 66
 * @summary Add a custom datatype to EJSON.                                                                          // 67
 * @locus Anywhere                                                                                                   // 68
 * @param {String} name A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's `typeName` method.
 * @param {Function} factory A function that deserializes a JSON-compatible value into an instance of your type.  This should match the serialization performed by your type's `toJSONValue` method.
 */                                                                                                                  // 71
EJSON.addType = function (name, factory) {                                                                           // 72
  if (_.has(customTypes, name))                                                                                      // 73
    throw new Error("Type " + name + " already present");                                                            // 74
  customTypes[name] = factory;                                                                                       // 75
};                                                                                                                   // 76
                                                                                                                     // 77
var isInfOrNan = function (obj) {                                                                                    // 78
  return _.isNaN(obj) || obj === Infinity || obj === -Infinity;                                                      // 79
};                                                                                                                   // 80
                                                                                                                     // 81
var builtinConverters = [                                                                                            // 82
  { // Date                                                                                                          // 83
    matchJSONValue: function (obj) {                                                                                 // 84
      return _.has(obj, '$date') && _.size(obj) === 1;                                                               // 85
    },                                                                                                               // 86
    matchObject: function (obj) {                                                                                    // 87
      return obj instanceof Date;                                                                                    // 88
    },                                                                                                               // 89
    toJSONValue: function (obj) {                                                                                    // 90
      return {$date: obj.getTime()};                                                                                 // 91
    },                                                                                                               // 92
    fromJSONValue: function (obj) {                                                                                  // 93
      return new Date(obj.$date);                                                                                    // 94
    }                                                                                                                // 95
  },                                                                                                                 // 96
  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                          // 97
    // which we match.)                                                                                              // 98
    matchJSONValue: function (obj) {                                                                                 // 99
      return _.has(obj, '$InfNaN') && _.size(obj) === 1;                                                             // 100
    },                                                                                                               // 101
    matchObject: isInfOrNan,                                                                                         // 102
    toJSONValue: function (obj) {                                                                                    // 103
      var sign;                                                                                                      // 104
      if (_.isNaN(obj))                                                                                              // 105
        sign = 0;                                                                                                    // 106
      else if (obj === Infinity)                                                                                     // 107
        sign = 1;                                                                                                    // 108
      else                                                                                                           // 109
        sign = -1;                                                                                                   // 110
      return {$InfNaN: sign};                                                                                        // 111
    },                                                                                                               // 112
    fromJSONValue: function (obj) {                                                                                  // 113
      return obj.$InfNaN/0;                                                                                          // 114
    }                                                                                                                // 115
  },                                                                                                                 // 116
  { // Binary                                                                                                        // 117
    matchJSONValue: function (obj) {                                                                                 // 118
      return _.has(obj, '$binary') && _.size(obj) === 1;                                                             // 119
    },                                                                                                               // 120
    matchObject: function (obj) {                                                                                    // 121
      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array                                          // 122
        || (obj && _.has(obj, '$Uint8ArrayPolyfill'));                                                               // 123
    },                                                                                                               // 124
    toJSONValue: function (obj) {                                                                                    // 125
      return {$binary: Base64.encode(obj)};                                                                          // 126
    },                                                                                                               // 127
    fromJSONValue: function (obj) {                                                                                  // 128
      return Base64.decode(obj.$binary);                                                                             // 129
    }                                                                                                                // 130
  },                                                                                                                 // 131
  { // Escaping one level                                                                                            // 132
    matchJSONValue: function (obj) {                                                                                 // 133
      return _.has(obj, '$escape') && _.size(obj) === 1;                                                             // 134
    },                                                                                                               // 135
    matchObject: function (obj) {                                                                                    // 136
      if (_.isEmpty(obj) || _.size(obj) > 2) {                                                                       // 137
        return false;                                                                                                // 138
      }                                                                                                              // 139
      return _.any(builtinConverters, function (converter) {                                                         // 140
        return converter.matchJSONValue(obj);                                                                        // 141
      });                                                                                                            // 142
    },                                                                                                               // 143
    toJSONValue: function (obj) {                                                                                    // 144
      var newObj = {};                                                                                               // 145
      _.each(obj, function (value, key) {                                                                            // 146
        newObj[key] = EJSON.toJSONValue(value);                                                                      // 147
      });                                                                                                            // 148
      return {$escape: newObj};                                                                                      // 149
    },                                                                                                               // 150
    fromJSONValue: function (obj) {                                                                                  // 151
      var newObj = {};                                                                                               // 152
      _.each(obj.$escape, function (value, key) {                                                                    // 153
        newObj[key] = EJSON.fromJSONValue(value);                                                                    // 154
      });                                                                                                            // 155
      return newObj;                                                                                                 // 156
    }                                                                                                                // 157
  },                                                                                                                 // 158
  { // Custom                                                                                                        // 159
    matchJSONValue: function (obj) {                                                                                 // 160
      return _.has(obj, '$type') && _.has(obj, '$value') && _.size(obj) === 2;                                       // 161
    },                                                                                                               // 162
    matchObject: function (obj) {                                                                                    // 163
      return EJSON._isCustomType(obj);                                                                               // 164
    },                                                                                                               // 165
    toJSONValue: function (obj) {                                                                                    // 166
      var jsonValue = Meteor._noYieldsAllowed(function () {                                                          // 167
        return obj.toJSONValue();                                                                                    // 168
      });                                                                                                            // 169
      return {$type: obj.typeName(), $value: jsonValue};                                                             // 170
    },                                                                                                               // 171
    fromJSONValue: function (obj) {                                                                                  // 172
      var typeName = obj.$type;                                                                                      // 173
      if (!_.has(customTypes, typeName))                                                                             // 174
        throw new Error("Custom EJSON type " + typeName + " is not defined");                                        // 175
      var converter = customTypes[typeName];                                                                         // 176
      return Meteor._noYieldsAllowed(function () {                                                                   // 177
        return converter(obj.$value);                                                                                // 178
      });                                                                                                            // 179
    }                                                                                                                // 180
  }                                                                                                                  // 181
];                                                                                                                   // 182
                                                                                                                     // 183
EJSON._isCustomType = function (obj) {                                                                               // 184
  return obj &&                                                                                                      // 185
    typeof obj.toJSONValue === 'function' &&                                                                         // 186
    typeof obj.typeName === 'function' &&                                                                            // 187
    _.has(customTypes, obj.typeName());                                                                              // 188
};                                                                                                                   // 189
                                                                                                                     // 190
EJSON._getTypes = function () {                                                                                      // 191
  return customTypes;                                                                                                // 192
};                                                                                                                   // 193
                                                                                                                     // 194
EJSON._getConverters = function () {                                                                                 // 195
  return builtinConverters;                                                                                          // 196
};                                                                                                                   // 197
                                                                                                                     // 198
// for both arrays and objects, in-place modification.                                                               // 199
var adjustTypesToJSONValue =                                                                                         // 200
EJSON._adjustTypesToJSONValue = function (obj) {                                                                     // 201
  // Is it an atom that we need to adjust?                                                                           // 202
  if (obj === null)                                                                                                  // 203
    return null;                                                                                                     // 204
  var maybeChanged = toJSONValueHelper(obj);                                                                         // 205
  if (maybeChanged !== undefined)                                                                                    // 206
    return maybeChanged;                                                                                             // 207
                                                                                                                     // 208
  // Other atoms are unchanged.                                                                                      // 209
  if (typeof obj !== 'object')                                                                                       // 210
    return obj;                                                                                                      // 211
                                                                                                                     // 212
  // Iterate over array or object structure.                                                                         // 213
  _.each(obj, function (value, key) {                                                                                // 214
    if (typeof value !== 'object' && value !== undefined &&                                                          // 215
        !isInfOrNan(value))                                                                                          // 216
      return; // continue                                                                                            // 217
                                                                                                                     // 218
    var changed = toJSONValueHelper(value);                                                                          // 219
    if (changed) {                                                                                                   // 220
      obj[key] = changed;                                                                                            // 221
      return; // on to the next key                                                                                  // 222
    }                                                                                                                // 223
    // if we get here, value is an object but not adjustable                                                         // 224
    // at this level.  recurse.                                                                                      // 225
    adjustTypesToJSONValue(value);                                                                                   // 226
  });                                                                                                                // 227
  return obj;                                                                                                        // 228
};                                                                                                                   // 229
                                                                                                                     // 230
// Either return the JSON-compatible version of the argument, or undefined (if                                       // 231
// the item isn't itself replaceable, but maybe some fields in it are)                                               // 232
var toJSONValueHelper = function (item) {                                                                            // 233
  for (var i = 0; i < builtinConverters.length; i++) {                                                               // 234
    var converter = builtinConverters[i];                                                                            // 235
    if (converter.matchObject(item)) {                                                                               // 236
      return converter.toJSONValue(item);                                                                            // 237
    }                                                                                                                // 238
  }                                                                                                                  // 239
  return undefined;                                                                                                  // 240
};                                                                                                                   // 241
                                                                                                                     // 242
/**                                                                                                                  // 243
 * @summary Serialize an EJSON-compatible value into its plain JSON representation.                                  // 244
 * @locus Anywhere                                                                                                   // 245
 * @param {EJSON} val A value to serialize to plain JSON.                                                            // 246
 */                                                                                                                  // 247
EJSON.toJSONValue = function (item) {                                                                                // 248
  var changed = toJSONValueHelper(item);                                                                             // 249
  if (changed !== undefined)                                                                                         // 250
    return changed;                                                                                                  // 251
  if (typeof item === 'object') {                                                                                    // 252
    item = EJSON.clone(item);                                                                                        // 253
    adjustTypesToJSONValue(item);                                                                                    // 254
  }                                                                                                                  // 255
  return item;                                                                                                       // 256
};                                                                                                                   // 257
                                                                                                                     // 258
// for both arrays and objects. Tries its best to just                                                               // 259
// use the object you hand it, but may return something                                                              // 260
// different if the object you hand it itself needs changing.                                                        // 261
//                                                                                                                   // 262
var adjustTypesFromJSONValue =                                                                                       // 263
EJSON._adjustTypesFromJSONValue = function (obj) {                                                                   // 264
  if (obj === null)                                                                                                  // 265
    return null;                                                                                                     // 266
  var maybeChanged = fromJSONValueHelper(obj);                                                                       // 267
  if (maybeChanged !== obj)                                                                                          // 268
    return maybeChanged;                                                                                             // 269
                                                                                                                     // 270
  // Other atoms are unchanged.                                                                                      // 271
  if (typeof obj !== 'object')                                                                                       // 272
    return obj;                                                                                                      // 273
                                                                                                                     // 274
  _.each(obj, function (value, key) {                                                                                // 275
    if (typeof value === 'object') {                                                                                 // 276
      var changed = fromJSONValueHelper(value);                                                                      // 277
      if (value !== changed) {                                                                                       // 278
        obj[key] = changed;                                                                                          // 279
        return;                                                                                                      // 280
      }                                                                                                              // 281
      // if we get here, value is an object but not adjustable                                                       // 282
      // at this level.  recurse.                                                                                    // 283
      adjustTypesFromJSONValue(value);                                                                               // 284
    }                                                                                                                // 285
  });                                                                                                                // 286
  return obj;                                                                                                        // 287
};                                                                                                                   // 288
                                                                                                                     // 289
// Either return the argument changed to have the non-json                                                           // 290
// rep of itself (the Object version) or the argument itself.                                                        // 291
                                                                                                                     // 292
// DOES NOT RECURSE.  For actually getting the fully-changed value, use                                              // 293
// EJSON.fromJSONValue                                                                                               // 294
var fromJSONValueHelper = function (value) {                                                                         // 295
  if (typeof value === 'object' && value !== null) {                                                                 // 296
    if (_.size(value) <= 2                                                                                           // 297
        && _.all(value, function (v, k) {                                                                            // 298
          return typeof k === 'string' && k.substr(0, 1) === '$';                                                    // 299
        })) {                                                                                                        // 300
      for (var i = 0; i < builtinConverters.length; i++) {                                                           // 301
        var converter = builtinConverters[i];                                                                        // 302
        if (converter.matchJSONValue(value)) {                                                                       // 303
          return converter.fromJSONValue(value);                                                                     // 304
        }                                                                                                            // 305
      }                                                                                                              // 306
    }                                                                                                                // 307
  }                                                                                                                  // 308
  return value;                                                                                                      // 309
};                                                                                                                   // 310
                                                                                                                     // 311
/**                                                                                                                  // 312
 * @summary Deserialize an EJSON value from its plain JSON representation.                                           // 313
 * @locus Anywhere                                                                                                   // 314
 * @param {JSONCompatible} val A value to deserialize into EJSON.                                                    // 315
 */                                                                                                                  // 316
EJSON.fromJSONValue = function (item) {                                                                              // 317
  var changed = fromJSONValueHelper(item);                                                                           // 318
  if (changed === item && typeof item === 'object') {                                                                // 319
    item = EJSON.clone(item);                                                                                        // 320
    adjustTypesFromJSONValue(item);                                                                                  // 321
    return item;                                                                                                     // 322
  } else {                                                                                                           // 323
    return changed;                                                                                                  // 324
  }                                                                                                                  // 325
};                                                                                                                   // 326
                                                                                                                     // 327
/**                                                                                                                  // 328
 * @summary Serialize a value to a string.                                                                           // 329
                                                                                                                     // 330
For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as `JSON.stringify`.
 * @locus Anywhere                                                                                                   // 332
 * @param {EJSON} val A value to stringify.                                                                          // 333
 * @param {Object} [options]                                                                                         // 334
 * @param {Boolean | Integer | String} options.indent Indents objects and arrays for easy readability.  When `true`, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.
 * @param {Boolean} options.canonical When `true`, stringifies keys in an object in sorted order.                    // 336
 */                                                                                                                  // 337
EJSON.stringify = function (item, options) {                                                                         // 338
  var json = EJSON.toJSONValue(item);                                                                                // 339
  if (options && (options.canonical || options.indent)) {                                                            // 340
    return EJSON._canonicalStringify(json, options);                                                                 // 341
  } else {                                                                                                           // 342
    return JSON.stringify(json);                                                                                     // 343
  }                                                                                                                  // 344
};                                                                                                                   // 345
                                                                                                                     // 346
/**                                                                                                                  // 347
 * @summary Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.                    // 348
 * @locus Anywhere                                                                                                   // 349
 * @param {String} str A string to parse into an EJSON value.                                                        // 350
 */                                                                                                                  // 351
EJSON.parse = function (item) {                                                                                      // 352
  if (typeof item !== 'string')                                                                                      // 353
    throw new Error("EJSON.parse argument should be a string");                                                      // 354
  return EJSON.fromJSONValue(JSON.parse(item));                                                                      // 355
};                                                                                                                   // 356
                                                                                                                     // 357
/**                                                                                                                  // 358
 * @summary Returns true if `x` is a buffer of binary data, as returned from [`EJSON.newBinary`](#ejson_new_binary).
 * @param {Object} x The variable to check.                                                                          // 360
 * @locus Anywhere                                                                                                   // 361
 */                                                                                                                  // 362
EJSON.isBinary = function (obj) {                                                                                    // 363
  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||                                      // 364
    (obj && obj.$Uint8ArrayPolyfill));                                                                               // 365
};                                                                                                                   // 366
                                                                                                                     // 367
/**                                                                                                                  // 368
 * @summary Return true if `a` and `b` are equal to each other.  Return false otherwise.  Uses the `equals` method on `a` if present, otherwise performs a deep comparison.
 * @locus Anywhere                                                                                                   // 370
 * @param {EJSON} a                                                                                                  // 371
 * @param {EJSON} b                                                                                                  // 372
 * @param {Object} [options]                                                                                         // 373
 * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order, if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}` is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The default is `false`.
 */                                                                                                                  // 375
EJSON.equals = function (a, b, options) {                                                                            // 376
  var i;                                                                                                             // 377
  var keyOrderSensitive = !!(options && options.keyOrderSensitive);                                                  // 378
  if (a === b)                                                                                                       // 379
    return true;                                                                                                     // 380
  if (_.isNaN(a) && _.isNaN(b))                                                                                      // 381
    return true; // This differs from the IEEE spec for NaN equality, b/c we don't want                              // 382
                 // anything ever with a NaN to be poisoned from becoming equal to anything.                         // 383
  if (!a || !b) // if either one is falsy, they'd have to be === to be equal                                         // 384
    return false;                                                                                                    // 385
  if (!(typeof a === 'object' && typeof b === 'object'))                                                             // 386
    return false;                                                                                                    // 387
  if (a instanceof Date && b instanceof Date)                                                                        // 388
    return a.valueOf() === b.valueOf();                                                                              // 389
  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                                      // 390
    if (a.length !== b.length)                                                                                       // 391
      return false;                                                                                                  // 392
    for (i = 0; i < a.length; i++) {                                                                                 // 393
      if (a[i] !== b[i])                                                                                             // 394
        return false;                                                                                                // 395
    }                                                                                                                // 396
    return true;                                                                                                     // 397
  }                                                                                                                  // 398
  if (typeof (a.equals) === 'function')                                                                              // 399
    return a.equals(b, options);                                                                                     // 400
  if (typeof (b.equals) === 'function')                                                                              // 401
    return b.equals(a, options);                                                                                     // 402
  if (a instanceof Array) {                                                                                          // 403
    if (!(b instanceof Array))                                                                                       // 404
      return false;                                                                                                  // 405
    if (a.length !== b.length)                                                                                       // 406
      return false;                                                                                                  // 407
    for (i = 0; i < a.length; i++) {                                                                                 // 408
      if (!EJSON.equals(a[i], b[i], options))                                                                        // 409
        return false;                                                                                                // 410
    }                                                                                                                // 411
    return true;                                                                                                     // 412
  }                                                                                                                  // 413
  // fallback for custom types that don't implement their own equals                                                 // 414
  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                                         // 415
    case 1: return false;                                                                                            // 416
    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                                         // 417
  }                                                                                                                  // 418
  // fall back to structural equality of objects                                                                     // 419
  var ret;                                                                                                           // 420
  if (keyOrderSensitive) {                                                                                           // 421
    var bKeys = [];                                                                                                  // 422
    _.each(b, function (val, x) {                                                                                    // 423
        bKeys.push(x);                                                                                               // 424
    });                                                                                                              // 425
    i = 0;                                                                                                           // 426
    ret = _.all(a, function (val, x) {                                                                               // 427
      if (i >= bKeys.length) {                                                                                       // 428
        return false;                                                                                                // 429
      }                                                                                                              // 430
      if (x !== bKeys[i]) {                                                                                          // 431
        return false;                                                                                                // 432
      }                                                                                                              // 433
      if (!EJSON.equals(val, b[bKeys[i]], options)) {                                                                // 434
        return false;                                                                                                // 435
      }                                                                                                              // 436
      i++;                                                                                                           // 437
      return true;                                                                                                   // 438
    });                                                                                                              // 439
    return ret && i === bKeys.length;                                                                                // 440
  } else {                                                                                                           // 441
    i = 0;                                                                                                           // 442
    ret = _.all(a, function (val, key) {                                                                             // 443
      if (!_.has(b, key)) {                                                                                          // 444
        return false;                                                                                                // 445
      }                                                                                                              // 446
      if (!EJSON.equals(val, b[key], options)) {                                                                     // 447
        return false;                                                                                                // 448
      }                                                                                                              // 449
      i++;                                                                                                           // 450
      return true;                                                                                                   // 451
    });                                                                                                              // 452
    return ret && _.size(b) === i;                                                                                   // 453
  }                                                                                                                  // 454
};                                                                                                                   // 455
                                                                                                                     // 456
/**                                                                                                                  // 457
 * @summary Return a deep copy of `val`.                                                                             // 458
 * @locus Anywhere                                                                                                   // 459
 * @param {EJSON} val A value to copy.                                                                               // 460
 */                                                                                                                  // 461
EJSON.clone = function (v) {                                                                                         // 462
  var ret;                                                                                                           // 463
  if (typeof v !== "object")                                                                                         // 464
    return v;                                                                                                        // 465
  if (v === null)                                                                                                    // 466
    return null; // null has typeof "object"                                                                         // 467
  if (v instanceof Date)                                                                                             // 468
    return new Date(v.getTime());                                                                                    // 469
  // RegExps are not really EJSON elements (eg we don't define a serialization                                       // 470
  // for them), but they're immutable anyway, so we can support them in clone.                                       // 471
  if (v instanceof RegExp)                                                                                           // 472
    return v;                                                                                                        // 473
  if (EJSON.isBinary(v)) {                                                                                           // 474
    ret = EJSON.newBinary(v.length);                                                                                 // 475
    for (var i = 0; i < v.length; i++) {                                                                             // 476
      ret[i] = v[i];                                                                                                 // 477
    }                                                                                                                // 478
    return ret;                                                                                                      // 479
  }                                                                                                                  // 480
  // XXX: Use something better than underscore's isArray                                                             // 481
  if (_.isArray(v) || _.isArguments(v)) {                                                                            // 482
    // For some reason, _.map doesn't work in this context on Opera (weird test                                      // 483
    // failures).                                                                                                    // 484
    ret = [];                                                                                                        // 485
    for (i = 0; i < v.length; i++)                                                                                   // 486
      ret[i] = EJSON.clone(v[i]);                                                                                    // 487
    return ret;                                                                                                      // 488
  }                                                                                                                  // 489
  // handle general user-defined typed Objects if they have a clone method                                           // 490
  if (typeof v.clone === 'function') {                                                                               // 491
    return v.clone();                                                                                                // 492
  }                                                                                                                  // 493
  // handle other custom types                                                                                       // 494
  if (EJSON._isCustomType(v)) {                                                                                      // 495
    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                                             // 496
  }                                                                                                                  // 497
  // handle other objects                                                                                            // 498
  ret = {};                                                                                                          // 499
  _.each(v, function (value, key) {                                                                                  // 500
    ret[key] = EJSON.clone(value);                                                                                   // 501
  });                                                                                                                // 502
  return ret;                                                                                                        // 503
};                                                                                                                   // 504
                                                                                                                     // 505
/**                                                                                                                  // 506
 * @summary Allocate a new buffer of binary data that EJSON can serialize.                                           // 507
 * @locus Anywhere                                                                                                   // 508
 * @param {Number} size The number of bytes of binary data to allocate.                                              // 509
 */                                                                                                                  // 510
// EJSON.newBinary is the public documented API for this functionality,                                              // 511
// but the implementation is in the 'base64' package to avoid                                                        // 512
// introducing a circular dependency. (If the implementation were here,                                              // 513
// then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                                // 514
// also have to use 'base64'.)                                                                                       // 515
EJSON.newBinary = Base64.newBinary;                                                                                  // 516
                                                                                                                     // 517
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/ejson/stringify.js                                                                                       //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
// Based on json2.js from https://github.com/douglascrockford/JSON-js                                                // 1
//                                                                                                                   // 2
//    json2.js                                                                                                       // 3
//    2012-10-08                                                                                                     // 4
//                                                                                                                   // 5
//    Public Domain.                                                                                                 // 6
//                                                                                                                   // 7
//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                        // 8
                                                                                                                     // 9
function quote(string) {                                                                                             // 10
  return JSON.stringify(string);                                                                                     // 11
}                                                                                                                    // 12
                                                                                                                     // 13
var str = function (key, holder, singleIndent, outerIndent, canonical) {                                             // 14
                                                                                                                     // 15
  // Produce a string from holder[key].                                                                              // 16
                                                                                                                     // 17
  var i;          // The loop counter.                                                                               // 18
  var k;          // The member key.                                                                                 // 19
  var v;          // The member value.                                                                               // 20
  var length;                                                                                                        // 21
  var innerIndent = outerIndent;                                                                                     // 22
  var partial;                                                                                                       // 23
  var value = holder[key];                                                                                           // 24
                                                                                                                     // 25
  // What happens next depends on the value's type.                                                                  // 26
                                                                                                                     // 27
  switch (typeof value) {                                                                                            // 28
  case 'string':                                                                                                     // 29
    return quote(value);                                                                                             // 30
  case 'number':                                                                                                     // 31
    // JSON numbers must be finite. Encode non-finite numbers as null.                                               // 32
    return isFinite(value) ? String(value) : 'null';                                                                 // 33
  case 'boolean':                                                                                                    // 34
    return String(value);                                                                                            // 35
  // If the type is 'object', we might be dealing with an object or an array or                                      // 36
  // null.                                                                                                           // 37
  case 'object':                                                                                                     // 38
    // Due to a specification blunder in ECMAScript, typeof null is 'object',                                        // 39
    // so watch out for that case.                                                                                   // 40
    if (!value) {                                                                                                    // 41
      return 'null';                                                                                                 // 42
    }                                                                                                                // 43
    // Make an array to hold the partial results of stringifying this object value.                                  // 44
    innerIndent = outerIndent + singleIndent;                                                                        // 45
    partial = [];                                                                                                    // 46
                                                                                                                     // 47
    // Is the value an array?                                                                                        // 48
    if (_.isArray(value) || _.isArguments(value)) {                                                                  // 49
                                                                                                                     // 50
      // The value is an array. Stringify every element. Use null as a placeholder                                   // 51
      // for non-JSON values.                                                                                        // 52
                                                                                                                     // 53
      length = value.length;                                                                                         // 54
      for (i = 0; i < length; i += 1) {                                                                              // 55
        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';                                  // 56
      }                                                                                                              // 57
                                                                                                                     // 58
      // Join all of the elements together, separated with commas, and wrap them in                                  // 59
      // brackets.                                                                                                   // 60
                                                                                                                     // 61
      if (partial.length === 0) {                                                                                    // 62
        v = '[]';                                                                                                    // 63
      } else if (innerIndent) {                                                                                      // 64
        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';                      // 65
      } else {                                                                                                       // 66
        v = '[' + partial.join(',') + ']';                                                                           // 67
      }                                                                                                              // 68
      return v;                                                                                                      // 69
    }                                                                                                                // 70
                                                                                                                     // 71
                                                                                                                     // 72
    // Iterate through all of the keys in the object.                                                                // 73
    var keys = _.keys(value);                                                                                        // 74
    if (canonical)                                                                                                   // 75
      keys = keys.sort();                                                                                            // 76
    _.each(keys, function (k) {                                                                                      // 77
      v = str(k, value, singleIndent, innerIndent, canonical);                                                       // 78
      if (v) {                                                                                                       // 79
        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                                     // 80
      }                                                                                                              // 81
    });                                                                                                              // 82
                                                                                                                     // 83
                                                                                                                     // 84
    // Join all of the member texts together, separated with commas,                                                 // 85
    // and wrap them in braces.                                                                                      // 86
                                                                                                                     // 87
    if (partial.length === 0) {                                                                                      // 88
      v = '{}';                                                                                                      // 89
    } else if (innerIndent) {                                                                                        // 90
      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';                        // 91
    } else {                                                                                                         // 92
      v = '{' + partial.join(',') + '}';                                                                             // 93
    }                                                                                                                // 94
    return v;                                                                                                        // 95
  }                                                                                                                  // 96
}                                                                                                                    // 97
                                                                                                                     // 98
// If the JSON object does not yet have a stringify method, give it one.                                             // 99
                                                                                                                     // 100
EJSON._canonicalStringify = function (value, options) {                                                              // 101
  // Make a fake root object containing our value under the key of ''.                                               // 102
  // Return the result of stringifying the value.                                                                    // 103
  options = _.extend({                                                                                               // 104
    indent: "",                                                                                                      // 105
    canonical: false                                                                                                 // 106
  }, options);                                                                                                       // 107
  if (options.indent === true) {                                                                                     // 108
    options.indent = "  ";                                                                                           // 109
  } else if (typeof options.indent === 'number') {                                                                   // 110
    var newIndent = "";                                                                                              // 111
    for (var i = 0; i < options.indent; i++) {                                                                       // 112
      newIndent += ' ';                                                                                              // 113
    }                                                                                                                // 114
    options.indent = newIndent;                                                                                      // 115
  }                                                                                                                  // 116
  return str('', {'': value}, options.indent, "", options.canonical);                                                // 117
};                                                                                                                   // 118
                                                                                                                     // 119
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.ejson = {}, {
  EJSON: EJSON,
  EJSONTest: EJSONTest
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var IdMap;

(function(){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// packages/id-map/id-map.js                                                  //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
IdMap = function (idStringify, idParse) {                                     // 1
  var self = this;                                                            // 2
  self._map = {};                                                             // 3
  self._idStringify = idStringify || JSON.stringify;                          // 4
  self._idParse = idParse || JSON.parse;                                      // 5
};                                                                            // 6
                                                                              // 7
// Some of these methods are designed to match methods on OrderedDict, since  // 8
// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
// (Conceivably, this should be replaced with "UnorderedDict" with a specific
// set of methods that overlap between the two.)                              // 11
                                                                              // 12
_.extend(IdMap.prototype, {                                                   // 13
  get: function (id) {                                                        // 14
    var self = this;                                                          // 15
    var key = self._idStringify(id);                                          // 16
    return self._map[key];                                                    // 17
  },                                                                          // 18
  set: function (id, value) {                                                 // 19
    var self = this;                                                          // 20
    var key = self._idStringify(id);                                          // 21
    self._map[key] = value;                                                   // 22
  },                                                                          // 23
  remove: function (id) {                                                     // 24
    var self = this;                                                          // 25
    var key = self._idStringify(id);                                          // 26
    delete self._map[key];                                                    // 27
  },                                                                          // 28
  has: function (id) {                                                        // 29
    var self = this;                                                          // 30
    var key = self._idStringify(id);                                          // 31
    return _.has(self._map, key);                                             // 32
  },                                                                          // 33
  empty: function () {                                                        // 34
    var self = this;                                                          // 35
    return _.isEmpty(self._map);                                              // 36
  },                                                                          // 37
  clear: function () {                                                        // 38
    var self = this;                                                          // 39
    self._map = {};                                                           // 40
  },                                                                          // 41
  // Iterates over the items in the map. Return `false` to break the loop.    // 42
  forEach: function (iterator) {                                              // 43
    var self = this;                                                          // 44
    // don't use _.each, because we can't break out of it.                    // 45
    var keys = _.keys(self._map);                                             // 46
    for (var i = 0; i < keys.length; i++) {                                   // 47
      var breakIfFalse = iterator.call(null, self._map[keys[i]],              // 48
                                       self._idParse(keys[i]));               // 49
      if (breakIfFalse === false)                                             // 50
        return;                                                               // 51
    }                                                                         // 52
  },                                                                          // 53
  size: function () {                                                         // 54
    var self = this;                                                          // 55
    return _.size(self._map);                                                 // 56
  },                                                                          // 57
  setDefault: function (id, def) {                                            // 58
    var self = this;                                                          // 59
    var key = self._idStringify(id);                                          // 60
    if (_.has(self._map, key))                                                // 61
      return self._map[key];                                                  // 62
    self._map[key] = def;                                                     // 63
    return def;                                                               // 64
  },                                                                          // 65
  // Assumes that values are EJSON-cloneable, and that we don't need to clone
  // IDs (ie, that nobody is going to mutate an ObjectId).                    // 67
  clone: function () {                                                        // 68
    var self = this;                                                          // 69
    var clone = new IdMap(self._idStringify, self._idParse);                  // 70
    self.forEach(function (value, id) {                                       // 71
      clone.set(id, EJSON.clone(value));                                      // 72
    });                                                                       // 73
    return clone;                                                             // 74
  }                                                                           // 75
});                                                                           // 76
                                                                              // 77
                                                                              // 78
////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['id-map'] = {}, {
  IdMap: IdMap
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;

/* Package-scope variables */
var OrderedDict;

(function(){

///////////////////////////////////////////////////////////////////////////////////
//                                                                               //
// packages/ordered-dict/ordered_dict.js                                         //
//                                                                               //
///////////////////////////////////////////////////////////////////////////////////
                                                                                 //
// This file defines an ordered dictionary abstraction that is useful for        // 1
// maintaining a dataset backed by observeChanges.  It supports ordering items   // 2
// by specifying the item they now come before.                                  // 3
                                                                                 // 4
// The implementation is a dictionary that contains nodes of a doubly-linked     // 5
// list as its values.                                                           // 6
                                                                                 // 7
// constructs a new element struct                                               // 8
// next and prev are whole elements, not keys.                                   // 9
var element = function (key, value, next, prev) {                                // 10
  return {                                                                       // 11
    key: key,                                                                    // 12
    value: value,                                                                // 13
    next: next,                                                                  // 14
    prev: prev                                                                   // 15
  };                                                                             // 16
};                                                                               // 17
OrderedDict = function (/* ... */) {                                             // 18
  var self = this;                                                               // 19
  self._dict = {};                                                               // 20
  self._first = null;                                                            // 21
  self._last = null;                                                             // 22
  self._size = 0;                                                                // 23
  var args = _.toArray(arguments);                                               // 24
  self._stringify = function (x) { return x; };                                  // 25
  if (typeof args[0] === 'function')                                             // 26
    self._stringify = args.shift();                                              // 27
  _.each(args, function (kv) {                                                   // 28
    self.putBefore(kv[0], kv[1], null);                                          // 29
  });                                                                            // 30
};                                                                               // 31
                                                                                 // 32
_.extend(OrderedDict.prototype, {                                                // 33
  // the "prefix keys with a space" thing comes from here                        // 34
  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649
  _k: function (key) { return " " + this._stringify(key); },                     // 36
                                                                                 // 37
  empty: function () {                                                           // 38
    var self = this;                                                             // 39
    return !self._first;                                                         // 40
  },                                                                             // 41
  size: function () {                                                            // 42
    var self = this;                                                             // 43
    return self._size;                                                           // 44
  },                                                                             // 45
  _linkEltIn: function (elt) {                                                   // 46
    var self = this;                                                             // 47
    if (!elt.next) {                                                             // 48
      elt.prev = self._last;                                                     // 49
      if (self._last)                                                            // 50
        self._last.next = elt;                                                   // 51
      self._last = elt;                                                          // 52
    } else {                                                                     // 53
      elt.prev = elt.next.prev;                                                  // 54
      elt.next.prev = elt;                                                       // 55
      if (elt.prev)                                                              // 56
        elt.prev.next = elt;                                                     // 57
    }                                                                            // 58
    if (self._first === null || self._first === elt.next)                        // 59
      self._first = elt;                                                         // 60
  },                                                                             // 61
  _linkEltOut: function (elt) {                                                  // 62
    var self = this;                                                             // 63
    if (elt.next)                                                                // 64
      elt.next.prev = elt.prev;                                                  // 65
    if (elt.prev)                                                                // 66
      elt.prev.next = elt.next;                                                  // 67
    if (elt === self._last)                                                      // 68
      self._last = elt.prev;                                                     // 69
    if (elt === self._first)                                                     // 70
      self._first = elt.next;                                                    // 71
  },                                                                             // 72
  putBefore: function (key, item, before) {                                      // 73
    var self = this;                                                             // 74
    if (self._dict[self._k(key)])                                                // 75
      throw new Error("Item " + key + " already present in OrderedDict");        // 76
    var elt = before ?                                                           // 77
          element(key, item, self._dict[self._k(before)]) :                      // 78
          element(key, item, null);                                              // 79
    if (elt.next === undefined)                                                  // 80
      throw new Error("could not find item to put this one before");             // 81
    self._linkEltIn(elt);                                                        // 82
    self._dict[self._k(key)] = elt;                                              // 83
    self._size++;                                                                // 84
  },                                                                             // 85
  append: function (key, item) {                                                 // 86
    var self = this;                                                             // 87
    self.putBefore(key, item, null);                                             // 88
  },                                                                             // 89
  remove: function (key) {                                                       // 90
    var self = this;                                                             // 91
    var elt = self._dict[self._k(key)];                                          // 92
    if (elt === undefined)                                                       // 93
      throw new Error("Item " + key + " not present in OrderedDict");            // 94
    self._linkEltOut(elt);                                                       // 95
    self._size--;                                                                // 96
    delete self._dict[self._k(key)];                                             // 97
    return elt.value;                                                            // 98
  },                                                                             // 99
  get: function (key) {                                                          // 100
    var self = this;                                                             // 101
    if (self.has(key))                                                           // 102
        return self._dict[self._k(key)].value;                                   // 103
    return undefined;                                                            // 104
  },                                                                             // 105
  has: function (key) {                                                          // 106
    var self = this;                                                             // 107
    return _.has(self._dict, self._k(key));                                      // 108
  },                                                                             // 109
  // Iterate through the items in this dictionary in order, calling              // 110
  // iter(value, key, index) on each one.                                        // 111
                                                                                 // 112
  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113
  forEach: function (iter) {                                                     // 114
    var self = this;                                                             // 115
    var i = 0;                                                                   // 116
    var elt = self._first;                                                       // 117
    while (elt !== null) {                                                       // 118
      var b = iter(elt.value, elt.key, i);                                       // 119
      if (b === OrderedDict.BREAK)                                               // 120
        return;                                                                  // 121
      elt = elt.next;                                                            // 122
      i++;                                                                       // 123
    }                                                                            // 124
  },                                                                             // 125
  first: function () {                                                           // 126
    var self = this;                                                             // 127
    if (self.empty())                                                            // 128
      return undefined;                                                          // 129
    return self._first.key;                                                      // 130
  },                                                                             // 131
  firstValue: function () {                                                      // 132
    var self = this;                                                             // 133
    if (self.empty())                                                            // 134
      return undefined;                                                          // 135
    return self._first.value;                                                    // 136
  },                                                                             // 137
  last: function () {                                                            // 138
    var self = this;                                                             // 139
    if (self.empty())                                                            // 140
      return undefined;                                                          // 141
    return self._last.key;                                                       // 142
  },                                                                             // 143
  lastValue: function () {                                                       // 144
    var self = this;                                                             // 145
    if (self.empty())                                                            // 146
      return undefined;                                                          // 147
    return self._last.value;                                                     // 148
  },                                                                             // 149
  prev: function (key) {                                                         // 150
    var self = this;                                                             // 151
    if (self.has(key)) {                                                         // 152
      var elt = self._dict[self._k(key)];                                        // 153
      if (elt.prev)                                                              // 154
        return elt.prev.key;                                                     // 155
    }                                                                            // 156
    return null;                                                                 // 157
  },                                                                             // 158
  next: function (key) {                                                         // 159
    var self = this;                                                             // 160
    if (self.has(key)) {                                                         // 161
      var elt = self._dict[self._k(key)];                                        // 162
      if (elt.next)                                                              // 163
        return elt.next.key;                                                     // 164
    }                                                                            // 165
    return null;                                                                 // 166
  },                                                                             // 167
  moveBefore: function (key, before) {                                           // 168
    var self = this;                                                             // 169
    var elt = self._dict[self._k(key)];                                          // 170
    var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171
    if (elt === undefined)                                                       // 172
      throw new Error("Item to move is not present");                            // 173
    if (eltBefore === undefined) {                                               // 174
      throw new Error("Could not find element to move this one before");         // 175
    }                                                                            // 176
    if (eltBefore === elt.next) // no moving necessary                           // 177
      return;                                                                    // 178
    // remove from its old place                                                 // 179
    self._linkEltOut(elt);                                                       // 180
    // patch into its new place                                                  // 181
    elt.next = eltBefore;                                                        // 182
    self._linkEltIn(elt);                                                        // 183
  },                                                                             // 184
  // Linear, sadly.                                                              // 185
  indexOf: function (key) {                                                      // 186
    var self = this;                                                             // 187
    var ret = null;                                                              // 188
    self.forEach(function (v, k, i) {                                            // 189
      if (self._k(k) === self._k(key)) {                                         // 190
        ret = i;                                                                 // 191
        return OrderedDict.BREAK;                                                // 192
      }                                                                          // 193
      return undefined;                                                          // 194
    });                                                                          // 195
    return ret;                                                                  // 196
  },                                                                             // 197
  _checkRep: function () {                                                       // 198
    var self = this;                                                             // 199
    _.each(self._dict, function (k, v) {                                         // 200
      if (v.next === v)                                                          // 201
        throw new Error("Next is a loop");                                       // 202
      if (v.prev === v)                                                          // 203
        throw new Error("Prev is a loop");                                       // 204
    });                                                                          // 205
  }                                                                              // 206
                                                                                 // 207
});                                                                              // 208
OrderedDict.BREAK = {"break": true};                                             // 209
                                                                                 // 210
///////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ordered-dict'] = {}, {
  OrderedDict: OrderedDict
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var Tracker, Deps;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/tracker/tracker.js                                                                                        //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
/////////////////////////////////////////////////////                                                                 // 1
// Package docs at http://docs.meteor.com/#tracker //                                                                 // 2
/////////////////////////////////////////////////////                                                                 // 3
                                                                                                                      // 4
/**                                                                                                                   // 5
 * @namespace Tracker                                                                                                 // 6
 * @summary The namespace for Tracker-related methods.                                                                // 7
 */                                                                                                                   // 8
Tracker = {};                                                                                                         // 9
                                                                                                                      // 10
// http://docs.meteor.com/#tracker_active                                                                             // 11
                                                                                                                      // 12
/**                                                                                                                   // 13
 * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
 * @locus Client                                                                                                      // 15
 * @type {Boolean}                                                                                                    // 16
 */                                                                                                                   // 17
Tracker.active = false;                                                                                               // 18
                                                                                                                      // 19
// http://docs.meteor.com/#tracker_currentcomputation                                                                 // 20
                                                                                                                      // 21
/**                                                                                                                   // 22
 * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
 * @locus Client                                                                                                      // 24
 * @type {Tracker.Computation}                                                                                        // 25
 */                                                                                                                   // 26
Tracker.currentComputation = null;                                                                                    // 27
                                                                                                                      // 28
var setCurrentComputation = function (c) {                                                                            // 29
  Tracker.currentComputation = c;                                                                                     // 30
  Tracker.active = !! c;                                                                                              // 31
};                                                                                                                    // 32
                                                                                                                      // 33
var _debugFunc = function () {                                                                                        // 34
  // We want this code to work without Meteor, and also without                                                       // 35
  // "console" (which is technically non-standard and may be missing                                                  // 36
  // on some browser we come across, like it was on IE 7).                                                            // 37
  //                                                                                                                  // 38
  // Lazy evaluation because `Meteor` does not exist right away.(??)                                                  // 39
  return (typeof Meteor !== "undefined" ? Meteor._debug :                                                             // 40
          ((typeof console !== "undefined") && console.error ?                                                        // 41
           function () { console.error.apply(console, arguments); } :                                                 // 42
           function () {}));                                                                                          // 43
};                                                                                                                    // 44
                                                                                                                      // 45
var _maybeSuppressMoreLogs = function (messagesLength) {                                                              // 46
  // Sometimes when running tests, we intentionally suppress logs on expected                                         // 47
  // printed errors. Since the current implementation of _throwOrLog can log                                          // 48
  // multiple separate log messages, suppress all of them if at least one suppress                                    // 49
  // is expected as we still want them to count as one.                                                               // 50
  if (typeof Meteor !== "undefined") {                                                                                // 51
    if (Meteor._suppressed_log_expected()) {                                                                          // 52
      Meteor._suppress_log(messagesLength - 1);                                                                       // 53
    }                                                                                                                 // 54
  }                                                                                                                   // 55
};                                                                                                                    // 56
                                                                                                                      // 57
var _throwOrLog = function (from, e) {                                                                                // 58
  if (throwFirstError) {                                                                                              // 59
    throw e;                                                                                                          // 60
  } else {                                                                                                            // 61
    var printArgs = ["Exception from Tracker " + from + " function:"];                                                // 62
    if (e.stack && e.message && e.name) {                                                                             // 63
      var idx = e.stack.indexOf(e.message);                                                                           // 64
      if (idx < 0 || idx > e.name.length + 2) { // check for "Error: "                                                // 65
        // message is not part of the stack                                                                           // 66
        var message = e.name + ": " + e.message;                                                                      // 67
        printArgs.push(message);                                                                                      // 68
      }                                                                                                               // 69
    }                                                                                                                 // 70
    printArgs.push(e.stack);                                                                                          // 71
    _maybeSuppressMoreLogs(printArgs.length);                                                                         // 72
                                                                                                                      // 73
    for (var i = 0; i < printArgs.length; i++) {                                                                      // 74
      _debugFunc()(printArgs[i]);                                                                                     // 75
    }                                                                                                                 // 76
  }                                                                                                                   // 77
};                                                                                                                    // 78
                                                                                                                      // 79
// Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`                                                  // 80
// block if we are running on the server. On the client, returns the                                                  // 81
// original function (since `Meteor._noYieldsAllowed` is a                                                            // 82
// no-op). This has the benefit of not adding an unnecessary stack                                                    // 83
// frame on the client.                                                                                               // 84
var withNoYieldsAllowed = function (f) {                                                                              // 85
  if ((typeof Meteor === 'undefined') || Meteor.isClient) {                                                           // 86
    return f;                                                                                                         // 87
  } else {                                                                                                            // 88
    return function () {                                                                                              // 89
      var args = arguments;                                                                                           // 90
      Meteor._noYieldsAllowed(function () {                                                                           // 91
        f.apply(null, args);                                                                                          // 92
      });                                                                                                             // 93
    };                                                                                                                // 94
  }                                                                                                                   // 95
};                                                                                                                    // 96
                                                                                                                      // 97
var nextId = 1;                                                                                                       // 98
// computations whose callbacks we should call at flush time                                                          // 99
var pendingComputations = [];                                                                                         // 100
// `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now                                          // 101
var willFlush = false;                                                                                                // 102
// `true` if we are in Tracker.flush now                                                                              // 103
var inFlush = false;                                                                                                  // 104
// `true` if we are computing a computation now, either first time                                                    // 105
// or recompute.  This matches Tracker.active unless we are inside                                                    // 106
// Tracker.nonreactive, which nullfies currentComputation even though                                                 // 107
// an enclosing computation may still be running.                                                                     // 108
var inCompute = false;                                                                                                // 109
// `true` if the `_throwFirstError` option was passed in to the call                                                  // 110
// to Tracker.flush that we are in. When set, throw rather than log the                                               // 111
// first error encountered while flushing. Before throwing the error,                                                 // 112
// finish flushing (from a finally block), logging any subsequent                                                     // 113
// errors.                                                                                                            // 114
var throwFirstError = false;                                                                                          // 115
                                                                                                                      // 116
var afterFlushCallbacks = [];                                                                                         // 117
                                                                                                                      // 118
var requireFlush = function () {                                                                                      // 119
  if (! willFlush) {                                                                                                  // 120
    // We want this code to work without Meteor, see debugFunc above                                                  // 121
    if (typeof Meteor !== "undefined")                                                                                // 122
      Meteor._setImmediate(Tracker._runFlush);                                                                        // 123
    else                                                                                                              // 124
      setTimeout(Tracker._runFlush, 0);                                                                               // 125
    willFlush = true;                                                                                                 // 126
  }                                                                                                                   // 127
};                                                                                                                    // 128
                                                                                                                      // 129
// Tracker.Computation constructor is visible but private                                                             // 130
// (throws an error if you try to call it)                                                                            // 131
var constructingComputation = false;                                                                                  // 132
                                                                                                                      // 133
//                                                                                                                    // 134
// http://docs.meteor.com/#tracker_computation                                                                        // 135
                                                                                                                      // 136
/**                                                                                                                   // 137
 * @summary A Computation object represents code that is repeatedly rerun                                             // 138
 * in response to                                                                                                     // 139
 * reactive data changes. Computations don't have return values; they just                                            // 140
 * perform actions, such as rerendering a template on the screen. Computations                                        // 141
 * are created using Tracker.autorun. Use stop to prevent further rerunning of a                                      // 142
 * computation.                                                                                                       // 143
 * @instancename computation                                                                                          // 144
 */                                                                                                                   // 145
Tracker.Computation = function (f, parent, onError) {                                                                 // 146
  if (! constructingComputation)                                                                                      // 147
    throw new Error(                                                                                                  // 148
      "Tracker.Computation constructor is private; use Tracker.autorun");                                             // 149
  constructingComputation = false;                                                                                    // 150
                                                                                                                      // 151
  var self = this;                                                                                                    // 152
                                                                                                                      // 153
  // http://docs.meteor.com/#computation_stopped                                                                      // 154
                                                                                                                      // 155
  /**                                                                                                                 // 156
   * @summary True if this computation has been stopped.                                                              // 157
   * @locus Client                                                                                                    // 158
   * @memberOf Tracker.Computation                                                                                    // 159
   * @instance                                                                                                        // 160
   * @name  stopped                                                                                                   // 161
   */                                                                                                                 // 162
  self.stopped = false;                                                                                               // 163
                                                                                                                      // 164
  // http://docs.meteor.com/#computation_invalidated                                                                  // 165
                                                                                                                      // 166
  /**                                                                                                                 // 167
   * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.           // 168
   * @locus Client                                                                                                    // 169
   * @memberOf Tracker.Computation                                                                                    // 170
   * @instance                                                                                                        // 171
   * @name  invalidated                                                                                               // 172
   * @type {Boolean}                                                                                                  // 173
   */                                                                                                                 // 174
  self.invalidated = false;                                                                                           // 175
                                                                                                                      // 176
  // http://docs.meteor.com/#computation_firstrun                                                                     // 177
                                                                                                                      // 178
  /**                                                                                                                 // 179
   * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
   * @locus Client                                                                                                    // 181
   * @memberOf Tracker.Computation                                                                                    // 182
   * @instance                                                                                                        // 183
   * @name  firstRun                                                                                                  // 184
   * @type {Boolean}                                                                                                  // 185
   */                                                                                                                 // 186
  self.firstRun = true;                                                                                               // 187
                                                                                                                      // 188
  self._id = nextId++;                                                                                                // 189
  self._onInvalidateCallbacks = [];                                                                                   // 190
  self._onStopCallbacks = [];                                                                                         // 191
  // the plan is at some point to use the parent relation                                                             // 192
  // to constrain the order that computations are processed                                                           // 193
  self._parent = parent;                                                                                              // 194
  self._func = f;                                                                                                     // 195
  self._onError = onError;                                                                                            // 196
  self._recomputing = false;                                                                                          // 197
                                                                                                                      // 198
  var errored = true;                                                                                                 // 199
  try {                                                                                                               // 200
    self._compute();                                                                                                  // 201
    errored = false;                                                                                                  // 202
  } finally {                                                                                                         // 203
    self.firstRun = false;                                                                                            // 204
    if (errored)                                                                                                      // 205
      self.stop();                                                                                                    // 206
  }                                                                                                                   // 207
};                                                                                                                    // 208
                                                                                                                      // 209
// http://docs.meteor.com/#computation_oninvalidate                                                                   // 210
                                                                                                                      // 211
/**                                                                                                                   // 212
 * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
 * @locus Client                                                                                                      // 214
 * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
 */                                                                                                                   // 216
Tracker.Computation.prototype.onInvalidate = function (f) {                                                           // 217
  var self = this;                                                                                                    // 218
                                                                                                                      // 219
  if (typeof f !== 'function')                                                                                        // 220
    throw new Error("onInvalidate requires a function");                                                              // 221
                                                                                                                      // 222
  if (self.invalidated) {                                                                                             // 223
    Tracker.nonreactive(function () {                                                                                 // 224
      withNoYieldsAllowed(f)(self);                                                                                   // 225
    });                                                                                                               // 226
  } else {                                                                                                            // 227
    self._onInvalidateCallbacks.push(f);                                                                              // 228
  }                                                                                                                   // 229
};                                                                                                                    // 230
                                                                                                                      // 231
/**                                                                                                                   // 232
 * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
 * @locus Client                                                                                                      // 234
 * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
 */                                                                                                                   // 236
Tracker.Computation.prototype.onStop = function (f) {                                                                 // 237
  var self = this;                                                                                                    // 238
                                                                                                                      // 239
  if (typeof f !== 'function')                                                                                        // 240
    throw new Error("onStop requires a function");                                                                    // 241
                                                                                                                      // 242
  if (self.stopped) {                                                                                                 // 243
    Tracker.nonreactive(function () {                                                                                 // 244
      withNoYieldsAllowed(f)(self);                                                                                   // 245
    });                                                                                                               // 246
  } else {                                                                                                            // 247
    self._onStopCallbacks.push(f);                                                                                    // 248
  }                                                                                                                   // 249
};                                                                                                                    // 250
                                                                                                                      // 251
// http://docs.meteor.com/#computation_invalidate                                                                     // 252
                                                                                                                      // 253
/**                                                                                                                   // 254
 * @summary Invalidates this computation so that it will be rerun.                                                    // 255
 * @locus Client                                                                                                      // 256
 */                                                                                                                   // 257
Tracker.Computation.prototype.invalidate = function () {                                                              // 258
  var self = this;                                                                                                    // 259
  if (! self.invalidated) {                                                                                           // 260
    // if we're currently in _recompute(), don't enqueue                                                              // 261
    // ourselves, since we'll rerun immediately anyway.                                                               // 262
    if (! self._recomputing && ! self.stopped) {                                                                      // 263
      requireFlush();                                                                                                 // 264
      pendingComputations.push(this);                                                                                 // 265
    }                                                                                                                 // 266
                                                                                                                      // 267
    self.invalidated = true;                                                                                          // 268
                                                                                                                      // 269
    // callbacks can't add callbacks, because                                                                         // 270
    // self.invalidated === true.                                                                                     // 271
    for(var i = 0, f; f = self._onInvalidateCallbacks[i]; i++) {                                                      // 272
      Tracker.nonreactive(function () {                                                                               // 273
        withNoYieldsAllowed(f)(self);                                                                                 // 274
      });                                                                                                             // 275
    }                                                                                                                 // 276
    self._onInvalidateCallbacks = [];                                                                                 // 277
  }                                                                                                                   // 278
};                                                                                                                    // 279
                                                                                                                      // 280
// http://docs.meteor.com/#computation_stop                                                                           // 281
                                                                                                                      // 282
/**                                                                                                                   // 283
 * @summary Prevents this computation from rerunning.                                                                 // 284
 * @locus Client                                                                                                      // 285
 */                                                                                                                   // 286
Tracker.Computation.prototype.stop = function () {                                                                    // 287
  var self = this;                                                                                                    // 288
                                                                                                                      // 289
  if (! self.stopped) {                                                                                               // 290
    self.stopped = true;                                                                                              // 291
    self.invalidate();                                                                                                // 292
    for(var i = 0, f; f = self._onStopCallbacks[i]; i++) {                                                            // 293
      Tracker.nonreactive(function () {                                                                               // 294
        withNoYieldsAllowed(f)(self);                                                                                 // 295
      });                                                                                                             // 296
    }                                                                                                                 // 297
    self._onStopCallbacks = [];                                                                                       // 298
  }                                                                                                                   // 299
};                                                                                                                    // 300
                                                                                                                      // 301
Tracker.Computation.prototype._compute = function () {                                                                // 302
  var self = this;                                                                                                    // 303
  self.invalidated = false;                                                                                           // 304
                                                                                                                      // 305
  var previous = Tracker.currentComputation;                                                                          // 306
  setCurrentComputation(self);                                                                                        // 307
  var previousInCompute = inCompute;                                                                                  // 308
  inCompute = true;                                                                                                   // 309
  try {                                                                                                               // 310
    withNoYieldsAllowed(self._func)(self);                                                                            // 311
  } finally {                                                                                                         // 312
    setCurrentComputation(previous);                                                                                  // 313
    inCompute = previousInCompute;                                                                                    // 314
  }                                                                                                                   // 315
};                                                                                                                    // 316
                                                                                                                      // 317
Tracker.Computation.prototype._needsRecompute = function () {                                                         // 318
  var self = this;                                                                                                    // 319
  return self.invalidated && ! self.stopped;                                                                          // 320
};                                                                                                                    // 321
                                                                                                                      // 322
Tracker.Computation.prototype._recompute = function () {                                                              // 323
  var self = this;                                                                                                    // 324
                                                                                                                      // 325
  self._recomputing = true;                                                                                           // 326
  try {                                                                                                               // 327
    if (self._needsRecompute()) {                                                                                     // 328
      try {                                                                                                           // 329
        self._compute();                                                                                              // 330
      } catch (e) {                                                                                                   // 331
        if (self._onError) {                                                                                          // 332
          self._onError(e);                                                                                           // 333
        } else {                                                                                                      // 334
          _throwOrLog("recompute", e);                                                                                // 335
        }                                                                                                             // 336
      }                                                                                                               // 337
    }                                                                                                                 // 338
  } finally {                                                                                                         // 339
    self._recomputing = false;                                                                                        // 340
  }                                                                                                                   // 341
};                                                                                                                    // 342
                                                                                                                      // 343
/**                                                                                                                   // 344
 * @summary Process the reactive updates for this computation immediately                                             // 345
 * and ensure that the computation is rerun. The computation is rerun only                                            // 346
 * if it is invalidated.                                                                                              // 347
 * @locus Client                                                                                                      // 348
 */                                                                                                                   // 349
Tracker.Computation.prototype.flush = function () {                                                                   // 350
  var self = this;                                                                                                    // 351
                                                                                                                      // 352
  if (self._recomputing)                                                                                              // 353
    return;                                                                                                           // 354
                                                                                                                      // 355
  self._recompute();                                                                                                  // 356
};                                                                                                                    // 357
                                                                                                                      // 358
/**                                                                                                                   // 359
 * @summary Causes the function inside this computation to run and                                                    // 360
 * synchronously process all reactive updtes.                                                                         // 361
 * @locus Client                                                                                                      // 362
 */                                                                                                                   // 363
Tracker.Computation.prototype.run = function () {                                                                     // 364
  var self = this;                                                                                                    // 365
  self.invalidate();                                                                                                  // 366
  self.flush();                                                                                                       // 367
};                                                                                                                    // 368
                                                                                                                      // 369
//                                                                                                                    // 370
// http://docs.meteor.com/#tracker_dependency                                                                         // 371
                                                                                                                      // 372
/**                                                                                                                   // 373
 * @summary A Dependency represents an atomic unit of reactive data that a                                            // 374
 * computation might depend on. Reactive data sources such as Session or                                              // 375
 * Minimongo internally create different Dependency objects for different                                             // 376
 * pieces of data, each of which may be depended on by multiple computations.                                         // 377
 * When the data changes, the computations are invalidated.                                                           // 378
 * @class                                                                                                             // 379
 * @instanceName dependency                                                                                           // 380
 */                                                                                                                   // 381
Tracker.Dependency = function () {                                                                                    // 382
  this._dependentsById = {};                                                                                          // 383
};                                                                                                                    // 384
                                                                                                                      // 385
// http://docs.meteor.com/#dependency_depend                                                                          // 386
//                                                                                                                    // 387
// Adds `computation` to this set if it is not already                                                                // 388
// present.  Returns true if `computation` is a new member of the set.                                                // 389
// If no argument, defaults to currentComputation, or does nothing                                                    // 390
// if there is no currentComputation.                                                                                 // 391
                                                                                                                      // 392
/**                                                                                                                   // 393
 * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                                                                                                                      // 395
If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.     // 396
                                                                                                                      // 397
Returns true if the computation is a new dependent of `dependency` rather than an existing one.                       // 398
 * @locus Client                                                                                                      // 399
 * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
 * @returns {Boolean}                                                                                                 // 401
 */                                                                                                                   // 402
Tracker.Dependency.prototype.depend = function (computation) {                                                        // 403
  if (! computation) {                                                                                                // 404
    if (! Tracker.active)                                                                                             // 405
      return false;                                                                                                   // 406
                                                                                                                      // 407
    computation = Tracker.currentComputation;                                                                         // 408
  }                                                                                                                   // 409
  var self = this;                                                                                                    // 410
  var id = computation._id;                                                                                           // 411
  if (! (id in self._dependentsById)) {                                                                               // 412
    self._dependentsById[id] = computation;                                                                           // 413
    computation.onInvalidate(function () {                                                                            // 414
      delete self._dependentsById[id];                                                                                // 415
    });                                                                                                               // 416
    return true;                                                                                                      // 417
  }                                                                                                                   // 418
  return false;                                                                                                       // 419
};                                                                                                                    // 420
                                                                                                                      // 421
// http://docs.meteor.com/#dependency_changed                                                                         // 422
                                                                                                                      // 423
/**                                                                                                                   // 424
 * @summary Invalidate all dependent computations immediately and remove them as dependents.                          // 425
 * @locus Client                                                                                                      // 426
 */                                                                                                                   // 427
Tracker.Dependency.prototype.changed = function () {                                                                  // 428
  var self = this;                                                                                                    // 429
  for (var id in self._dependentsById)                                                                                // 430
    self._dependentsById[id].invalidate();                                                                            // 431
};                                                                                                                    // 432
                                                                                                                      // 433
// http://docs.meteor.com/#dependency_hasdependents                                                                   // 434
                                                                                                                      // 435
/**                                                                                                                   // 436
 * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
 * @locus Client                                                                                                      // 438
 * @returns {Boolean}                                                                                                 // 439
 */                                                                                                                   // 440
Tracker.Dependency.prototype.hasDependents = function () {                                                            // 441
  var self = this;                                                                                                    // 442
  for(var id in self._dependentsById)                                                                                 // 443
    return true;                                                                                                      // 444
  return false;                                                                                                       // 445
};                                                                                                                    // 446
                                                                                                                      // 447
// http://docs.meteor.com/#tracker_flush                                                                              // 448
                                                                                                                      // 449
/**                                                                                                                   // 450
 * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.          // 451
 * @locus Client                                                                                                      // 452
 */                                                                                                                   // 453
Tracker.flush = function (options) {                                                                                  // 454
  Tracker._runFlush({ finishSynchronously: true,                                                                      // 455
                      throwFirstError: options && options._throwFirstError });                                        // 456
};                                                                                                                    // 457
                                                                                                                      // 458
// Run all pending computations and afterFlush callbacks.  If we were not called                                      // 459
// directly via Tracker.flush, this may return before they're all done to allow                                       // 460
// the event loop to run a little before continuing.                                                                  // 461
Tracker._runFlush = function (options) {                                                                              // 462
  // XXX What part of the comment below is still true? (We no longer                                                  // 463
  // have Spark)                                                                                                      // 464
  //                                                                                                                  // 465
  // Nested flush could plausibly happen if, say, a flush causes                                                      // 466
  // DOM mutation, which causes a "blur" event, which runs an                                                         // 467
  // app event handler that calls Tracker.flush.  At the moment                                                       // 468
  // Spark blocks event handlers during DOM mutation anyway,                                                          // 469
  // because the LiveRange tree isn't valid.  And we don't have                                                       // 470
  // any useful notion of a nested flush.                                                                             // 471
  //                                                                                                                  // 472
  // https://app.asana.com/0/159908330244/385138233856                                                                // 473
  if (inFlush)                                                                                                        // 474
    throw new Error("Can't call Tracker.flush while flushing");                                                       // 475
                                                                                                                      // 476
  if (inCompute)                                                                                                      // 477
    throw new Error("Can't flush inside Tracker.autorun");                                                            // 478
                                                                                                                      // 479
  options = options || {};                                                                                            // 480
                                                                                                                      // 481
  inFlush = true;                                                                                                     // 482
  willFlush = true;                                                                                                   // 483
  throwFirstError = !! options.throwFirstError;                                                                       // 484
                                                                                                                      // 485
  var recomputedCount = 0;                                                                                            // 486
  var finishedTry = false;                                                                                            // 487
  try {                                                                                                               // 488
    while (pendingComputations.length ||                                                                              // 489
           afterFlushCallbacks.length) {                                                                              // 490
                                                                                                                      // 491
      // recompute all pending computations                                                                           // 492
      while (pendingComputations.length) {                                                                            // 493
        var comp = pendingComputations.shift();                                                                       // 494
        comp._recompute();                                                                                            // 495
        if (comp._needsRecompute()) {                                                                                 // 496
          pendingComputations.unshift(comp);                                                                          // 497
        }                                                                                                             // 498
                                                                                                                      // 499
        if (! options.finishSynchronously && ++recomputedCount > 1000) {                                              // 500
          finishedTry = true;                                                                                         // 501
          return;                                                                                                     // 502
        }                                                                                                             // 503
      }                                                                                                               // 504
                                                                                                                      // 505
      if (afterFlushCallbacks.length) {                                                                               // 506
        // call one afterFlush callback, which may                                                                    // 507
        // invalidate more computations                                                                               // 508
        var func = afterFlushCallbacks.shift();                                                                       // 509
        try {                                                                                                         // 510
          func();                                                                                                     // 511
        } catch (e) {                                                                                                 // 512
          _throwOrLog("afterFlush", e);                                                                               // 513
        }                                                                                                             // 514
      }                                                                                                               // 515
    }                                                                                                                 // 516
    finishedTry = true;                                                                                               // 517
  } finally {                                                                                                         // 518
    if (! finishedTry) {                                                                                              // 519
      // we're erroring due to throwFirstError being true.                                                            // 520
      inFlush = false; // needed before calling `Tracker.flush()` again                                               // 521
      // finish flushing                                                                                              // 522
      Tracker._runFlush({                                                                                             // 523
        finishSynchronously: options.finishSynchronously,                                                             // 524
        throwFirstError: false                                                                                        // 525
      });                                                                                                             // 526
    }                                                                                                                 // 527
    willFlush = false;                                                                                                // 528
    inFlush = false;                                                                                                  // 529
    if (pendingComputations.length || afterFlushCallbacks.length) {                                                   // 530
      // We're yielding because we ran a bunch of computations and we aren't                                          // 531
      // required to finish synchronously, so we'd like to give the event loop a                                      // 532
      // chance. We should flush again soon.                                                                          // 533
      if (options.finishSynchronously) {                                                                              // 534
        throw new Error("still have more to do?");  // shouldn't happen                                               // 535
      }                                                                                                               // 536
      setTimeout(requireFlush, 10);                                                                                   // 537
    }                                                                                                                 // 538
  }                                                                                                                   // 539
};                                                                                                                    // 540
                                                                                                                      // 541
// http://docs.meteor.com/#tracker_autorun                                                                            // 542
//                                                                                                                    // 543
// Run f(). Record its dependencies. Rerun it whenever the                                                            // 544
// dependencies change.                                                                                               // 545
//                                                                                                                    // 546
// Returns a new Computation, which is also passed to f.                                                              // 547
//                                                                                                                    // 548
// Links the computation to the current computation                                                                   // 549
// so that it is stopped if the current computation is invalidated.                                                   // 550
                                                                                                                      // 551
/**                                                                                                                   // 552
 * @callback Tracker.ComputationFunction                                                                              // 553
 * @param {Tracker.Computation}                                                                                       // 554
 */                                                                                                                   // 555
/**                                                                                                                   // 556
 * @summary Run a function now and rerun it later whenever its dependencies                                           // 557
 * change. Returns a Computation object that can be used to stop or observe the                                       // 558
 * rerunning.                                                                                                         // 559
 * @locus Client                                                                                                      // 560
 * @param {Tracker.ComputationFunction} runFunc The function to run. It receives                                      // 561
 * one argument: the Computation object that will be returned.                                                        // 562
 * @param {Object} [options]                                                                                          // 563
 * @param {Function} options.onError Optional. The function to run when an error                                      // 564
 * happens in the Computation. The only argument it recieves is the Error                                             // 565
 * thrown. Defaults to the error being logged to the console.                                                         // 566
 * @returns {Tracker.Computation}                                                                                     // 567
 */                                                                                                                   // 568
Tracker.autorun = function (f, options) {                                                                             // 569
  if (typeof f !== 'function')                                                                                        // 570
    throw new Error('Tracker.autorun requires a function argument');                                                  // 571
                                                                                                                      // 572
  options = options || {};                                                                                            // 573
                                                                                                                      // 574
  constructingComputation = true;                                                                                     // 575
  var c = new Tracker.Computation(                                                                                    // 576
    f, Tracker.currentComputation, options.onError);                                                                  // 577
                                                                                                                      // 578
  if (Tracker.active)                                                                                                 // 579
    Tracker.onInvalidate(function () {                                                                                // 580
      c.stop();                                                                                                       // 581
    });                                                                                                               // 582
                                                                                                                      // 583
  return c;                                                                                                           // 584
};                                                                                                                    // 585
                                                                                                                      // 586
// http://docs.meteor.com/#tracker_nonreactive                                                                        // 587
//                                                                                                                    // 588
// Run `f` with no current computation, returning the return value                                                    // 589
// of `f`.  Used to turn off reactivity for the duration of `f`,                                                      // 590
// so that reactive data sources accessed by `f` will not result in any                                               // 591
// computations being invalidated.                                                                                    // 592
                                                                                                                      // 593
/**                                                                                                                   // 594
 * @summary Run a function without tracking dependencies.                                                             // 595
 * @locus Client                                                                                                      // 596
 * @param {Function} func A function to call immediately.                                                             // 597
 */                                                                                                                   // 598
Tracker.nonreactive = function (f) {                                                                                  // 599
  var previous = Tracker.currentComputation;                                                                          // 600
  setCurrentComputation(null);                                                                                        // 601
  try {                                                                                                               // 602
    return f();                                                                                                       // 603
  } finally {                                                                                                         // 604
    setCurrentComputation(previous);                                                                                  // 605
  }                                                                                                                   // 606
};                                                                                                                    // 607
                                                                                                                      // 608
// http://docs.meteor.com/#tracker_oninvalidate                                                                       // 609
                                                                                                                      // 610
/**                                                                                                                   // 611
 * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
 * @locus Client                                                                                                      // 613
 * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
 */                                                                                                                   // 615
Tracker.onInvalidate = function (f) {                                                                                 // 616
  if (! Tracker.active)                                                                                               // 617
    throw new Error("Tracker.onInvalidate requires a currentComputation");                                            // 618
                                                                                                                      // 619
  Tracker.currentComputation.onInvalidate(f);                                                                         // 620
};                                                                                                                    // 621
                                                                                                                      // 622
// http://docs.meteor.com/#tracker_afterflush                                                                         // 623
                                                                                                                      // 624
/**                                                                                                                   // 625
 * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
 * @locus Client                                                                                                      // 627
 * @param {Function} callback A function to call at flush time.                                                       // 628
 */                                                                                                                   // 629
Tracker.afterFlush = function (f) {                                                                                   // 630
  afterFlushCallbacks.push(f);                                                                                        // 631
  requireFlush();                                                                                                     // 632
};                                                                                                                    // 633
                                                                                                                      // 634
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                    //
// packages/tracker/deprecated.js                                                                                     //
//                                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                      //
// Deprecated functions.                                                                                              // 1
                                                                                                                      // 2
// These functions used to be on the Meteor object (and worked slightly                                               // 3
// differently).                                                                                                      // 4
// XXX COMPAT WITH 0.5.7                                                                                              // 5
Meteor.flush = Tracker.flush;                                                                                         // 6
Meteor.autorun = Tracker.autorun;                                                                                     // 7
                                                                                                                      // 8
// We used to require a special "autosubscribe" call to reactively subscribe to                                       // 9
// things. Now, it works with autorun.                                                                                // 10
// XXX COMPAT WITH 0.5.4                                                                                              // 11
Meteor.autosubscribe = Tracker.autorun;                                                                               // 12
                                                                                                                      // 13
// This Tracker API briefly existed in 0.5.8 and 0.5.9                                                                // 14
// XXX COMPAT WITH 0.5.9                                                                                              // 15
Tracker.depend = function (d) {                                                                                       // 16
  return d.depend();                                                                                                  // 17
};                                                                                                                    // 18
                                                                                                                      // 19
Deps = Tracker;                                                                                                       // 20
                                                                                                                      // 21
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.tracker = {}, {
  Tracker: Tracker,
  Deps: Deps
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var meteorBabelHelpers;

var require = meteorInstall({"node_modules":{"meteor":{"babel-runtime":{"babel-runtime.js":["meteor-babel-helpers","babel-runtime/regenerator",function(require,exports){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// packages/babel-runtime/babel-runtime.js                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
exports.meteorBabelHelpers = require("meteor-babel-helpers");                 // 1
                                                                              // 2
// Returns true if a given absolute identifier will be provided at runtime    // 3
// by the babel-runtime package.                                              // 4
exports.checkHelper = function checkHelper(id) {                              // 5
  // There used to be more complicated logic here, when the babel-runtime     // 6
  // package provided helper implementations of its own, but now this         // 7
  // function exists just for backwards compatibility.                        // 8
  return false;                                                               // 9
};                                                                            // 10
                                                                              // 11
try {                                                                         // 12
  var regeneratorRuntime = require("babel-runtime/regenerator");              // 13
} catch (e) {                                                                 // 14
  throw new Error([                                                           // 15
    "The babel-runtime npm package could not be found in your node_modules ",
    "directory. Please run the following command to install it:",             // 17
    "",                                                                       // 18
    "  meteor npm install --save babel-runtime",                              // 19
    ""                                                                        // 20
  ].join("\n"));                                                              // 21
}                                                                             // 22
                                                                              // 23
if (regeneratorRuntime &&                                                     // 24
    typeof Promise === "function" &&                                          // 25
    typeof Promise.asyncApply === "function") {                               // 26
  // If Promise.asyncApply is defined, use it to wrap calls to                // 27
  // runtime.async so that the entire async function will run in its own      // 28
  // Fiber, not just the code that comes after the first await.               // 29
  var realAsync = regeneratorRuntime.async;                                   // 30
  regeneratorRuntime.async = function () {                                    // 31
    return Promise.asyncApply(realAsync, regeneratorRuntime, arguments);      // 32
  };                                                                          // 33
}                                                                             // 34
                                                                              // 35
////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"meteor-babel-helpers":{"package.json":function(require,exports){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// ../../.1.0.1.1omtht1++os+web.browser+web.cordova/npm/node_modules/meteor-b //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
exports.name = "meteor-babel-helpers";                                        // 1
exports.version = "0.0.3";                                                    // 2
exports.main = "index.js";                                                    // 3
                                                                              // 4
////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index. //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
                                                                              //
function canDefineNonEnumerableProperties() {                                 // 1
  var testObj = {};                                                           // 2
  var testPropName = "t";                                                     // 3
                                                                              // 4
  try {                                                                       // 5
    Object.defineProperty(testObj, testPropName, {                            // 6
      enumerable: false,                                                      // 7
      value: testObj                                                          // 8
    });                                                                       // 9
                                                                              // 10
    for (var k in testObj) {                                                  // 11
      if (k === testPropName) {                                               // 12
        return false;                                                         // 13
      }                                                                       // 14
    }                                                                         // 15
  } catch (e) {                                                               // 16
    return false;                                                             // 17
  }                                                                           // 18
                                                                              // 19
  return testObj[testPropName] === testObj;                                   // 20
}                                                                             // 21
                                                                              // 22
function sanitizeEasy(value) {                                                // 23
  return value;                                                               // 24
}                                                                             // 25
                                                                              // 26
function sanitizeHard(obj) {                                                  // 27
  if (Array.isArray(obj)) {                                                   // 28
    var newObj = {};                                                          // 29
    var keys = Object.keys(obj);                                              // 30
    var keyCount = keys.length;                                               // 31
    for (var i = 0; i < keyCount; ++i) {                                      // 32
      var key = keys[i];                                                      // 33
      newObj[key] = obj[key];                                                 // 34
    }                                                                         // 35
    return newObj;                                                            // 36
  }                                                                           // 37
                                                                              // 38
  return obj;                                                                 // 39
}                                                                             // 40
                                                                              // 41
meteorBabelHelpers = module.exports = {                                       // 42
  // Meteor-specific runtime helper for wrapping the object of for-in         // 43
  // loops, so that inherited Array methods defined by es5-shim can be        // 44
  // ignored in browsers where they cannot be defined as non-enumerable.      // 45
  sanitizeForInObject: canDefineNonEnumerableProperties()                     // 46
    ? sanitizeEasy                                                            // 47
    : sanitizeHard,                                                           // 48
                                                                              // 49
  // Exposed so that we can test sanitizeForInObject in environments that     // 50
  // support defining non-enumerable properties.                              // 51
  _sanitizeForInObjectHard: sanitizeHard                                      // 52
};                                                                            // 53
                                                                              // 54
////////////////////////////////////////////////////////////////////////////////

}}}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/babel-runtime/babel-runtime.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['babel-runtime'] = exports, {
  meteorBabelHelpers: meteorBabelHelpers
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var Random;

var require = meteorInstall({"node_modules":{"meteor":{"random":{"random.js":function(require){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
// packages/random/random.js                                                                                     //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 //
// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,                                 // 1
// window.crypto.getRandomValues() in the browser) when available. If these                                      // 2
// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically                                     // 3
// strong, and we seed it with various sources such as the date, Math.random,                                    // 4
// and window size on the client.  When using crypto.getRandomValues(), our                                      // 5
// primitive is hexString(), from which we construct fraction(). When using                                      // 6
// window.crypto.getRandomValues() or alea, the primitive is fraction and we use                                 // 7
// that to construct hex string.                                                                                 // 8
if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
// for a full discussion and Alea implementation.                                                                // 14
                                                                                                                 //
var Alea = function () {                                                                                         // 15
  function Mash() {                                                                                              // 16
    var n = 0xefc8249d;                                                                                          // 17
                                                                                                                 //
    var mash = function (data) {                                                                                 // 19
      data = data.toString();                                                                                    // 20
                                                                                                                 //
      for (var i = 0; i < data.length; i++) {                                                                    // 21
        n += data.charCodeAt(i);                                                                                 // 22
        var h = 0.02519603282416938 * n;                                                                         // 23
        n = h >>> 0;                                                                                             // 24
        h -= n;                                                                                                  // 25
        h *= n;                                                                                                  // 26
        n = h >>> 0;                                                                                             // 27
        h -= n;                                                                                                  // 28
        n += h * 0x100000000; // 2^32                                                                            // 29
      }                                                                                                          // 30
                                                                                                                 //
      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                                                        // 31
    };                                                                                                           // 32
                                                                                                                 //
    mash.version = 'Mash 0.9';                                                                                   // 34
    return mash;                                                                                                 // 35
  }                                                                                                              // 36
                                                                                                                 //
  return function (args) {                                                                                       // 38
    var s0 = 0;                                                                                                  // 39
    var s1 = 0;                                                                                                  // 40
    var s2 = 0;                                                                                                  // 41
    var c = 1;                                                                                                   // 42
                                                                                                                 //
    if (args.length == 0) {                                                                                      // 44
      args = [+new Date()];                                                                                      // 45
    }                                                                                                            // 46
                                                                                                                 //
    var mash = Mash();                                                                                           // 47
    s0 = mash(' ');                                                                                              // 48
    s1 = mash(' ');                                                                                              // 49
    s2 = mash(' ');                                                                                              // 50
                                                                                                                 //
    for (var i = 0; i < args.length; i++) {                                                                      // 52
      s0 -= mash(args[i]);                                                                                       // 53
                                                                                                                 //
      if (s0 < 0) {                                                                                              // 54
        s0 += 1;                                                                                                 // 55
      }                                                                                                          // 56
                                                                                                                 //
      s1 -= mash(args[i]);                                                                                       // 57
                                                                                                                 //
      if (s1 < 0) {                                                                                              // 58
        s1 += 1;                                                                                                 // 59
      }                                                                                                          // 60
                                                                                                                 //
      s2 -= mash(args[i]);                                                                                       // 61
                                                                                                                 //
      if (s2 < 0) {                                                                                              // 62
        s2 += 1;                                                                                                 // 63
      }                                                                                                          // 64
    }                                                                                                            // 65
                                                                                                                 //
    mash = null;                                                                                                 // 66
                                                                                                                 //
    var random = function () {                                                                                   // 68
      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                                                // 69
                                                                                                                 //
      s0 = s1;                                                                                                   // 70
      s1 = s2;                                                                                                   // 71
      return s2 = t - (c = t | 0);                                                                               // 72
    };                                                                                                           // 73
                                                                                                                 //
    random.uint32 = function () {                                                                                // 74
      return random() * 0x100000000; // 2^32                                                                     // 75
    };                                                                                                           // 76
                                                                                                                 //
    random.fract53 = function () {                                                                               // 77
      return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                             // 78
    };                                                                                                           // 80
                                                                                                                 //
    random.version = 'Alea 0.9';                                                                                 // 81
    random.args = args;                                                                                          // 82
    return random;                                                                                               // 83
  }(Array.prototype.slice.call(arguments));                                                                      // 85
};                                                                                                               // 86
                                                                                                                 //
var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";                              // 88
var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_"; // `type` is one of `RandomGenerator.Type` as defined below.
//                                                                                                               // 93
// options:                                                                                                      // 94
// - seeds: (required, only for RandomGenerator.Type.ALEA) an array                                              // 95
//   whose items will be `toString`ed and used as the seed to the Alea                                           // 96
//   algorithm                                                                                                   // 97
                                                                                                                 //
var RandomGenerator = function (type, options) {                                                                 // 98
  var self = this;                                                                                               // 99
  self.type = type;                                                                                              // 100
                                                                                                                 //
  if (!RandomGenerator.Type[type]) {                                                                             // 102
    throw new Error("Unknown random generator type: " + type);                                                   // 103
  }                                                                                                              // 104
                                                                                                                 //
  if (type === RandomGenerator.Type.ALEA) {                                                                      // 106
    if (!options.seeds) {                                                                                        // 107
      throw new Error("No seeds were provided for Alea PRNG");                                                   // 108
    }                                                                                                            // 109
                                                                                                                 //
    self.alea = Alea.apply(null, options.seeds);                                                                 // 110
  }                                                                                                              // 111
}; // Types of PRNGs supported by the `RandomGenerator` class                                                    // 112
                                                                                                                 //
                                                                                                                 //
RandomGenerator.Type = {                                                                                         // 115
  // Use Node's built-in `crypto.getRandomBytes` (cryptographically                                              // 116
  // secure but not seedable, runs only on the server). Reverts to                                               // 117
  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that                                           // 118
  // there isn't enough entropy yet                                                                              // 119
  NODE_CRYPTO: "NODE_CRYPTO",                                                                                    // 120
  // Use non-IE browser's built-in `window.crypto.getRandomValues`                                               // 122
  // (cryptographically secure but not seedable, runs only in the                                                // 123
  // browser).                                                                                                   // 124
  BROWSER_CRYPTO: "BROWSER_CRYPTO",                                                                              // 125
  // Use the *fast*, seedaable and not cryptographically secure                                                  // 127
  // Alea algorithm                                                                                              // 128
  ALEA: "ALEA"                                                                                                   // 129
}; /**                                                                                                           // 115
    * @name Random.fraction                                                                                      //
    * @summary Return a number between 0 and 1, like `Math.random`.                                              //
    * @locus Anywhere                                                                                            //
    */                                                                                                           //
                                                                                                                 //
RandomGenerator.prototype.fraction = function () {                                                               // 137
  var self = this;                                                                                               // 138
                                                                                                                 //
  if (self.type === RandomGenerator.Type.ALEA) {                                                                 // 139
    return self.alea();                                                                                          // 140
  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                   // 141
    var numerator = parseInt(self.hexString(8), 16);                                                             // 142
    return numerator * 2.3283064365386963e-10; // 2^-32                                                          // 143
  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {                                                // 144
    var array = new Uint32Array(1);                                                                              // 145
    window.crypto.getRandomValues(array);                                                                        // 146
    return array[0] * 2.3283064365386963e-10; // 2^-32                                                           // 147
  } else {                                                                                                       // 148
    throw new Error('Unknown random generator type: ' + self.type);                                              // 149
  }                                                                                                              // 150
}; /**                                                                                                           // 151
    * @name Random.hexString                                                                                     //
    * @summary Return a random string of `n` hexadecimal digits.                                                 //
    * @locus Anywhere                                                                                            //
    * @param {Number} n Length of the string                                                                     //
    */                                                                                                           //
                                                                                                                 //
RandomGenerator.prototype.hexString = function (digits) {                                                        // 159
  var self = this;                                                                                               // 160
                                                                                                                 //
  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {                                                          // 161
    var numBytes = Math.ceil(digits / 2);                                                                        // 162
    var bytes; // Try to get cryptographically strong randomness. Fall back to                                   // 163
    // non-cryptographically strong if not available.                                                            // 165
                                                                                                                 //
    try {                                                                                                        // 166
      bytes = nodeCrypto.randomBytes(numBytes);                                                                  // 167
    } catch (e) {                                                                                                // 168
      // XXX should re-throw any error except insufficient entropy                                               // 169
      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                                                            // 170
    }                                                                                                            // 171
                                                                                                                 //
    var result = bytes.toString("hex"); // If the number of digits is odd, we'll have generated an extra 4 bits  // 172
    // of randomness, so we need to trim the last digit.                                                         // 174
                                                                                                                 //
    return result.substring(0, digits);                                                                          // 175
  } else {                                                                                                       // 176
    return this._randomString(digits, "0123456789abcdef");                                                       // 177
  }                                                                                                              // 178
};                                                                                                               // 179
                                                                                                                 //
RandomGenerator.prototype._randomString = function (charsCount, alphabet) {                                      // 181
  var self = this;                                                                                               // 183
  var digits = [];                                                                                               // 184
                                                                                                                 //
  for (var i = 0; i < charsCount; i++) {                                                                         // 185
    digits[i] = self.choice(alphabet);                                                                           // 186
  }                                                                                                              // 187
                                                                                                                 //
  return digits.join("");                                                                                        // 188
}; /**                                                                                                           // 189
    * @name Random.id                                                                                            //
    * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is                                //
    * likely to be unique in the whole world.                                                                    //
    * @locus Anywhere                                                                                            //
    * @param {Number} [n] Optional length of the identifier in characters                                        //
    *   (defaults to 17)                                                                                         //
    */                                                                                                           //
                                                                                                                 //
RandomGenerator.prototype.id = function (charsCount) {                                                           // 199
  var self = this; // 17 characters is around 96 bits of entropy, which is the amount of                         // 200
  // state in the Alea PRNG.                                                                                     // 202
                                                                                                                 //
  if (charsCount === undefined) charsCount = 17;                                                                 // 203
  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                                                     // 206
}; /**                                                                                                           // 207
    * @name Random.secret                                                                                        //
    * @summary Return a random string of printable characters with 6 bits of                                     //
    * entropy per character. Use `Random.secret` for security-critical secrets                                   //
    * that are intended for machine, rather than human, consumption.                                             //
    * @locus Anywhere                                                                                            //
    * @param {Number} [n] Optional length of the secret string (defaults to 43                                   //
    *   characters, or 256 bits of entropy)                                                                      //
    */                                                                                                           //
                                                                                                                 //
RandomGenerator.prototype.secret = function (charsCount) {                                                       // 218
  var self = this; // Default to 256 bits of entropy, or 43 characters at 6 bits per                             // 219
  // character.                                                                                                  // 221
                                                                                                                 //
  if (charsCount === undefined) charsCount = 43;                                                                 // 222
  return self._randomString(charsCount, BASE64_CHARS);                                                           // 224
}; /**                                                                                                           // 225
    * @name Random.choice                                                                                        //
    * @summary Return a random element of the given array or string.                                             //
    * @locus Anywhere                                                                                            //
    * @param {Array|String} arrayOrString Array or string to choose from                                         //
    */                                                                                                           //
                                                                                                                 //
RandomGenerator.prototype.choice = function (arrayOrString) {                                                    // 233
  var index = Math.floor(this.fraction() * arrayOrString.length);                                                // 234
  if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];
}; // instantiate RNG.  Heuristically collect entropy from various sources when a                                // 239
// cryptographic PRNG isn't available.                                                                           // 242
// client sources                                                                                                // 244
                                                                                                                 //
                                                                                                                 //
var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
var agent = typeof navigator !== 'undefined' && navigator.userAgent || "";                                       // 263
                                                                                                                 //
function createAleaGeneratorWithGeneratedSeed() {                                                                // 265
  return new RandomGenerator(RandomGenerator.Type.ALEA, {                                                        // 266
    seeds: [new Date(), height, width, agent, Math.random()]                                                     // 268
  });                                                                                                            // 268
}                                                                                                                // 269
                                                                                                                 //
;                                                                                                                // 269
                                                                                                                 //
if (Meteor.isServer) {                                                                                           // 271
  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);                                                // 272
} else {                                                                                                         // 273
  if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {                         // 274
    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);                                           // 276
  } else {                                                                                                       // 277
    // On IE 10 and below, there's no browser crypto API                                                         // 278
    // available. Fall back to Alea                                                                              // 279
    //                                                                                                           // 280
    // XXX looks like at the moment, we use Alea in IE 11 as well,                                               // 281
    // which has `window.msCrypto` instead of `window.crypto`.                                                   // 282
    Random = createAleaGeneratorWithGeneratedSeed();                                                             // 283
  }                                                                                                              // 284
} // Create a non-cryptographically secure PRNG with a given seed (using                                         // 285
// the Alea algorithm)                                                                                           // 288
                                                                                                                 //
                                                                                                                 //
Random.createWithSeeds = function () {                                                                           // 289
  for (var _len = arguments.length, seeds = Array(_len), _key = 0; _key < _len; _key++) {                        // 289
    seeds[_key] = arguments[_key];                                                                               // 289
  }                                                                                                              // 289
                                                                                                                 //
  if (seeds.length === 0) {                                                                                      // 290
    throw new Error("No seeds were provided");                                                                   // 291
  }                                                                                                              // 292
                                                                                                                 //
  return new RandomGenerator(RandomGenerator.Type.ALEA, {                                                        // 293
    seeds: seeds                                                                                                 // 293
  });                                                                                                            // 293
}; // Used like `Random`, but much faster and not cryptographically                                              // 294
// secure                                                                                                        // 297
                                                                                                                 //
                                                                                                                 //
Random.insecure = createAleaGeneratorWithGeneratedSeed();                                                        // 298
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deprecated.js":function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
// packages/random/deprecated.js                                                                                 //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 //
// Before this package existed, we used to use this Meteor.uuid()                                                // 1
// implementing the RFC 4122 v4 UUID. It is no longer documented                                                 // 2
// and will go away.                                                                                             // 3
// XXX COMPAT WITH 0.5.6                                                                                         // 4
Meteor.uuid = function () {                                                                                      // 5
  var HEX_DIGITS = "0123456789abcdef";                                                                           // 6
  var s = [];                                                                                                    // 7
                                                                                                                 //
  for (var i = 0; i < 36; i++) {                                                                                 // 8
    s[i] = Random.choice(HEX_DIGITS);                                                                            // 9
  }                                                                                                              // 10
                                                                                                                 //
  s[14] = "4";                                                                                                   // 11
  s[19] = HEX_DIGITS.substr(parseInt(s[19], 16) & 0x3 | 0x8, 1);                                                 // 12
  s[8] = s[13] = s[18] = s[23] = "-";                                                                            // 13
  var uuid = s.join("");                                                                                         // 15
  return uuid;                                                                                                   // 16
};                                                                                                               // 17
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/random/random.js");
require("./node_modules/meteor/random/deprecated.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.random = {}, {
  Random: Random
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var EJSON = Package.ejson.EJSON;
var IdMap = Package['id-map'].IdMap;
var Random = Package.random.Random;

/* Package-scope variables */
var MongoID;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                    //
// packages/mongo-id/id.js                                                                            //
//                                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                      //
MongoID = {};                                                                                         // 1
                                                                                                      // 2
MongoID._looksLikeObjectID = function (str) {                                                         // 3
  return str.length === 24 && str.match(/^[0-9a-f]*$/);                                               // 4
};                                                                                                    // 5
                                                                                                      // 6
MongoID.ObjectID = function (hexString) {                                                             // 7
  //random-based impl of Mongo ObjectID                                                               // 8
  var self = this;                                                                                    // 9
  if (hexString) {                                                                                    // 10
    hexString = hexString.toLowerCase();                                                              // 11
    if (!MongoID._looksLikeObjectID(hexString)) {                                                     // 12
      throw new Error("Invalid hexadecimal string for creating an ObjectID");                         // 13
    }                                                                                                 // 14
    // meant to work with _.isEqual(), which relies on structural equality                            // 15
    self._str = hexString;                                                                            // 16
  } else {                                                                                            // 17
    self._str = Random.hexString(24);                                                                 // 18
  }                                                                                                   // 19
};                                                                                                    // 20
                                                                                                      // 21
MongoID.ObjectID.prototype.toString = function () {                                                   // 22
  var self = this;                                                                                    // 23
  return "ObjectID(\"" + self._str + "\")";                                                           // 24
};                                                                                                    // 25
                                                                                                      // 26
MongoID.ObjectID.prototype.equals = function (other) {                                                // 27
  var self = this;                                                                                    // 28
  return other instanceof MongoID.ObjectID &&                                                         // 29
    self.valueOf() === other.valueOf();                                                               // 30
};                                                                                                    // 31
                                                                                                      // 32
MongoID.ObjectID.prototype.clone = function () {                                                      // 33
  var self = this;                                                                                    // 34
  return new MongoID.ObjectID(self._str);                                                             // 35
};                                                                                                    // 36
                                                                                                      // 37
MongoID.ObjectID.prototype.typeName = function() {                                                    // 38
  return "oid";                                                                                       // 39
};                                                                                                    // 40
                                                                                                      // 41
MongoID.ObjectID.prototype.getTimestamp = function() {                                                // 42
  var self = this;                                                                                    // 43
  return parseInt(self._str.substr(0, 8), 16);                                                        // 44
};                                                                                                    // 45
                                                                                                      // 46
MongoID.ObjectID.prototype.valueOf =                                                                  // 47
    MongoID.ObjectID.prototype.toJSONValue =                                                          // 48
    MongoID.ObjectID.prototype.toHexString =                                                          // 49
    function () { return this._str; };                                                                // 50
                                                                                                      // 51
EJSON.addType("oid",  function (str) {                                                                // 52
  return new MongoID.ObjectID(str);                                                                   // 53
});                                                                                                   // 54
                                                                                                      // 55
MongoID.idStringify = function (id) {                                                                 // 56
  if (id instanceof MongoID.ObjectID) {                                                               // 57
    return id.valueOf();                                                                              // 58
  } else if (typeof id === 'string') {                                                                // 59
    if (id === "") {                                                                                  // 60
      return id;                                                                                      // 61
    } else if (id.substr(0, 1) === "-" || // escape previously dashed strings                         // 62
               id.substr(0, 1) === "~" || // escape escaped numbers, true, false                      // 63
               MongoID._looksLikeObjectID(id) || // escape object-id-form strings                     // 64
               id.substr(0, 1) === '{') { // escape object-form strings, for maybe implementing later
      return "-" + id;                                                                                // 66
    } else {                                                                                          // 67
      return id; // other strings go through unchanged.                                               // 68
    }                                                                                                 // 69
  } else if (id === undefined) {                                                                      // 70
    return '-';                                                                                       // 71
  } else if (typeof id === 'object' && id !== null) {                                                 // 72
    throw new Error("Meteor does not currently support objects other than ObjectID as ids");          // 73
  } else { // Numbers, true, false, null                                                              // 74
    return "~" + JSON.stringify(id);                                                                  // 75
  }                                                                                                   // 76
};                                                                                                    // 77
                                                                                                      // 78
                                                                                                      // 79
MongoID.idParse = function (id) {                                                                     // 80
  if (id === "") {                                                                                    // 81
    return id;                                                                                        // 82
  } else if (id === '-') {                                                                            // 83
    return undefined;                                                                                 // 84
  } else if (id.substr(0, 1) === '-') {                                                               // 85
    return id.substr(1);                                                                              // 86
  } else if (id.substr(0, 1) === '~') {                                                               // 87
    return JSON.parse(id.substr(1));                                                                  // 88
  } else if (MongoID._looksLikeObjectID(id)) {                                                        // 89
    return new MongoID.ObjectID(id);                                                                  // 90
  } else {                                                                                            // 91
    return id;                                                                                        // 92
  }                                                                                                   // 93
};                                                                                                    // 94
                                                                                                      // 95
                                                                                                      // 96
////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['mongo-id'] = {}, {
  MongoID: MongoID
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var DiffSequence;

(function(){

/////////////////////////////////////////////////////////////////////////////////////
//                                                                                 //
// packages/diff-sequence/diff.js                                                  //
//                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////
                                                                                   //
DiffSequence = {};                                                                 // 1
                                                                                   // 2
// ordered: bool.                                                                  // 3
// old_results and new_results: collections of documents.                          // 4
//    if ordered, they are arrays.                                                 // 5
//    if unordered, they are IdMaps                                                // 6
DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults,         // 7
                                              observer, options) {                 // 8
  if (ordered)                                                                     // 9
    DiffSequence.diffQueryOrderedChanges(                                          // 10
      oldResults, newResults, observer, options);                                  // 11
  else                                                                             // 12
    DiffSequence.diffQueryUnorderedChanges(                                        // 13
      oldResults, newResults, observer, options);                                  // 14
};                                                                                 // 15
                                                                                   // 16
DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults,         // 17
                                                       observer, options) {        // 18
  options = options || {};                                                         // 19
  var projectionFn = options.projectionFn || EJSON.clone;                          // 20
                                                                                   // 21
  if (observer.movedBefore) {                                                      // 22
    throw new Error("_diffQueryUnordered called with a movedBefore observer!");    // 23
  }                                                                                // 24
                                                                                   // 25
  newResults.forEach(function (newDoc, id) {                                       // 26
    var oldDoc = oldResults.get(id);                                               // 27
    if (oldDoc) {                                                                  // 28
      if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {                     // 29
        var projectedNew = projectionFn(newDoc);                                   // 30
        var projectedOld = projectionFn(oldDoc);                                   // 31
        var changedFields =                                                        // 32
              DiffSequence.makeChangedFields(projectedNew, projectedOld);          // 33
        if (! _.isEmpty(changedFields)) {                                          // 34
          observer.changed(id, changedFields);                                     // 35
        }                                                                          // 36
      }                                                                            // 37
    } else if (observer.added) {                                                   // 38
      var fields = projectionFn(newDoc);                                           // 39
      delete fields._id;                                                           // 40
      observer.added(newDoc._id, fields);                                          // 41
    }                                                                              // 42
  });                                                                              // 43
                                                                                   // 44
  if (observer.removed) {                                                          // 45
    oldResults.forEach(function (oldDoc, id) {                                     // 46
      if (!newResults.has(id))                                                     // 47
        observer.removed(id);                                                      // 48
    });                                                                            // 49
  }                                                                                // 50
};                                                                                 // 51
                                                                                   // 52
                                                                                   // 53
DiffSequence.diffQueryOrderedChanges = function (old_results, new_results,         // 54
                                                     observer, options) {          // 55
  options = options || {};                                                         // 56
  var projectionFn = options.projectionFn || EJSON.clone;                          // 57
                                                                                   // 58
  var new_presence_of_id = {};                                                     // 59
  _.each(new_results, function (doc) {                                             // 60
    if (new_presence_of_id[doc._id])                                               // 61
      Meteor._debug("Duplicate _id in new_results");                               // 62
    new_presence_of_id[doc._id] = true;                                            // 63
  });                                                                              // 64
                                                                                   // 65
  var old_index_of_id = {};                                                        // 66
  _.each(old_results, function (doc, i) {                                          // 67
    if (doc._id in old_index_of_id)                                                // 68
      Meteor._debug("Duplicate _id in old_results");                               // 69
    old_index_of_id[doc._id] = i;                                                  // 70
  });                                                                              // 71
                                                                                   // 72
  // ALGORITHM:                                                                    // 73
  //                                                                               // 74
  // To determine which docs should be considered "moved" (and which               // 75
  // merely change position because of other docs moving) we run                   // 76
  // a "longest common subsequence" (LCS) algorithm.  The LCS of the               // 77
  // old doc IDs and the new doc IDs gives the docs that should NOT be             // 78
  // considered moved.                                                             // 79
                                                                                   // 80
  // To actually call the appropriate callbacks to get from the old state to the   // 81
  // new state:                                                                    // 82
                                                                                   // 83
  // First, we call removed() on all the items that only appear in the old         // 84
  // state.                                                                        // 85
                                                                                   // 86
  // Then, once we have the items that should not move, we walk through the new    // 87
  // results array group-by-group, where a "group" is a set of items that have     // 88
  // moved, anchored on the end by an item that should not move.  One by one, we   // 89
  // move each of those elements into place "before" the anchoring end-of-group    // 90
  // item, and fire changed events on them if necessary.  Then we fire a changed   // 91
  // event on the anchor, and move on to the next group.  There is always at       // 92
  // least one group; the last group is anchored by a virtual "null" id at the     // 93
  // end.                                                                          // 94
                                                                                   // 95
  // Asymptotically: O(N k) where k is number of ops, or potentially               // 96
  // O(N log N) if inner loop of LCS were made to be binary search.                // 97
                                                                                   // 98
                                                                                   // 99
  //////// LCS (longest common sequence, with respect to _id)                      // 100
  // (see Wikipedia article on Longest Increasing Subsequence,                     // 101
  // where the LIS is taken of the sequence of old indices of the                  // 102
  // docs in new_results)                                                          // 103
  //                                                                               // 104
  // unmoved: the output of the algorithm; members of the LCS,                     // 105
  // in the form of indices into new_results                                       // 106
  var unmoved = [];                                                                // 107
  // max_seq_len: length of LCS found so far                                       // 108
  var max_seq_len = 0;                                                             // 109
  // seq_ends[i]: the index into new_results of the last doc in a                  // 110
  // common subsequence of length of i+1 <= max_seq_len                            // 111
  var N = new_results.length;                                                      // 112
  var seq_ends = new Array(N);                                                     // 113
  // ptrs:  the common subsequence ending with new_results[n] extends              // 114
  // a common subsequence ending with new_results[ptr[n]], unless                  // 115
  // ptr[n] is -1.                                                                 // 116
  var ptrs = new Array(N);                                                         // 117
  // virtual sequence of old indices of new results                                // 118
  var old_idx_seq = function(i_new) {                                              // 119
    return old_index_of_id[new_results[i_new]._id];                                // 120
  };                                                                               // 121
  // for each item in new_results, use it to extend a common subsequence           // 122
  // of length j <= max_seq_len                                                    // 123
  for(var i=0; i<N; i++) {                                                         // 124
    if (old_index_of_id[new_results[i]._id] !== undefined) {                       // 125
      var j = max_seq_len;                                                         // 126
      // this inner loop would traditionally be a binary search,                   // 127
      // but scanning backwards we will likely find a subseq to extend             // 128
      // pretty soon, bounded for example by the total number of ops.              // 129
      // If this were to be changed to a binary search, we'd still want            // 130
      // to scan backwards a bit as an optimization.                               // 131
      while (j > 0) {                                                              // 132
        if (old_idx_seq(seq_ends[j-1]) < old_idx_seq(i))                           // 133
          break;                                                                   // 134
        j--;                                                                       // 135
      }                                                                            // 136
                                                                                   // 137
      ptrs[i] = (j === 0 ? -1 : seq_ends[j-1]);                                    // 138
      seq_ends[j] = i;                                                             // 139
      if (j+1 > max_seq_len)                                                       // 140
        max_seq_len = j+1;                                                         // 141
    }                                                                              // 142
  }                                                                                // 143
                                                                                   // 144
  // pull out the LCS/LIS into unmoved                                             // 145
  var idx = (max_seq_len === 0 ? -1 : seq_ends[max_seq_len-1]);                    // 146
  while (idx >= 0) {                                                               // 147
    unmoved.push(idx);                                                             // 148
    idx = ptrs[idx];                                                               // 149
  }                                                                                // 150
  // the unmoved item list is built backwards, so fix that                         // 151
  unmoved.reverse();                                                               // 152
                                                                                   // 153
  // the last group is always anchored by the end of the result list, which is     // 154
  // an id of "null"                                                               // 155
  unmoved.push(new_results.length);                                                // 156
                                                                                   // 157
  _.each(old_results, function (doc) {                                             // 158
    if (!new_presence_of_id[doc._id])                                              // 159
      observer.removed && observer.removed(doc._id);                               // 160
  });                                                                              // 161
  // for each group of things in the new_results that is anchored by an unmoved    // 162
  // element, iterate through the things before it.                                // 163
  var startOfGroup = 0;                                                            // 164
  _.each(unmoved, function (endOfGroup) {                                          // 165
    var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;    // 166
    var oldDoc, newDoc, fields, projectedNew, projectedOld;                        // 167
    for (var i = startOfGroup; i < endOfGroup; i++) {                              // 168
      newDoc = new_results[i];                                                     // 169
      if (!_.has(old_index_of_id, newDoc._id)) {                                   // 170
        fields = projectionFn(newDoc);                                             // 171
        delete fields._id;                                                         // 172
        observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
        observer.added && observer.added(newDoc._id, fields);                      // 174
      } else {                                                                     // 175
        // moved                                                                   // 176
        oldDoc = old_results[old_index_of_id[newDoc._id]];                         // 177
        projectedNew = projectionFn(newDoc);                                       // 178
        projectedOld = projectionFn(oldDoc);                                       // 179
        fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);       // 180
        if (!_.isEmpty(fields)) {                                                  // 181
          observer.changed && observer.changed(newDoc._id, fields);                // 182
        }                                                                          // 183
        observer.movedBefore && observer.movedBefore(newDoc._id, groupId);         // 184
      }                                                                            // 185
    }                                                                              // 186
    if (groupId) {                                                                 // 187
      newDoc = new_results[endOfGroup];                                            // 188
      oldDoc = old_results[old_index_of_id[newDoc._id]];                           // 189
      projectedNew = projectionFn(newDoc);                                         // 190
      projectedOld = projectionFn(oldDoc);                                         // 191
      fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);         // 192
      if (!_.isEmpty(fields)) {                                                    // 193
        observer.changed && observer.changed(newDoc._id, fields);                  // 194
      }                                                                            // 195
    }                                                                              // 196
    startOfGroup = endOfGroup+1;                                                   // 197
  });                                                                              // 198
                                                                                   // 199
                                                                                   // 200
};                                                                                 // 201
                                                                                   // 202
                                                                                   // 203
// General helper for diff-ing two objects.                                        // 204
// callbacks is an object like so:                                                 // 205
// { leftOnly: function (key, leftValue) {...},                                    // 206
//   rightOnly: function (key, rightValue) {...},                                  // 207
//   both: function (key, leftValue, rightValue) {...},                            // 208
// }                                                                               // 209
DiffSequence.diffObjects = function (left, right, callbacks) {                     // 210
  _.each(left, function (leftValue, key) {                                         // 211
    if (_.has(right, key))                                                         // 212
      callbacks.both && callbacks.both(key, leftValue, right[key]);                // 213
    else                                                                           // 214
      callbacks.leftOnly && callbacks.leftOnly(key, leftValue);                    // 215
  });                                                                              // 216
  if (callbacks.rightOnly) {                                                       // 217
    _.each(right, function(rightValue, key) {                                      // 218
      if (!_.has(left, key))                                                       // 219
        callbacks.rightOnly(key, rightValue);                                      // 220
    });                                                                            // 221
  }                                                                                // 222
};                                                                                 // 223
                                                                                   // 224
                                                                                   // 225
DiffSequence.makeChangedFields = function (newDoc, oldDoc) {                       // 226
  var fields = {};                                                                 // 227
  DiffSequence.diffObjects(oldDoc, newDoc, {                                       // 228
    leftOnly: function (key, value) {                                              // 229
      fields[key] = undefined;                                                     // 230
    },                                                                             // 231
    rightOnly: function (key, value) {                                             // 232
      fields[key] = value;                                                         // 233
    },                                                                             // 234
    both: function (key, leftValue, rightValue) {                                  // 235
      if (!EJSON.equals(leftValue, rightValue))                                    // 236
        fields[key] = rightValue;                                                  // 237
    }                                                                              // 238
  });                                                                              // 239
  return fields;                                                                   // 240
};                                                                                 // 241
                                                                                   // 242
DiffSequence.applyChanges = function (doc, changeFields) {                         // 243
  _.each(changeFields, function (value, key) {                                     // 244
    if (value === undefined)                                                       // 245
      delete doc[key];                                                             // 246
    else                                                                           // 247
      doc[key] = value;                                                            // 248
  });                                                                              // 249
};                                                                                 // 250
                                                                                   // 251
                                                                                   // 252
/////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['diff-sequence'] = {}, {
  DiffSequence: DiffSequence
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;

/* Package-scope variables */
var GeoJSON;

var require = meteorInstall({"node_modules":{"meteor":{"geojson-utils":{"main.js":["./geojson-utils.js",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/main.js                                                                          //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
exports.GeoJSON = require("./geojson-utils.js");                                                           // 1
                                                                                                           // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"geojson-utils.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                         //
// packages/geojson-utils/geojson-utils.js                                                                 //
//                                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                           //
(function () {                                                                                             // 1
  var gju = {};                                                                                            // 2
                                                                                                           // 3
  // Export the geojson object for **CommonJS**                                                            // 4
  if (typeof module !== 'undefined' && module.exports) {                                                   // 5
    module.exports = gju;                                                                                  // 6
  }                                                                                                        // 7
                                                                                                           // 8
  // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js                           // 9
  gju.lineStringsIntersect = function (l1, l2) {                                                           // 10
    var intersects = [];                                                                                   // 11
    for (var i = 0; i <= l1.coordinates.length - 2; ++i) {                                                 // 12
      for (var j = 0; j <= l2.coordinates.length - 2; ++j) {                                               // 13
        var a1 = {                                                                                         // 14
          x: l1.coordinates[i][1],                                                                         // 15
          y: l1.coordinates[i][0]                                                                          // 16
        },                                                                                                 // 17
          a2 = {                                                                                           // 18
            x: l1.coordinates[i + 1][1],                                                                   // 19
            y: l1.coordinates[i + 1][0]                                                                    // 20
          },                                                                                               // 21
          b1 = {                                                                                           // 22
            x: l2.coordinates[j][1],                                                                       // 23
            y: l2.coordinates[j][0]                                                                        // 24
          },                                                                                               // 25
          b2 = {                                                                                           // 26
            x: l2.coordinates[j + 1][1],                                                                   // 27
            y: l2.coordinates[j + 1][0]                                                                    // 28
          },                                                                                               // 29
          ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),                            // 30
          ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),                            // 31
          u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);                             // 32
        if (u_b != 0) {                                                                                    // 33
          var ua = ua_t / u_b,                                                                             // 34
            ub = ub_t / u_b;                                                                               // 35
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {                                                  // 36
            intersects.push({                                                                              // 37
              'type': 'Point',                                                                             // 38
              'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]                        // 39
            });                                                                                            // 40
          }                                                                                                // 41
        }                                                                                                  // 42
      }                                                                                                    // 43
    }                                                                                                      // 44
    if (intersects.length == 0) intersects = false;                                                        // 45
    return intersects;                                                                                     // 46
  }                                                                                                        // 47
                                                                                                           // 48
  // Bounding Box                                                                                          // 49
                                                                                                           // 50
  function boundingBoxAroundPolyCoords (coords) {                                                          // 51
    var xAll = [], yAll = []                                                                               // 52
                                                                                                           // 53
    for (var i = 0; i < coords[0].length; i++) {                                                           // 54
      xAll.push(coords[0][i][1])                                                                           // 55
      yAll.push(coords[0][i][0])                                                                           // 56
    }                                                                                                      // 57
                                                                                                           // 58
    xAll = xAll.sort(function (a,b) { return a - b })                                                      // 59
    yAll = yAll.sort(function (a,b) { return a - b })                                                      // 60
                                                                                                           // 61
    return [ [xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]] ]                          // 62
  }                                                                                                        // 63
                                                                                                           // 64
  gju.pointInBoundingBox = function (point, bounds) {                                                      // 65
    return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1])
  }                                                                                                        // 67
                                                                                                           // 68
  // Point in Polygon                                                                                      // 69
  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices           // 70
                                                                                                           // 71
  function pnpoly (x,y,coords) {                                                                           // 72
    var vert = [ [0,0] ]                                                                                   // 73
                                                                                                           // 74
    for (var i = 0; i < coords.length; i++) {                                                              // 75
      for (var j = 0; j < coords[i].length; j++) {                                                         // 76
        vert.push(coords[i][j])                                                                            // 77
      }                                                                                                    // 78
      vert.push([0,0])                                                                                     // 79
    }                                                                                                      // 80
                                                                                                           // 81
    var inside = false                                                                                     // 82
    for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {                                       // 83
      if (((vert[i][0] > y) != (vert[j][0] > y)) && (x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1])) inside = !inside
    }                                                                                                      // 85
                                                                                                           // 86
    return inside                                                                                          // 87
  }                                                                                                        // 88
                                                                                                           // 89
  gju.pointInPolygon = function (p, poly) {                                                                // 90
    var coords = (poly.type == "Polygon") ? [ poly.coordinates ] : poly.coordinates                        // 91
                                                                                                           // 92
    var insideBox = false                                                                                  // 93
    for (var i = 0; i < coords.length; i++) {                                                              // 94
      if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true              // 95
    }                                                                                                      // 96
    if (!insideBox) return false                                                                           // 97
                                                                                                           // 98
    var insidePoly = false                                                                                 // 99
    for (var i = 0; i < coords.length; i++) {                                                              // 100
      if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true                         // 101
    }                                                                                                      // 102
                                                                                                           // 103
    return insidePoly                                                                                      // 104
  }                                                                                                        // 105
                                                                                                           // 106
  gju.numberToRadius = function (number) {                                                                 // 107
    return number * Math.PI / 180;                                                                         // 108
  }                                                                                                        // 109
                                                                                                           // 110
  gju.numberToDegree = function (number) {                                                                 // 111
    return number * 180 / Math.PI;                                                                         // 112
  }                                                                                                        // 113
                                                                                                           // 114
  // written with help from @tautologe                                                                     // 115
  gju.drawCircle = function (radiusInMeters, centerPoint, steps) {                                         // 116
    var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],                                 // 117
      dist = (radiusInMeters / 1000) / 6371,                                                               // 118
      // convert meters to radiant                                                                         // 119
      radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],                          // 120
      steps = steps || 15,                                                                                 // 121
      // 15 sided circle                                                                                   // 122
      poly = [[center[0], center[1]]];                                                                     // 123
    for (var i = 0; i < steps; i++) {                                                                      // 124
      var brng = 2 * Math.PI * i / steps;                                                                  // 125
      var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist)                                          // 126
              + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));                                 // 127
      var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]),        // 128
                                          Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));        // 129
      poly[i] = [];                                                                                        // 130
      poly[i][1] = gju.numberToDegree(lat);                                                                // 131
      poly[i][0] = gju.numberToDegree(lng);                                                                // 132
    }                                                                                                      // 133
    return {                                                                                               // 134
      "type": "Polygon",                                                                                   // 135
      "coordinates": [poly]                                                                                // 136
    };                                                                                                     // 137
  }                                                                                                        // 138
                                                                                                           // 139
  // assumes rectangle starts at lower left point                                                          // 140
  gju.rectangleCentroid = function (rectangle) {                                                           // 141
    var bbox = rectangle.coordinates[0];                                                                   // 142
    var xmin = bbox[0][0],                                                                                 // 143
      ymin = bbox[0][1],                                                                                   // 144
      xmax = bbox[2][0],                                                                                   // 145
      ymax = bbox[2][1];                                                                                   // 146
    var xwidth = xmax - xmin;                                                                              // 147
    var ywidth = ymax - ymin;                                                                              // 148
    return {                                                                                               // 149
      'type': 'Point',                                                                                     // 150
      'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]                                                // 151
    };                                                                                                     // 152
  }                                                                                                        // 153
                                                                                                           // 154
  // from http://www.movable-type.co.uk/scripts/latlong.html                                               // 155
  gju.pointDistance = function (pt1, pt2) {                                                                // 156
    var lon1 = pt1.coordinates[0],                                                                         // 157
      lat1 = pt1.coordinates[1],                                                                           // 158
      lon2 = pt2.coordinates[0],                                                                           // 159
      lat2 = pt2.coordinates[1],                                                                           // 160
      dLat = gju.numberToRadius(lat2 - lat1),                                                              // 161
      dLon = gju.numberToRadius(lon2 - lon1),                                                              // 162
      a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1))                             // 163
        * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),                            // 164
      c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));                                                  // 165
    // Earth radius is 6371 km                                                                             // 166
    return (6371 * c) * 1000; // returns meters                                                            // 167
  },                                                                                                       // 168
                                                                                                           // 169
  // checks if geometry lies entirely within a circle                                                      // 170
  // works with Point, LineString, Polygon                                                                 // 171
  gju.geometryWithinRadius = function (geometry, center, radius) {                                         // 172
    if (geometry.type == 'Point') {                                                                        // 173
      return gju.pointDistance(geometry, center) <= radius;                                                // 174
    } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {                              // 175
      var point = {};                                                                                      // 176
      var coordinates;                                                                                     // 177
      if (geometry.type == 'Polygon') {                                                                    // 178
        // it's enough to check the exterior ring of the Polygon                                           // 179
        coordinates = geometry.coordinates[0];                                                             // 180
      } else {                                                                                             // 181
        coordinates = geometry.coordinates;                                                                // 182
      }                                                                                                    // 183
      for (var i in coordinates) {                                                                         // 184
        point.coordinates = coordinates[i];                                                                // 185
        if (gju.pointDistance(point, center) > radius) {                                                   // 186
          return false;                                                                                    // 187
        }                                                                                                  // 188
      }                                                                                                    // 189
    }                                                                                                      // 190
    return true;                                                                                           // 191
  }                                                                                                        // 192
                                                                                                           // 193
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 194
  gju.area = function (polygon) {                                                                          // 195
    var area = 0;                                                                                          // 196
    // TODO: polygon holes at coordinates[1]                                                               // 197
    var points = polygon.coordinates[0];                                                                   // 198
    var j = points.length - 1;                                                                             // 199
    var p1, p2;                                                                                            // 200
                                                                                                           // 201
    for (var i = 0; i < points.length; j = i++) {                                                          // 202
      var p1 = {                                                                                           // 203
        x: points[i][1],                                                                                   // 204
        y: points[i][0]                                                                                    // 205
      };                                                                                                   // 206
      var p2 = {                                                                                           // 207
        x: points[j][1],                                                                                   // 208
        y: points[j][0]                                                                                    // 209
      };                                                                                                   // 210
      area += p1.x * p2.y;                                                                                 // 211
      area -= p1.y * p2.x;                                                                                 // 212
    }                                                                                                      // 213
                                                                                                           // 214
    area /= 2;                                                                                             // 215
    return area;                                                                                           // 216
  },                                                                                                       // 217
                                                                                                           // 218
  // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt                                   // 219
  gju.centroid = function (polygon) {                                                                      // 220
    var f, x = 0,                                                                                          // 221
      y = 0;                                                                                               // 222
    // TODO: polygon holes at coordinates[1]                                                               // 223
    var points = polygon.coordinates[0];                                                                   // 224
    var j = points.length - 1;                                                                             // 225
    var p1, p2;                                                                                            // 226
                                                                                                           // 227
    for (var i = 0; i < points.length; j = i++) {                                                          // 228
      var p1 = {                                                                                           // 229
        x: points[i][1],                                                                                   // 230
        y: points[i][0]                                                                                    // 231
      };                                                                                                   // 232
      var p2 = {                                                                                           // 233
        x: points[j][1],                                                                                   // 234
        y: points[j][0]                                                                                    // 235
      };                                                                                                   // 236
      f = p1.x * p2.y - p2.x * p1.y;                                                                       // 237
      x += (p1.x + p2.x) * f;                                                                              // 238
      y += (p1.y + p2.y) * f;                                                                              // 239
    }                                                                                                      // 240
                                                                                                           // 241
    f = gju.area(polygon) * 6;                                                                             // 242
    return {                                                                                               // 243
      'type': 'Point',                                                                                     // 244
      'coordinates': [y / f, x / f]                                                                        // 245
    };                                                                                                     // 246
  },                                                                                                       // 247
                                                                                                           // 248
  gju.simplify = function (source, kink) { /* source[] array of geojson points */                          // 249
    /* kink	in metres, kinks above this depth kept  */                                                     // 250
    /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
    kink = kink || 20;                                                                                     // 252
    source = source.map(function (o) {                                                                     // 253
      return {                                                                                             // 254
        lng: o.coordinates[0],                                                                             // 255
        lat: o.coordinates[1]                                                                              // 256
      }                                                                                                    // 257
    });                                                                                                    // 258
                                                                                                           // 259
    var n_source, n_stack, n_dest, start, end, i, sig;                                                     // 260
    var dev_sqr, max_dev_sqr, band_sqr;                                                                    // 261
    var x12, y12, d12, x13, y13, d13, x23, y23, d23;                                                       // 262
    var F = (Math.PI / 180.0) * 0.5;                                                                       // 263
    var index = new Array(); /* aray of indexes of source points to include in the reduced line */         // 264
    var sig_start = new Array(); /* indices of start & end of working section */                           // 265
    var sig_end = new Array();                                                                             // 266
                                                                                                           // 267
    /* check for simple cases */                                                                           // 268
                                                                                                           // 269
    if (source.length < 3) return (source); /* one or two points */                                        // 270
                                                                                                           // 271
    /* more complex case. initialize stack */                                                              // 272
                                                                                                           // 273
    n_source = source.length;                                                                              // 274
    band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */                            // 275
    band_sqr *= band_sqr;                                                                                  // 276
    n_dest = 0;                                                                                            // 277
    sig_start[0] = 0;                                                                                      // 278
    sig_end[0] = n_source - 1;                                                                             // 279
    n_stack = 1;                                                                                           // 280
                                                                                                           // 281
    /* while the stack is not empty  ... */                                                                // 282
    while (n_stack > 0) {                                                                                  // 283
                                                                                                           // 284
      /* ... pop the top-most entries off the stacks */                                                    // 285
                                                                                                           // 286
      start = sig_start[n_stack - 1];                                                                      // 287
      end = sig_end[n_stack - 1];                                                                          // 288
      n_stack--;                                                                                           // 289
                                                                                                           // 290
      if ((end - start) > 1) { /* any intermediate points ? */                                             // 291
                                                                                                           // 292
        /* ... yes, so find most deviant intermediate point to                                             // 293
        either side of line joining start & end points */                                                  // 294
                                                                                                           // 295
        x12 = (source[end].lng() - source[start].lng());                                                   // 296
        y12 = (source[end].lat() - source[start].lat());                                                   // 297
        if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);                                            // 298
        x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */    // 299
        d12 = (x12 * x12) + (y12 * y12);                                                                   // 300
                                                                                                           // 301
        for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {                               // 302
                                                                                                           // 303
          x13 = source[i].lng() - source[start].lng();                                                     // 304
          y13 = source[i].lat() - source[start].lat();                                                     // 305
          if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);                                          // 306
          x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));                                    // 307
          d13 = (x13 * x13) + (y13 * y13);                                                                 // 308
                                                                                                           // 309
          x23 = source[i].lng() - source[end].lng();                                                       // 310
          y23 = source[i].lat() - source[end].lat();                                                       // 311
          if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);                                          // 312
          x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));                                      // 313
          d23 = (x23 * x23) + (y23 * y23);                                                                 // 314
                                                                                                           // 315
          if (d13 >= (d12 + d23)) dev_sqr = d23;                                                           // 316
          else if (d23 >= (d12 + d13)) dev_sqr = d13;                                                      // 317
          else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle        // 318
          if (dev_sqr > max_dev_sqr) {                                                                     // 319
            sig = i;                                                                                       // 320
            max_dev_sqr = dev_sqr;                                                                         // 321
          }                                                                                                // 322
        }                                                                                                  // 323
                                                                                                           // 324
        if (max_dev_sqr < band_sqr) { /* is there a sig. intermediate point ? */                           // 325
          /* ... no, so transfer current start point */                                                    // 326
          index[n_dest] = start;                                                                           // 327
          n_dest++;                                                                                        // 328
        } else { /* ... yes, so push two sub-sections on stack for further processing */                   // 329
          n_stack++;                                                                                       // 330
          sig_start[n_stack - 1] = sig;                                                                    // 331
          sig_end[n_stack - 1] = end;                                                                      // 332
          n_stack++;                                                                                       // 333
          sig_start[n_stack - 1] = start;                                                                  // 334
          sig_end[n_stack - 1] = sig;                                                                      // 335
        }                                                                                                  // 336
      } else { /* ... no intermediate points, so transfer current start point */                           // 337
        index[n_dest] = start;                                                                             // 338
        n_dest++;                                                                                          // 339
      }                                                                                                    // 340
    }                                                                                                      // 341
                                                                                                           // 342
    /* transfer last point */                                                                              // 343
    index[n_dest] = n_source - 1;                                                                          // 344
    n_dest++;                                                                                              // 345
                                                                                                           // 346
    /* make return array */                                                                                // 347
    var r = new Array();                                                                                   // 348
    for (var i = 0; i < n_dest; i++)                                                                       // 349
      r.push(source[index[i]]);                                                                            // 350
                                                                                                           // 351
    return r.map(function (o) {                                                                            // 352
      return {                                                                                             // 353
        type: "Point",                                                                                     // 354
        coordinates: [o.lng, o.lat]                                                                        // 355
      }                                                                                                    // 356
    });                                                                                                    // 357
  }                                                                                                        // 358
                                                                                                           // 359
  // http://www.movable-type.co.uk/scripts/latlong.html#destPoint                                          // 360
  gju.destinationPoint = function (pt, brng, dist) {                                                       // 361
    dist = dist/6371;  // convert dist to angular distance in radians                                      // 362
    brng = gju.numberToRadius(brng);                                                                       // 363
                                                                                                           // 364
    var lat1 = gju.numberToRadius(pt.coordinates[0]);                                                      // 365
    var lon1 = gju.numberToRadius(pt.coordinates[1]);                                                      // 366
                                                                                                           // 367
    var lat2 = Math.asin( Math.sin(lat1)*Math.cos(dist) +                                                  // 368
                          Math.cos(lat1)*Math.sin(dist)*Math.cos(brng) );                                  // 369
    var lon2 = lon1 + Math.atan2(Math.sin(brng)*Math.sin(dist)*Math.cos(lat1),                             // 370
                                 Math.cos(dist)-Math.sin(lat1)*Math.sin(lat2));                            // 371
    lon2 = (lon2+3*Math.PI) % (2*Math.PI) - Math.PI;  // normalise to -180..+180º                          // 372
                                                                                                           // 373
    return {                                                                                               // 374
      'type': 'Point',                                                                                     // 375
      'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]                                  // 376
    };                                                                                                     // 377
  };                                                                                                       // 378
                                                                                                           // 379
})();                                                                                                      // 380
                                                                                                           // 381
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/geojson-utils/main.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['geojson-utils'] = exports, {
  GeoJSON: GeoJSON
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;
var IdMap = Package['id-map'].IdMap;
var OrderedDict = Package['ordered-dict'].OrderedDict;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var MongoID = Package['mongo-id'].MongoID;
var Random = Package.random.Random;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var GeoJSON = Package['geojson-utils'].GeoJSON;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var LocalCollection, Minimongo, MinimongoTest, MinimongoError, isArray, isPlainObject, isIndexable, isOperatorObject, isNumericKey, regexpElementMatcher, equalityElementMatcher, ELEMENT_OPERATORS, makeLookupFunction, expandArraysInBranches, projectionDetails, pathsToTree;

var require = meteorInstall({"node_modules":{"meteor":{"minimongo":{"minimongo.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/minimongo.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// XXX type checking on selectors (graceful error if malformed)                                                        // 1
// LocalCollection: a set of documents that supports queries and modifiers.                                            // 3
// Cursor: a specification for a particular subset of documents, w/                                                    // 5
// a defined order, limit, and offset.  creating a Cursor with LocalCollection.find(),                                 // 6
// ObserveHandle: the return value of a live query.                                                                    // 8
LocalCollection = function (name) {                                                                                    // 10
  var self = this;                                                                                                     // 11
  self.name = name; // _id -> document (also containing id)                                                            // 12
                                                                                                                       //
  self._docs = new LocalCollection._IdMap();                                                                           // 14
  self._observeQueue = new Meteor._SynchronousQueue();                                                                 // 16
  self.next_qid = 1; // live query id generator                                                                        // 18
  // qid -> live query object. keys:                                                                                   // 20
  //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.                                           // 21
  //  results: array (ordered) or object (unordered) of current results                                                // 22
  //    (aliased with self._docs!)                                                                                     // 23
  //  resultsSnapshot: snapshot of results. null if not paused.                                                        // 24
  //  cursor: Cursor object for the query.                                                                             // 25
  //  selector, sorter, (callbacks): functions                                                                         // 26
                                                                                                                       //
  self.queries = {}; // null if not saving originals; an IdMap from id to original document value if                   // 27
  // saving originals. See comments before saveOriginals().                                                            // 30
                                                                                                                       //
  self._savedOriginals = null; // True when observers are paused and we should not send callbacks.                     // 31
                                                                                                                       //
  self.paused = false;                                                                                                 // 34
};                                                                                                                     // 35
                                                                                                                       //
Minimongo = {}; // Object exported only for unit testing.                                                              // 37
// Use it to export private functions to test in Tinytest.                                                             // 40
                                                                                                                       //
MinimongoTest = {};                                                                                                    // 41
                                                                                                                       //
MinimongoError = function (message) {                                                                                  // 43
  var e = new Error(message);                                                                                          // 44
  e.name = "MinimongoError";                                                                                           // 45
  return e;                                                                                                            // 46
}; // options may include sort, skip, limit, reactive                                                                  // 47
// sort may be any of these forms:                                                                                     // 51
//     {a: 1, b: -1}                                                                                                   // 52
//     [["a", "asc"], ["b", "desc"]]                                                                                   // 53
//     ["a", ["b", "desc"]]                                                                                            // 54
//   (in the first form you're beholden to key enumeration order in                                                    // 55
//   your javascript VM)                                                                                               // 56
//                                                                                                                     // 57
// reactive: if given, and false, don't register with Tracker (default                                                 // 58
// is true)                                                                                                            // 59
//                                                                                                                     // 60
// XXX possibly should support retrieving a subset of fields? and                                                      // 61
// have it be a hint (ignored on the client, when not copying the                                                      // 62
// doc?)                                                                                                               // 63
//                                                                                                                     // 64
// XXX sort does not yet support subkeys ('a.b') .. fix that!                                                          // 65
// XXX add one more sort form: "key"                                                                                   // 66
// XXX tests                                                                                                           // 67
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.find = function (selector, options) {                                                        // 68
  // default syntax for everything is to omit the selector argument.                                                   // 69
  // but if selector is explicitly passed in as false or undefined, we                                                 // 70
  // want a selector that matches nothing.                                                                             // 71
  if (arguments.length === 0) selector = {};                                                                           // 72
  return new LocalCollection.Cursor(this, selector, options);                                                          // 75
}; // don't call this ctor directly.  use LocalCollection.find().                                                      // 76
                                                                                                                       //
                                                                                                                       //
LocalCollection.Cursor = function (collection, selector, options) {                                                    // 80
  var self = this;                                                                                                     // 81
  if (!options) options = {};                                                                                          // 82
  self.collection = collection;                                                                                        // 84
  self.sorter = null;                                                                                                  // 85
  self.matcher = new Minimongo.Matcher(selector);                                                                      // 86
                                                                                                                       //
  if (LocalCollection._selectorIsId(selector)) {                                                                       // 88
    // stash for fast path                                                                                             // 89
    self._selectorId = selector;                                                                                       // 90
  } else if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                 // 91
    // also do the fast path for { _id: idString }                                                                     // 92
    self._selectorId = selector._id;                                                                                   // 93
  } else {                                                                                                             // 94
    self._selectorId = undefined;                                                                                      // 95
                                                                                                                       //
    if (self.matcher.hasGeoQuery() || options.sort) {                                                                  // 96
      self.sorter = new Minimongo.Sorter(options.sort || [], {                                                         // 97
        matcher: self.matcher                                                                                          // 98
      });                                                                                                              // 98
    }                                                                                                                  // 99
  }                                                                                                                    // 100
                                                                                                                       //
  self.skip = options.skip;                                                                                            // 102
  self.limit = options.limit;                                                                                          // 103
  self.fields = options.fields;                                                                                        // 104
  self._projectionFn = LocalCollection._compileProjection(self.fields || {});                                          // 106
  self._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.
                                                                                                                       //
  if (typeof Tracker !== "undefined") self.reactive = options.reactive === undefined ? true : options.reactive;        // 111
}; // Since we don't actually have a "nextObject" interface, there's really no                                         // 113
// reason to have a "rewind" interface.  All it did was make multiple calls                                            // 116
// to fetch/map/forEach return nothing the second time.                                                                // 117
// XXX COMPAT WITH 0.8.1                                                                                               // 118
                                                                                                                       //
                                                                                                                       //
LocalCollection.Cursor.prototype.rewind = function () {};                                                              // 119
                                                                                                                       //
LocalCollection.prototype.findOne = function (selector, options) {                                                     // 122
  if (arguments.length === 0) selector = {}; // NOTE: by setting limit 1 here, we end up using very inefficient        // 123
  // code that recomputes the whole query on each update. The upside is                                                // 127
  // that when you reactively depend on a findOne you only get                                                         // 128
  // invalidated when the found object changes, not any object in the                                                  // 129
  // collection. Most findOne will be by id, which has a fast path, so                                                 // 130
  // this might not be a big deal. In most cases, invalidation causes                                                  // 131
  // the called to re-query anyway, so this should be a net performance                                                // 132
  // improvement.                                                                                                      // 133
                                                                                                                       //
  options = options || {};                                                                                             // 134
  options.limit = 1;                                                                                                   // 135
  return this.find(selector, options).fetch()[0];                                                                      // 137
}; /**                                                                                                                 // 138
    * @callback IterationCallback                                                                                      //
    * @param {Object} doc                                                                                              //
    * @param {Number} index                                                                                            //
    */ /**                                                                                                             //
        * @summary Call `callback` once for each matching document, sequentially and synchronously.                    //
        * @locus Anywhere                                                                                              //
        * @method  forEach                                                                                             //
        * @instance                                                                                                    //
        * @memberOf Mongo.Cursor                                                                                       //
        * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
        * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                        //
        */                                                                                                             //
                                                                                                                       //
LocalCollection.Cursor.prototype.forEach = function (callback, thisArg) {                                              // 154
  var self = this;                                                                                                     // 155
                                                                                                                       //
  var objects = self._getRawObjects({                                                                                  // 157
    ordered: true                                                                                                      // 157
  });                                                                                                                  // 157
                                                                                                                       //
  if (self.reactive) {                                                                                                 // 159
    self._depend({                                                                                                     // 160
      addedBefore: true,                                                                                               // 161
      removed: true,                                                                                                   // 162
      changed: true,                                                                                                   // 163
      movedBefore: true                                                                                                // 164
    });                                                                                                                // 160
  }                                                                                                                    // 165
                                                                                                                       //
  _.each(objects, function (elt, i) {                                                                                  // 167
    // This doubles as a clone operation.                                                                              // 168
    elt = self._projectionFn(elt);                                                                                     // 169
    if (self._transform) elt = self._transform(elt);                                                                   // 171
    callback.call(thisArg, elt, i, self);                                                                              // 173
  });                                                                                                                  // 174
};                                                                                                                     // 175
                                                                                                                       //
LocalCollection.Cursor.prototype.getTransform = function () {                                                          // 177
  return this._transform;                                                                                              // 178
}; /**                                                                                                                 // 179
    * @summary Map callback over all matching documents.  Returns an Array.                                            //
    * @locus Anywhere                                                                                                  //
    * @method map                                                                                                      //
    * @instance                                                                                                        //
    * @memberOf Mongo.Cursor                                                                                           //
    * @param {IterationCallback} callback Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.
    * @param {Any} [thisArg] An object which will be the value of `this` inside `callback`.                            //
    */                                                                                                                 //
                                                                                                                       //
LocalCollection.Cursor.prototype.map = function (callback, thisArg) {                                                  // 190
  var self = this;                                                                                                     // 191
  var res = [];                                                                                                        // 192
  self.forEach(function (doc, index) {                                                                                 // 193
    res.push(callback.call(thisArg, doc, index, self));                                                                // 194
  });                                                                                                                  // 195
  return res;                                                                                                          // 196
}; /**                                                                                                                 // 197
    * @summary Return all matching documents as an Array.                                                              //
    * @memberOf Mongo.Cursor                                                                                           //
    * @method  fetch                                                                                                   //
    * @instance                                                                                                        //
    * @locus Anywhere                                                                                                  //
    * @returns {Object[]}                                                                                              //
    */                                                                                                                 //
                                                                                                                       //
LocalCollection.Cursor.prototype.fetch = function () {                                                                 // 207
  var self = this;                                                                                                     // 208
  var res = [];                                                                                                        // 209
  self.forEach(function (doc) {                                                                                        // 210
    res.push(doc);                                                                                                     // 211
  });                                                                                                                  // 212
  return res;                                                                                                          // 213
}; /**                                                                                                                 // 214
    * @summary Returns the number of documents that match a query.                                                     //
    * @memberOf Mongo.Cursor                                                                                           //
    * @method  count                                                                                                   //
    * @instance                                                                                                        //
    * @locus Anywhere                                                                                                  //
    * @returns {Number}                                                                                                //
    */                                                                                                                 //
                                                                                                                       //
LocalCollection.Cursor.prototype.count = function () {                                                                 // 224
  var self = this;                                                                                                     // 225
  if (self.reactive) self._depend({                                                                                    // 227
    added: true,                                                                                                       // 228
    removed: true                                                                                                      // 228
  }, true /* allow the observe to be unordered */);                                                                    // 228
  return self._getRawObjects({                                                                                         // 231
    ordered: true                                                                                                      // 231
  }).length;                                                                                                           // 231
};                                                                                                                     // 232
                                                                                                                       //
LocalCollection.Cursor.prototype._publishCursor = function (sub) {                                                     // 234
  var self = this;                                                                                                     // 235
  if (!self.collection.name) throw new Error("Can't publish a cursor from a collection without a name.");              // 236
  var collection = self.collection.name; // XXX minimongo should not depend on mongo-livedata!                         // 238
                                                                                                                       //
  if (!Package.mongo) {                                                                                                // 241
    throw new Error("Can't publish from Minimongo without the `mongo` package.");                                      // 242
  }                                                                                                                    // 243
                                                                                                                       //
  return Package.mongo.Mongo.Collection._publishCursor(self, sub, collection);                                         // 245
};                                                                                                                     // 246
                                                                                                                       //
LocalCollection.Cursor.prototype._getCollectionName = function () {                                                    // 248
  var self = this;                                                                                                     // 249
  return self.collection.name;                                                                                         // 250
};                                                                                                                     // 251
                                                                                                                       //
LocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {                                            // 253
  if (callbacks.added && callbacks.addedBefore) throw new Error("Please specify only one of added() and addedBefore()");
  return !!(callbacks.addedBefore || callbacks.movedBefore);                                                           // 256
};                                                                                                                     // 257
                                                                                                                       //
LocalCollection._observeCallbacksAreOrdered = function (callbacks) {                                                   // 259
  if (callbacks.addedAt && callbacks.added) throw new Error("Please specify only one of added() and addedAt()");       // 260
  if (callbacks.changedAt && callbacks.changed) throw new Error("Please specify only one of changed() and changedAt()");
  if (callbacks.removed && callbacks.removedAt) throw new Error("Please specify only one of removed() and removedAt()");
  return !!(callbacks.addedAt || callbacks.movedTo || callbacks.changedAt || callbacks.removedAt);                     // 267
}; // the handle that comes back from observe.                                                                         // 269
                                                                                                                       //
                                                                                                                       //
LocalCollection.ObserveHandle = function () {}; // options to contain:                                                 // 272
//  * callbacks for observe():                                                                                         // 275
//    - addedAt (document, atIndex)                                                                                    // 276
//    - added (document)                                                                                               // 277
//    - changedAt (newDocument, oldDocument, atIndex)                                                                  // 278
//    - changed (newDocument, oldDocument)                                                                             // 279
//    - removedAt (document, atIndex)                                                                                  // 280
//    - removed (document)                                                                                             // 281
//    - movedTo (document, oldIndex, newIndex)                                                                         // 282
//                                                                                                                     // 283
// attributes available on returned query handle:                                                                      // 284
//  * stop(): end updates                                                                                              // 285
//  * collection: the collection this query is querying                                                                // 286
//                                                                                                                     // 287
// iff x is a returned query handle, (x instanceof                                                                     // 288
// LocalCollection.ObserveHandle) is true                                                                              // 289
//                                                                                                                     // 290
// initial results delivered through added callback                                                                    // 291
// XXX maybe callbacks should take a list of objects, to expose transactions?                                          // 292
// XXX maybe support field limiting (to limit what you're notified on)                                                 // 293
                                                                                                                       //
                                                                                                                       //
_.extend(LocalCollection.Cursor.prototype, {                                                                           // 295
  /**                                                                                                                  // 296
   * @summary Watch a query.  Receive callbacks as the result set changes.                                             //
   * @locus Anywhere                                                                                                   //
   * @memberOf Mongo.Cursor                                                                                            //
   * @instance                                                                                                         //
   * @param {Object} callbacks Functions to call to deliver the result set as it changes                               //
   */observe: function (options) {                                                                                     //
    var self = this;                                                                                                   // 304
    return LocalCollection._observeFromObserveChanges(self, options);                                                  // 305
  },                                                                                                                   // 306
  /**                                                                                                                  // 308
   * @summary Watch a query.  Receive callbacks as the result set changes.  Only the differences between the old and new documents are passed to the callbacks.
   * @locus Anywhere                                                                                                   //
   * @memberOf Mongo.Cursor                                                                                            //
   * @instance                                                                                                         //
   * @param {Object} callbacks Functions to call to deliver the result set as it changes                               //
   */observeChanges: function (options) {                                                                              //
    var self = this;                                                                                                   // 316
                                                                                                                       //
    var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
    // unordered observe.  eg, update's EJSON.clone, and the "there are several"                                       // 321
    // comment in _modifyAndNotify                                                                                     // 322
    // XXX allow skip/limit with unordered observe                                                                     // 323
                                                                                                                       //
                                                                                                                       //
    if (!options._allow_unordered && !ordered && (self.skip || self.limit)) throw new Error("must use ordered observe (ie, 'addedBefore' instead of 'added') with skip or limit");
    if (self.fields && (self.fields._id === 0 || self.fields._id === false)) throw Error("You may not observe a cursor with {fields: {_id: 0}}");
    var query = {                                                                                                      // 330
      dirty: false,                                                                                                    // 331
      matcher: self.matcher,                                                                                           // 332
      // not fast pathed                                                                                               // 332
      sorter: ordered && self.sorter,                                                                                  // 333
      distances: self.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap(),                                // 334
      resultsSnapshot: null,                                                                                           // 336
      ordered: ordered,                                                                                                // 337
      cursor: self,                                                                                                    // 338
      projectionFn: self._projectionFn                                                                                 // 339
    };                                                                                                                 // 330
    var qid; // Non-reactive queries call added[Before] and then never call anything                                   // 341
    // else.                                                                                                           // 344
                                                                                                                       //
    if (self.reactive) {                                                                                               // 345
      qid = self.collection.next_qid++;                                                                                // 346
      self.collection.queries[qid] = query;                                                                            // 347
    }                                                                                                                  // 348
                                                                                                                       //
    query.results = self._getRawObjects({                                                                              // 349
      ordered: ordered,                                                                                                // 350
      distances: query.distances                                                                                       // 350
    });                                                                                                                // 349
    if (self.collection.paused) query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap(); // wrap callbacks we were passed. callbacks only fire when not paused and
    // are never undefined                                                                                             // 355
    // Filters out blacklisted fields according to cursor's projection.                                                // 356
    // XXX wrong place for this?                                                                                       // 357
    // furthermore, callbacks enqueue until the operation we're working on is                                          // 359
    // done.                                                                                                           // 360
                                                                                                                       //
    var wrapCallback = function (f) {                                                                                  // 361
      if (!f) return function () {};                                                                                   // 362
      return function () /*args*/{                                                                                     // 364
        var context = this;                                                                                            // 365
        var args = arguments;                                                                                          // 366
        if (self.collection.paused) return;                                                                            // 368
                                                                                                                       //
        self.collection._observeQueue.queueTask(function () {                                                          // 371
          f.apply(context, args);                                                                                      // 372
        });                                                                                                            // 373
      };                                                                                                               // 374
    };                                                                                                                 // 375
                                                                                                                       //
    query.added = wrapCallback(options.added);                                                                         // 376
    query.changed = wrapCallback(options.changed);                                                                     // 377
    query.removed = wrapCallback(options.removed);                                                                     // 378
                                                                                                                       //
    if (ordered) {                                                                                                     // 379
      query.addedBefore = wrapCallback(options.addedBefore);                                                           // 380
      query.movedBefore = wrapCallback(options.movedBefore);                                                           // 381
    }                                                                                                                  // 382
                                                                                                                       //
    if (!options._suppress_initial && !self.collection.paused) {                                                       // 384
      // XXX unify ordered and unordered interface                                                                     // 385
      var each = ordered ? _.bind(_.each, null, query.results) : _.bind(query.results.forEach, query.results);         // 386
      each(function (doc) {                                                                                            // 389
        var fields = EJSON.clone(doc);                                                                                 // 390
        delete fields._id;                                                                                             // 392
        if (ordered) query.addedBefore(doc._id, self._projectionFn(fields), null);                                     // 393
        query.added(doc._id, self._projectionFn(fields));                                                              // 395
      });                                                                                                              // 396
    }                                                                                                                  // 397
                                                                                                                       //
    var handle = new LocalCollection.ObserveHandle();                                                                  // 399
                                                                                                                       //
    _.extend(handle, {                                                                                                 // 400
      collection: self.collection,                                                                                     // 401
      stop: function () {                                                                                              // 402
        if (self.reactive) delete self.collection.queries[qid];                                                        // 403
      }                                                                                                                // 405
    });                                                                                                                // 400
                                                                                                                       //
    if (self.reactive && Tracker.active) {                                                                             // 408
      // XXX in many cases, the same observe will be recreated when                                                    // 409
      // the current autorun is rerun.  we could save work by                                                          // 410
      // letting it linger across rerun and potentially get                                                            // 411
      // repurposed if the same observe is performed, using logic                                                      // 412
      // similar to that of Meteor.subscribe.                                                                          // 413
      Tracker.onInvalidate(function () {                                                                               // 414
        handle.stop();                                                                                                 // 415
      });                                                                                                              // 416
    } // run the observe callbacks resulting from the initial contents                                                 // 417
    // before we leave the observe.                                                                                    // 419
                                                                                                                       //
                                                                                                                       //
    self.collection._observeQueue.drain();                                                                             // 420
                                                                                                                       //
    return handle;                                                                                                     // 422
  }                                                                                                                    // 423
}); // Returns a collection of matching objects, but doesn't deep copy them.                                           // 295
//                                                                                                                     // 427
// If ordered is set, returns a sorted array, respecting sorter, skip, and limit                                       // 428
// properties of the query.  if sorter is falsey, no sort -- you get the natural                                       // 429
// order.                                                                                                              // 430
//                                                                                                                     // 431
// If ordered is not set, returns an object mapping from ID to doc (sorter, skip                                       // 432
// and limit should not be set).                                                                                       // 433
//                                                                                                                     // 434
// If ordered is set and this cursor is a $near geoquery, then this function                                           // 435
// will use an _IdMap to track each distance from the $near argument point in                                          // 436
// order to use it as a sort key. If an _IdMap is passed in the 'distances'                                            // 437
// argument, this function will clear it and use it for this purpose (otherwise                                        // 438
// it will just create its own _IdMap). The observeChanges implementation uses                                         // 439
// this to remember the distances after this function returns.                                                         // 440
                                                                                                                       //
                                                                                                                       //
LocalCollection.Cursor.prototype._getRawObjects = function (options) {                                                 // 441
  var self = this;                                                                                                     // 442
  options = options || {}; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict                     // 443
  // compatible                                                                                                        // 446
                                                                                                                       //
  var results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value                  // 447
                                                                                                                       //
  if (self._selectorId !== undefined) {                                                                                // 450
    // If you have non-zero skip and ask for a single id, you get                                                      // 451
    // nothing. This is so it matches the behavior of the '{_id: foo}'                                                 // 452
    // path.                                                                                                           // 453
    if (self.skip) return results;                                                                                     // 454
                                                                                                                       //
    var selectedDoc = self.collection._docs.get(self._selectorId);                                                     // 457
                                                                                                                       //
    if (selectedDoc) {                                                                                                 // 458
      if (options.ordered) results.push(selectedDoc);else results.set(self._selectorId, selectedDoc);                  // 459
    }                                                                                                                  // 463
                                                                                                                       //
    return results;                                                                                                    // 464
  } // slow path for arbitrary selector, sort, skip, limit                                                             // 465
  // in the observeChanges case, distances is actually part of the "query" (ie,                                        // 469
  // live results set) object.  in other cases, distances is only used inside                                          // 470
  // this function.                                                                                                    // 471
                                                                                                                       //
                                                                                                                       //
  var distances;                                                                                                       // 472
                                                                                                                       //
  if (self.matcher.hasGeoQuery() && options.ordered) {                                                                 // 473
    if (options.distances) {                                                                                           // 474
      distances = options.distances;                                                                                   // 475
      distances.clear();                                                                                               // 476
    } else {                                                                                                           // 477
      distances = new LocalCollection._IdMap();                                                                        // 478
    }                                                                                                                  // 479
  }                                                                                                                    // 480
                                                                                                                       //
  self.collection._docs.forEach(function (doc, id) {                                                                   // 482
    var matchResult = self.matcher.documentMatches(doc);                                                               // 483
                                                                                                                       //
    if (matchResult.result) {                                                                                          // 484
      if (options.ordered) {                                                                                           // 485
        results.push(doc);                                                                                             // 486
        if (distances && matchResult.distance !== undefined) distances.set(id, matchResult.distance);                  // 487
      } else {                                                                                                         // 489
        results.set(id, doc);                                                                                          // 490
      }                                                                                                                // 491
    } // Fast path for limited unsorted queries.                                                                       // 492
    // XXX 'length' check here seems wrong for ordered                                                                 // 494
                                                                                                                       //
                                                                                                                       //
    if (self.limit && !self.skip && !self.sorter && results.length === self.limit) return false; // break              // 495
                                                                                                                       //
    return true; // continue                                                                                           // 498
  });                                                                                                                  // 499
                                                                                                                       //
  if (!options.ordered) return results;                                                                                // 501
                                                                                                                       //
  if (self.sorter) {                                                                                                   // 504
    var comparator = self.sorter.getComparator({                                                                       // 505
      distances: distances                                                                                             // 505
    });                                                                                                                // 505
    results.sort(comparator);                                                                                          // 506
  }                                                                                                                    // 507
                                                                                                                       //
  var idx_start = self.skip || 0;                                                                                      // 509
  var idx_end = self.limit ? self.limit + idx_start : results.length;                                                  // 510
  return results.slice(idx_start, idx_end);                                                                            // 511
}; // XXX Maybe we need a version of observe that just calls a callback if                                             // 512
// anything changed.                                                                                                   // 515
                                                                                                                       //
                                                                                                                       //
LocalCollection.Cursor.prototype._depend = function (changers, _allow_unordered) {                                     // 516
  var self = this;                                                                                                     // 517
                                                                                                                       //
  if (Tracker.active) {                                                                                                // 519
    var v = new Tracker.Dependency();                                                                                  // 520
    v.depend();                                                                                                        // 521
                                                                                                                       //
    var notifyChange = _.bind(v.changed, v);                                                                           // 522
                                                                                                                       //
    var options = {                                                                                                    // 524
      _suppress_initial: true,                                                                                         // 525
      _allow_unordered: _allow_unordered                                                                               // 526
    };                                                                                                                 // 524
                                                                                                                       //
    _.each(['added', 'changed', 'removed', 'addedBefore', 'movedBefore'], function (fnName) {                          // 528
      if (changers[fnName]) options[fnName] = notifyChange;                                                            // 530
    }); // observeChanges will stop() when this computation is invalidated                                             // 532
                                                                                                                       //
                                                                                                                       //
    self.observeChanges(options);                                                                                      // 535
  }                                                                                                                    // 536
}; // XXX enforce rule that field names can't start with '$' or contain '.'                                            // 537
// (real mongodb does in fact enforce this)                                                                            // 540
// XXX possibly enforce that 'undefined' does not appear (we assume                                                    // 541
// this in our handling of null and $exists)                                                                           // 542
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.insert = function (doc, callback) {                                                          // 543
  var self = this;                                                                                                     // 544
  doc = EJSON.clone(doc); // Make sure field names do not contain Mongo restricted                                     // 545
  // characters ('.', '$', '\0').                                                                                      // 548
  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                     // 549
                                                                                                                       //
  if (doc) {                                                                                                           // 550
    (function () {                                                                                                     // 550
      var invalidCharMsg = {                                                                                           // 551
        '.': "contain '.'",                                                                                            // 552
        '$': "start with '$'",                                                                                         // 553
        '\0': "contain null bytes"                                                                                     // 554
      };                                                                                                               // 551
      JSON.stringify(doc, function (key, value) {                                                                      // 556
        var match = void 0;                                                                                            // 557
                                                                                                                       //
        if (_.isString(key) && (match = key.match(/^\$|\.|\0/))) {                                                     // 558
          throw MinimongoError("Key " + key + " must not " + invalidCharMsg[match[0]]);                                // 559
        }                                                                                                              // 560
                                                                                                                       //
        return value;                                                                                                  // 561
      });                                                                                                              // 562
    })();                                                                                                              // 550
  }                                                                                                                    // 563
                                                                                                                       //
  if (!_.has(doc, '_id')) {                                                                                            // 565
    // if you really want to use ObjectIDs, set this global.                                                           // 566
    // Mongo.Collection specifies its own ids and does not use this code.                                              // 567
    doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();                                          // 568
  }                                                                                                                    // 570
                                                                                                                       //
  var id = doc._id;                                                                                                    // 571
  if (self._docs.has(id)) throw MinimongoError("Duplicate _id '" + id + "'");                                          // 573
                                                                                                                       //
  self._saveOriginal(id, undefined);                                                                                   // 576
                                                                                                                       //
  self._docs.set(id, doc);                                                                                             // 577
                                                                                                                       //
  var queriesToRecompute = []; // trigger live queries that match                                                      // 579
                                                                                                                       //
  for (var qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {                                              // 581
    var query = self.queries[qid];                                                                                     // 582
    if (query.dirty) continue;                                                                                         // 583
    var matchResult = query.matcher.documentMatches(doc);                                                              // 584
                                                                                                                       //
    if (matchResult.result) {                                                                                          // 585
      if (query.distances && matchResult.distance !== undefined) query.distances.set(id, matchResult.distance);        // 586
      if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else LocalCollection._insertInResults(query, doc);
    }                                                                                                                  // 592
  }                                                                                                                    // 593
                                                                                                                       //
  _.each(queriesToRecompute, function (qid) {                                                                          // 595
    if (self.queries[qid]) self._recomputeResults(self.queries[qid]);                                                  // 596
  });                                                                                                                  // 598
                                                                                                                       //
  self._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run                 // 599
  // immediately.                                                                                                      // 602
                                                                                                                       //
                                                                                                                       //
  if (callback) Meteor.defer(function () {                                                                             // 603
    callback(null, id);                                                                                                // 605
  });                                                                                                                  // 606
  return id;                                                                                                           // 607
}; // Iterates over a subset of documents that could match selector; calls                                             // 608
// f(doc, id) on each of them.  Specifically, if selector specifies                                                    // 611
// specific _id's, it only looks at those.  doc is *not* cloned: it is the                                             // 612
// same object that is in _docs.                                                                                       // 613
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype._eachPossiblyMatchingDoc = function (selector, f) {                                          // 614
  var self = this;                                                                                                     // 615
                                                                                                                       //
  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                                   // 616
                                                                                                                       //
  if (specificIds) {                                                                                                   // 617
    for (var i = 0; i < specificIds.length; ++i) {                                                                     // 618
      var id = specificIds[i];                                                                                         // 619
                                                                                                                       //
      var doc = self._docs.get(id);                                                                                    // 620
                                                                                                                       //
      if (doc) {                                                                                                       // 621
        var breakIfFalse = f(doc, id);                                                                                 // 622
        if (breakIfFalse === false) break;                                                                             // 623
      }                                                                                                                // 625
    }                                                                                                                  // 626
  } else {                                                                                                             // 627
    self._docs.forEach(f);                                                                                             // 628
  }                                                                                                                    // 629
};                                                                                                                     // 630
                                                                                                                       //
LocalCollection.prototype.remove = function (selector, callback) {                                                     // 632
  var self = this; // Easy special case: if we're not calling observeChanges callbacks and we're                       // 633
  // not saving originals and we got asked to remove everything, then just empty                                       // 636
  // everything directly.                                                                                              // 637
                                                                                                                       //
  if (self.paused && !self._savedOriginals && EJSON.equals(selector, {})) {                                            // 638
    var result = self._docs.size();                                                                                    // 639
                                                                                                                       //
    self._docs.clear();                                                                                                // 640
                                                                                                                       //
    _.each(self.queries, function (query) {                                                                            // 641
      if (query.ordered) {                                                                                             // 642
        query.results = [];                                                                                            // 643
      } else {                                                                                                         // 644
        query.results.clear();                                                                                         // 645
      }                                                                                                                // 646
    });                                                                                                                // 647
                                                                                                                       //
    if (callback) {                                                                                                    // 648
      Meteor.defer(function () {                                                                                       // 649
        callback(null, result);                                                                                        // 650
      });                                                                                                              // 651
    }                                                                                                                  // 652
                                                                                                                       //
    return result;                                                                                                     // 653
  }                                                                                                                    // 654
                                                                                                                       //
  var matcher = new Minimongo.Matcher(selector);                                                                       // 656
  var remove = [];                                                                                                     // 657
                                                                                                                       //
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                         // 658
    if (matcher.documentMatches(doc).result) remove.push(id);                                                          // 659
  });                                                                                                                  // 661
                                                                                                                       //
  var queriesToRecompute = [];                                                                                         // 663
  var queryRemove = [];                                                                                                // 664
                                                                                                                       //
  for (var i = 0; i < remove.length; i++) {                                                                            // 665
    var removeId = remove[i];                                                                                          // 666
                                                                                                                       //
    var removeDoc = self._docs.get(removeId);                                                                          // 667
                                                                                                                       //
    _.each(self.queries, function (query, qid) {                                                                       // 668
      if (query.dirty) return;                                                                                         // 669
                                                                                                                       //
      if (query.matcher.documentMatches(removeDoc).result) {                                                           // 671
        if (query.cursor.skip || query.cursor.limit) queriesToRecompute.push(qid);else queryRemove.push({              // 672
          qid: qid,                                                                                                    // 675
          doc: removeDoc                                                                                               // 675
        });                                                                                                            // 675
      }                                                                                                                // 676
    });                                                                                                                // 677
                                                                                                                       //
    self._saveOriginal(removeId, removeDoc);                                                                           // 678
                                                                                                                       //
    self._docs.remove(removeId);                                                                                       // 679
  } // run live query callbacks _after_ we've removed the documents.                                                   // 680
                                                                                                                       //
                                                                                                                       //
  _.each(queryRemove, function (remove) {                                                                              // 683
    var query = self.queries[remove.qid];                                                                              // 684
                                                                                                                       //
    if (query) {                                                                                                       // 685
      query.distances && query.distances.remove(remove.doc._id);                                                       // 686
                                                                                                                       //
      LocalCollection._removeFromResults(query, remove.doc);                                                           // 687
    }                                                                                                                  // 688
  });                                                                                                                  // 689
                                                                                                                       //
  _.each(queriesToRecompute, function (qid) {                                                                          // 690
    var query = self.queries[qid];                                                                                     // 691
    if (query) self._recomputeResults(query);                                                                          // 692
  });                                                                                                                  // 694
                                                                                                                       //
  self._observeQueue.drain();                                                                                          // 695
                                                                                                                       //
  result = remove.length;                                                                                              // 696
  if (callback) Meteor.defer(function () {                                                                             // 697
    callback(null, result);                                                                                            // 699
  });                                                                                                                  // 700
  return result;                                                                                                       // 701
}; // XXX atomicity: if multi is true, and one modification fails, do                                                  // 702
// we rollback the whole operation, or what?                                                                           // 705
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.update = function (selector, mod, options, callback) {                                       // 706
  var self = this;                                                                                                     // 707
                                                                                                                       //
  if (!callback && options instanceof Function) {                                                                      // 708
    callback = options;                                                                                                // 709
    options = null;                                                                                                    // 710
  }                                                                                                                    // 711
                                                                                                                       //
  if (!options) options = {};                                                                                          // 712
  var matcher = new Minimongo.Matcher(selector); // Save the original results of any query that we might need to       // 714
  // _recomputeResults on, because _modifyAndNotify will mutate the objects in                                         // 717
  // it. (We don't need to save the original results of paused queries because                                         // 718
  // they already have a resultsSnapshot and we won't be diffing in                                                    // 719
  // _recomputeResults.)                                                                                               // 720
                                                                                                                       //
  var qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple queries    // 721
                                                                                                                       //
  var docMap = new LocalCollection._IdMap();                                                                           // 723
                                                                                                                       //
  var idsMatchedBySelector = LocalCollection._idsMatchedBySelector(selector);                                          // 724
                                                                                                                       //
  _.each(self.queries, function (query, qid) {                                                                         // 726
    if ((query.cursor.skip || query.cursor.limit) && !self.paused) {                                                   // 727
      // Catch the case of a reactive `count()` on a cursor with skip                                                  // 728
      // or limit, which registers an unordered observe. This is a                                                     // 729
      // pretty rare case, so we just clone the entire result set with                                                 // 730
      // no optimizations for documents that appear in these result                                                    // 731
      // sets and other queries.                                                                                       // 732
      if (query.results instanceof LocalCollection._IdMap) {                                                           // 733
        qidToOriginalResults[qid] = query.results.clone();                                                             // 734
        return;                                                                                                        // 735
      }                                                                                                                // 736
                                                                                                                       //
      if (!(query.results instanceof Array)) {                                                                         // 738
        throw new Error("Assertion failed: query.results not an array");                                               // 739
      } // Clones a document to be stored in `qidToOriginalResults`                                                    // 740
      // because it may be modified before the new and old result sets                                                 // 743
      // are diffed. But if we know exactly which document IDs we're                                                   // 744
      // going to modify, then we only need to clone those.                                                            // 745
                                                                                                                       //
                                                                                                                       //
      var memoizedCloneIfNeeded = function (doc) {                                                                     // 746
        if (docMap.has(doc._id)) {                                                                                     // 747
          return docMap.get(doc._id);                                                                                  // 748
        } else {                                                                                                       // 749
          var docToMemoize;                                                                                            // 750
                                                                                                                       //
          if (idsMatchedBySelector && !_.any(idsMatchedBySelector, function (id) {                                     // 752
            return EJSON.equals(id, doc._id);                                                                          // 753
          })) {                                                                                                        // 754
            docToMemoize = doc;                                                                                        // 755
          } else {                                                                                                     // 756
            docToMemoize = EJSON.clone(doc);                                                                           // 757
          }                                                                                                            // 758
                                                                                                                       //
          docMap.set(doc._id, docToMemoize);                                                                           // 760
          return docToMemoize;                                                                                         // 761
        }                                                                                                              // 762
      };                                                                                                               // 763
                                                                                                                       //
      qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);                                            // 765
    }                                                                                                                  // 766
  });                                                                                                                  // 767
                                                                                                                       //
  var recomputeQids = {};                                                                                              // 768
  var updateCount = 0;                                                                                                 // 770
                                                                                                                       //
  self._eachPossiblyMatchingDoc(selector, function (doc, id) {                                                         // 772
    var queryResult = matcher.documentMatches(doc);                                                                    // 773
                                                                                                                       //
    if (queryResult.result) {                                                                                          // 774
      // XXX Should we save the original even if mod ends up being a no-op?                                            // 775
      self._saveOriginal(id, doc);                                                                                     // 776
                                                                                                                       //
      self._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);                                        // 777
                                                                                                                       //
      ++updateCount;                                                                                                   // 778
      if (!options.multi) return false; // break                                                                       // 779
    }                                                                                                                  // 781
                                                                                                                       //
    return true;                                                                                                       // 782
  });                                                                                                                  // 783
                                                                                                                       //
  _.each(recomputeQids, function (dummy, qid) {                                                                        // 785
    var query = self.queries[qid];                                                                                     // 786
    if (query) self._recomputeResults(query, qidToOriginalResults[qid]);                                               // 787
  });                                                                                                                  // 789
                                                                                                                       //
  self._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then               // 790
  // it's time to do an insert. Figure out what document we are inserting, and                                         // 793
  // generate an id for it.                                                                                            // 794
                                                                                                                       //
                                                                                                                       //
  var insertedId;                                                                                                      // 795
                                                                                                                       //
  if (updateCount === 0 && options.upsert) {                                                                           // 796
    var newDoc = LocalCollection._removeDollarOperators(selector);                                                     // 797
                                                                                                                       //
    LocalCollection._modify(newDoc, mod, {                                                                             // 798
      isInsert: true                                                                                                   // 798
    });                                                                                                                // 798
                                                                                                                       //
    if (!newDoc._id && options.insertedId) newDoc._id = options.insertedId;                                            // 799
    insertedId = self.insert(newDoc);                                                                                  // 801
    updateCount = 1;                                                                                                   // 802
  } // Return the number of affected documents, or in the upsert case, an object                                       // 803
  // containing the number of affected docs and the id of the doc that was                                             // 806
  // inserted, if any.                                                                                                 // 807
                                                                                                                       //
                                                                                                                       //
  var result;                                                                                                          // 808
                                                                                                                       //
  if (options._returnObject) {                                                                                         // 809
    result = {                                                                                                         // 810
      numberAffected: updateCount                                                                                      // 811
    };                                                                                                                 // 810
    if (insertedId !== undefined) result.insertedId = insertedId;                                                      // 813
  } else {                                                                                                             // 815
    result = updateCount;                                                                                              // 816
  }                                                                                                                    // 817
                                                                                                                       //
  if (callback) Meteor.defer(function () {                                                                             // 819
    callback(null, result);                                                                                            // 821
  });                                                                                                                  // 822
  return result;                                                                                                       // 823
}; // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is                                             // 824
// equivalent to LocalCollection.update(sel, mod, { upsert: true, _returnObject:                                       // 827
// true }).                                                                                                            // 828
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.upsert = function (selector, mod, options, callback) {                                       // 829
  var self = this;                                                                                                     // 830
                                                                                                                       //
  if (!callback && typeof options === "function") {                                                                    // 831
    callback = options;                                                                                                // 832
    options = {};                                                                                                      // 833
  }                                                                                                                    // 834
                                                                                                                       //
  return self.update(selector, mod, _.extend({}, options, {                                                            // 835
    upsert: true,                                                                                                      // 836
    _returnObject: true                                                                                                // 837
  }), callback);                                                                                                       // 835
};                                                                                                                     // 839
                                                                                                                       //
LocalCollection.prototype._modifyAndNotify = function (doc, mod, recomputeQids, arrayIndices) {                        // 841
  var self = this;                                                                                                     // 843
  var matched_before = {};                                                                                             // 845
                                                                                                                       //
  for (var qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {                                              // 846
    var query = self.queries[qid];                                                                                     // 847
    if (query.dirty) continue;                                                                                         // 848
                                                                                                                       //
    if (query.ordered) {                                                                                               // 850
      matched_before[qid] = query.matcher.documentMatches(doc).result;                                                 // 851
    } else {                                                                                                           // 852
      // Because we don't support skip or limit (yet) in unordered queries, we                                         // 853
      // can just do a direct lookup.                                                                                  // 854
      matched_before[qid] = query.results.has(doc._id);                                                                // 855
    }                                                                                                                  // 856
  }                                                                                                                    // 857
                                                                                                                       //
  var old_doc = EJSON.clone(doc);                                                                                      // 859
                                                                                                                       //
  LocalCollection._modify(doc, mod, {                                                                                  // 861
    arrayIndices: arrayIndices                                                                                         // 861
  });                                                                                                                  // 861
                                                                                                                       //
  for (qid in meteorBabelHelpers.sanitizeForInObject(self.queries)) {                                                  // 863
    query = self.queries[qid];                                                                                         // 864
    if (query.dirty) continue;                                                                                         // 865
    var before = matched_before[qid];                                                                                  // 867
    var afterMatch = query.matcher.documentMatches(doc);                                                               // 868
    var after = afterMatch.result;                                                                                     // 869
    if (after && query.distances && afterMatch.distance !== undefined) query.distances.set(doc._id, afterMatch.distance);
                                                                                                                       //
    if (query.cursor.skip || query.cursor.limit) {                                                                     // 873
      // We need to recompute any query where the doc may have been in the                                             // 874
      // cursor's window either before or after the update. (Note that if skip                                         // 875
      // or limit is set, "before" and "after" being true do not necessarily                                           // 876
      // mean that the document is in the cursor's output after skip/limit is                                          // 877
      // applied... but if they are false, then the document definitely is NOT                                         // 878
      // in the output. So it's safe to skip recompute if neither before or                                            // 879
      // after are true.)                                                                                              // 880
      if (before || after) recomputeQids[qid] = true;                                                                  // 881
    } else if (before && !after) {                                                                                     // 883
      LocalCollection._removeFromResults(query, doc);                                                                  // 884
    } else if (!before && after) {                                                                                     // 885
      LocalCollection._insertInResults(query, doc);                                                                    // 886
    } else if (before && after) {                                                                                      // 887
      LocalCollection._updateInResults(query, doc, old_doc);                                                           // 888
    }                                                                                                                  // 889
  }                                                                                                                    // 890
}; // XXX the sorted-query logic below is laughably inefficient. we'll                                                 // 891
// need to come up with a better datastructure for this.                                                               // 894
//                                                                                                                     // 895
// XXX the logic for observing with a skip or a limit is even more                                                     // 896
// laughably inefficient. we recompute the whole results every time!                                                   // 897
                                                                                                                       //
                                                                                                                       //
LocalCollection._insertInResults = function (query, doc) {                                                             // 899
  var fields = EJSON.clone(doc);                                                                                       // 900
  delete fields._id;                                                                                                   // 901
                                                                                                                       //
  if (query.ordered) {                                                                                                 // 902
    if (!query.sorter) {                                                                                               // 903
      query.addedBefore(doc._id, query.projectionFn(fields), null);                                                    // 904
      query.results.push(doc);                                                                                         // 905
    } else {                                                                                                           // 906
      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({                                         // 907
        distances: query.distances                                                                                     // 908
      }), query.results, doc);                                                                                         // 908
                                                                                                                       //
      var next = query.results[i + 1];                                                                                 // 910
      if (next) next = next._id;else next = null;                                                                      // 911
      query.addedBefore(doc._id, query.projectionFn(fields), next);                                                    // 915
    }                                                                                                                  // 916
                                                                                                                       //
    query.added(doc._id, query.projectionFn(fields));                                                                  // 917
  } else {                                                                                                             // 918
    query.added(doc._id, query.projectionFn(fields));                                                                  // 919
    query.results.set(doc._id, doc);                                                                                   // 920
  }                                                                                                                    // 921
};                                                                                                                     // 922
                                                                                                                       //
LocalCollection._removeFromResults = function (query, doc) {                                                           // 924
  if (query.ordered) {                                                                                                 // 925
    var i = LocalCollection._findInOrderedResults(query, doc);                                                         // 926
                                                                                                                       //
    query.removed(doc._id);                                                                                            // 927
    query.results.splice(i, 1);                                                                                        // 928
  } else {                                                                                                             // 929
    var id = doc._id; // in case callback mutates doc                                                                  // 930
                                                                                                                       //
    query.removed(doc._id);                                                                                            // 931
    query.results.remove(id);                                                                                          // 932
  }                                                                                                                    // 933
};                                                                                                                     // 934
                                                                                                                       //
LocalCollection._updateInResults = function (query, doc, old_doc) {                                                    // 936
  if (!EJSON.equals(doc._id, old_doc._id)) throw new Error("Can't change a doc's _id while updating");                 // 937
  var projectionFn = query.projectionFn;                                                                               // 939
  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));                        // 940
                                                                                                                       //
  if (!query.ordered) {                                                                                                // 943
    if (!_.isEmpty(changedFields)) {                                                                                   // 944
      query.changed(doc._id, changedFields);                                                                           // 945
      query.results.set(doc._id, doc);                                                                                 // 946
    }                                                                                                                  // 947
                                                                                                                       //
    return;                                                                                                            // 948
  }                                                                                                                    // 949
                                                                                                                       //
  var orig_idx = LocalCollection._findInOrderedResults(query, doc);                                                    // 951
                                                                                                                       //
  if (!_.isEmpty(changedFields)) query.changed(doc._id, changedFields);                                                // 953
  if (!query.sorter) return; // just take it out and put it back in again, and see if the index                        // 955
  // changes                                                                                                           // 959
                                                                                                                       //
  query.results.splice(orig_idx, 1);                                                                                   // 960
                                                                                                                       //
  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({                                       // 961
    distances: query.distances                                                                                         // 962
  }), query.results, doc);                                                                                             // 962
                                                                                                                       //
  if (orig_idx !== new_idx) {                                                                                          // 964
    var next = query.results[new_idx + 1];                                                                             // 965
    if (next) next = next._id;else next = null;                                                                        // 966
    query.movedBefore && query.movedBefore(doc._id, next);                                                             // 970
  }                                                                                                                    // 971
}; // Recomputes the results of a query and runs observe callbacks for the                                             // 972
// difference between the previous results and the current results (unless                                             // 975
// paused). Used for skip/limit queries.                                                                               // 976
//                                                                                                                     // 977
// When this is used by insert or remove, it can just use query.results for the                                        // 978
// old results (and there's no need to pass in oldResults), because these                                              // 979
// operations don't mutate the documents in the collection. Update needs to pass                                       // 980
// in an oldResults which was deep-copied before the modifier was applied.                                             // 981
//                                                                                                                     // 982
// oldResults is guaranteed to be ignored if the query is not paused.                                                  // 983
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype._recomputeResults = function (query, oldResults) {                                           // 984
  var self = this;                                                                                                     // 985
                                                                                                                       //
  if (self.paused) {                                                                                                   // 986
    // There's no reason to recompute the results now as we're still paused.                                           // 987
    // By flagging the query as "dirty", the recompute will be performed                                               // 988
    // when resumeObservers is called.                                                                                 // 989
    query.dirty = true;                                                                                                // 990
    return;                                                                                                            // 991
  }                                                                                                                    // 992
                                                                                                                       //
  if (!self.paused && !oldResults) oldResults = query.results;                                                         // 994
  if (query.distances) query.distances.clear();                                                                        // 996
  query.results = query.cursor._getRawObjects({                                                                        // 998
    ordered: query.ordered,                                                                                            // 999
    distances: query.distances                                                                                         // 999
  });                                                                                                                  // 998
                                                                                                                       //
  if (!self.paused) {                                                                                                  // 1001
    LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {                               // 1002
      projectionFn: query.projectionFn                                                                                 // 1004
    });                                                                                                                // 1004
  }                                                                                                                    // 1005
};                                                                                                                     // 1006
                                                                                                                       //
LocalCollection._findInOrderedResults = function (query, doc) {                                                        // 1009
  if (!query.ordered) throw new Error("Can't call _findInOrderedResults on unordered query");                          // 1010
                                                                                                                       //
  for (var i = 0; i < query.results.length; i++) {                                                                     // 1012
    if (query.results[i] === doc) return i;                                                                            // 1013
  }                                                                                                                    // 1012
                                                                                                                       //
  throw Error("object missing from query");                                                                            // 1015
}; // This binary search puts a value between any equal values, and the first                                          // 1016
// lesser value.                                                                                                       // 1019
                                                                                                                       //
                                                                                                                       //
LocalCollection._binarySearch = function (cmp, array, value) {                                                         // 1020
  var first = 0,                                                                                                       // 1021
      rangeLength = array.length;                                                                                      // 1021
                                                                                                                       //
  while (rangeLength > 0) {                                                                                            // 1023
    var halfRange = Math.floor(rangeLength / 2);                                                                       // 1024
                                                                                                                       //
    if (cmp(value, array[first + halfRange]) >= 0) {                                                                   // 1025
      first += halfRange + 1;                                                                                          // 1026
      rangeLength -= halfRange + 1;                                                                                    // 1027
    } else {                                                                                                           // 1028
      rangeLength = halfRange;                                                                                         // 1029
    }                                                                                                                  // 1030
  }                                                                                                                    // 1031
                                                                                                                       //
  return first;                                                                                                        // 1032
};                                                                                                                     // 1033
                                                                                                                       //
LocalCollection._insertInSortedList = function (cmp, array, value) {                                                   // 1035
  if (array.length === 0) {                                                                                            // 1036
    array.push(value);                                                                                                 // 1037
    return 0;                                                                                                          // 1038
  }                                                                                                                    // 1039
                                                                                                                       //
  var idx = LocalCollection._binarySearch(cmp, array, value);                                                          // 1041
                                                                                                                       //
  array.splice(idx, 0, value);                                                                                         // 1042
  return idx;                                                                                                          // 1043
}; // To track what documents are affected by a piece of code, call saveOriginals()                                    // 1044
// before it and retrieveOriginals() after it. retrieveOriginals returns an                                            // 1047
// object whose keys are the ids of the documents that were affected since the                                         // 1048
// call to saveOriginals(), and the values are equal to the document's contents                                        // 1049
// at the time of saveOriginals. (In the case of an inserted document, undefined                                       // 1050
// is the value.) You must alternate between calls to saveOriginals() and                                              // 1051
// retrieveOriginals().                                                                                                // 1052
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.saveOriginals = function () {                                                                // 1053
  var self = this;                                                                                                     // 1054
  if (self._savedOriginals) throw new Error("Called saveOriginals twice without retrieveOriginals");                   // 1055
  self._savedOriginals = new LocalCollection._IdMap();                                                                 // 1057
};                                                                                                                     // 1058
                                                                                                                       //
LocalCollection.prototype.retrieveOriginals = function () {                                                            // 1059
  var self = this;                                                                                                     // 1060
  if (!self._savedOriginals) throw new Error("Called retrieveOriginals without saveOriginals");                        // 1061
  var originals = self._savedOriginals;                                                                                // 1064
  self._savedOriginals = null;                                                                                         // 1065
  return originals;                                                                                                    // 1066
};                                                                                                                     // 1067
                                                                                                                       //
LocalCollection.prototype._saveOriginal = function (id, doc) {                                                         // 1069
  var self = this; // Are we even trying to save originals?                                                            // 1070
                                                                                                                       //
  if (!self._savedOriginals) return; // Have we previously mutated the original (and so 'doc' is not actually          // 1072
  // original)?  (Note the 'has' check rather than truth: we store undefined                                           // 1075
  // here for inserted docs!)                                                                                          // 1076
                                                                                                                       //
  if (self._savedOriginals.has(id)) return;                                                                            // 1077
                                                                                                                       //
  self._savedOriginals.set(id, EJSON.clone(doc));                                                                      // 1079
}; // Pause the observers. No callbacks from observers will fire until                                                 // 1080
// 'resumeObservers' is called.                                                                                        // 1083
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.pauseObservers = function () {                                                               // 1084
  // No-op if already paused.                                                                                          // 1085
  if (this.paused) return; // Set the 'paused' flag such that new observer messages don't fire.                        // 1086
                                                                                                                       //
  this.paused = true; // Take a snapshot of the query results for each query.                                          // 1090
                                                                                                                       //
  for (var qid in meteorBabelHelpers.sanitizeForInObject(this.queries)) {                                              // 1093
    var query = this.queries[qid];                                                                                     // 1094
    query.resultsSnapshot = EJSON.clone(query.results);                                                                // 1096
  }                                                                                                                    // 1097
}; // Resume the observers. Observers immediately receive change                                                       // 1098
// notifications to bring them to the current state of the                                                             // 1101
// database. Note that this is not just replaying all the changes that                                                 // 1102
// happened during the pause, it is a smarter 'coalesced' diff.                                                        // 1103
                                                                                                                       //
                                                                                                                       //
LocalCollection.prototype.resumeObservers = function () {                                                              // 1104
  var self = this; // No-op if not paused.                                                                             // 1105
                                                                                                                       //
  if (!this.paused) return; // Unset the 'paused' flag. Make sure to do this first, otherwise                          // 1107
  // observer methods won't actually fire when we trigger them.                                                        // 1111
                                                                                                                       //
  this.paused = false;                                                                                                 // 1112
                                                                                                                       //
  for (var qid in meteorBabelHelpers.sanitizeForInObject(this.queries)) {                                              // 1114
    var query = self.queries[qid];                                                                                     // 1115
                                                                                                                       //
    if (query.dirty) {                                                                                                 // 1116
      query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges` automatically.       // 1117
                                                                                                                       //
      self._recomputeResults(query, query.resultsSnapshot);                                                            // 1119
    } else {                                                                                                           // 1120
      // Diff the current results against the snapshot and send to observers.                                          // 1121
      // pass the query object for its observer callbacks.                                                             // 1122
      LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {                  // 1123
        projectionFn: query.projectionFn                                                                               // 1125
      });                                                                                                              // 1125
    }                                                                                                                  // 1126
                                                                                                                       //
    query.resultsSnapshot = null;                                                                                      // 1127
  }                                                                                                                    // 1128
                                                                                                                       //
  self._observeQueue.drain();                                                                                          // 1129
};                                                                                                                     // 1130
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"wrap_transform.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/wrap_transform.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Wrap a transform function to return objects that have the _id field                                                 // 1
// of the untransformed document. This ensures that subsystems such as                                                 // 2
// the observe-sequence package that call `observe` can keep track of                                                  // 3
// the documents identities.                                                                                           // 4
//                                                                                                                     // 5
// - Require that it returns objects                                                                                   // 6
// - If the return value has an _id field, verify that it matches the                                                  // 7
//   original _id field                                                                                                // 8
// - If the return value doesn't have an _id field, add it back.                                                       // 9
LocalCollection.wrapTransform = function (transform) {                                                                 // 10
  if (!transform) return null; // No need to doubly-wrap transforms.                                                   // 11
                                                                                                                       //
  if (transform.__wrappedTransform__) return transform;                                                                // 15
                                                                                                                       //
  var wrapped = function (doc) {                                                                                       // 18
    if (!_.has(doc, '_id')) {                                                                                          // 19
      // XXX do we ever have a transform on the oplog's collection? because that                                       // 20
      // collection has no _id.                                                                                        // 21
      throw new Error("can only transform documents with _id");                                                        // 22
    }                                                                                                                  // 23
                                                                                                                       //
    var id = doc._id; // XXX consider making tracker a weak dependency and checking Package.tracker here               // 25
                                                                                                                       //
    var transformed = Tracker.nonreactive(function () {                                                                // 27
      return transform(doc);                                                                                           // 28
    });                                                                                                                // 29
                                                                                                                       //
    if (!isPlainObject(transformed)) {                                                                                 // 31
      throw new Error("transform must return object");                                                                 // 32
    }                                                                                                                  // 33
                                                                                                                       //
    if (_.has(transformed, '_id')) {                                                                                   // 35
      if (!EJSON.equals(transformed._id, id)) {                                                                        // 36
        throw new Error("transformed document can't have different _id");                                              // 37
      }                                                                                                                // 38
    } else {                                                                                                           // 39
      transformed._id = id;                                                                                            // 40
    }                                                                                                                  // 41
                                                                                                                       //
    return transformed;                                                                                                // 42
  };                                                                                                                   // 43
                                                                                                                       //
  wrapped.__wrappedTransform__ = true;                                                                                 // 44
  return wrapped;                                                                                                      // 45
};                                                                                                                     // 46
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"helpers.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/helpers.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Like _.isArray, but doesn't regard polyfilled Uint8Arrays on old browsers as                                        // 1
// arrays.                                                                                                             // 2
// XXX maybe this should be EJSON.isArray                                                                              // 3
isArray = function (x) {                                                                                               // 4
  return _.isArray(x) && !EJSON.isBinary(x);                                                                           // 5
}; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about                                         // 6
// RegExp                                                                                                              // 9
// XXX note that _type(undefined) === 3!!!!                                                                            // 10
                                                                                                                       //
                                                                                                                       //
isPlainObject = LocalCollection._isPlainObject = function (x) {                                                        // 11
  return x && LocalCollection._f._type(x) === 3;                                                                       // 12
};                                                                                                                     // 13
                                                                                                                       //
isIndexable = function (x) {                                                                                           // 15
  return isArray(x) || isPlainObject(x);                                                                               // 16
}; // Returns true if this is an object with at least one key and all keys begin                                       // 17
// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and                                         // 20
// others don't.                                                                                                       // 21
                                                                                                                       //
                                                                                                                       //
isOperatorObject = function (valueSelector, inconsistentOK) {                                                          // 22
  if (!isPlainObject(valueSelector)) return false;                                                                     // 23
  var theseAreOperators = undefined;                                                                                   // 26
                                                                                                                       //
  _.each(valueSelector, function (value, selKey) {                                                                     // 27
    var thisIsOperator = selKey.substr(0, 1) === '$';                                                                  // 28
                                                                                                                       //
    if (theseAreOperators === undefined) {                                                                             // 29
      theseAreOperators = thisIsOperator;                                                                              // 30
    } else if (theseAreOperators !== thisIsOperator) {                                                                 // 31
      if (!inconsistentOK) throw new Error("Inconsistent operator: " + JSON.stringify(valueSelector));                 // 32
      theseAreOperators = false;                                                                                       // 35
    }                                                                                                                  // 36
  });                                                                                                                  // 37
                                                                                                                       //
  return !!theseAreOperators; // {} has no operators                                                                   // 38
}; // string can be converted to integer                                                                               // 39
                                                                                                                       //
                                                                                                                       //
isNumericKey = function (s) {                                                                                          // 43
  return (/^[0-9]+$/.test(s)                                                                                           // 44
  );                                                                                                                   // 44
};                                                                                                                     // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"selector.js":["babel-runtime/helpers/typeof",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/selector.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
// The minimongo selector compiler!                                                                                    // 1
// Terminology:                                                                                                        // 3
//  - a "selector" is the EJSON object representing a selector                                                         // 4
//  - a "matcher" is its compiled form (whether a full Minimongo.Matcher                                               // 5
//    object or one of the component lambdas that matches parts of it)                                                 // 6
//  - a "result object" is an object with a "result" field and maybe                                                   // 7
//    distance and arrayIndices.                                                                                       // 8
//  - a "branched value" is an object with a "value" field and maybe                                                   // 9
//    "dontIterate" and "arrayIndices".                                                                                // 10
//  - a "document" is a top-level object that can be stored in a collection.                                           // 11
//  - a "lookup function" is a function that takes in a document and returns                                           // 12
//    an array of "branched values".                                                                                   // 13
//  - a "branched matcher" maps from an array of branched values to a result                                           // 14
//    object.                                                                                                          // 15
//  - an "element matcher" maps from a single value to a bool.                                                         // 16
// Main entry point.                                                                                                   // 18
//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});                                                               // 19
//   if (matcher.documentMatches({a: 7})) ...                                                                          // 20
Minimongo.Matcher = function (selector) {                                                                              // 21
  var self = this; // A set (object mapping string -> *) of all of the document paths looked                           // 22
  // at by the selector. Also includes the empty string if it may look at any                                          // 24
  // path (eg, $where).                                                                                                // 25
                                                                                                                       //
  self._paths = {}; // Set to true if compilation finds a $near.                                                       // 26
                                                                                                                       //
  self._hasGeoQuery = false; // Set to true if compilation finds a $where.                                             // 28
                                                                                                                       //
  self._hasWhere = false; // Set to false if compilation finds anything other than a simple equality or                // 30
  // one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used with                                       // 32
  // scalars as operands.                                                                                              // 33
                                                                                                                       //
  self._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null                  // 34
  // if such document is too hard to find.                                                                             // 36
                                                                                                                       //
  self._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user       // 37
  // passed in a function; otherwise is definitely an object (eg, IDs are                                              // 39
  // translated into {_id: ID} first. Used by canBecomeTrueByModifier and                                              // 40
  // Sorter._useWithMatcher.                                                                                           // 41
                                                                                                                       //
  self._selector = null;                                                                                               // 42
  self._docMatcher = self._compileSelector(selector);                                                                  // 43
};                                                                                                                     // 44
                                                                                                                       //
_.extend(Minimongo.Matcher.prototype, {                                                                                // 46
  documentMatches: function (doc) {                                                                                    // 47
    if (!doc || (typeof doc === "undefined" ? "undefined" : (0, _typeof3.default)(doc)) !== "object") {                // 48
      throw Error("documentMatches needs a document");                                                                 // 49
    }                                                                                                                  // 50
                                                                                                                       //
    return this._docMatcher(doc);                                                                                      // 51
  },                                                                                                                   // 52
  hasGeoQuery: function () {                                                                                           // 53
    return this._hasGeoQuery;                                                                                          // 54
  },                                                                                                                   // 55
  hasWhere: function () {                                                                                              // 56
    return this._hasWhere;                                                                                             // 57
  },                                                                                                                   // 58
  isSimple: function () {                                                                                              // 59
    return this._isSimple;                                                                                             // 60
  },                                                                                                                   // 61
  // Given a selector, return a function that takes one argument, a                                                    // 63
  // document. It returns a result object.                                                                             // 64
  _compileSelector: function (selector) {                                                                              // 65
    var self = this; // you can pass a literal function instead of a selector                                          // 66
                                                                                                                       //
    if (selector instanceof Function) {                                                                                // 68
      self._isSimple = false;                                                                                          // 69
      self._selector = selector;                                                                                       // 70
                                                                                                                       //
      self._recordPathUsed('');                                                                                        // 71
                                                                                                                       //
      return function (doc) {                                                                                          // 72
        return {                                                                                                       // 73
          result: !!selector.call(doc)                                                                                 // 73
        };                                                                                                             // 73
      };                                                                                                               // 74
    } // shorthand -- scalars match _id                                                                                // 75
                                                                                                                       //
                                                                                                                       //
    if (LocalCollection._selectorIsId(selector)) {                                                                     // 78
      self._selector = {                                                                                               // 79
        _id: selector                                                                                                  // 79
      };                                                                                                               // 79
                                                                                                                       //
      self._recordPathUsed('_id');                                                                                     // 80
                                                                                                                       //
      return function (doc) {                                                                                          // 81
        return {                                                                                                       // 82
          result: EJSON.equals(doc._id, selector)                                                                      // 82
        };                                                                                                             // 82
      };                                                                                                               // 83
    } // protect against dangerous selectors.  falsey and {_id: falsey} are both                                       // 84
    // likely programmer error, and not what you want, particularly for                                                // 87
    // destructive operations.                                                                                         // 88
                                                                                                                       //
                                                                                                                       //
    if (!selector || '_id' in selector && !selector._id) {                                                             // 89
      self._isSimple = false;                                                                                          // 90
      return nothingMatcher;                                                                                           // 91
    } // Top level can't be an array or true or binary.                                                                // 92
                                                                                                                       //
                                                                                                                       //
    if (typeof selector === 'boolean' || isArray(selector) || EJSON.isBinary(selector)) throw new Error("Invalid selector: " + selector);
    self._selector = EJSON.clone(selector);                                                                            // 99
    return compileDocumentSelector(selector, self, {                                                                   // 100
      isRoot: true                                                                                                     // 100
    });                                                                                                                // 100
  },                                                                                                                   // 101
  _recordPathUsed: function (path) {                                                                                   // 102
    this._paths[path] = true;                                                                                          // 103
  },                                                                                                                   // 104
  // Returns a list of key paths the given selector is looking for. It includes                                        // 105
  // the empty string if there is a $where.                                                                            // 106
  _getPaths: function () {                                                                                             // 107
    return _.keys(this._paths);                                                                                        // 108
  }                                                                                                                    // 109
}); // Takes in a selector that could match a full document (eg, the original                                          // 46
// selector). Returns a function mapping document->result object.                                                      // 114
//                                                                                                                     // 115
// matcher is the Matcher object we are compiling.                                                                     // 116
//                                                                                                                     // 117
// If this is the root document selector (ie, not wrapped in $and or the like),                                        // 118
// then isRoot is true. (This is used by $near.)                                                                       // 119
                                                                                                                       //
                                                                                                                       //
var compileDocumentSelector = function (docSelector, matcher, options) {                                               // 120
  options = options || {};                                                                                             // 121
  var docMatchers = [];                                                                                                // 122
                                                                                                                       //
  _.each(docSelector, function (subSelector, key) {                                                                    // 123
    if (key.substr(0, 1) === '$') {                                                                                    // 124
      // Outer operators are either logical operators (they recurse back into                                          // 125
      // this function), or $where.                                                                                    // 126
      if (!_.has(LOGICAL_OPERATORS, key)) throw new Error("Unrecognized logical operator: " + key);                    // 127
      matcher._isSimple = false;                                                                                       // 129
      docMatchers.push(LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch));                             // 130
    } else {                                                                                                           // 132
      // Record this path, but only if we aren't in an elemMatcher, since in an                                        // 133
      // elemMatch this is a path inside an object in an array, not in the doc                                         // 134
      // root.                                                                                                         // 135
      if (!options.inElemMatch) matcher._recordPathUsed(key);                                                          // 136
      var lookUpByIndex = makeLookupFunction(key);                                                                     // 138
      var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);                                   // 139
      docMatchers.push(function (doc) {                                                                                // 141
        var branchValues = lookUpByIndex(doc);                                                                         // 142
        return valueMatcher(branchValues);                                                                             // 143
      });                                                                                                              // 144
    }                                                                                                                  // 145
  });                                                                                                                  // 146
                                                                                                                       //
  return andDocumentMatchers(docMatchers);                                                                             // 148
}; // Takes in a selector that could match a key-indexed value in a document; eg,                                      // 149
// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to                                         // 152
// indicate equality).  Returns a branched matcher: a function mapping                                                 // 153
// [branched value]->result object.                                                                                    // 154
                                                                                                                       //
                                                                                                                       //
var compileValueSelector = function (valueSelector, matcher, isRoot) {                                                 // 155
  if (valueSelector instanceof RegExp) {                                                                               // 156
    matcher._isSimple = false;                                                                                         // 157
    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));                                // 158
  } else if (isOperatorObject(valueSelector)) {                                                                        // 160
    return operatorBranchedMatcher(valueSelector, matcher, isRoot);                                                    // 161
  } else {                                                                                                             // 162
    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));                              // 163
  }                                                                                                                    // 165
}; // Given an element matcher (which evaluates a single value), returns a branched                                    // 166
// value (which evaluates the element matcher on all the branches and returns a                                        // 169
// more structured return value possibly including arrayIndices).                                                      // 170
                                                                                                                       //
                                                                                                                       //
var convertElementMatcherToBranchedMatcher = function (elementMatcher, options) {                                      // 171
  options = options || {};                                                                                             // 173
  return function (branches) {                                                                                         // 174
    var expanded = branches;                                                                                           // 175
                                                                                                                       //
    if (!options.dontExpandLeafArrays) {                                                                               // 176
      expanded = expandArraysInBranches(branches, options.dontIncludeLeafArrays);                                      // 177
    }                                                                                                                  // 179
                                                                                                                       //
    var ret = {};                                                                                                      // 180
    ret.result = _.any(expanded, function (element) {                                                                  // 181
      var matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
      // index if I didn't already have one".                                                                          // 185
                                                                                                                       //
      if (typeof matched === 'number') {                                                                               // 186
        // XXX This code dates from when we only stored a single array index                                           // 187
        // (for the outermost array). Should we be also including deeper array                                         // 188
        // indices from the $elemMatch match?                                                                          // 189
        if (!element.arrayIndices) element.arrayIndices = [matched];                                                   // 190
        matched = true;                                                                                                // 192
      } // If some element matched, and it's tagged with array indices, include                                        // 193
      // those indices in our result object.                                                                           // 196
                                                                                                                       //
                                                                                                                       //
      if (matched && element.arrayIndices) ret.arrayIndices = element.arrayIndices;                                    // 197
      return matched;                                                                                                  // 200
    });                                                                                                                // 201
    return ret;                                                                                                        // 202
  };                                                                                                                   // 203
}; // Takes a RegExp object and returns an element matcher.                                                            // 204
                                                                                                                       //
                                                                                                                       //
regexpElementMatcher = function (regexp) {                                                                             // 207
  return function (value) {                                                                                            // 208
    if (value instanceof RegExp) {                                                                                     // 209
      // Comparing two regexps means seeing if the regexps are identical                                               // 210
      // (really!). Underscore knows how.                                                                              // 211
      return _.isEqual(value, regexp);                                                                                 // 212
    } // Regexps only work against strings.                                                                            // 213
                                                                                                                       //
                                                                                                                       //
    if (typeof value !== 'string') return false; // Reset regexp's state to avoid inconsistent matching for objects with the
    // same value on consecutive calls of regexp.test. This happens only if the                                        // 219
    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for                                       // 220
    // which we should *not* change the lastIndex but MongoDB doesn't support                                          // 221
    // either of these flags.                                                                                          // 222
                                                                                                                       //
    regexp.lastIndex = 0;                                                                                              // 223
    return regexp.test(value);                                                                                         // 225
  };                                                                                                                   // 226
}; // Takes something that is not an operator object and returns an element matcher                                    // 227
// for equality with that thing.                                                                                       // 230
                                                                                                                       //
                                                                                                                       //
equalityElementMatcher = function (elementSelector) {                                                                  // 231
  if (isOperatorObject(elementSelector)) throw Error("Can't create equalityValueSelector for operator object"); // Special-case: null and undefined are equal (if you got undefined in there
  // somewhere, or if you got it due to some branch being non-existent in the                                          // 236
  // weird special case), even though they aren't with EJSON.equals.                                                   // 237
                                                                                                                       //
  if (elementSelector == null) {                                                                                       // 238
    // undefined or null                                                                                               // 238
    return function (value) {                                                                                          // 239
      return value == null; // undefined or null                                                                       // 240
    };                                                                                                                 // 241
  }                                                                                                                    // 242
                                                                                                                       //
  return function (value) {                                                                                            // 244
    return LocalCollection._f._equal(elementSelector, value);                                                          // 245
  };                                                                                                                   // 246
}; // Takes an operator object (an object with $ keys) and returns a branched                                          // 247
// matcher for it.                                                                                                     // 250
                                                                                                                       //
                                                                                                                       //
var operatorBranchedMatcher = function (valueSelector, matcher, isRoot) {                                              // 251
  // Each valueSelector works separately on the various branches.  So one                                              // 252
  // operator can match one branch and another can match another branch.  This                                         // 253
  // is OK.                                                                                                            // 254
  var operatorMatchers = [];                                                                                           // 256
                                                                                                                       //
  _.each(valueSelector, function (operand, operator) {                                                                 // 257
    var simpleRange = _.contains(['$lt', '$lte', '$gt', '$gte'], operator) && _.isNumber(operand);                     // 258
                                                                                                                       //
    var simpleEquality = _.contains(['$ne', '$eq'], operator) && !_.isObject(operand);                                 // 260
    var simpleInclusion = _.contains(['$in', '$nin'], operator) && _.isArray(operand) && !_.any(operand, _.isObject);  // 261
                                                                                                                       //
    if (!(simpleRange || simpleInclusion || simpleEquality)) {                                                         // 264
      matcher._isSimple = false;                                                                                       // 265
    }                                                                                                                  // 266
                                                                                                                       //
    if (_.has(VALUE_OPERATORS, operator)) {                                                                            // 268
      operatorMatchers.push(VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot));                       // 269
    } else if (_.has(ELEMENT_OPERATORS, operator)) {                                                                   // 271
      var options = ELEMENT_OPERATORS[operator];                                                                       // 272
      operatorMatchers.push(convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options));
    } else {                                                                                                           // 278
      throw new Error("Unrecognized operator: " + operator);                                                           // 279
    }                                                                                                                  // 280
  });                                                                                                                  // 281
                                                                                                                       //
  return andBranchedMatchers(operatorMatchers);                                                                        // 283
};                                                                                                                     // 284
                                                                                                                       //
var compileArrayOfDocumentSelectors = function (selectors, matcher, inElemMatch) {                                     // 286
  if (!isArray(selectors) || _.isEmpty(selectors)) throw Error("$and/$or/$nor must be nonempty array");                // 288
  return _.map(selectors, function (subSelector) {                                                                     // 290
    if (!isPlainObject(subSelector)) throw Error("$or/$and/$nor entries need to be full objects");                     // 291
    return compileDocumentSelector(subSelector, matcher, {                                                             // 293
      inElemMatch: inElemMatch                                                                                         // 294
    });                                                                                                                // 294
  });                                                                                                                  // 295
}; // Operators that appear at the top level of a document selector.                                                   // 296
                                                                                                                       //
                                                                                                                       //
var LOGICAL_OPERATORS = {                                                                                              // 299
  $and: function (subSelector, matcher, inElemMatch) {                                                                 // 300
    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);                                 // 301
    return andDocumentMatchers(matchers);                                                                              // 303
  },                                                                                                                   // 304
  $or: function (subSelector, matcher, inElemMatch) {                                                                  // 306
    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
    // any arrayIndices it returns.                                                                                    // 311
                                                                                                                       //
    if (matchers.length === 1) return matchers[0];                                                                     // 312
    return function (doc) {                                                                                            // 315
      var result = _.any(matchers, function (f) {                                                                      // 316
        return f(doc).result;                                                                                          // 317
      }); // $or does NOT set arrayIndices when it has multiple                                                        // 318
      // sub-expressions. (Tested against MongoDB.)                                                                    // 320
                                                                                                                       //
                                                                                                                       //
      return {                                                                                                         // 321
        result: result                                                                                                 // 321
      };                                                                                                               // 321
    };                                                                                                                 // 322
  },                                                                                                                   // 323
  $nor: function (subSelector, matcher, inElemMatch) {                                                                 // 325
    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);                                 // 326
    return function (doc) {                                                                                            // 328
      var result = _.all(matchers, function (f) {                                                                      // 329
        return !f(doc).result;                                                                                         // 330
      }); // Never set arrayIndices, because we only match if nothing in particular                                    // 331
      // "matched" (and because this is consistent with MongoDB).                                                      // 333
                                                                                                                       //
                                                                                                                       //
      return {                                                                                                         // 334
        result: result                                                                                                 // 334
      };                                                                                                               // 334
    };                                                                                                                 // 335
  },                                                                                                                   // 336
  $where: function (selectorValue, matcher) {                                                                          // 338
    // Record that *any* path may be used.                                                                             // 339
    matcher._recordPathUsed('');                                                                                       // 340
                                                                                                                       //
    matcher._hasWhere = true;                                                                                          // 341
                                                                                                                       //
    if (!(selectorValue instanceof Function)) {                                                                        // 342
      // XXX MongoDB seems to have more complex logic to decide where or or not                                        // 343
      // to add "return"; not sure exactly what it is.                                                                 // 344
      selectorValue = Function("obj", "return " + selectorValue);                                                      // 345
    }                                                                                                                  // 346
                                                                                                                       //
    return function (doc) {                                                                                            // 347
      // We make the document available as both `this` and `obj`.                                                      // 348
      // XXX not sure what we should do if this throws                                                                 // 349
      return {                                                                                                         // 350
        result: selectorValue.call(doc, doc)                                                                           // 350
      };                                                                                                               // 350
    };                                                                                                                 // 351
  },                                                                                                                   // 352
  // This is just used as a comment in the query (in MongoDB, it also ends up in                                       // 354
  // query logs); it has no effect on the actual selection.                                                            // 355
  $comment: function () {                                                                                              // 356
    return function () {                                                                                               // 357
      return {                                                                                                         // 358
        result: true                                                                                                   // 358
      };                                                                                                               // 358
    };                                                                                                                 // 359
  }                                                                                                                    // 360
}; // Returns a branched matcher that matches iff the given matcher does not.                                          // 299
// Note that this implicitly "deMorganizes" the wrapped function.  ie, it                                              // 364
// means that ALL branch values need to fail to match innerBranchedMatcher.                                            // 365
                                                                                                                       //
var invertBranchedMatcher = function (branchedMatcher) {                                                               // 366
  return function (branchValues) {                                                                                     // 367
    var invertMe = branchedMatcher(branchValues); // We explicitly choose to strip arrayIndices here: it doesn't make sense to
    // say "update the array element that does not match something", at least                                          // 370
    // in mongo-land.                                                                                                  // 371
                                                                                                                       //
    return {                                                                                                           // 372
      result: !invertMe.result                                                                                         // 372
    };                                                                                                                 // 372
  };                                                                                                                   // 373
}; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a                                       // 374
// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as                                         // 377
// "match each branched value independently and combine with                                                           // 378
// convertElementMatcherToBranchedMatcher".                                                                            // 379
                                                                                                                       //
                                                                                                                       //
var VALUE_OPERATORS = {                                                                                                // 380
  $eq: function (operand) {                                                                                            // 381
    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));                                    // 382
  },                                                                                                                   // 384
  $not: function (operand, valueSelector, matcher) {                                                                   // 385
    return invertBranchedMatcher(compileValueSelector(operand, matcher));                                              // 386
  },                                                                                                                   // 387
  $ne: function (operand) {                                                                                            // 388
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));             // 389
  },                                                                                                                   // 391
  $nin: function (operand) {                                                                                           // 392
    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
  },                                                                                                                   // 395
  $exists: function (operand) {                                                                                        // 396
    var exists = convertElementMatcherToBranchedMatcher(function (value) {                                             // 397
      return value !== undefined;                                                                                      // 398
    });                                                                                                                // 399
    return operand ? exists : invertBranchedMatcher(exists);                                                           // 400
  },                                                                                                                   // 401
  // $options just provides options for $regex; its logic is inside $regex                                             // 402
  $options: function (operand, valueSelector) {                                                                        // 403
    if (!_.has(valueSelector, '$regex')) throw Error("$options needs a $regex");                                       // 404
    return everythingMatcher;                                                                                          // 406
  },                                                                                                                   // 407
  // $maxDistance is basically an argument to $near                                                                    // 408
  $maxDistance: function (operand, valueSelector) {                                                                    // 409
    if (!valueSelector.$near) throw Error("$maxDistance needs a $near");                                               // 410
    return everythingMatcher;                                                                                          // 412
  },                                                                                                                   // 413
  $all: function (operand, valueSelector, matcher) {                                                                   // 414
    if (!isArray(operand)) throw Error("$all requires array"); // Not sure why, but this seems to be what MongoDB does.
                                                                                                                       //
    if (_.isEmpty(operand)) return nothingMatcher;                                                                     // 418
    var branchedMatchers = [];                                                                                         // 421
                                                                                                                       //
    _.each(operand, function (criterion) {                                                                             // 422
      // XXX handle $all/$elemMatch combination                                                                        // 423
      if (isOperatorObject(criterion)) throw Error("no $ expressions in $all"); // This is always a regexp or equality selector.
                                                                                                                       //
      branchedMatchers.push(compileValueSelector(criterion, matcher));                                                 // 427
    }); // andBranchedMatchers does NOT require all selectors to return true on the                                    // 428
    // SAME branch.                                                                                                    // 430
                                                                                                                       //
                                                                                                                       //
    return andBranchedMatchers(branchedMatchers);                                                                      // 431
  },                                                                                                                   // 432
  $near: function (operand, valueSelector, matcher, isRoot) {                                                          // 433
    if (!isRoot) throw Error("$near can't be inside another $ operator");                                              // 434
    matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: coordinate pairs and                    // 436
    // GeoJSON. They use different distance metrics, too. GeoJSON queries are                                          // 439
    // marked with a $geometry property.                                                                               // 440
                                                                                                                       //
    var maxDistance, point, distance;                                                                                  // 442
                                                                                                                       //
    if (isPlainObject(operand) && _.has(operand, '$geometry')) {                                                       // 443
      // GeoJSON "2dsphere" mode.                                                                                      // 444
      maxDistance = operand.$maxDistance;                                                                              // 445
      point = operand.$geometry;                                                                                       // 446
                                                                                                                       //
      distance = function (value) {                                                                                    // 447
        // XXX: for now, we don't calculate the actual distance between, say,                                          // 448
        // polygon and circle. If people care about this use-case it will get                                          // 449
        // a priority.                                                                                                 // 450
        if (!value || !value.type) return null;                                                                        // 451
                                                                                                                       //
        if (value.type === "Point") {                                                                                  // 453
          return GeoJSON.pointDistance(point, value);                                                                  // 454
        } else {                                                                                                       // 455
          return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;                        // 456
        }                                                                                                              // 458
      };                                                                                                               // 459
    } else {                                                                                                           // 460
      maxDistance = valueSelector.$maxDistance;                                                                        // 461
      if (!isArray(operand) && !isPlainObject(operand)) throw Error("$near argument must be coordinate pair or GeoJSON");
      point = pointToArray(operand);                                                                                   // 464
                                                                                                                       //
      distance = function (value) {                                                                                    // 465
        if (!isArray(value) && !isPlainObject(value)) return null;                                                     // 466
        return distanceCoordinatePairs(point, value);                                                                  // 468
      };                                                                                                               // 469
    }                                                                                                                  // 470
                                                                                                                       //
    return function (branchedValues) {                                                                                 // 472
      // There might be multiple points in the document that match the given                                           // 473
      // field. Only one of them needs to be within $maxDistance, but we need to                                       // 474
      // evaluate all of them and use the nearest one for the implicit sort                                            // 475
      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)                                             // 476
      //                                                                                                               // 477
      // Note: This differs from MongoDB's implementation, where a document will                                       // 478
      // actually show up *multiple times* in the result set, with one entry for                                       // 479
      // each within-$maxDistance branching point.                                                                     // 480
      branchedValues = expandArraysInBranches(branchedValues);                                                         // 481
      var result = {                                                                                                   // 482
        result: false                                                                                                  // 482
      };                                                                                                               // 482
                                                                                                                       //
      _.each(branchedValues, function (branch) {                                                                       // 483
        var curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.        // 484
                                                                                                                       //
        if (curDistance === null || curDistance > maxDistance) return; // Skip anything that's a tie.                  // 486
                                                                                                                       //
        if (result.distance !== undefined && result.distance <= curDistance) return;                                   // 489
        result.result = true;                                                                                          // 491
        result.distance = curDistance;                                                                                 // 492
        if (!branch.arrayIndices) delete result.arrayIndices;else result.arrayIndices = branch.arrayIndices;           // 493
      });                                                                                                              // 497
                                                                                                                       //
      return result;                                                                                                   // 498
    };                                                                                                                 // 499
  }                                                                                                                    // 500
}; // Helpers for $near.                                                                                               // 380
                                                                                                                       //
var distanceCoordinatePairs = function (a, b) {                                                                        // 504
  a = pointToArray(a);                                                                                                 // 505
  b = pointToArray(b);                                                                                                 // 506
  var x = a[0] - b[0];                                                                                                 // 507
  var y = a[1] - b[1];                                                                                                 // 508
  if (_.isNaN(x) || _.isNaN(y)) return null;                                                                           // 509
  return Math.sqrt(x * x + y * y);                                                                                     // 511
}; // Makes sure we get 2 elements array and assume the first one to be x and                                          // 512
// the second one to y no matter what user passes.                                                                     // 514
// In case user passes { lon: x, lat: y } returns [x, y]                                                               // 515
                                                                                                                       //
                                                                                                                       //
var pointToArray = function (point) {                                                                                  // 516
  return _.map(point, _.identity);                                                                                     // 517
}; // Helper for $lt/$gt/$lte/$gte.                                                                                    // 518
                                                                                                                       //
                                                                                                                       //
var makeInequality = function (cmpValueComparator) {                                                                   // 521
  return {                                                                                                             // 522
    compileElementSelector: function (operand) {                                                                       // 523
      // Arrays never compare false with non-arrays for any inequality.                                                // 524
      // XXX This was behavior we observed in pre-release MongoDB 2.5, but                                             // 525
      //     it seems to have been reverted.                                                                           // 526
      //     See https://jira.mongodb.org/browse/SERVER-11444                                                          // 527
      if (isArray(operand)) {                                                                                          // 528
        return function () {                                                                                           // 529
          return false;                                                                                                // 530
        };                                                                                                             // 531
      } // Special case: consider undefined and null the same (so true with                                            // 532
      // $gte/$lte).                                                                                                   // 535
                                                                                                                       //
                                                                                                                       //
      if (operand === undefined) operand = null;                                                                       // 536
                                                                                                                       //
      var operandType = LocalCollection._f._type(operand);                                                             // 539
                                                                                                                       //
      return function (value) {                                                                                        // 541
        if (value === undefined) value = null; // Comparisons are never true among things of different type (except    // 542
        // null vs undefined).                                                                                         // 545
                                                                                                                       //
        if (LocalCollection._f._type(value) !== operandType) return false;                                             // 546
        return cmpValueComparator(LocalCollection._f._cmp(value, operand));                                            // 548
      };                                                                                                               // 549
    }                                                                                                                  // 550
  };                                                                                                                   // 522
}; // Each element selector contains:                                                                                  // 552
//  - compileElementSelector, a function with args:                                                                    // 555
//    - operand - the "right hand side" of the operator                                                                // 556
//    - valueSelector - the "context" for the operator (so that $regex can find                                        // 557
//      $options)                                                                                                      // 558
//    - matcher - the Matcher this is going into (so that $elemMatch can compile                                       // 559
//      more things)                                                                                                   // 560
//    returning a function mapping a single value to bool.                                                             // 561
//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from                                          // 562
//    being called                                                                                                     // 563
//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to                                           // 564
//    expandArraysInBranches if it is called                                                                           // 565
                                                                                                                       //
                                                                                                                       //
ELEMENT_OPERATORS = {                                                                                                  // 566
  $lt: makeInequality(function (cmpValue) {                                                                            // 567
    return cmpValue < 0;                                                                                               // 568
  }),                                                                                                                  // 569
  $gt: makeInequality(function (cmpValue) {                                                                            // 570
    return cmpValue > 0;                                                                                               // 571
  }),                                                                                                                  // 572
  $lte: makeInequality(function (cmpValue) {                                                                           // 573
    return cmpValue <= 0;                                                                                              // 574
  }),                                                                                                                  // 575
  $gte: makeInequality(function (cmpValue) {                                                                           // 576
    return cmpValue >= 0;                                                                                              // 577
  }),                                                                                                                  // 578
  $mod: {                                                                                                              // 579
    compileElementSelector: function (operand) {                                                                       // 580
      if (!(isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
        throw Error("argument to $mod must be an array of two numbers");                                               // 584
      } // XXX could require to be ints or round or something                                                          // 585
                                                                                                                       //
                                                                                                                       //
      var divisor = operand[0];                                                                                        // 587
      var remainder = operand[1];                                                                                      // 588
      return function (value) {                                                                                        // 589
        return typeof value === 'number' && value % divisor === remainder;                                             // 590
      };                                                                                                               // 591
    }                                                                                                                  // 592
  },                                                                                                                   // 579
  $in: {                                                                                                               // 594
    compileElementSelector: function (operand) {                                                                       // 595
      if (!isArray(operand)) throw Error("$in needs an array");                                                        // 596
      var elementMatchers = [];                                                                                        // 599
                                                                                                                       //
      _.each(operand, function (option) {                                                                              // 600
        if (option instanceof RegExp) elementMatchers.push(regexpElementMatcher(option));else if (isOperatorObject(option)) throw Error("cannot nest $ under $in");else elementMatchers.push(equalityElementMatcher(option));
      });                                                                                                              // 607
                                                                                                                       //
      return function (value) {                                                                                        // 609
        // Allow {a: {$in: [null]}} to match when 'a' does not exist.                                                  // 610
        if (value === undefined) value = null;                                                                         // 611
        return _.any(elementMatchers, function (e) {                                                                   // 613
          return e(value);                                                                                             // 614
        });                                                                                                            // 615
      };                                                                                                               // 616
    }                                                                                                                  // 617
  },                                                                                                                   // 594
  $size: {                                                                                                             // 619
    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we                                         // 620
    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a                                         // 621
    // possible value.                                                                                                 // 622
    dontExpandLeafArrays: true,                                                                                        // 623
    compileElementSelector: function (operand) {                                                                       // 624
      if (typeof operand === 'string') {                                                                               // 625
        // Don't ask me why, but by experimentation, this seems to be what Mongo                                       // 626
        // does.                                                                                                       // 627
        operand = 0;                                                                                                   // 628
      } else if (typeof operand !== 'number') {                                                                        // 629
        throw Error("$size needs a number");                                                                           // 630
      }                                                                                                                // 631
                                                                                                                       //
      return function (value) {                                                                                        // 632
        return isArray(value) && value.length === operand;                                                             // 633
      };                                                                                                               // 634
    }                                                                                                                  // 635
  },                                                                                                                   // 619
  $type: {                                                                                                             // 637
    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should                                          // 638
    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:                                          // 639
    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but                                          // 640
    // should *not* include it itself.                                                                                 // 641
    dontIncludeLeafArrays: true,                                                                                       // 642
    compileElementSelector: function (operand) {                                                                       // 643
      if (typeof operand !== 'number') throw Error("$type needs a number");                                            // 644
      return function (value) {                                                                                        // 646
        return value !== undefined && LocalCollection._f._type(value) === operand;                                     // 647
      };                                                                                                               // 649
    }                                                                                                                  // 650
  },                                                                                                                   // 637
  $regex: {                                                                                                            // 652
    compileElementSelector: function (operand, valueSelector) {                                                        // 653
      if (!(typeof operand === 'string' || operand instanceof RegExp)) throw Error("$regex has to be a string or RegExp");
      var regexp;                                                                                                      // 657
                                                                                                                       //
      if (valueSelector.$options !== undefined) {                                                                      // 658
        // Options passed in $options (even the empty string) always overrides                                         // 659
        // options in the RegExp object itself. (See also                                                              // 660
        // Mongo.Collection._rewriteSelector.)                                                                         // 661
        // Be clear that we only support the JS-supported options, not extended                                        // 663
        // ones (eg, Mongo supports x and s). Ideally we would implement x and s                                       // 664
        // by transforming the regexp, but not today...                                                                // 665
        if (/[^gim]/.test(valueSelector.$options)) throw new Error("Only the i, m, and g regexp options are supported");
        var regexSource = operand instanceof RegExp ? operand.source : operand;                                        // 669
        regexp = new RegExp(regexSource, valueSelector.$options);                                                      // 670
      } else if (operand instanceof RegExp) {                                                                          // 671
        regexp = operand;                                                                                              // 672
      } else {                                                                                                         // 673
        regexp = new RegExp(operand);                                                                                  // 674
      }                                                                                                                // 675
                                                                                                                       //
      return regexpElementMatcher(regexp);                                                                             // 676
    }                                                                                                                  // 677
  },                                                                                                                   // 652
  $elemMatch: {                                                                                                        // 679
    dontExpandLeafArrays: true,                                                                                        // 680
    compileElementSelector: function (operand, valueSelector, matcher) {                                               // 681
      if (!isPlainObject(operand)) throw Error("$elemMatch need an object");                                           // 682
      var subMatcher, isDocMatcher;                                                                                    // 685
                                                                                                                       //
      if (isOperatorObject(_.omit(operand, _.keys(LOGICAL_OPERATORS)), true)) {                                        // 686
        subMatcher = compileValueSelector(operand, matcher);                                                           // 687
        isDocMatcher = false;                                                                                          // 688
      } else {                                                                                                         // 689
        // This is NOT the same as compileValueSelector(operand), and not just                                         // 690
        // because of the slightly different calling convention.                                                       // 691
        // {$elemMatch: {x: 3}} means "an element has a field x:3", not                                                // 692
        // "consists only of a field x:3". Also, regexps and sub-$ are allowed.                                        // 693
        subMatcher = compileDocumentSelector(operand, matcher, {                                                       // 694
          inElemMatch: true                                                                                            // 695
        });                                                                                                            // 695
        isDocMatcher = true;                                                                                           // 696
      }                                                                                                                // 697
                                                                                                                       //
      return function (value) {                                                                                        // 699
        if (!isArray(value)) return false;                                                                             // 700
                                                                                                                       //
        for (var i = 0; i < value.length; ++i) {                                                                       // 702
          var arrayElement = value[i];                                                                                 // 703
          var arg;                                                                                                     // 704
                                                                                                                       //
          if (isDocMatcher) {                                                                                          // 705
            // We can only match {$elemMatch: {b: 3}} against objects.                                                 // 706
            // (We can also match against arrays, if there's numeric indices,                                          // 707
            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)                                                   // 708
            if (!isPlainObject(arrayElement) && !isArray(arrayElement)) return false;                                  // 709
            arg = arrayElement;                                                                                        // 711
          } else {                                                                                                     // 712
            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches                                            // 713
            // {a: [8]} but not {a: [[8]]}                                                                             // 714
            arg = [{                                                                                                   // 715
              value: arrayElement,                                                                                     // 715
              dontIterate: true                                                                                        // 715
            }];                                                                                                        // 715
          } // XXX support $near in $elemMatch by propagating $distance?                                               // 716
                                                                                                                       //
                                                                                                                       //
          if (subMatcher(arg).result) return i; // specially understood to mean "use as arrayIndices"                  // 718
        }                                                                                                              // 720
                                                                                                                       //
        return false;                                                                                                  // 721
      };                                                                                                               // 722
    }                                                                                                                  // 723
  }                                                                                                                    // 679
}; // makeLookupFunction(key) returns a lookup function.                                                               // 566
//                                                                                                                     // 728
// A lookup function takes in a document and returns an array of matching                                              // 729
// branches.  If no arrays are found while looking up the key, this array will                                         // 730
// have exactly one branches (possibly 'undefined', if some segment of the key                                         // 731
// was not found).                                                                                                     // 732
//                                                                                                                     // 733
// If arrays are found in the middle, this can have more than one element, since                                       // 734
// we "branch". When we "branch", if there are more key segments to look up,                                           // 735
// then we only pursue branches that are plain objects (not arrays or scalars).                                        // 736
// This means we can actually end up with no branches!                                                                 // 737
//                                                                                                                     // 738
// We do *NOT* branch on arrays that are found at the end (ie, at the last                                             // 739
// dotted member of the key). We just return that array; if you want to                                                // 740
// effectively "branch" over the array's values, post-process the lookup                                               // 741
// function with expandArraysInBranches.                                                                               // 742
//                                                                                                                     // 743
// Each branch is an object with keys:                                                                                 // 744
//  - value: the value at the branch                                                                                   // 745
//  - dontIterate: an optional bool; if true, it means that 'value' is an array                                        // 746
//    that expandArraysInBranches should NOT expand. This specifically happens                                         // 747
//    when there is a numeric index in the key, and ensures the                                                        // 748
//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT                                                    // 749
//    match {a: [[5]]}.                                                                                                // 750
//  - arrayIndices: if any array indexing was done during lookup (either due to                                        // 751
//    explicit numeric indices or implicit branching), this will be an array of                                        // 752
//    the array indices used, from outermost to innermost; it is falsey or                                             // 753
//    absent if no array index is used. If an explicit numeric index is used,                                          // 754
//    the index will be followed in arrayIndices by the string 'x'.                                                    // 755
//                                                                                                                     // 756
//    Note: arrayIndices is used for two purposes. First, it is used to                                                // 757
//    implement the '$' modifier feature, which only ever looks at its first                                           // 758
//    element.                                                                                                         // 759
//                                                                                                                     // 760
//    Second, it is used for sort key generation, which needs to be able to tell                                       // 761
//    the difference between different paths. Moreover, it needs to                                                    // 762
//    differentiate between explicit and implicit branching, which is why                                              // 763
//    there's the somewhat hacky 'x' entry: this means that explicit and                                               // 764
//    implicit array lookups will have different full arrayIndices paths. (That                                        // 765
//    code only requires that different paths have different arrayIndices; it                                          // 766
//    doesn't actually "parse" arrayIndices. As an alternative, arrayIndices                                           // 767
//    could contain objects with flags like "implicit", but I think that only                                          // 768
//    makes the code surrounding them more complex.)                                                                   // 769
//                                                                                                                     // 770
//    (By the way, this field ends up getting passed around a lot without                                              // 771
//    cloning, so never mutate any arrayIndices field/var in this package!)                                            // 772
//                                                                                                                     // 773
//                                                                                                                     // 774
// At the top level, you may only pass in a plain object or array.                                                     // 775
//                                                                                                                     // 776
// See the test 'minimongo - lookup' for some examples of what lookup functions                                        // 777
// return.                                                                                                             // 778
                                                                                                                       //
makeLookupFunction = function (key, options) {                                                                         // 779
  options = options || {};                                                                                             // 780
  var parts = key.split('.');                                                                                          // 781
  var firstPart = parts.length ? parts[0] : '';                                                                        // 782
  var firstPartIsNumeric = isNumericKey(firstPart);                                                                    // 783
  var nextPartIsNumeric = parts.length >= 2 && isNumericKey(parts[1]);                                                 // 784
  var lookupRest;                                                                                                      // 785
                                                                                                                       //
  if (parts.length > 1) {                                                                                              // 786
    lookupRest = makeLookupFunction(parts.slice(1).join('.'));                                                         // 787
  }                                                                                                                    // 788
                                                                                                                       //
  var omitUnnecessaryFields = function (retVal) {                                                                      // 790
    if (!retVal.dontIterate) delete retVal.dontIterate;                                                                // 791
    if (retVal.arrayIndices && !retVal.arrayIndices.length) delete retVal.arrayIndices;                                // 793
    return retVal;                                                                                                     // 795
  }; // Doc will always be a plain object or an array.                                                                 // 796
  // apply an explicit numeric index, an array.                                                                        // 799
                                                                                                                       //
                                                                                                                       //
  return function (doc, arrayIndices) {                                                                                // 800
    if (!arrayIndices) arrayIndices = [];                                                                              // 801
                                                                                                                       //
    if (isArray(doc)) {                                                                                                // 804
      // If we're being asked to do an invalid lookup into an array (non-integer                                       // 805
      // or out-of-bounds), return no results (which is different from returning                                       // 806
      // a single undefined result, in that `null` equality checks won't match).                                       // 807
      if (!(firstPartIsNumeric && firstPart < doc.length)) return []; // Remember that we used this array index. Include an 'x' to indicate that
      // the previous index came from being considered as an explicit array                                            // 812
      // index (not branching).                                                                                        // 813
                                                                                                                       //
      arrayIndices = arrayIndices.concat(+firstPart, 'x');                                                             // 814
    } // Do our first lookup.                                                                                          // 815
                                                                                                                       //
                                                                                                                       //
    var firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.                            // 818
    //                                                                                                                 // 821
    // If what we found is an array, most value selectors will choose to treat                                         // 822
    // the elements of the array as matchable values in their own right, but                                           // 823
    // that's done outside of the lookup function. (Exceptions to this are $size                                       // 824
    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:                                       // 825
    // [[1, 2]]}.)                                                                                                     // 826
    //                                                                                                                 // 827
    // That said, if we just did an *explicit* array lookup (on doc) to find                                           // 828
    // firstLevel, and firstLevel is an array too, we do NOT want value                                                // 829
    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.                                        // 830
    // So in that case, we mark the return value as "don't iterate".                                                   // 831
                                                                                                                       //
    if (!lookupRest) {                                                                                                 // 832
      return [omitUnnecessaryFields({                                                                                  // 833
        value: firstLevel,                                                                                             // 834
        dontIterate: isArray(doc) && isArray(firstLevel),                                                              // 835
        arrayIndices: arrayIndices                                                                                     // 836
      })];                                                                                                             // 833
    } // We need to dig deeper.  But if we can't, because what we've found is not                                      // 837
    // an array or plain object, we're done. If we just did a numeric index into                                       // 840
    // an array, we return nothing here (this is a change in Mongo 2.5 from                                            // 841
    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,                                         // 842
    // return a single `undefined` (which can, for example, match via equality                                         // 843
    // with `null`).                                                                                                   // 844
                                                                                                                       //
                                                                                                                       //
    if (!isIndexable(firstLevel)) {                                                                                    // 845
      if (isArray(doc)) return [];                                                                                     // 846
      return [omitUnnecessaryFields({                                                                                  // 848
        value: undefined,                                                                                              // 848
        arrayIndices: arrayIndices                                                                                     // 849
      })];                                                                                                             // 848
    }                                                                                                                  // 850
                                                                                                                       //
    var result = [];                                                                                                   // 852
                                                                                                                       //
    var appendToResult = function (more) {                                                                             // 853
      Array.prototype.push.apply(result, more);                                                                        // 854
    }; // Dig deeper: look up the rest of the parts on whatever we've found.                                           // 855
    // (lookupRest is smart enough to not try to do invalid lookups into                                               // 858
    // firstLevel if it's an array.)                                                                                   // 859
                                                                                                                       //
                                                                                                                       //
    appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
    // part as a literal integer lookup, we should also "branch": try to look up                                       // 863
    // the rest of the parts on each array element in parallel.                                                        // 864
    //                                                                                                                 // 865
    // In this case, we *only* dig deeper into array elements that are plain                                           // 866
    // objects. (Recall that we only got this far if we have further to dig.)                                          // 867
    // This makes sense: we certainly don't dig deeper into non-indexable                                              // 868
    // objects. And it would be weird to dig into an array: it's simpler to have                                       // 869
    // a rule that explicit integer indexes only apply to an outer array, not to                                       // 870
    // an array you find after a branching search.                                                                     // 871
    //                                                                                                                 // 872
    // In the special case of a numeric part in a *sort selector* (not a query                                         // 873
    // selector), we skip the branching: we ONLY allow the numeric part to mean                                        // 874
    // "look up this index" in that case, not "also look up this index in all                                          // 875
    // the elements of the array".                                                                                     // 876
                                                                                                                       //
    if (isArray(firstLevel) && !(nextPartIsNumeric && options.forSort)) {                                              // 877
      _.each(firstLevel, function (branch, arrayIndex) {                                                               // 878
        if (isPlainObject(branch)) {                                                                                   // 879
          appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));                                         // 880
        }                                                                                                              // 883
      });                                                                                                              // 884
    }                                                                                                                  // 885
                                                                                                                       //
    return result;                                                                                                     // 887
  };                                                                                                                   // 888
};                                                                                                                     // 889
                                                                                                                       //
MinimongoTest.makeLookupFunction = makeLookupFunction;                                                                 // 890
                                                                                                                       //
expandArraysInBranches = function (branches, skipTheArrays) {                                                          // 892
  var branchesOut = [];                                                                                                // 893
                                                                                                                       //
  _.each(branches, function (branch) {                                                                                 // 894
    var thisIsArray = isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
    // to iterate and we're told to skip arrays.  (That's right, we include some                                       // 897
    // arrays even skipTheArrays is true: these are arrays that were found via                                         // 898
    // explicit numerical indices.)                                                                                    // 899
                                                                                                                       //
    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {                                                      // 900
      branchesOut.push({                                                                                               // 901
        value: branch.value,                                                                                           // 902
        arrayIndices: branch.arrayIndices                                                                              // 903
      });                                                                                                              // 901
    }                                                                                                                  // 905
                                                                                                                       //
    if (thisIsArray && !branch.dontIterate) {                                                                          // 906
      _.each(branch.value, function (leaf, i) {                                                                        // 907
        branchesOut.push({                                                                                             // 908
          value: leaf,                                                                                                 // 909
          arrayIndices: (branch.arrayIndices || []).concat(i)                                                          // 910
        });                                                                                                            // 908
      });                                                                                                              // 912
    }                                                                                                                  // 913
  });                                                                                                                  // 914
                                                                                                                       //
  return branchesOut;                                                                                                  // 915
};                                                                                                                     // 916
                                                                                                                       //
var nothingMatcher = function (docOrBranchedValues) {                                                                  // 918
  return {                                                                                                             // 919
    result: false                                                                                                      // 919
  };                                                                                                                   // 919
};                                                                                                                     // 920
                                                                                                                       //
var everythingMatcher = function (docOrBranchedValues) {                                                               // 922
  return {                                                                                                             // 923
    result: true                                                                                                       // 923
  };                                                                                                                   // 923
}; // NB: We are cheating and using this function to implement "AND" for both                                          // 924
// "document matchers" and "branched matchers". They both return result objects                                        // 928
// but the argument is different: for the former it's a whole doc, whereas for                                         // 929
// the latter it's an array of "branched values".                                                                      // 930
                                                                                                                       //
                                                                                                                       //
var andSomeMatchers = function (subMatchers) {                                                                         // 931
  if (subMatchers.length === 0) return everythingMatcher;                                                              // 932
  if (subMatchers.length === 1) return subMatchers[0];                                                                 // 934
  return function (docOrBranches) {                                                                                    // 937
    var ret = {};                                                                                                      // 938
    ret.result = _.all(subMatchers, function (f) {                                                                     // 939
      var subResult = f(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has              // 940
      // one. Yes, this means that if there are multiple $near fields in a                                             // 942
      // query, something arbitrary happens; this appears to be consistent with                                        // 943
      // Mongo.                                                                                                        // 944
                                                                                                                       //
      if (subResult.result && subResult.distance !== undefined && ret.distance === undefined) {                        // 945
        ret.distance = subResult.distance;                                                                             // 947
      } // Similarly, propagate arrayIndices from sub-matchers... but to match                                         // 948
      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices                                          // 950
      // wins.                                                                                                         // 951
                                                                                                                       //
                                                                                                                       //
      if (subResult.result && subResult.arrayIndices) {                                                                // 952
        ret.arrayIndices = subResult.arrayIndices;                                                                     // 953
      }                                                                                                                // 954
                                                                                                                       //
      return subResult.result;                                                                                         // 955
    }); // If we didn't actually match, forget any extra metadata we came up with.                                     // 956
                                                                                                                       //
    if (!ret.result) {                                                                                                 // 959
      delete ret.distance;                                                                                             // 960
      delete ret.arrayIndices;                                                                                         // 961
    }                                                                                                                  // 962
                                                                                                                       //
    return ret;                                                                                                        // 963
  };                                                                                                                   // 964
};                                                                                                                     // 965
                                                                                                                       //
var andDocumentMatchers = andSomeMatchers;                                                                             // 967
var andBranchedMatchers = andSomeMatchers; // helpers used by compiled selector code                                   // 968
                                                                                                                       //
LocalCollection._f = {                                                                                                 // 972
  // XXX for _all and _in, consider building 'inquery' at compile time..                                               // 973
  _type: function (v) {                                                                                                // 975
    if (typeof v === "number") return 1;                                                                               // 976
    if (typeof v === "string") return 2;                                                                               // 978
    if (typeof v === "boolean") return 8;                                                                              // 980
    if (isArray(v)) return 4;                                                                                          // 982
    if (v === null) return 10;                                                                                         // 984
    if (v instanceof RegExp) // note that typeof(/x/) === "object"                                                     // 986
      return 11;                                                                                                       // 988
    if (typeof v === "function") return 13;                                                                            // 989
    if (v instanceof Date) return 9;                                                                                   // 991
    if (EJSON.isBinary(v)) return 5;                                                                                   // 993
    if (v instanceof MongoID.ObjectID) return 7;                                                                       // 995
    return 3; // object                                                                                                // 997
    // XXX support some/all of these:                                                                                  // 999
    // 14, symbol                                                                                                      // 1000
    // 15, javascript code with scope                                                                                  // 1001
    // 16, 18: 32-bit/64-bit integer                                                                                   // 1002
    // 17, timestamp                                                                                                   // 1003
    // 255, minkey                                                                                                     // 1004
    // 127, maxkey                                                                                                     // 1005
  },                                                                                                                   // 1006
  // deep equality test: use for literal document and array matches                                                    // 1008
  _equal: function (a, b) {                                                                                            // 1009
    return EJSON.equals(a, b, {                                                                                        // 1010
      keyOrderSensitive: true                                                                                          // 1010
    });                                                                                                                // 1010
  },                                                                                                                   // 1011
  // maps a type code to a value that can be used to sort values of                                                    // 1013
  // different types                                                                                                   // 1014
  _typeorder: function (t) {                                                                                           // 1015
    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types                                    // 1016
    // XXX what is the correct sort position for Javascript code?                                                      // 1017
    // ('100' in the matrix below)                                                                                     // 1018
    // XXX minkey/maxkey                                                                                               // 1019
    return [-1, // (not a type)                                                                                        // 1020
    1, // number                                                                                                       // 1021
    2, // string                                                                                                       // 1022
    3, // object                                                                                                       // 1023
    4, // array                                                                                                        // 1024
    5, // binary                                                                                                       // 1025
    -1, // deprecated                                                                                                  // 1026
    6, // ObjectID                                                                                                     // 1027
    7, // bool                                                                                                         // 1028
    8, // Date                                                                                                         // 1029
    0, // null                                                                                                         // 1030
    9, // RegExp                                                                                                       // 1031
    -1, // deprecated                                                                                                  // 1032
    100, // JS code                                                                                                    // 1033
    2, // deprecated (symbol)                                                                                          // 1034
    100, // JS code                                                                                                    // 1035
    1, // 32-bit int                                                                                                   // 1036
    8, // Mongo timestamp                                                                                              // 1037
    1 // 64-bit int                                                                                                    // 1038
    ][t];                                                                                                              // 1020
  },                                                                                                                   // 1040
  // compare two values of unknown type according to BSON ordering                                                     // 1042
  // semantics. (as an extension, consider 'undefined' to be less than                                                 // 1043
  // any other value.) return negative if a is less, positive if b is                                                  // 1044
  // less, or 0 if equal                                                                                               // 1045
  _cmp: function (a, b) {                                                                                              // 1046
    if (a === undefined) return b === undefined ? 0 : -1;                                                              // 1047
    if (b === undefined) return 1;                                                                                     // 1049
                                                                                                                       //
    var ta = LocalCollection._f._type(a);                                                                              // 1051
                                                                                                                       //
    var tb = LocalCollection._f._type(b);                                                                              // 1052
                                                                                                                       //
    var oa = LocalCollection._f._typeorder(ta);                                                                        // 1053
                                                                                                                       //
    var ob = LocalCollection._f._typeorder(tb);                                                                        // 1054
                                                                                                                       //
    if (oa !== ob) return oa < ob ? -1 : 1;                                                                            // 1055
    if (ta !== tb) // XXX need to implement this if we implement Symbol or integers, or                                // 1057
      // Timestamp                                                                                                     // 1059
      throw Error("Missing type coercion logic in _cmp");                                                              // 1060
                                                                                                                       //
    if (ta === 7) {                                                                                                    // 1061
      // ObjectID                                                                                                      // 1061
      // Convert to string.                                                                                            // 1062
      ta = tb = 2;                                                                                                     // 1063
      a = a.toHexString();                                                                                             // 1064
      b = b.toHexString();                                                                                             // 1065
    }                                                                                                                  // 1066
                                                                                                                       //
    if (ta === 9) {                                                                                                    // 1067
      // Date                                                                                                          // 1067
      // Convert to millis.                                                                                            // 1068
      ta = tb = 1;                                                                                                     // 1069
      a = a.getTime();                                                                                                 // 1070
      b = b.getTime();                                                                                                 // 1071
    }                                                                                                                  // 1072
                                                                                                                       //
    if (ta === 1) // double                                                                                            // 1074
      return a - b;                                                                                                    // 1075
    if (tb === 2) // string                                                                                            // 1076
      return a < b ? -1 : a === b ? 0 : 1;                                                                             // 1077
                                                                                                                       //
    if (ta === 3) {                                                                                                    // 1078
      // Object                                                                                                        // 1078
      // this could be much more efficient in the expected case ...                                                    // 1079
      var to_array = function (obj) {                                                                                  // 1080
        var ret = [];                                                                                                  // 1081
                                                                                                                       //
        for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                 // 1082
          ret.push(key);                                                                                               // 1083
          ret.push(obj[key]);                                                                                          // 1084
        }                                                                                                              // 1085
                                                                                                                       //
        return ret;                                                                                                    // 1086
      };                                                                                                               // 1087
                                                                                                                       //
      return LocalCollection._f._cmp(to_array(a), to_array(b));                                                        // 1088
    }                                                                                                                  // 1089
                                                                                                                       //
    if (ta === 4) {                                                                                                    // 1090
      // Array                                                                                                         // 1090
      for (var i = 0;; i++) {                                                                                          // 1091
        if (i === a.length) return i === b.length ? 0 : -1;                                                            // 1092
        if (i === b.length) return 1;                                                                                  // 1094
                                                                                                                       //
        var s = LocalCollection._f._cmp(a[i], b[i]);                                                                   // 1096
                                                                                                                       //
        if (s !== 0) return s;                                                                                         // 1097
      }                                                                                                                // 1099
    }                                                                                                                  // 1100
                                                                                                                       //
    if (ta === 5) {                                                                                                    // 1101
      // binary                                                                                                        // 1101
      // Surprisingly, a small binary blob is always less than a large one in                                          // 1102
      // Mongo.                                                                                                        // 1103
      if (a.length !== b.length) return a.length - b.length;                                                           // 1104
                                                                                                                       //
      for (i = 0; i < a.length; i++) {                                                                                 // 1106
        if (a[i] < b[i]) return -1;                                                                                    // 1107
        if (a[i] > b[i]) return 1;                                                                                     // 1109
      }                                                                                                                // 1111
                                                                                                                       //
      return 0;                                                                                                        // 1112
    }                                                                                                                  // 1113
                                                                                                                       //
    if (ta === 8) {                                                                                                    // 1114
      // boolean                                                                                                       // 1114
      if (a) return b ? 0 : 1;                                                                                         // 1115
      return b ? -1 : 0;                                                                                               // 1116
    }                                                                                                                  // 1117
                                                                                                                       //
    if (ta === 10) // null                                                                                             // 1118
      return 0;                                                                                                        // 1119
    if (ta === 11) // regexp                                                                                           // 1120
      throw Error("Sorting not supported on regular expression"); // XXX                                               // 1121
    // 13: javascript code                                                                                             // 1122
    // 14: symbol                                                                                                      // 1123
    // 15: javascript code with scope                                                                                  // 1124
    // 16: 32-bit integer                                                                                              // 1125
    // 17: timestamp                                                                                                   // 1126
    // 18: 64-bit integer                                                                                              // 1127
    // 255: minkey                                                                                                     // 1128
    // 127: maxkey                                                                                                     // 1129
                                                                                                                       //
    if (ta === 13) // javascript code                                                                                  // 1130
      throw Error("Sorting not supported on Javascript code"); // XXX                                                  // 1131
                                                                                                                       //
    throw Error("Unknown type to sort");                                                                               // 1132
  }                                                                                                                    // 1133
}; // Oddball function used by upsert.                                                                                 // 972
                                                                                                                       //
LocalCollection._removeDollarOperators = function (selector) {                                                         // 1137
  var selectorDoc = {};                                                                                                // 1138
                                                                                                                       //
  for (var k in meteorBabelHelpers.sanitizeForInObject(selector)) {                                                    // 1139
    if (k.substr(0, 1) !== '$') selectorDoc[k] = selector[k];                                                          // 1140
  }                                                                                                                    // 1139
                                                                                                                       //
  return selectorDoc;                                                                                                  // 1142
};                                                                                                                     // 1143
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"sort.js":["babel-runtime/helpers/typeof",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/sort.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
// Give a sort spec, which can be in any of these forms:                                                               // 1
//   {"key1": 1, "key2": -1}                                                                                           // 2
//   [["key1", "asc"], ["key2", "desc"]]                                                                               // 3
//   ["key1", ["key2", "desc"]]                                                                                        // 4
//                                                                                                                     // 5
// (.. with the first form being dependent on the key enumeration                                                      // 6
// behavior of your javascript VM, which usually does what you mean in                                                 // 7
// this case if the key names don't look like integers ..)                                                             // 8
//                                                                                                                     // 9
// return a function that takes two objects, and returns -1 if the                                                     // 10
// first object comes first in order, 1 if the second object comes                                                     // 11
// first, or 0 if neither object comes before the other.                                                               // 12
Minimongo.Sorter = function (spec, options) {                                                                          // 14
  var self = this;                                                                                                     // 15
  options = options || {};                                                                                             // 16
  self._sortSpecParts = [];                                                                                            // 18
  self._sortFunction = null;                                                                                           // 19
                                                                                                                       //
  var addSpecPart = function (path, ascending) {                                                                       // 21
    if (!path) throw Error("sort keys must be non-empty");                                                             // 22
    if (path.charAt(0) === '$') throw Error("unsupported sort key: " + path);                                          // 24
                                                                                                                       //
    self._sortSpecParts.push({                                                                                         // 26
      path: path,                                                                                                      // 27
      lookup: makeLookupFunction(path, {                                                                               // 28
        forSort: true                                                                                                  // 28
      }),                                                                                                              // 28
      ascending: ascending                                                                                             // 29
    });                                                                                                                // 26
  };                                                                                                                   // 31
                                                                                                                       //
  if (spec instanceof Array) {                                                                                         // 33
    for (var i = 0; i < spec.length; i++) {                                                                            // 34
      if (typeof spec[i] === "string") {                                                                               // 35
        addSpecPart(spec[i], true);                                                                                    // 36
      } else {                                                                                                         // 37
        addSpecPart(spec[i][0], spec[i][1] !== "desc");                                                                // 38
      }                                                                                                                // 39
    }                                                                                                                  // 40
  } else if ((typeof spec === "undefined" ? "undefined" : (0, _typeof3.default)(spec)) === "object") {                 // 41
    _.each(spec, function (value, key) {                                                                               // 42
      addSpecPart(key, value >= 0);                                                                                    // 43
    });                                                                                                                // 44
  } else if (typeof spec === "function") {                                                                             // 45
    self._sortFunction = spec;                                                                                         // 46
  } else {                                                                                                             // 47
    throw Error("Bad sort specification: " + JSON.stringify(spec));                                                    // 48
  } // If a function is specified for sorting, we skip the rest.                                                       // 49
                                                                                                                       //
                                                                                                                       //
  if (self._sortFunction) return; // To implement affectedByModifier, we piggy-back on top of Matcher's                // 52
  // affectedByModifier code; we create a selector that is affected by the same                                        // 56
  // modifiers as this sort order. This is only implemented on the server.                                             // 57
                                                                                                                       //
  if (self.affectedByModifier) {                                                                                       // 58
    var selector = {};                                                                                                 // 59
                                                                                                                       //
    _.each(self._sortSpecParts, function (spec) {                                                                      // 60
      selector[spec.path] = 1;                                                                                         // 61
    });                                                                                                                // 62
                                                                                                                       //
    self._selectorForAffectedByModifier = new Minimongo.Matcher(selector);                                             // 63
  }                                                                                                                    // 64
                                                                                                                       //
  self._keyComparator = composeComparators(_.map(self._sortSpecParts, function (spec, i) {                             // 66
    return self._keyFieldComparator(i);                                                                                // 68
  })); // If you specify a matcher for this Sorter, _keyFilter may be set to a                                         // 69
  // function which selects whether or not a given "sort key" (tuple of values                                         // 72
  // for the different sort spec fields) is compatible with the selector.                                              // 73
                                                                                                                       //
  self._keyFilter = null;                                                                                              // 74
  options.matcher && self._useWithMatcher(options.matcher);                                                            // 75
}; // In addition to these methods, sorter_project.js defines combineIntoProjection                                    // 76
// on the server only.                                                                                                 // 79
                                                                                                                       //
                                                                                                                       //
_.extend(Minimongo.Sorter.prototype, {                                                                                 // 80
  getComparator: function (options) {                                                                                  // 81
    var self = this; // If we have no distances, just use the comparator from the source                               // 82
    // specification (which defaults to "everything is equal".                                                         // 85
                                                                                                                       //
    if (!options || !options.distances) {                                                                              // 86
      return self._getBaseComparator();                                                                                // 87
    }                                                                                                                  // 88
                                                                                                                       //
    var distances = options.distances; // Return a comparator which first tries the sort specification, and if that    // 90
    // says "it's equal", breaks ties using $near distances.                                                           // 93
                                                                                                                       //
    return composeComparators([self._getBaseComparator(), function (a, b) {                                            // 94
      if (!distances.has(a._id)) throw Error("Missing distance for " + a._id);                                         // 95
      if (!distances.has(b._id)) throw Error("Missing distance for " + b._id);                                         // 97
      return distances.get(a._id) - distances.get(b._id);                                                              // 99
    }]);                                                                                                               // 100
  },                                                                                                                   // 101
  _getPaths: function () {                                                                                             // 103
    var self = this;                                                                                                   // 104
    return _.pluck(self._sortSpecParts, 'path');                                                                       // 105
  },                                                                                                                   // 106
  // Finds the minimum key from the doc, according to the sort specs.  (We say                                         // 108
  // "minimum" here but this is with respect to the sort spec, so "descending"                                         // 109
  // sort fields mean we're finding the max for that field.)                                                           // 110
  //                                                                                                                   // 111
  // Note that this is NOT "find the minimum value of the first field, the                                             // 112
  // minimum value of the second field, etc"... it's "choose the                                                       // 113
  // lexicographically minimum value of the key vector, allowing only keys which                                       // 114
  // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:                                         // 115
  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and                                       // 116
  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.                                                 // 117
  _getMinKeyFromDoc: function (doc) {                                                                                  // 118
    var self = this;                                                                                                   // 119
    var minKey = null;                                                                                                 // 120
                                                                                                                       //
    self._generateKeysFromDoc(doc, function (key) {                                                                    // 122
      if (!self._keyCompatibleWithSelector(key)) return;                                                               // 123
                                                                                                                       //
      if (minKey === null) {                                                                                           // 126
        minKey = key;                                                                                                  // 127
        return;                                                                                                        // 128
      }                                                                                                                // 129
                                                                                                                       //
      if (self._compareKeys(key, minKey) < 0) {                                                                        // 130
        minKey = key;                                                                                                  // 131
      }                                                                                                                // 132
    }); // This could happen if our key filter somehow filters out all the keys even                                   // 133
    // though somehow the selector matches.                                                                            // 136
                                                                                                                       //
                                                                                                                       //
    if (minKey === null) throw Error("sort selector found no keys in doc?");                                           // 137
    return minKey;                                                                                                     // 139
  },                                                                                                                   // 140
  _keyCompatibleWithSelector: function (key) {                                                                         // 142
    var self = this;                                                                                                   // 143
    return !self._keyFilter || self._keyFilter(key);                                                                   // 144
  },                                                                                                                   // 145
  // Iterates over each possible "key" from doc (ie, over each branch), calling                                        // 147
  // 'cb' with the key.                                                                                                // 148
  _generateKeysFromDoc: function (doc, cb) {                                                                           // 149
    var self = this;                                                                                                   // 150
    if (self._sortSpecParts.length === 0) throw new Error("can't generate keys without a spec"); // maps index -> ({'' -> value} or {path -> value})
                                                                                                                       //
    var valuesByIndexAndPath = [];                                                                                     // 156
                                                                                                                       //
    var pathFromIndices = function (indices) {                                                                         // 158
      return indices.join(',') + ',';                                                                                  // 159
    };                                                                                                                 // 160
                                                                                                                       //
    var knownPaths = null;                                                                                             // 162
                                                                                                                       //
    _.each(self._sortSpecParts, function (spec, whichField) {                                                          // 164
      // Expand any leaf arrays that we find, and ignore those arrays                                                  // 165
      // themselves.  (We never sort based on an array itself.)                                                        // 166
      var branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
      // pretend we found one null value.                                                                              // 170
                                                                                                                       //
      if (!branches.length) branches = [{                                                                              // 171
        value: null                                                                                                    // 172
      }];                                                                                                              // 172
      var usedPaths = false;                                                                                           // 174
      valuesByIndexAndPath[whichField] = {};                                                                           // 175
                                                                                                                       //
      _.each(branches, function (branch) {                                                                             // 176
        if (!branch.arrayIndices) {                                                                                    // 177
          // If there are no array indices for a branch, then it must be the                                           // 178
          // only branch, because the only thing that produces multiple branches                                       // 179
          // is the use of arrays.                                                                                     // 180
          if (branches.length > 1) throw Error("multiple branches but no array used?");                                // 181
          valuesByIndexAndPath[whichField][''] = branch.value;                                                         // 183
          return;                                                                                                      // 184
        }                                                                                                              // 185
                                                                                                                       //
        usedPaths = true;                                                                                              // 187
        var path = pathFromIndices(branch.arrayIndices);                                                               // 188
        if (_.has(valuesByIndexAndPath[whichField], path)) throw Error("duplicate path: " + path);                     // 189
        valuesByIndexAndPath[whichField][path] = branch.value; // If two sort fields both go into arrays, they have to go into the
        // exact same arrays and we have to find the same paths.  This is                                              // 194
        // roughly the same condition that makes MongoDB throw this strange                                            // 195
        // error message.  eg, the main thing is that if sort spec is {a: 1,                                           // 196
        // b:1} then a and b cannot both be arrays.                                                                    // 197
        //                                                                                                             // 198
        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'                                          // 199
        // and 'a.x.y' are both arrays, but we don't allow this for now.                                               // 200
        // #NestedArraySort                                                                                            // 201
        // XXX achieve full compatibility here                                                                         // 202
                                                                                                                       //
        if (knownPaths && !_.has(knownPaths, path)) {                                                                  // 203
          throw Error("cannot index parallel arrays");                                                                 // 204
        }                                                                                                              // 205
      });                                                                                                              // 206
                                                                                                                       //
      if (knownPaths) {                                                                                                // 208
        // Similarly to above, paths must match everywhere, unless this is a                                           // 209
        // non-array field.                                                                                            // 210
        if (!_.has(valuesByIndexAndPath[whichField], '') && _.size(knownPaths) !== _.size(valuesByIndexAndPath[whichField])) {
          throw Error("cannot index parallel arrays!");                                                                // 213
        }                                                                                                              // 214
      } else if (usedPaths) {                                                                                          // 215
        knownPaths = {};                                                                                               // 216
                                                                                                                       //
        _.each(valuesByIndexAndPath[whichField], function (x, path) {                                                  // 217
          knownPaths[path] = true;                                                                                     // 218
        });                                                                                                            // 219
      }                                                                                                                // 220
    });                                                                                                                // 221
                                                                                                                       //
    if (!knownPaths) {                                                                                                 // 223
      // Easy case: no use of arrays.                                                                                  // 224
      var soleKey = _.map(valuesByIndexAndPath, function (values) {                                                    // 225
        if (!_.has(values, '')) throw Error("no value in sole key case?");                                             // 226
        return values[''];                                                                                             // 228
      });                                                                                                              // 229
                                                                                                                       //
      cb(soleKey);                                                                                                     // 230
      return;                                                                                                          // 231
    }                                                                                                                  // 232
                                                                                                                       //
    _.each(knownPaths, function (x, path) {                                                                            // 234
      var key = _.map(valuesByIndexAndPath, function (values) {                                                        // 235
        if (_.has(values, '')) return values[''];                                                                      // 236
        if (!_.has(values, path)) throw Error("missing path?");                                                        // 238
        return values[path];                                                                                           // 240
      });                                                                                                              // 241
                                                                                                                       //
      cb(key);                                                                                                         // 242
    });                                                                                                                // 243
  },                                                                                                                   // 244
  // Takes in two keys: arrays whose lengths match the number of spec                                                  // 246
  // parts. Returns negative, 0, or positive based on using the sort spec to                                           // 247
  // compare fields.                                                                                                   // 248
  _compareKeys: function (key1, key2) {                                                                                // 249
    var self = this;                                                                                                   // 250
                                                                                                                       //
    if (key1.length !== self._sortSpecParts.length || key2.length !== self._sortSpecParts.length) {                    // 251
      throw Error("Key has wrong length");                                                                             // 253
    }                                                                                                                  // 254
                                                                                                                       //
    return self._keyComparator(key1, key2);                                                                            // 256
  },                                                                                                                   // 257
  // Given an index 'i', returns a comparator that compares two key arrays based                                       // 259
  // on field 'i'.                                                                                                     // 260
  _keyFieldComparator: function (i) {                                                                                  // 261
    var self = this;                                                                                                   // 262
    var invert = !self._sortSpecParts[i].ascending;                                                                    // 263
    return function (key1, key2) {                                                                                     // 264
      var compare = LocalCollection._f._cmp(key1[i], key2[i]);                                                         // 265
                                                                                                                       //
      if (invert) compare = -compare;                                                                                  // 266
      return compare;                                                                                                  // 268
    };                                                                                                                 // 269
  },                                                                                                                   // 270
  // Returns a comparator that represents the sort specification (but not                                              // 272
  // including a possible geoquery distance tie-breaker).                                                              // 273
  _getBaseComparator: function () {                                                                                    // 274
    var self = this;                                                                                                   // 275
    if (self._sortFunction) return self._sortFunction; // If we're only sorting on geoquery distance and no specs, just say
    // everything is equal.                                                                                            // 281
                                                                                                                       //
    if (!self._sortSpecParts.length) {                                                                                 // 282
      return function (doc1, doc2) {                                                                                   // 283
        return 0;                                                                                                      // 284
      };                                                                                                               // 285
    }                                                                                                                  // 286
                                                                                                                       //
    return function (doc1, doc2) {                                                                                     // 288
      var key1 = self._getMinKeyFromDoc(doc1);                                                                         // 289
                                                                                                                       //
      var key2 = self._getMinKeyFromDoc(doc2);                                                                         // 290
                                                                                                                       //
      return self._compareKeys(key1, key2);                                                                            // 291
    };                                                                                                                 // 292
  },                                                                                                                   // 293
  // In MongoDB, if you have documents                                                                                 // 295
  //    {_id: 'x', a: [1, 10]} and                                                                                     // 296
  //    {_id: 'y', a: [5, 15]},                                                                                        // 297
  // then C.find({}, {sort: {a: 1}}) puts x before y (1 comes before 5).                                               // 298
  // But  C.find({a: {$gt: 3}}, {sort: {a: 1}}) puts y before x (1 does not                                            // 299
  // match the selector, and 5 comes before 10).                                                                       // 300
  //                                                                                                                   // 301
  // The way this works is pretty subtle!  For example, if the documents                                               // 302
  // are instead {_id: 'x', a: [{x: 1}, {x: 10}]}) and                                                                 // 303
  //             {_id: 'y', a: [{x: 5}, {x: 15}]}),                                                                    // 304
  // then C.find({'a.x': {$gt: 3}}, {sort: {'a.x': 1}}) and                                                            // 305
  //      C.find({a: {$elemMatch: {x: {$gt: 3}}}}, {sort: {'a.x': 1}})                                                 // 306
  // both follow this rule (y before x).  (ie, you do have to apply this                                               // 307
  // through $elemMatch.)                                                                                              // 308
  //                                                                                                                   // 309
  // So if you pass a matcher to this sorter's constructor, we will attempt to                                         // 310
  // skip sort keys that don't match the selector. The logic here is pretty                                            // 311
  // subtle and undocumented; we've gotten as close as we can figure out based                                         // 312
  // on our understanding of Mongo's behavior.                                                                         // 313
  _useWithMatcher: function (matcher) {                                                                                // 314
    var self = this;                                                                                                   // 315
    if (self._keyFilter) throw Error("called _useWithMatcher twice?"); // If we are only sorting by distance, then we're not going to bother to
    // build a key filter.                                                                                             // 321
    // XXX figure out how geoqueries interact with this stuff                                                          // 322
                                                                                                                       //
    if (_.isEmpty(self._sortSpecParts)) return;                                                                        // 323
    var selector = matcher._selector; // If the user just passed a literal function to find(), then we can't get a     // 326
    // key filter from it.                                                                                             // 329
                                                                                                                       //
    if (selector instanceof Function) return;                                                                          // 330
    var constraintsByPath = {};                                                                                        // 333
                                                                                                                       //
    _.each(self._sortSpecParts, function (spec, i) {                                                                   // 334
      constraintsByPath[spec.path] = [];                                                                               // 335
    });                                                                                                                // 336
                                                                                                                       //
    _.each(selector, function (subSelector, key) {                                                                     // 338
      // XXX support $and and $or                                                                                      // 339
      var constraints = constraintsByPath[key];                                                                        // 341
      if (!constraints) return; // XXX it looks like the real MongoDB implementation isn't "does the                   // 342
      // regexp match" but "does the value fall into a range named by the                                              // 346
      // literal prefix of the regexp", ie "foo" in /^foo(bar|baz)+/  But                                              // 347
      // "does the regexp match" is a good approximation.                                                              // 348
                                                                                                                       //
      if (subSelector instanceof RegExp) {                                                                             // 349
        // As far as we can tell, using either of the options that both we and                                         // 350
        // MongoDB support ('i' and 'm') disables use of the key filter. This                                          // 351
        // makes sense: MongoDB mostly appears to be calculating ranges of an                                          // 352
        // index to use, which means it only cares about regexps that match                                            // 353
        // one range (with a literal prefix), and both 'i' and 'm' prevent the                                         // 354
        // literal prefix of the regexp from actually meaning one range.                                               // 355
        if (subSelector.ignoreCase || subSelector.multiline) return;                                                   // 356
        constraints.push(regexpElementMatcher(subSelector));                                                           // 358
        return;                                                                                                        // 359
      }                                                                                                                // 360
                                                                                                                       //
      if (isOperatorObject(subSelector)) {                                                                             // 362
        _.each(subSelector, function (operand, operator) {                                                             // 363
          if (_.contains(['$lt', '$lte', '$gt', '$gte'], operator)) {                                                  // 364
            // XXX this depends on us knowing that these operators don't use any                                       // 365
            // of the arguments to compileElementSelector other than operand.                                          // 366
            constraints.push(ELEMENT_OPERATORS[operator].compileElementSelector(operand));                             // 367
          } // See comments in the RegExp block above.                                                                 // 369
                                                                                                                       //
                                                                                                                       //
          if (operator === '$regex' && !subSelector.$options) {                                                        // 372
            constraints.push(ELEMENT_OPERATORS.$regex.compileElementSelector(operand, subSelector));                   // 373
          } // XXX support {$exists: true}, $mod, $type, $in, $elemMatch                                               // 376
                                                                                                                       //
        });                                                                                                            // 379
                                                                                                                       //
        return;                                                                                                        // 380
      } // OK, it's an equality thing.                                                                                 // 381
                                                                                                                       //
                                                                                                                       //
      constraints.push(equalityElementMatcher(subSelector));                                                           // 384
    }); // It appears that the first sort field is treated differently from the                                        // 385
    // others; we shouldn't create a key filter unless the first sort field is                                         // 388
    // restricted, though after that point we can restrict the other sort fields                                       // 389
    // or not as we wish.                                                                                              // 390
                                                                                                                       //
                                                                                                                       //
    if (_.isEmpty(constraintsByPath[self._sortSpecParts[0].path])) return;                                             // 391
                                                                                                                       //
    self._keyFilter = function (key) {                                                                                 // 394
      return _.all(self._sortSpecParts, function (specPart, index) {                                                   // 395
        return _.all(constraintsByPath[specPart.path], function (f) {                                                  // 396
          return f(key[index]);                                                                                        // 397
        });                                                                                                            // 398
      });                                                                                                              // 399
    };                                                                                                                 // 400
  }                                                                                                                    // 401
}); // Given an array of comparators                                                                                   // 80
// (functions (a,b)->(negative or positive or zero)), returns a single                                                 // 405
// comparator which uses each comparator in order and returns the first                                                // 406
// non-zero value.                                                                                                     // 407
                                                                                                                       //
                                                                                                                       //
var composeComparators = function (comparatorArray) {                                                                  // 408
  return function (a, b) {                                                                                             // 409
    for (var i = 0; i < comparatorArray.length; ++i) {                                                                 // 410
      var compare = comparatorArray[i](a, b);                                                                          // 411
      if (compare !== 0) return compare;                                                                               // 412
    }                                                                                                                  // 414
                                                                                                                       //
    return 0;                                                                                                          // 415
  };                                                                                                                   // 416
};                                                                                                                     // 417
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"projection.js":["babel-runtime/helpers/typeof",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/projection.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
// Knows how to compile a fields projection to a predicate function.                                                   // 1
// @returns - Function: a closure that filters out an object according to the                                          // 2
//            fields projection rules:                                                                                 // 3
//            @param obj - Object: MongoDB-styled document                                                             // 4
//            @returns - Object: a document with the fields filtered out                                               // 5
//                       according to projection rules. Doesn't retain subfields                                       // 6
//                       of passed argument.                                                                           // 7
LocalCollection._compileProjection = function (fields) {                                                               // 8
  LocalCollection._checkSupportedProjection(fields);                                                                   // 9
                                                                                                                       //
  var _idProjection = _.isUndefined(fields._id) ? true : fields._id;                                                   // 11
                                                                                                                       //
  var details = projectionDetails(fields); // returns transformed doc according to ruleTree                            // 12
                                                                                                                       //
  var transform = function (doc, ruleTree) {                                                                           // 15
    // Special case for "sets"                                                                                         // 16
    if (_.isArray(doc)) return _.map(doc, function (subdoc) {                                                          // 17
      return transform(subdoc, ruleTree);                                                                              // 18
    });                                                                                                                // 18
    var res = details.including ? {} : EJSON.clone(doc);                                                               // 20
                                                                                                                       //
    _.each(ruleTree, function (rule, key) {                                                                            // 21
      if (!_.has(doc, key)) return;                                                                                    // 22
                                                                                                                       //
      if (_.isObject(rule)) {                                                                                          // 24
        // For sub-objects/subsets we branch                                                                           // 25
        if (_.isObject(doc[key])) res[key] = transform(doc[key], rule); // Otherwise we don't even touch this subfield
      } else if (details.including) res[key] = EJSON.clone(doc[key]);else delete res[key];                             // 29
    });                                                                                                                // 33
                                                                                                                       //
    return res;                                                                                                        // 35
  };                                                                                                                   // 36
                                                                                                                       //
  return function (obj) {                                                                                              // 38
    var res = transform(obj, details.tree);                                                                            // 39
    if (_idProjection && _.has(obj, '_id')) res._id = obj._id;                                                         // 41
    if (!_idProjection && _.has(res, '_id')) delete res._id;                                                           // 43
    return res;                                                                                                        // 45
  };                                                                                                                   // 46
}; // Traverses the keys of passed projection and constructs a tree where all                                          // 47
// leaves are either all True or all False                                                                             // 50
// @returns Object:                                                                                                    // 51
//  - tree - Object - tree representation of keys involved in projection                                               // 52
//  (exception for '_id' as it is a special case handled separately)                                                   // 53
//  - including - Boolean - "take only certain fields" type of projection                                              // 54
                                                                                                                       //
                                                                                                                       //
projectionDetails = function (fields) {                                                                                // 55
  // Find the non-_id keys (_id is handled specially because it is included unless                                     // 56
  // explicitly excluded). Sort the keys, so that our code to detect overlaps                                          // 57
  // like 'foo' and 'foo.bar' can assume that 'foo' comes first.                                                       // 58
  var fieldsKeys = _.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
  // required to determine if this is an exclusion or exclusion. Also keep an                                          // 62
  // inclusive _id, since inclusive _id follows the normal rules about mixing                                          // 63
  // inclusive and exclusive fields. If _id is not the only field in the                                               // 64
  // projection and is exclusive, remove it so it can be handled later by a                                            // 65
  // special case, since exclusive _id is always allowed.                                                              // 66
                                                                                                                       //
                                                                                                                       //
  if (fieldsKeys.length > 0 && !(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(_.contains(fieldsKeys, '_id') && fields['_id'])) fieldsKeys = _.reject(fieldsKeys, function (key) {
    return key === '_id';                                                                                              // 70
  });                                                                                                                  // 70
  var including = null; // Unknown                                                                                     // 72
                                                                                                                       //
  _.each(fieldsKeys, function (keyPath) {                                                                              // 74
    var rule = !!fields[keyPath];                                                                                      // 75
    if (including === null) including = rule;                                                                          // 76
    if (including !== rule) // This error message is copied from MongoDB shell                                         // 78
      throw MinimongoError("You cannot currently mix including and excluding fields.");                                // 80
  });                                                                                                                  // 81
                                                                                                                       //
  var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {                                                  // 84
    return including;                                                                                                  // 86
  }, function (node, path, fullPath) {                                                                                 // 86
    // Check passed projection fields' keys: If you have two rules such as                                             // 88
    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If                                              // 89
    // that happens, there is a probability you are doing something wrong,                                             // 90
    // framework should notify you about such mistake earlier on cursor                                                // 91
    // compilation step than later during runtime.  Note, that real mongo                                              // 92
    // doesn't do anything about it and the later rule appears in projection                                           // 93
    // project, more priority it takes.                                                                                // 94
    //                                                                                                                 // 95
    // Example, assume following in mongo shell:                                                                       // 96
    // > db.coll.insert({ a: { b: 23, c: 44 } })                                                                       // 97
    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })                                                                        // 98
    // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23 } }                                            // 99
    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })                                                                        // 100
    // { "_id" : ObjectId("520bfe456024608e8ef24af3"), "a" : { "b" : 23, "c" : 44 } }                                  // 101
    //                                                                                                                 // 102
    // Note, how second time the return set of keys is different.                                                      // 103
    var currentPath = fullPath;                                                                                        // 105
    var anotherPath = path;                                                                                            // 106
    throw MinimongoError("both " + currentPath + " and " + anotherPath + " found in fields option, using both of them may trigger " + "unexpected behavior. Did you mean to use only one of them?");
  });                                                                                                                  // 110
  return {                                                                                                             // 112
    tree: projectionRulesTree,                                                                                         // 113
    including: including                                                                                               // 114
  };                                                                                                                   // 112
}; // paths - Array: list of mongo style paths                                                                         // 116
// newLeafFn - Function: of form function(path) should return a scalar value to                                        // 119
//                       put into list created for that path                                                           // 120
// conflictFn - Function: of form function(node, path, fullPath) is called                                             // 121
//                        when building a tree path for 'fullPath' node on                                             // 122
//                        'path' was already a leaf with a value. Must return a                                        // 123
//                        conflict resolution.                                                                         // 124
// initial tree - Optional Object: starting tree.                                                                      // 125
// @returns - Object: tree represented as a set of nested objects                                                      // 126
                                                                                                                       //
                                                                                                                       //
pathsToTree = function (paths, newLeafFn, conflictFn, tree) {                                                          // 127
  tree = tree || {};                                                                                                   // 128
                                                                                                                       //
  _.each(paths, function (keyPath) {                                                                                   // 129
    var treePos = tree;                                                                                                // 130
    var pathArr = keyPath.split('.'); // use _.all just for iteration with break                                       // 131
                                                                                                                       //
    var success = _.all(pathArr.slice(0, -1), function (key, idx) {                                                    // 134
      if (!_.has(treePos, key)) treePos[key] = {};else if (!_.isObject(treePos[key])) {                                // 135
        treePos[key] = conflictFn(treePos[key], pathArr.slice(0, idx + 1).join('.'), keyPath); // break out of loop if we are failing for this path
                                                                                                                       //
        if (!_.isObject(treePos[key])) return false;                                                                   // 142
      }                                                                                                                // 144
      treePos = treePos[key];                                                                                          // 146
      return true;                                                                                                     // 147
    });                                                                                                                // 148
                                                                                                                       //
    if (success) {                                                                                                     // 150
      var lastKey = _.last(pathArr);                                                                                   // 151
                                                                                                                       //
      if (!_.has(treePos, lastKey)) treePos[lastKey] = newLeafFn(keyPath);else treePos[lastKey] = conflictFn(treePos[lastKey], keyPath, keyPath);
    }                                                                                                                  // 156
  });                                                                                                                  // 157
                                                                                                                       //
  return tree;                                                                                                         // 159
};                                                                                                                     // 160
                                                                                                                       //
LocalCollection._checkSupportedProjection = function (fields) {                                                        // 162
  if (!_.isObject(fields) || _.isArray(fields)) throw MinimongoError("fields option must be an object");               // 163
                                                                                                                       //
  _.each(fields, function (val, keyPath) {                                                                             // 166
    if (_.contains(keyPath.split('.'), '$')) throw MinimongoError("Minimongo doesn't support $ operator in projections yet.");
    if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) === 'object' && _.intersection(['$elemMatch', '$meta', '$slice'], _.keys(val)).length > 0) throw MinimongoError("Minimongo doesn't support operators in projections yet.");
    if (_.indexOf([1, 0, true, false], val) === -1) throw MinimongoError("Projection values should be one of 1, 0, true, or false");
  });                                                                                                                  // 173
};                                                                                                                     // 174
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"modify.js":["babel-runtime/helpers/typeof",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/modify.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
// XXX need a strategy for passing the binding of $ into this                                                          // 1
// function, from the compiled selector                                                                                // 2
//                                                                                                                     // 3
// maybe just {key.up.to.just.before.dollarsign: array_index}                                                          // 4
//                                                                                                                     // 5
// XXX atomicity: if one modification fails, do we roll back the whole                                                 // 6
// change?                                                                                                             // 7
//                                                                                                                     // 8
// options:                                                                                                            // 9
//   - isInsert is set when _modify is being called to compute the document to                                         // 10
//     insert as part of an upsert operation. We use this primarily to figure                                          // 11
//     out when to set the fields in $setOnInsert, if present.                                                         // 12
LocalCollection._modify = function (doc, mod, options) {                                                               // 13
  options = options || {};                                                                                             // 14
  if (!isPlainObject(mod)) throw MinimongoError("Modifier must be an object"); // Make sure the caller can't mutate our data structures.
                                                                                                                       //
  mod = EJSON.clone(mod);                                                                                              // 19
  var isModifier = isOperatorObject(mod);                                                                              // 21
  var newDoc;                                                                                                          // 23
                                                                                                                       //
  if (!isModifier) {                                                                                                   // 25
    if (mod._id && !EJSON.equals(doc._id, mod._id)) throw MinimongoError("Cannot change the _id of a document"); // replace the whole document
                                                                                                                       //
    for (var k in meteorBabelHelpers.sanitizeForInObject(mod)) {                                                       // 30
      if (/\./.test(k)) throw MinimongoError("When replacing document, field name may not contain '.'");               // 31
    }                                                                                                                  // 34
                                                                                                                       //
    newDoc = mod;                                                                                                      // 35
  } else {                                                                                                             // 36
    // apply modifiers to the doc.                                                                                     // 37
    newDoc = EJSON.clone(doc);                                                                                         // 38
                                                                                                                       //
    _.each(mod, function (operand, op) {                                                                               // 40
      var modFunc = MODIFIERS[op]; // Treat $setOnInsert as $set if this is an insert.                                 // 41
                                                                                                                       //
      if (options.isInsert && op === '$setOnInsert') modFunc = MODIFIERS['$set'];                                      // 43
      if (!modFunc) throw MinimongoError("Invalid modifier specified " + op);                                          // 45
                                                                                                                       //
      _.each(operand, function (arg, keypath) {                                                                        // 47
        if (keypath === '') {                                                                                          // 48
          throw MinimongoError("An empty update path is not valid.");                                                  // 49
        }                                                                                                              // 50
                                                                                                                       //
        if (keypath === '_id' && op !== '$setOnInsert') {                                                              // 52
          throw MinimongoError("Mod on _id not allowed");                                                              // 53
        }                                                                                                              // 54
                                                                                                                       //
        var keyparts = keypath.split('.');                                                                             // 56
                                                                                                                       //
        if (!_.all(keyparts, _.identity)) {                                                                            // 58
          throw MinimongoError("The update path '" + keypath + "' contains an empty field name, which is not allowed.");
        }                                                                                                              // 62
                                                                                                                       //
        var noCreate = _.has(NO_CREATE_MODIFIERS, op);                                                                 // 64
                                                                                                                       //
        var forbidArray = op === "$rename";                                                                            // 65
        var target = findModTarget(newDoc, keyparts, {                                                                 // 66
          noCreate: NO_CREATE_MODIFIERS[op],                                                                           // 67
          forbidArray: op === "$rename",                                                                               // 68
          arrayIndices: options.arrayIndices                                                                           // 69
        });                                                                                                            // 66
        var field = keyparts.pop();                                                                                    // 71
        modFunc(target, field, arg, keypath, newDoc);                                                                  // 72
      });                                                                                                              // 73
    });                                                                                                                // 74
  } // move new document into place.                                                                                   // 75
                                                                                                                       //
                                                                                                                       //
  _.each(_.keys(doc), function (k) {                                                                                   // 78
    // Note: this used to be for (var k in doc) however, this does not                                                 // 79
    // work right in Opera. Deleting from a doc while iterating over it                                                // 80
    // would sometimes cause opera to skip some keys.                                                                  // 81
    if (k !== '_id') delete doc[k];                                                                                    // 82
  });                                                                                                                  // 84
                                                                                                                       //
  _.each(newDoc, function (v, k) {                                                                                     // 85
    doc[k] = v;                                                                                                        // 86
  });                                                                                                                  // 87
}; // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],                                              // 88
// and then you would operate on the 'e' property of the returned                                                      // 91
// object.                                                                                                             // 92
//                                                                                                                     // 93
// if options.noCreate is falsey, creates intermediate levels of                                                       // 94
// structure as necessary, like mkdir -p (and raises an exception if                                                   // 95
// that would mean giving a non-numeric property to an array.) if                                                      // 96
// options.noCreate is true, return undefined instead.                                                                 // 97
//                                                                                                                     // 98
// may modify the last element of keyparts to signal to the caller that it needs                                       // 99
// to use a different value to index into the returned object (for example,                                            // 100
// ['a', '01'] -> ['a', 1]).                                                                                           // 101
//                                                                                                                     // 102
// if forbidArray is true, return null if the keypath goes through an array.                                           // 103
//                                                                                                                     // 104
// if options.arrayIndices is set, use its first element for the (first) '$' in                                        // 105
// the path.                                                                                                           // 106
                                                                                                                       //
                                                                                                                       //
var findModTarget = function (doc, keyparts, options) {                                                                // 107
  options = options || {};                                                                                             // 108
  var usedArrayIndex = false;                                                                                          // 109
                                                                                                                       //
  for (var i = 0; i < keyparts.length; i++) {                                                                          // 110
    var last = i === keyparts.length - 1;                                                                              // 111
    var keypart = keyparts[i];                                                                                         // 112
    var indexable = isIndexable(doc);                                                                                  // 113
                                                                                                                       //
    if (!indexable) {                                                                                                  // 114
      if (options.noCreate) return undefined;                                                                          // 115
      var e = MinimongoError("cannot use the part '" + keypart + "' to traverse " + doc);                              // 117
      e.setPropertyError = true;                                                                                       // 119
      throw e;                                                                                                         // 120
    }                                                                                                                  // 121
                                                                                                                       //
    if (doc instanceof Array) {                                                                                        // 122
      if (options.forbidArray) return null;                                                                            // 123
                                                                                                                       //
      if (keypart === '$') {                                                                                           // 125
        if (usedArrayIndex) throw MinimongoError("Too many positional (i.e. '$') elements");                           // 126
                                                                                                                       //
        if (!options.arrayIndices || !options.arrayIndices.length) {                                                   // 128
          throw MinimongoError("The positional operator did not find the " + "match needed from the query");           // 129
        }                                                                                                              // 131
                                                                                                                       //
        keypart = options.arrayIndices[0];                                                                             // 132
        usedArrayIndex = true;                                                                                         // 133
      } else if (isNumericKey(keypart)) {                                                                              // 134
        keypart = parseInt(keypart);                                                                                   // 135
      } else {                                                                                                         // 136
        if (options.noCreate) return undefined;                                                                        // 137
        throw MinimongoError("can't append to array using string field name [" + keypart + "]");                       // 139
      }                                                                                                                // 142
                                                                                                                       //
      if (last) // handle 'a.01'                                                                                       // 143
        keyparts[i] = keypart;                                                                                         // 145
      if (options.noCreate && keypart >= doc.length) return undefined;                                                 // 146
                                                                                                                       //
      while (doc.length < keypart) {                                                                                   // 148
        doc.push(null);                                                                                                // 149
      }                                                                                                                // 148
                                                                                                                       //
      if (!last) {                                                                                                     // 150
        if (doc.length === keypart) doc.push({});else if ((0, _typeof3.default)(doc[keypart]) !== "object") throw MinimongoError("can't modify field '" + keyparts[i + 1] + "' of list value " + JSON.stringify(doc[keypart]));
      }                                                                                                                // 156
    } else {                                                                                                           // 157
      if (keypart.length && keypart.substr(0, 1) === '$') throw MinimongoError("can't set field named " + keypart);    // 158
                                                                                                                       //
      if (!(keypart in doc)) {                                                                                         // 160
        if (options.noCreate) return undefined;                                                                        // 161
        if (!last) doc[keypart] = {};                                                                                  // 163
      }                                                                                                                // 165
    }                                                                                                                  // 166
                                                                                                                       //
    if (last) return doc;                                                                                              // 168
    doc = doc[keypart];                                                                                                // 170
  } // notreached                                                                                                      // 171
                                                                                                                       //
};                                                                                                                     // 174
                                                                                                                       //
var NO_CREATE_MODIFIERS = {                                                                                            // 176
  $unset: true,                                                                                                        // 177
  $pop: true,                                                                                                          // 178
  $rename: true,                                                                                                       // 179
  $pull: true,                                                                                                         // 180
  $pullAll: true                                                                                                       // 181
};                                                                                                                     // 176
var MODIFIERS = {                                                                                                      // 184
  $currentDate: function (target, field, arg) {                                                                        // 185
    if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg.hasOwnProperty("$type")) {
      if (arg.$type !== "date") {                                                                                      // 187
        throw MinimongoError("Minimongo does currently only support the date type in $currentDate modifiers");         // 188
      }                                                                                                                // 189
    } else if (arg !== true) {                                                                                         // 190
      throw MinimongoError("Invalid $currentDate modifier");                                                           // 191
    }                                                                                                                  // 192
                                                                                                                       //
    target[field] = new Date();                                                                                        // 193
  },                                                                                                                   // 194
  $min: function (target, field, arg) {                                                                                // 195
    if (typeof arg !== "number") {                                                                                     // 196
      throw MinimongoError("Modifier $min allowed for numbers only");                                                  // 197
    }                                                                                                                  // 198
                                                                                                                       //
    if (field in target) {                                                                                             // 199
      if (typeof target[field] !== "number") {                                                                         // 200
        throw MinimongoError("Cannot apply $min modifier to non-number");                                              // 201
      }                                                                                                                // 202
                                                                                                                       //
      if (target[field] > arg) {                                                                                       // 203
        target[field] = arg;                                                                                           // 204
      }                                                                                                                // 205
    } else {                                                                                                           // 206
      target[field] = arg;                                                                                             // 207
    }                                                                                                                  // 208
  },                                                                                                                   // 209
  $max: function (target, field, arg) {                                                                                // 210
    if (typeof arg !== "number") {                                                                                     // 211
      throw MinimongoError("Modifier $max allowed for numbers only");                                                  // 212
    }                                                                                                                  // 213
                                                                                                                       //
    if (field in target) {                                                                                             // 214
      if (typeof target[field] !== "number") {                                                                         // 215
        throw MinimongoError("Cannot apply $max modifier to non-number");                                              // 216
      }                                                                                                                // 217
                                                                                                                       //
      if (target[field] < arg) {                                                                                       // 218
        target[field] = arg;                                                                                           // 219
      }                                                                                                                // 220
    } else {                                                                                                           // 221
      target[field] = arg;                                                                                             // 222
    }                                                                                                                  // 223
  },                                                                                                                   // 224
  $inc: function (target, field, arg) {                                                                                // 225
    if (typeof arg !== "number") throw MinimongoError("Modifier $inc allowed for numbers only");                       // 226
                                                                                                                       //
    if (field in target) {                                                                                             // 228
      if (typeof target[field] !== "number") throw MinimongoError("Cannot apply $inc modifier to non-number");         // 229
      target[field] += arg;                                                                                            // 231
    } else {                                                                                                           // 232
      target[field] = arg;                                                                                             // 233
    }                                                                                                                  // 234
  },                                                                                                                   // 235
  $set: function (target, field, arg) {                                                                                // 236
    if (!_.isObject(target)) {                                                                                         // 237
      // not an array or an object                                                                                     // 237
      var e = MinimongoError("Cannot set property on non-object field");                                               // 238
      e.setPropertyError = true;                                                                                       // 239
      throw e;                                                                                                         // 240
    }                                                                                                                  // 241
                                                                                                                       //
    if (target === null) {                                                                                             // 242
      var e = MinimongoError("Cannot set property on null");                                                           // 243
      e.setPropertyError = true;                                                                                       // 244
      throw e;                                                                                                         // 245
    }                                                                                                                  // 246
                                                                                                                       //
    if (_.isString(field) && field.indexOf('\0') > -1) {                                                               // 247
      // Null bytes are not allowed in Mongo field names                                                               // 248
      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                 // 249
      throw MinimongoError("Key " + field + " must not contain null bytes");                                           // 250
    }                                                                                                                  // 251
                                                                                                                       //
    target[field] = arg;                                                                                               // 252
  },                                                                                                                   // 253
  $setOnInsert: function (target, field, arg) {// converted to `$set` in `_modify`                                     // 254
  },                                                                                                                   // 256
  $unset: function (target, field, arg) {                                                                              // 257
    if (target !== undefined) {                                                                                        // 258
      if (target instanceof Array) {                                                                                   // 259
        if (field in target) target[field] = null;                                                                     // 260
      } else delete target[field];                                                                                     // 262
    }                                                                                                                  // 264
  },                                                                                                                   // 265
  $push: function (target, field, arg) {                                                                               // 266
    if (target[field] === undefined) target[field] = [];                                                               // 267
    if (!(target[field] instanceof Array)) throw MinimongoError("Cannot apply $push modifier to non-array");           // 269
                                                                                                                       //
    if (!(arg && arg.$each)) {                                                                                         // 272
      // Simple mode: not $each                                                                                        // 273
      target[field].push(arg);                                                                                         // 274
      return;                                                                                                          // 275
    } // Fancy mode: $each (and maybe $slice and $sort and $position)                                                  // 276
                                                                                                                       //
                                                                                                                       //
    var toPush = arg.$each;                                                                                            // 279
    if (!(toPush instanceof Array)) throw MinimongoError("$each must be an array"); // Parse $position                 // 280
                                                                                                                       //
    var position = undefined;                                                                                          // 284
                                                                                                                       //
    if ('$position' in arg) {                                                                                          // 285
      if (typeof arg.$position !== "number") throw MinimongoError("$position must be a numeric value"); // XXX should check to make sure integer
                                                                                                                       //
      if (arg.$position < 0) throw MinimongoError("$position in $push must be zero or positive");                      // 289
      position = arg.$position;                                                                                        // 291
    } // Parse $slice.                                                                                                 // 292
                                                                                                                       //
                                                                                                                       //
    var slice = undefined;                                                                                             // 295
                                                                                                                       //
    if ('$slice' in arg) {                                                                                             // 296
      if (typeof arg.$slice !== "number") throw MinimongoError("$slice must be a numeric value"); // XXX should check to make sure integer
                                                                                                                       //
      if (arg.$slice > 0) throw MinimongoError("$slice in $push must be zero or negative");                            // 300
      slice = arg.$slice;                                                                                              // 302
    } // Parse $sort.                                                                                                  // 303
                                                                                                                       //
                                                                                                                       //
    var sortFunction = undefined;                                                                                      // 306
                                                                                                                       //
    if (arg.$sort) {                                                                                                   // 307
      if (slice === undefined) throw MinimongoError("$sort requires $slice to be present"); // XXX this allows us to use a $sort whose value is an array, but that's
      // actually an extension of the Node driver, so it won't work                                                    // 311
      // server-side. Could be confusing!                                                                              // 312
      // XXX is it correct that we don't do geo-stuff here?                                                            // 313
                                                                                                                       //
      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();                                                  // 314
                                                                                                                       //
      for (var i = 0; i < toPush.length; i++) {                                                                        // 315
        if (LocalCollection._f._type(toPush[i]) !== 3) {                                                               // 316
          throw MinimongoError("$push like modifiers using $sort " + "require all elements to be objects");            // 317
        }                                                                                                              // 319
      }                                                                                                                // 320
    } // Actually push.                                                                                                // 321
                                                                                                                       //
                                                                                                                       //
    if (position === undefined) {                                                                                      // 324
      for (var j = 0; j < toPush.length; j++) {                                                                        // 325
        target[field].push(toPush[j]);                                                                                 // 326
      }                                                                                                                // 325
    } else {                                                                                                           // 327
      var spliceArguments = [position, 0];                                                                             // 328
                                                                                                                       //
      for (var j = 0; j < toPush.length; j++) {                                                                        // 329
        spliceArguments.push(toPush[j]);                                                                               // 330
      }                                                                                                                // 329
                                                                                                                       //
      Array.prototype.splice.apply(target[field], spliceArguments);                                                    // 331
    } // Actually sort.                                                                                                // 332
                                                                                                                       //
                                                                                                                       //
    if (sortFunction) target[field].sort(sortFunction); // Actually slice.                                             // 335
                                                                                                                       //
    if (slice !== undefined) {                                                                                         // 339
      if (slice === 0) target[field] = []; // differs from Array.slice!                                                // 340
      else target[field] = target[field].slice(slice);                                                                 // 340
    }                                                                                                                  // 344
  },                                                                                                                   // 345
  $pushAll: function (target, field, arg) {                                                                            // 346
    if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg instanceof Array)) throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");
    var x = target[field];                                                                                             // 349
    if (x === undefined) target[field] = arg;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pushAll modifier to non-array");else {
      for (var i = 0; i < arg.length; i++) {                                                                           // 355
        x.push(arg[i]);                                                                                                // 356
      }                                                                                                                // 355
    }                                                                                                                  // 357
  },                                                                                                                   // 358
  $addToSet: function (target, field, arg) {                                                                           // 359
    var isEach = false;                                                                                                // 360
                                                                                                                       //
    if ((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object") {                        // 361
      //check if first key is '$each'                                                                                  // 362
      for (var k in meteorBabelHelpers.sanitizeForInObject(arg)) {                                                     // 363
        if (k === "$each") isEach = true;                                                                              // 364
        break;                                                                                                         // 366
      }                                                                                                                // 367
    }                                                                                                                  // 368
                                                                                                                       //
    var values = isEach ? arg["$each"] : [arg];                                                                        // 369
    var x = target[field];                                                                                             // 370
    if (x === undefined) target[field] = values;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $addToSet modifier to non-array");else {
      _.each(values, function (value) {                                                                                // 376
        for (var i = 0; i < x.length; i++) {                                                                           // 377
          if (LocalCollection._f._equal(value, x[i])) return;                                                          // 378
        }                                                                                                              // 377
                                                                                                                       //
        x.push(value);                                                                                                 // 380
      });                                                                                                              // 381
    }                                                                                                                  // 382
  },                                                                                                                   // 383
  $pop: function (target, field, arg) {                                                                                // 384
    if (target === undefined) return;                                                                                  // 385
    var x = target[field];                                                                                             // 387
    if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pop modifier to non-array");else {
      if (typeof arg === 'number' && arg < 0) x.splice(0, 1);else x.pop();                                             // 393
    }                                                                                                                  // 397
  },                                                                                                                   // 398
  $pull: function (target, field, arg) {                                                                               // 399
    if (target === undefined) return;                                                                                  // 400
    var x = target[field];                                                                                             // 402
    if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");else {
      var out = [];                                                                                                    // 408
                                                                                                                       //
      if (arg != null && (typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && !(arg instanceof Array)) {
        // XXX would be much nicer to compile this once, rather than                                                   // 410
        // for each document we modify.. but usually we're not                                                         // 411
        // modifying that many documents, so we'll let it slide for                                                    // 412
        // now                                                                                                         // 413
        // XXX Minimongo.Matcher isn't up for the job, because we need                                                 // 415
        // to permit stuff like {$pull: {a: {$gt: 4}}}.. something                                                     // 416
        // like {$gt: 4} is not normally a complete selector.                                                          // 417
        // same issue as $elemMatch possibly?                                                                          // 418
        var matcher = new Minimongo.Matcher(arg);                                                                      // 419
                                                                                                                       //
        for (var i = 0; i < x.length; i++) {                                                                           // 420
          if (!matcher.documentMatches(x[i]).result) out.push(x[i]);                                                   // 421
        }                                                                                                              // 420
      } else {                                                                                                         // 423
        for (var i = 0; i < x.length; i++) {                                                                           // 424
          if (!LocalCollection._f._equal(x[i], arg)) out.push(x[i]);                                                   // 425
        }                                                                                                              // 424
      }                                                                                                                // 427
                                                                                                                       //
      target[field] = out;                                                                                             // 428
    }                                                                                                                  // 429
  },                                                                                                                   // 430
  $pullAll: function (target, field, arg) {                                                                            // 431
    if (!((typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg)) === "object" && arg instanceof Array)) throw MinimongoError("Modifier $pushAll/pullAll allowed for arrays only");
    if (target === undefined) return;                                                                                  // 434
    var x = target[field];                                                                                             // 436
    if (x === undefined) return;else if (!(x instanceof Array)) throw MinimongoError("Cannot apply $pull/pullAll modifier to non-array");else {
      var out = [];                                                                                                    // 442
                                                                                                                       //
      for (var i = 0; i < x.length; i++) {                                                                             // 443
        var exclude = false;                                                                                           // 444
                                                                                                                       //
        for (var j = 0; j < arg.length; j++) {                                                                         // 445
          if (LocalCollection._f._equal(x[i], arg[j])) {                                                               // 446
            exclude = true;                                                                                            // 447
            break;                                                                                                     // 448
          }                                                                                                            // 449
        }                                                                                                              // 450
                                                                                                                       //
        if (!exclude) out.push(x[i]);                                                                                  // 451
      }                                                                                                                // 453
                                                                                                                       //
      target[field] = out;                                                                                             // 454
    }                                                                                                                  // 455
  },                                                                                                                   // 456
  $rename: function (target, field, arg, keypath, doc) {                                                               // 457
    if (keypath === arg) // no idea why mongo has this restriction..                                                   // 458
      throw MinimongoError("$rename source must differ from target");                                                  // 460
    if (target === null) throw MinimongoError("$rename source field invalid");                                         // 461
    if (typeof arg !== "string") throw MinimongoError("$rename target must be a string");                              // 463
                                                                                                                       //
    if (arg.indexOf('\0') > -1) {                                                                                      // 465
      // Null bytes are not allowed in Mongo field names                                                               // 466
      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names                                 // 467
      throw MinimongoError("The 'to' field for $rename cannot contain an embedded null byte");                         // 468
    }                                                                                                                  // 469
                                                                                                                       //
    if (target === undefined) return;                                                                                  // 470
    var v = target[field];                                                                                             // 472
    delete target[field];                                                                                              // 473
    var keyparts = arg.split('.');                                                                                     // 475
    var target2 = findModTarget(doc, keyparts, {                                                                       // 476
      forbidArray: true                                                                                                // 476
    });                                                                                                                // 476
    if (target2 === null) throw MinimongoError("$rename target field invalid");                                        // 477
    var field2 = keyparts.pop();                                                                                       // 479
    target2[field2] = v;                                                                                               // 480
  },                                                                                                                   // 481
  $bit: function (target, field, arg) {                                                                                // 482
    // XXX mongo only supports $bit on integers, and we only support                                                   // 483
    // native javascript numbers (doubles) so far, so we can't support $bit                                            // 484
    throw MinimongoError("$bit is not supported");                                                                     // 485
  }                                                                                                                    // 486
};                                                                                                                     // 184
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"diff.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/diff.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// ordered: bool.                                                                                                      // 1
// old_results and new_results: collections of documents.                                                              // 2
//    if ordered, they are arrays.                                                                                     // 3
//    if unordered, they are IdMaps                                                                                    // 4
LocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {                    // 5
  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);                            // 6
};                                                                                                                     // 7
                                                                                                                       //
LocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {                    // 9
  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);                            // 10
};                                                                                                                     // 11
                                                                                                                       //
LocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {                      // 14
  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);                              // 16
};                                                                                                                     // 17
                                                                                                                       //
LocalCollection._diffObjects = function (left, right, callbacks) {                                                     // 19
  return DiffSequence.diffObjects(left, right, callbacks);                                                             // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"id_map.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/id_map.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
LocalCollection._IdMap = function () {                                                                                 // 1
  var self = this;                                                                                                     // 2
  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                              // 3
};                                                                                                                     // 4
                                                                                                                       //
Meteor._inherits(LocalCollection._IdMap, IdMap);                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"observe.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/observe.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// XXX maybe move these into another ObserveHelpers package or something                                               // 1
// _CachingChangeObserver is an object which receives observeChanges callbacks                                         // 3
// and keeps a cache of the current cursor state up to date in self.docs. Users                                        // 4
// of this class should read the docs field but not modify it. You should pass                                         // 5
// the "applyChange" field as the callbacks to the underlying observeChanges                                           // 6
// call. Optionally, you can specify your own observeChanges callbacks which are                                       // 7
// invoked immediately before the docs field is updated; this object is made                                           // 8
// available as `this` to those callbacks.                                                                             // 9
LocalCollection._CachingChangeObserver = function (options) {                                                          // 10
  var self = this;                                                                                                     // 11
  options = options || {};                                                                                             // 12
                                                                                                                       //
  var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);
                                                                                                                       //
  if (_.has(options, 'ordered')) {                                                                                     // 16
    self.ordered = options.ordered;                                                                                    // 17
    if (options.callbacks && options.ordered !== orderedFromCallbacks) throw Error("ordered option doesn't match callbacks");
  } else if (options.callbacks) {                                                                                      // 20
    self.ordered = orderedFromCallbacks;                                                                               // 21
  } else {                                                                                                             // 22
    throw Error("must provide ordered or callbacks");                                                                  // 23
  }                                                                                                                    // 24
                                                                                                                       //
  var callbacks = options.callbacks || {};                                                                             // 25
                                                                                                                       //
  if (self.ordered) {                                                                                                  // 27
    self.docs = new OrderedDict(MongoID.idStringify);                                                                  // 28
    self.applyChange = {                                                                                               // 29
      addedBefore: function (id, fields, before) {                                                                     // 30
        var doc = EJSON.clone(fields);                                                                                 // 31
        doc._id = id;                                                                                                  // 32
        callbacks.addedBefore && callbacks.addedBefore.call(self, id, fields, before); // This line triggers if we provide added with movedBefore.
                                                                                                                       //
        callbacks.added && callbacks.added.call(self, id, fields); // XXX could `before` be a falsy ID?  Technically   // 36
        // idStringify seems to allow for them -- though                                                               // 38
        // OrderedDict won't call stringify on a falsy arg.                                                            // 39
                                                                                                                       //
        self.docs.putBefore(id, doc, before || null);                                                                  // 40
      },                                                                                                               // 41
      movedBefore: function (id, before) {                                                                             // 42
        var doc = self.docs.get(id);                                                                                   // 43
        callbacks.movedBefore && callbacks.movedBefore.call(self, id, before);                                         // 44
        self.docs.moveBefore(id, before || null);                                                                      // 45
      }                                                                                                                // 46
    };                                                                                                                 // 29
  } else {                                                                                                             // 48
    self.docs = new LocalCollection._IdMap();                                                                          // 49
    self.applyChange = {                                                                                               // 50
      added: function (id, fields) {                                                                                   // 51
        var doc = EJSON.clone(fields);                                                                                 // 52
        callbacks.added && callbacks.added.call(self, id, fields);                                                     // 53
        doc._id = id;                                                                                                  // 54
        self.docs.set(id, doc);                                                                                        // 55
      }                                                                                                                // 56
    };                                                                                                                 // 50
  } // The methods in _IdMap and OrderedDict used by these callbacks are                                               // 58
  // identical.                                                                                                        // 61
                                                                                                                       //
                                                                                                                       //
  self.applyChange.changed = function (id, fields) {                                                                   // 62
    var doc = self.docs.get(id);                                                                                       // 63
    if (!doc) throw new Error("Unknown id for changed: " + id);                                                        // 64
    callbacks.changed && callbacks.changed.call(self, id, EJSON.clone(fields));                                        // 66
    DiffSequence.applyChanges(doc, fields);                                                                            // 68
  };                                                                                                                   // 69
                                                                                                                       //
  self.applyChange.removed = function (id) {                                                                           // 70
    callbacks.removed && callbacks.removed.call(self, id);                                                             // 71
    self.docs.remove(id);                                                                                              // 72
  };                                                                                                                   // 73
};                                                                                                                     // 74
                                                                                                                       //
LocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {                                     // 76
  var transform = cursor.getTransform() || function (doc) {                                                            // 77
    return doc;                                                                                                        // 77
  };                                                                                                                   // 77
                                                                                                                       //
  var suppressed = !!observeCallbacks._suppress_initial;                                                               // 78
  var observeChangesCallbacks;                                                                                         // 80
                                                                                                                       //
  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {                                                 // 81
    // The "_no_indices" option sets all index arguments to -1 and skips the                                           // 82
    // linear scans required to generate them.  This lets observers that don't                                         // 83
    // need absolute indices benefit from the other features of this API --                                            // 84
    // relative order, transforms, and applyChanges -- without the speed hit.                                          // 85
    var indices = !observeCallbacks._no_indices;                                                                       // 86
    observeChangesCallbacks = {                                                                                        // 87
      addedBefore: function (id, fields, before) {                                                                     // 88
        var self = this;                                                                                               // 89
        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) return;                               // 90
        var doc = transform(_.extend(fields, {                                                                         // 92
          _id: id                                                                                                      // 92
        }));                                                                                                           // 92
                                                                                                                       //
        if (observeCallbacks.addedAt) {                                                                                // 93
          var index = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1;                            // 94
          observeCallbacks.addedAt(doc, index, before);                                                                // 96
        } else {                                                                                                       // 97
          observeCallbacks.added(doc);                                                                                 // 98
        }                                                                                                              // 99
      },                                                                                                               // 100
      changed: function (id, fields) {                                                                                 // 101
        var self = this;                                                                                               // 102
        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) return;                                         // 103
        var doc = EJSON.clone(self.docs.get(id));                                                                      // 105
        if (!doc) throw new Error("Unknown id for changed: " + id);                                                    // 106
        var oldDoc = transform(EJSON.clone(doc));                                                                      // 108
        DiffSequence.applyChanges(doc, fields);                                                                        // 109
        doc = transform(doc);                                                                                          // 110
                                                                                                                       //
        if (observeCallbacks.changedAt) {                                                                              // 111
          var index = indices ? self.docs.indexOf(id) : -1;                                                            // 112
          observeCallbacks.changedAt(doc, oldDoc, index);                                                              // 113
        } else {                                                                                                       // 114
          observeCallbacks.changed(doc, oldDoc);                                                                       // 115
        }                                                                                                              // 116
      },                                                                                                               // 117
      movedBefore: function (id, before) {                                                                             // 118
        var self = this;                                                                                               // 119
        if (!observeCallbacks.movedTo) return;                                                                         // 120
        var from = indices ? self.docs.indexOf(id) : -1;                                                               // 122
        var to = indices ? before ? self.docs.indexOf(before) : self.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
        // document slides everything back one slot.                                                                   // 127
                                                                                                                       //
        if (to > from) --to;                                                                                           // 128
        observeCallbacks.movedTo(transform(EJSON.clone(self.docs.get(id))), from, to, before || null);                 // 130
      },                                                                                                               // 132
      removed: function (id) {                                                                                         // 133
        var self = this;                                                                                               // 134
        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) return; // technically maybe there should be an EJSON.clone here, but it's about
        // to be removed from self.docs!                                                                               // 138
                                                                                                                       //
        var doc = transform(self.docs.get(id));                                                                        // 139
                                                                                                                       //
        if (observeCallbacks.removedAt) {                                                                              // 140
          var index = indices ? self.docs.indexOf(id) : -1;                                                            // 141
          observeCallbacks.removedAt(doc, index);                                                                      // 142
        } else {                                                                                                       // 143
          observeCallbacks.removed(doc);                                                                               // 144
        }                                                                                                              // 145
      }                                                                                                                // 146
    };                                                                                                                 // 87
  } else {                                                                                                             // 148
    observeChangesCallbacks = {                                                                                        // 149
      added: function (id, fields) {                                                                                   // 150
        if (!suppressed && observeCallbacks.added) {                                                                   // 151
          var doc = _.extend(fields, {                                                                                 // 152
            _id: id                                                                                                    // 152
          });                                                                                                          // 152
                                                                                                                       //
          observeCallbacks.added(transform(doc));                                                                      // 153
        }                                                                                                              // 154
      },                                                                                                               // 155
      changed: function (id, fields) {                                                                                 // 156
        var self = this;                                                                                               // 157
                                                                                                                       //
        if (observeCallbacks.changed) {                                                                                // 158
          var oldDoc = self.docs.get(id);                                                                              // 159
          var doc = EJSON.clone(oldDoc);                                                                               // 160
          DiffSequence.applyChanges(doc, fields);                                                                      // 161
          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));                                    // 162
        }                                                                                                              // 164
      },                                                                                                               // 165
      removed: function (id) {                                                                                         // 166
        var self = this;                                                                                               // 167
                                                                                                                       //
        if (observeCallbacks.removed) {                                                                                // 168
          observeCallbacks.removed(transform(self.docs.get(id)));                                                      // 169
        }                                                                                                              // 170
      }                                                                                                                // 171
    };                                                                                                                 // 149
  }                                                                                                                    // 173
                                                                                                                       //
  var changeObserver = new LocalCollection._CachingChangeObserver({                                                    // 175
    callbacks: observeChangesCallbacks                                                                                 // 176
  });                                                                                                                  // 176
  var handle = cursor.observeChanges(changeObserver.applyChange);                                                      // 177
  suppressed = false;                                                                                                  // 178
  return handle;                                                                                                       // 180
};                                                                                                                     // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"objectid.js":["babel-runtime/helpers/typeof",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/minimongo/objectid.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
// Is this selector just shorthand for lookup by _id?                                                                  // 1
LocalCollection._selectorIsId = function (selector) {                                                                  // 2
  return typeof selector === "string" || typeof selector === "number" || selector instanceof MongoID.ObjectID;         // 3
}; // Is the selector just lookup by _id (shorthand or not)?                                                           // 6
                                                                                                                       //
                                                                                                                       //
LocalCollection._selectorIsIdPerhapsAsObject = function (selector) {                                                   // 9
  return LocalCollection._selectorIsId(selector) || selector && (typeof selector === "undefined" ? "undefined" : (0, _typeof3.default)(selector)) === "object" && selector._id && LocalCollection._selectorIsId(selector._id) && _.size(selector) === 1;
}; // If this is a selector which explicitly constrains the match by ID to a finite                                    // 14
// number of documents, returns a list of their IDs.  Otherwise returns                                                // 17
// null. Note that the selector may have other restrictions so it may not even                                         // 18
// match those document!  We care about $in and $and since those are generated                                         // 19
// access-controlled update and remove.                                                                                // 20
                                                                                                                       //
                                                                                                                       //
LocalCollection._idsMatchedBySelector = function (selector) {                                                          // 21
  // Is the selector just an ID?                                                                                       // 22
  if (LocalCollection._selectorIsId(selector)) return [selector];                                                      // 23
  if (!selector) return null; // Do we have an _id clause?                                                             // 25
                                                                                                                       //
  if (_.has(selector, '_id')) {                                                                                        // 29
    // Is the _id clause just an ID?                                                                                   // 30
    if (LocalCollection._selectorIsId(selector._id)) return [selector._id]; // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?
                                                                                                                       //
    if (selector._id && selector._id.$in && _.isArray(selector._id.$in) && !_.isEmpty(selector._id.$in) && _.all(selector._id.$in, LocalCollection._selectorIsId)) {
      return selector._id.$in;                                                                                         // 38
    }                                                                                                                  // 39
                                                                                                                       //
    return null;                                                                                                       // 40
  } // If this is a top-level $and, and any of the clauses constrain their                                             // 41
  // documents, then the whole selector is constrained by any one clause's                                             // 44
  // constraint. (Well, by their intersection, but that seems unlikely.)                                               // 45
                                                                                                                       //
                                                                                                                       //
  if (selector.$and && _.isArray(selector.$and)) {                                                                     // 46
    for (var i = 0; i < selector.$and.length; ++i) {                                                                   // 47
      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);                                            // 48
                                                                                                                       //
      if (subIds) return subIds;                                                                                       // 49
    }                                                                                                                  // 51
  }                                                                                                                    // 52
                                                                                                                       //
  return null;                                                                                                         // 54
};                                                                                                                     // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/minimongo/minimongo.js");
require("./node_modules/meteor/minimongo/wrap_transform.js");
require("./node_modules/meteor/minimongo/helpers.js");
require("./node_modules/meteor/minimongo/selector.js");
require("./node_modules/meteor/minimongo/sort.js");
require("./node_modules/meteor/minimongo/projection.js");
require("./node_modules/meteor/minimongo/modify.js");
require("./node_modules/meteor/minimongo/diff.js");
require("./node_modules/meteor/minimongo/id_map.js");
require("./node_modules/meteor/minimongo/observe.js");
require("./node_modules/meteor/minimongo/objectid.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.minimongo = {}, {
  LocalCollection: LocalCollection,
  Minimongo: Minimongo,
  MinimongoTest: MinimongoTest
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var _ = Package.underscore._;
var EJSON = Package.ejson.EJSON;

/* Package-scope variables */
var check, Match;

var require = meteorInstall({"node_modules":{"meteor":{"check":{"match.js":["./isPlainObject.js",function(require,exports){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/check/match.js                                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
// XXX docs                                                                                                          // 1
                                                                                                                     // 2
// Things we explicitly do NOT support:                                                                              // 3
//    - heterogenous arrays                                                                                          // 4
                                                                                                                     // 5
var currentArgumentChecker = new Meteor.EnvironmentVariable;                                                         // 6
var isPlainObject = require("./isPlainObject.js").isPlainObject;                                                     // 7
                                                                                                                     // 8
/**                                                                                                                  // 9
 * @summary Check that a value matches a [pattern](#matchpatterns).                                                  // 10
 * If the value does not match the pattern, throw a `Match.Error`.                                                   // 11
 *                                                                                                                   // 12
 * Particularly useful to assert that arguments to a function have the right                                         // 13
 * types and structure.                                                                                              // 14
 * @locus Anywhere                                                                                                   // 15
 * @param {Any} value The value to check                                                                             // 16
 * @param {MatchPattern} pattern The pattern to match                                                                // 17
 * `value` against                                                                                                   // 18
 */                                                                                                                  // 19
var check = exports.check = function (value, pattern) {                                                              // 20
  // Record that check got called, if somebody cared.                                                                // 21
  //                                                                                                                 // 22
  // We use getOrNullIfOutsideFiber so that it's OK to call check()                                                  // 23
  // from non-Fiber server contexts; the downside is that if you forget to                                           // 24
  // bindEnvironment on some random callback in your method/publisher,                                               // 25
  // it might not find the argumentChecker and you'll get an error about                                             // 26
  // not checking an argument that it looks like you're checking (instead                                            // 27
  // of just getting a "Node code must run in a Fiber" error).                                                       // 28
  var argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();                                                 // 29
  if (argChecker)                                                                                                    // 30
    argChecker.checking(value);                                                                                      // 31
  var result = testSubtree(value, pattern);                                                                          // 32
  if (result) {                                                                                                      // 33
    var err = new Match.Error(result.message);                                                                       // 34
    if (result.path) {                                                                                               // 35
      err.message += " in field " + result.path;                                                                     // 36
      err.path = result.path;                                                                                        // 37
    }                                                                                                                // 38
    throw err;                                                                                                       // 39
  }                                                                                                                  // 40
};                                                                                                                   // 41
                                                                                                                     // 42
/**                                                                                                                  // 43
 * @namespace Match                                                                                                  // 44
 * @summary The namespace for all Match types and methods.                                                           // 45
 */                                                                                                                  // 46
var Match = exports.Match = {                                                                                        // 47
  Optional: function (pattern) {                                                                                     // 48
    return new Optional(pattern);                                                                                    // 49
  },                                                                                                                 // 50
  Maybe: function (pattern) {                                                                                        // 51
    return new Maybe(pattern);                                                                                       // 52
  },                                                                                                                 // 53
  OneOf: function (/*arguments*/) {                                                                                  // 54
    return new OneOf(_.toArray(arguments));                                                                          // 55
  },                                                                                                                 // 56
  Any: ['__any__'],                                                                                                  // 57
  Where: function (condition) {                                                                                      // 58
    return new Where(condition);                                                                                     // 59
  },                                                                                                                 // 60
  ObjectIncluding: function (pattern) {                                                                              // 61
    return new ObjectIncluding(pattern);                                                                             // 62
  },                                                                                                                 // 63
  ObjectWithValues: function (pattern) {                                                                             // 64
    return new ObjectWithValues(pattern);                                                                            // 65
  },                                                                                                                 // 66
  // Matches only signed 32-bit integers                                                                             // 67
  Integer: ['__integer__'],                                                                                          // 68
                                                                                                                     // 69
  // XXX matchers should know how to describe themselves for errors                                                  // 70
  Error: Meteor.makeErrorType("Match.Error", function (msg) {                                                        // 71
    this.message = "Match error: " + msg;                                                                            // 72
    // The path of the value that failed to match. Initially empty, this gets                                        // 73
    // populated by catching and rethrowing the exception as it goes back up the                                     // 74
    // stack.                                                                                                        // 75
    // E.g.: "vals[3].entity.created"                                                                                // 76
    this.path = "";                                                                                                  // 77
    // If this gets sent over DDP, don't give full internal details but at least                                     // 78
    // provide something better than 500 Internal server error.                                                      // 79
    this.sanitizedError = new Meteor.Error(400, "Match failed");                                                     // 80
  }),                                                                                                                // 81
                                                                                                                     // 82
  // Tests to see if value matches pattern. Unlike check, it merely returns true                                     // 83
  // or false (unless an error other than Match.Error was thrown). It does not                                       // 84
  // interact with _failIfArgumentsAreNotAllChecked.                                                                 // 85
  // XXX maybe also implement a Match.match which returns more information about                                     // 86
  //     failures but without using exception handling or doing what check()                                         // 87
  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion                                      // 88
                                                                                                                     // 89
  /**                                                                                                                // 90
   * @summary Returns true if the value matches the pattern.                                                         // 91
   * @locus Anywhere                                                                                                 // 92
   * @param {Any} value The value to check                                                                           // 93
   * @param {MatchPattern} pattern The pattern to match `value` against                                              // 94
   */                                                                                                                // 95
  test: function (value, pattern) {                                                                                  // 96
    return !testSubtree(value, pattern);                                                                             // 97
  },                                                                                                                 // 98
                                                                                                                     // 99
  // Runs `f.apply(context, args)`. If check() is not called on every element of                                     // 100
  // `args` (either directly or in the first level of an array), throws an error                                     // 101
  // (using `description` in the message).                                                                           // 102
  //                                                                                                                 // 103
  _failIfArgumentsAreNotAllChecked: function (f, context, args, description) {                                       // 104
    var argChecker = new ArgumentChecker(args, description);                                                         // 105
    var result = currentArgumentChecker.withValue(argChecker, function () {                                          // 106
      return f.apply(context, args);                                                                                 // 107
    });                                                                                                              // 108
    // If f didn't itself throw, make sure it checked all of its arguments.                                          // 109
    argChecker.throwUnlessAllArgumentsHaveBeenChecked();                                                             // 110
    return result;                                                                                                   // 111
  }                                                                                                                  // 112
};                                                                                                                   // 113
                                                                                                                     // 114
var Optional = function (pattern) {                                                                                  // 115
  this.pattern = pattern;                                                                                            // 116
};                                                                                                                   // 117
                                                                                                                     // 118
var Maybe = function (pattern) {                                                                                     // 119
  this.pattern = pattern;                                                                                            // 120
};                                                                                                                   // 121
                                                                                                                     // 122
var OneOf = function (choices) {                                                                                     // 123
  if (_.isEmpty(choices))                                                                                            // 124
    throw new Error("Must provide at least one choice to Match.OneOf");                                              // 125
  this.choices = choices;                                                                                            // 126
};                                                                                                                   // 127
                                                                                                                     // 128
var Where = function (condition) {                                                                                   // 129
  this.condition = condition;                                                                                        // 130
};                                                                                                                   // 131
                                                                                                                     // 132
var ObjectIncluding = function (pattern) {                                                                           // 133
  this.pattern = pattern;                                                                                            // 134
};                                                                                                                   // 135
                                                                                                                     // 136
var ObjectWithValues = function (pattern) {                                                                          // 137
  this.pattern = pattern;                                                                                            // 138
};                                                                                                                   // 139
                                                                                                                     // 140
var stringForErrorMessage = function (value, options) {                                                              // 141
  options = options || {};                                                                                           // 142
                                                                                                                     // 143
  if ( value === null ) return "null";                                                                               // 144
                                                                                                                     // 145
  if ( options.onlyShowType ) {                                                                                      // 146
    return typeof value;                                                                                             // 147
  }                                                                                                                  // 148
                                                                                                                     // 149
  // Your average non-object things.  Saves from doing the try/catch below for.                                      // 150
  if ( typeof value !== "object" ) {                                                                                 // 151
    return EJSON.stringify(value)                                                                                    // 152
  }                                                                                                                  // 153
                                                                                                                     // 154
  try {                                                                                                              // 155
    // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)      // 156
    // If the native stringify is going to choke, EJSON.stringify is going to choke too.                             // 157
    JSON.stringify(value);                                                                                           // 158
  } catch (stringifyError) {                                                                                         // 159
    if ( stringifyError.name === "TypeError" ) {                                                                     // 160
      return typeof value;                                                                                           // 161
    }                                                                                                                // 162
  }                                                                                                                  // 163
                                                                                                                     // 164
  return EJSON.stringify(value);                                                                                     // 165
};                                                                                                                   // 166
                                                                                                                     // 167
var typeofChecks = [                                                                                                 // 168
  [String, "string"],                                                                                                // 169
  [Number, "number"],                                                                                                // 170
  [Boolean, "boolean"],                                                                                              // 171
  // While we don't allow undefined/function in EJSON, this is good for optional                                     // 172
  // arguments with OneOf.                                                                                           // 173
  [Function, "function"],                                                                                            // 174
  [undefined, "undefined"]                                                                                           // 175
];                                                                                                                   // 176
                                                                                                                     // 177
// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.                    // 178
var testSubtree = function (value, pattern) {                                                                        // 179
  // Match anything!                                                                                                 // 180
  if (pattern === Match.Any)                                                                                         // 181
    return false;                                                                                                    // 182
                                                                                                                     // 183
  // Basic atomic types.                                                                                             // 184
  // Do not match boxed objects (e.g. String, Boolean)                                                               // 185
  for (var i = 0; i < typeofChecks.length; ++i) {                                                                    // 186
    if (pattern === typeofChecks[i][0]) {                                                                            // 187
      if (typeof value === typeofChecks[i][1])                                                                       // 188
        return false;                                                                                                // 189
      return {                                                                                                       // 190
        message: "Expected " + typeofChecks[i][1] + ", got " + stringForErrorMessage(value, { onlyShowType: true }),
        path: ""                                                                                                     // 192
      };                                                                                                             // 193
    }                                                                                                                // 194
  }                                                                                                                  // 195
                                                                                                                     // 196
  if (pattern === null) {                                                                                            // 197
    if (value === null) {                                                                                            // 198
      return false;                                                                                                  // 199
    }                                                                                                                // 200
    return {                                                                                                         // 201
      message: "Expected null, got " + stringForErrorMessage(value),                                                 // 202
      path: ""                                                                                                       // 203
    };                                                                                                               // 204
  }                                                                                                                  // 205
                                                                                                                     // 206
  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.                                     // 207
  if (typeof pattern === "string" || typeof pattern === "number" || typeof pattern === "boolean") {                  // 208
    if (value === pattern)                                                                                           // 209
      return false;                                                                                                  // 210
    return {                                                                                                         // 211
      message: "Expected " + pattern + ", got " + stringForErrorMessage(value),                                      // 212
      path: ""                                                                                                       // 213
    };                                                                                                               // 214
  }                                                                                                                  // 215
                                                                                                                     // 216
  // Match.Integer is special type encoded with array                                                                // 217
  if (pattern === Match.Integer) {                                                                                   // 218
    // There is no consistent and reliable way to check if variable is a 64-bit                                      // 219
    // integer. One of the popular solutions is to get reminder of division by 1                                     // 220
    // but this method fails on really large floats with big precision.                                              // 221
    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8                                                                   // 222
    // Bitwise operators work consistantly but always cast variable to 32-bit                                        // 223
    // signed integer according to JavaScript specs.                                                                 // 224
    if (typeof value === "number" && (value | 0) === value)                                                          // 225
      return false;                                                                                                  // 226
    return {                                                                                                         // 227
      message: "Expected Integer, got " + stringForErrorMessage(value),                                              // 228
      path: ""                                                                                                       // 229
    };                                                                                                               // 230
  }                                                                                                                  // 231
                                                                                                                     // 232
  // "Object" is shorthand for Match.ObjectIncluding({});                                                            // 233
  if (pattern === Object)                                                                                            // 234
    pattern = Match.ObjectIncluding({});                                                                             // 235
                                                                                                                     // 236
  // Array (checked AFTER Any, which is implemented as an Array).                                                    // 237
  if (pattern instanceof Array) {                                                                                    // 238
    if (pattern.length !== 1) {                                                                                      // 239
      return {                                                                                                       // 240
        message: "Bad pattern: arrays must have one type element" + stringForErrorMessage(pattern),                  // 241
        path: ""                                                                                                     // 242
      };                                                                                                             // 243
    }                                                                                                                // 244
    if (!_.isArray(value) && !_.isArguments(value)) {                                                                // 245
      return {                                                                                                       // 246
        message: "Expected array, got " + stringForErrorMessage(value),                                              // 247
        path: ""                                                                                                     // 248
      };                                                                                                             // 249
    }                                                                                                                // 250
                                                                                                                     // 251
    for (var i = 0, length = value.length; i < length; i++) {                                                        // 252
      var result = testSubtree(value[i], pattern[0]);                                                                // 253
      if (result) {                                                                                                  // 254
        result.path = _prependPath(i, result.path);                                                                  // 255
        return result;                                                                                               // 256
      }                                                                                                              // 257
    }                                                                                                                // 258
    return false;                                                                                                    // 259
  }                                                                                                                  // 260
                                                                                                                     // 261
  // Arbitrary validation checks. The condition can return false or throw a                                          // 262
  // Match.Error (ie, it can internally use check()) to fail.                                                        // 263
  if (pattern instanceof Where) {                                                                                    // 264
    var result;                                                                                                      // 265
    try {                                                                                                            // 266
      result = pattern.condition(value);                                                                             // 267
    } catch (err) {                                                                                                  // 268
      if (!(err instanceof Match.Error))                                                                             // 269
        throw err;                                                                                                   // 270
      return {                                                                                                       // 271
        message: err.message,                                                                                        // 272
        path: err.path                                                                                               // 273
      };                                                                                                             // 274
    }                                                                                                                // 275
    if (result)                                                                                                      // 276
      return false;                                                                                                  // 277
    // XXX this error is terrible                                                                                    // 278
    return {                                                                                                         // 279
      message: "Failed Match.Where validation",                                                                      // 280
      path: ""                                                                                                       // 281
    };                                                                                                               // 282
  }                                                                                                                  // 283
                                                                                                                     // 284
                                                                                                                     // 285
  if (pattern instanceof Maybe) {                                                                                    // 286
    pattern = Match.OneOf(undefined, null, pattern.pattern);                                                         // 287
  }                                                                                                                  // 288
  else if (pattern instanceof Optional) {                                                                            // 289
    pattern = Match.OneOf(undefined, pattern.pattern);                                                               // 290
  }                                                                                                                  // 291
                                                                                                                     // 292
  if (pattern instanceof OneOf) {                                                                                    // 293
    for (var i = 0; i < pattern.choices.length; ++i) {                                                               // 294
      var result = testSubtree(value, pattern.choices[i]);                                                           // 295
      if (!result) {                                                                                                 // 296
        // No error? Yay, return.                                                                                    // 297
        return false;                                                                                                // 298
      }                                                                                                              // 299
      // Match errors just mean try another choice.                                                                  // 300
    }                                                                                                                // 301
    // XXX this error is terrible                                                                                    // 302
    return {                                                                                                         // 303
      message: "Failed Match.OneOf, Match.Maybe or Match.Optional validation",                                       // 304
      path: ""                                                                                                       // 305
    };                                                                                                               // 306
  }                                                                                                                  // 307
                                                                                                                     // 308
  // A function that isn't something we special-case is assumed to be a                                              // 309
  // constructor.                                                                                                    // 310
  if (pattern instanceof Function) {                                                                                 // 311
    if (value instanceof pattern)                                                                                    // 312
      return false;                                                                                                  // 313
    return {                                                                                                         // 314
      message: "Expected " + (pattern.name ||"particular constructor"),                                              // 315
      path: ""                                                                                                       // 316
    };                                                                                                               // 317
  }                                                                                                                  // 318
                                                                                                                     // 319
  var unknownKeysAllowed = false;                                                                                    // 320
  var unknownKeyPattern;                                                                                             // 321
  if (pattern instanceof ObjectIncluding) {                                                                          // 322
    unknownKeysAllowed = true;                                                                                       // 323
    pattern = pattern.pattern;                                                                                       // 324
  }                                                                                                                  // 325
  if (pattern instanceof ObjectWithValues) {                                                                         // 326
    unknownKeysAllowed = true;                                                                                       // 327
    unknownKeyPattern = [pattern.pattern];                                                                           // 328
    pattern = {};  // no required keys                                                                               // 329
  }                                                                                                                  // 330
                                                                                                                     // 331
  if (typeof pattern !== "object") {                                                                                 // 332
    return {                                                                                                         // 333
      message: "Bad pattern: unknown pattern type",                                                                  // 334
      path: ""                                                                                                       // 335
    };                                                                                                               // 336
  }                                                                                                                  // 337
                                                                                                                     // 338
  // An object, with required and optional keys. Note that this does NOT do                                          // 339
  // structural matches against objects of special types that happen to match                                        // 340
  // the pattern: this really needs to be a plain old {Object}!                                                      // 341
  if (typeof value !== 'object') {                                                                                   // 342
    return {                                                                                                         // 343
      message: "Expected object, got " + typeof value,                                                               // 344
      path: ""                                                                                                       // 345
    };                                                                                                               // 346
  }                                                                                                                  // 347
  if (value === null) {                                                                                              // 348
    return {                                                                                                         // 349
      message: "Expected object, got null",                                                                          // 350
      path: ""                                                                                                       // 351
    };                                                                                                               // 352
  }                                                                                                                  // 353
  if (! isPlainObject(value)) {                                                                                      // 354
    return {                                                                                                         // 355
      message: "Expected plain object",                                                                              // 356
      path: ""                                                                                                       // 357
    };                                                                                                               // 358
  }                                                                                                                  // 359
                                                                                                                     // 360
  var requiredPatterns = {};                                                                                         // 361
  var optionalPatterns = {};                                                                                         // 362
  _.each(pattern, function (subPattern, key) {                                                                       // 363
    if (subPattern instanceof Optional || subPattern instanceof Maybe)                                               // 364
      optionalPatterns[key] = subPattern.pattern;                                                                    // 365
    else                                                                                                             // 366
      requiredPatterns[key] = subPattern;                                                                            // 367
  });                                                                                                                // 368
                                                                                                                     // 369
  //XXX: replace with underscore's _.allKeys if Meteor updates underscore to 1.8+ (or lodash)                        // 370
  var allKeys = function(obj){                                                                                       // 371
    var keys = [];                                                                                                   // 372
    if (_.isObject(obj)){                                                                                            // 373
      for (var key in obj) keys.push(key);                                                                           // 374
    }                                                                                                                // 375
    return keys;                                                                                                     // 376
  }                                                                                                                  // 377
                                                                                                                     // 378
  for (var keys = allKeys(value), i = 0, length = keys.length; i < length; i++) {                                    // 379
    var key = keys[i];                                                                                               // 380
    var subValue = value[key];                                                                                       // 381
    if (_.has(requiredPatterns, key)) {                                                                              // 382
      var result = testSubtree(subValue, requiredPatterns[key]);                                                     // 383
      if (result) {                                                                                                  // 384
        result.path = _prependPath(key, result.path);                                                                // 385
        return result;                                                                                               // 386
      }                                                                                                              // 387
      delete requiredPatterns[key];                                                                                  // 388
    } else if (_.has(optionalPatterns, key)) {                                                                       // 389
      var result = testSubtree(subValue, optionalPatterns[key]);                                                     // 390
      if (result) {                                                                                                  // 391
        result.path = _prependPath(key, result.path);                                                                // 392
        return result;                                                                                               // 393
      }                                                                                                              // 394
    } else {                                                                                                         // 395
      if (!unknownKeysAllowed) {                                                                                     // 396
        return {                                                                                                     // 397
          message: "Unknown key",                                                                                    // 398
          path: key                                                                                                  // 399
        };                                                                                                           // 400
      }                                                                                                              // 401
      if (unknownKeyPattern) {                                                                                       // 402
        var result = testSubtree(subValue, unknownKeyPattern[0]);                                                    // 403
        if (result) {                                                                                                // 404
          result.path = _prependPath(key, result.path);                                                              // 405
          return result;                                                                                             // 406
        }                                                                                                            // 407
      }                                                                                                              // 408
    }                                                                                                                // 409
  }                                                                                                                  // 410
                                                                                                                     // 411
  var keys = _.keys(requiredPatterns);                                                                               // 412
  if (keys.length) {                                                                                                 // 413
    return {                                                                                                         // 414
      message: "Missing key '" + keys[0] + "'",                                                                      // 415
      path: ""                                                                                                       // 416
    };                                                                                                               // 417
  }                                                                                                                  // 418
};                                                                                                                   // 419
                                                                                                                     // 420
var ArgumentChecker = function (args, description) {                                                                 // 421
  var self = this;                                                                                                   // 422
  // Make a SHALLOW copy of the arguments. (We'll be doing identity checks                                           // 423
  // against its contents.)                                                                                          // 424
  self.args = _.clone(args);                                                                                         // 425
  // Since the common case will be to check arguments in order, and we splice                                        // 426
  // out arguments when we check them, make it so we splice out from the end                                         // 427
  // rather than the beginning.                                                                                      // 428
  self.args.reverse();                                                                                               // 429
  self.description = description;                                                                                    // 430
};                                                                                                                   // 431
                                                                                                                     // 432
_.extend(ArgumentChecker.prototype, {                                                                                // 433
  checking: function (value) {                                                                                       // 434
    var self = this;                                                                                                 // 435
    if (self._checkingOneValue(value))                                                                               // 436
      return;                                                                                                        // 437
    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])                                       // 438
    // or check([foo, bar], [String]) to count... but only if value wasn't                                           // 439
    // itself an argument.                                                                                           // 440
    if (_.isArray(value) || _.isArguments(value)) {                                                                  // 441
      _.each(value, _.bind(self._checkingOneValue, self));                                                           // 442
    }                                                                                                                // 443
  },                                                                                                                 // 444
  _checkingOneValue: function (value) {                                                                              // 445
    var self = this;                                                                                                 // 446
    for (var i = 0; i < self.args.length; ++i) {                                                                     // 447
      // Is this value one of the arguments? (This can have a false positive if                                      // 448
      // the argument is an interned primitive, but it's still a good enough                                         // 449
      // check.)                                                                                                     // 450
      // (NaN is not === to itself, so we have to check specially.)                                                  // 451
      if (value === self.args[i] || (_.isNaN(value) && _.isNaN(self.args[i]))) {                                     // 452
        self.args.splice(i, 1);                                                                                      // 453
        return true;                                                                                                 // 454
      }                                                                                                              // 455
    }                                                                                                                // 456
    return false;                                                                                                    // 457
  },                                                                                                                 // 458
  throwUnlessAllArgumentsHaveBeenChecked: function () {                                                              // 459
    var self = this;                                                                                                 // 460
    if (!_.isEmpty(self.args))                                                                                       // 461
      throw new Error("Did not check() all arguments during " +                                                      // 462
                      self.description);                                                                             // 463
  }                                                                                                                  // 464
});                                                                                                                  // 465
                                                                                                                     // 466
var _jsKeywords = ["do", "if", "in", "for", "let", "new", "try", "var", "case",                                      // 467
  "else", "enum", "eval", "false", "null", "this", "true", "void", "with",                                           // 468
  "break", "catch", "class", "const", "super", "throw", "while", "yield",                                            // 469
  "delete", "export", "import", "public", "return", "static", "switch",                                              // 470
  "typeof", "default", "extends", "finally", "package", "private", "continue",                                       // 471
  "debugger", "function", "arguments", "interface", "protected", "implements",                                       // 472
  "instanceof"];                                                                                                     // 473
                                                                                                                     // 474
// Assumes the base of path is already escaped properly                                                              // 475
// returns key + base                                                                                                // 476
var _prependPath = function (key, base) {                                                                            // 477
  if ((typeof key) === "number" || key.match(/^[0-9]+$/))                                                            // 478
    key = "[" + key + "]";                                                                                           // 479
  else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _.contains(_jsKeywords, key))                                      // 480
    key = JSON.stringify([key]);                                                                                     // 481
                                                                                                                     // 482
  if (base && base[0] !== "[")                                                                                       // 483
    return key + '.' + base;                                                                                         // 484
  return key + base;                                                                                                 // 485
};                                                                                                                   // 486
                                                                                                                     // 487
                                                                                                                     // 488
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"isPlainObject.js":function(require,exports){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/check/isPlainObject.js                                                                                   //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
// Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.                                              // 1
                                                                                                                     // 2
var class2type = {};                                                                                                 // 3
                                                                                                                     // 4
var toString = class2type.toString;                                                                                  // 5
                                                                                                                     // 6
var hasOwn = class2type.hasOwnProperty;                                                                              // 7
                                                                                                                     // 8
var fnToString = hasOwn.toString;                                                                                    // 9
                                                                                                                     // 10
var ObjectFunctionString = fnToString.call(Object);                                                                  // 11
                                                                                                                     // 12
var getProto = Object.getPrototypeOf;                                                                                // 13
                                                                                                                     // 14
exports.isPlainObject = function( obj ) {                                                                            // 15
  var proto,                                                                                                         // 16
    Ctor;                                                                                                            // 17
                                                                                                                     // 18
  // Detect obvious negatives                                                                                        // 19
  // Use toString instead of jQuery.type to catch host objects                                                       // 20
  if (!obj || toString.call(obj) !== "[object Object]") {                                                            // 21
    return false;                                                                                                    // 22
  }                                                                                                                  // 23
                                                                                                                     // 24
  proto = getProto(obj);                                                                                             // 25
                                                                                                                     // 26
  // Objects with no prototype (e.g., `Object.create( null )`) are plain                                             // 27
  if (!proto) {                                                                                                      // 28
    return true;                                                                                                     // 29
  }                                                                                                                  // 30
                                                                                                                     // 31
  // Objects with prototype are plain iff they were constructed by a global Object function                          // 32
  Ctor = hasOwn.call(proto, "constructor") && proto.constructor;                                                     // 33
  return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;                               // 34
};                                                                                                                   // 35
                                                                                                                     // 36
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/check/match.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.check = exports, {
  check: check,
  Match: Match
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Random = Package.random.Random;

/* Package-scope variables */
var Retry;

(function(){

/////////////////////////////////////////////////////////////////////////////
//                                                                         //
// packages/retry/retry.js                                                 //
//                                                                         //
/////////////////////////////////////////////////////////////////////////////
                                                                           //
// Retry logic with an exponential backoff.                                // 1
//                                                                         // 2
// options:                                                                // 3
//  baseTimeout: time for initial reconnect attempt (ms).                  // 4
//  exponent: exponential factor to increase timeout each attempt.         // 5
//  maxTimeout: maximum time between retries (ms).                         // 6
//  minCount: how many times to reconnect "instantly".                     // 7
//  minTimeout: time to wait for the first `minCount` retries (ms).        // 8
//  fuzz: factor to randomize retry times by (to avoid retry storms).      // 9
                                                                           // 10
Retry = function (options) {                                               // 11
  var self = this;                                                         // 12
  _.extend(self, _.defaults(_.clone(options || {}), {                      // 13
    baseTimeout: 1000, // 1 second                                         // 14
    exponent: 2.2,                                                         // 15
    // The default is high-ish to ensure a server can recover from a       // 16
    // failure caused by load.                                             // 17
    maxTimeout: 5 * 60000, // 5 minutes                                    // 18
    minTimeout: 10,                                                        // 19
    minCount: 2,                                                           // 20
    fuzz: 0.5 // +- 25%                                                    // 21
  }));                                                                     // 22
  self.retryTimer = null;                                                  // 23
};                                                                         // 24
                                                                           // 25
_.extend(Retry.prototype, {                                                // 26
                                                                           // 27
  // Reset a pending retry, if any.                                        // 28
  clear: function () {                                                     // 29
    var self = this;                                                       // 30
    if (self.retryTimer)                                                   // 31
      clearTimeout(self.retryTimer);                                       // 32
    self.retryTimer = null;                                                // 33
  },                                                                       // 34
                                                                           // 35
  // Calculate how long to wait in milliseconds to retry, based on the     // 36
  // `count` of which retry this is.                                       // 37
  _timeout: function (count) {                                             // 38
    var self = this;                                                       // 39
                                                                           // 40
    if (count < self.minCount)                                             // 41
      return self.minTimeout;                                              // 42
                                                                           // 43
    var timeout = Math.min(                                                // 44
      self.maxTimeout,                                                     // 45
      self.baseTimeout * Math.pow(self.exponent, count));                  // 46
    // fuzz the timeout randomly, to avoid reconnect storms when a         // 47
    // server goes down.                                                   // 48
    timeout = timeout * ((Random.fraction() * self.fuzz) +                 // 49
                         (1 - self.fuzz/2));                               // 50
    return timeout;                                                        // 51
  },                                                                       // 52
                                                                           // 53
  // Call `fn` after a delay, based on the `count` of which retry this is.
  retryLater: function (count, fn) {                                       // 55
    var self = this;                                                       // 56
    var timeout = self._timeout(count);                                    // 57
    if (self.retryTimer)                                                   // 58
      clearTimeout(self.retryTimer);                                       // 59
    self.retryTimer = Meteor.setTimeout(fn, timeout);                      // 60
    return timeout;                                                        // 61
  }                                                                        // 62
                                                                           // 63
});                                                                        // 64
                                                                           // 65
/////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.retry = {}, {
  Retry: Retry
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var check = Package.check.check;
var Match = Package.check.Match;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Retry = Package.retry.Retry;

/* Package-scope variables */
var DDPCommon;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/namespace.js                                                                  //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
/**                                                                                                  // 1
 * @namespace DDPCommon                                                                              // 2
 * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3
 * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4
 * of a ddp client for both client AND server; and the ddp server is the                             // 5
 * implementation of the livedata server and stream server. Common                                   // 6
 * functionality shared between both can be shared under this namespace                              // 7
 */                                                                                                  // 8
DDPCommon = {};                                                                                      // 9
                                                                                                     // 10
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/heartbeat.js                                                                  //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// Heartbeat options:                                                                                // 1
//   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2
//   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3
//     received, in milliseconds.                                                                    // 4
//   sendPing: function to call to send a ping on the connection.                                    // 5
//   onTimeout: function to call to close the connection.                                            // 6
                                                                                                     // 7
DDPCommon.Heartbeat = function (options) {                                                           // 8
  var self = this;                                                                                   // 9
                                                                                                     // 10
  self.heartbeatInterval = options.heartbeatInterval;                                                // 11
  self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12
  self._sendPing = options.sendPing;                                                                 // 13
  self._onTimeout = options.onTimeout;                                                               // 14
  self._seenPacket = false;                                                                          // 15
                                                                                                     // 16
  self._heartbeatIntervalHandle = null;                                                              // 17
  self._heartbeatTimeoutHandle = null;                                                               // 18
};                                                                                                   // 19
                                                                                                     // 20
_.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21
  stop: function () {                                                                                // 22
    var self = this;                                                                                 // 23
    self._clearHeartbeatIntervalTimer();                                                             // 24
    self._clearHeartbeatTimeoutTimer();                                                              // 25
  },                                                                                                 // 26
                                                                                                     // 27
  start: function () {                                                                               // 28
    var self = this;                                                                                 // 29
    self.stop();                                                                                     // 30
    self._startHeartbeatIntervalTimer();                                                             // 31
  },                                                                                                 // 32
                                                                                                     // 33
  _startHeartbeatIntervalTimer: function () {                                                        // 34
    var self = this;                                                                                 // 35
    self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36
      _.bind(self._heartbeatIntervalFired, self),                                                    // 37
      self.heartbeatInterval                                                                         // 38
    );                                                                                               // 39
  },                                                                                                 // 40
                                                                                                     // 41
  _startHeartbeatTimeoutTimer: function () {                                                         // 42
    var self = this;                                                                                 // 43
    self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44
      _.bind(self._heartbeatTimeoutFired, self),                                                     // 45
      self.heartbeatTimeout                                                                          // 46
    );                                                                                               // 47
  },                                                                                                 // 48
                                                                                                     // 49
  _clearHeartbeatIntervalTimer: function () {                                                        // 50
    var self = this;                                                                                 // 51
    if (self._heartbeatIntervalHandle) {                                                             // 52
      Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53
      self._heartbeatIntervalHandle = null;                                                          // 54
    }                                                                                                // 55
  },                                                                                                 // 56
                                                                                                     // 57
  _clearHeartbeatTimeoutTimer: function () {                                                         // 58
    var self = this;                                                                                 // 59
    if (self._heartbeatTimeoutHandle) {                                                              // 60
      Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61
      self._heartbeatTimeoutHandle = null;                                                           // 62
    }                                                                                                // 63
  },                                                                                                 // 64
                                                                                                     // 65
  // The heartbeat interval timer is fired when we should send a ping.                               // 66
  _heartbeatIntervalFired: function () {                                                             // 67
    var self = this;                                                                                 // 68
    // don't send ping if we've seen a packet since we last checked,                                 // 69
    // *or* if we have already sent a ping and are awaiting a timeout.                               // 70
    // That shouldn't happen, but it's possible if                                                   // 71
    // `self.heartbeatInterval` is smaller than                                                      // 72
    // `self.heartbeatTimeout`.                                                                      // 73
    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {                                      // 74
      self._sendPing();                                                                              // 75
      // Set up timeout, in case a pong doesn't arrive in time.                                      // 76
      self._startHeartbeatTimeoutTimer();                                                            // 77
    }                                                                                                // 78
    self._seenPacket = false;                                                                        // 79
  },                                                                                                 // 80
                                                                                                     // 81
  // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82
  // timed out waiting for the pong.                                                                 // 83
  _heartbeatTimeoutFired: function () {                                                              // 84
    var self = this;                                                                                 // 85
    self._heartbeatTimeoutHandle = null;                                                             // 86
    self._onTimeout();                                                                               // 87
  },                                                                                                 // 88
                                                                                                     // 89
  messageReceived: function () {                                                                     // 90
    var self = this;                                                                                 // 91
    // Tell periodic checkin that we have seen a packet, and thus it                                 // 92
    // does not need to send a ping this cycle.                                                      // 93
    self._seenPacket = true;                                                                         // 94
    // If we were waiting for a pong, we got it.                                                     // 95
    if (self._heartbeatTimeoutHandle) {                                                              // 96
      self._clearHeartbeatTimeoutTimer();                                                            // 97
    }                                                                                                // 98
  }                                                                                                  // 99
});                                                                                                  // 100
                                                                                                     // 101
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/utils.js                                                                      //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
DDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];                                          // 1
                                                                                                     // 2
DDPCommon.parseDDP = function (stringMessage) {                                                      // 3
  try {                                                                                              // 4
    var msg = JSON.parse(stringMessage);                                                             // 5
  } catch (e) {                                                                                      // 6
    Meteor._debug("Discarding message with invalid JSON", stringMessage);                            // 7
    return null;                                                                                     // 8
  }                                                                                                  // 9
  // DDP messages must be objects.                                                                   // 10
  if (msg === null || typeof msg !== 'object') {                                                     // 11
    Meteor._debug("Discarding non-object DDP message", stringMessage);                               // 12
    return null;                                                                                     // 13
  }                                                                                                  // 14
                                                                                                     // 15
  // massage msg to get it into "abstract ddp" rather than "wire ddp" format.                        // 16
                                                                                                     // 17
  // switch between "cleared" rep of unsetting fields and "undefined"                                // 18
  // rep of same                                                                                     // 19
  if (_.has(msg, 'cleared')) {                                                                       // 20
    if (!_.has(msg, 'fields'))                                                                       // 21
      msg.fields = {};                                                                               // 22
    _.each(msg.cleared, function (clearKey) {                                                        // 23
      msg.fields[clearKey] = undefined;                                                              // 24
    });                                                                                              // 25
    delete msg.cleared;                                                                              // 26
  }                                                                                                  // 27
                                                                                                     // 28
  _.each(['fields', 'params', 'result'], function (field) {                                          // 29
    if (_.has(msg, field))                                                                           // 30
      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31
  });                                                                                                // 32
                                                                                                     // 33
  return msg;                                                                                        // 34
};                                                                                                   // 35
                                                                                                     // 36
DDPCommon.stringifyDDP = function (msg) {                                                            // 37
  var copy = EJSON.clone(msg);                                                                       // 38
  // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39
  // and cleared' rep                                                                                // 40
  if (_.has(msg, 'fields')) {                                                                        // 41
    var cleared = [];                                                                                // 42
    _.each(msg.fields, function (value, key) {                                                       // 43
      if (value === undefined) {                                                                     // 44
        cleared.push(key);                                                                           // 45
        delete copy.fields[key];                                                                     // 46
      }                                                                                              // 47
    });                                                                                              // 48
    if (!_.isEmpty(cleared))                                                                         // 49
      copy.cleared = cleared;                                                                        // 50
    if (_.isEmpty(copy.fields))                                                                      // 51
      delete copy.fields;                                                                            // 52
  }                                                                                                  // 53
  // adjust types to basic                                                                           // 54
  _.each(['fields', 'params', 'result'], function (field) {                                          // 55
    if (_.has(copy, field))                                                                          // 56
      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57
  });                                                                                                // 58
  if (msg.id && typeof msg.id !== 'string') {                                                        // 59
    throw new Error("Message id is not a string");                                                   // 60
  }                                                                                                  // 61
  return JSON.stringify(copy);                                                                       // 62
};                                                                                                   // 63
                                                                                                     // 64
                                                                                                     // 65
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/method_invocation.js                                                          //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// Instance name is this because it is usually referred to as this inside a                          // 1
// method definition                                                                                 // 2
/**                                                                                                  // 3
 * @summary The state for a single invocation of a method, referenced by this                        // 4
 * inside a method definition.                                                                       // 5
 * @param {Object} options                                                                           // 6
 * @instanceName this                                                                                // 7
 * @showInstanceName true                                                                            // 8
 */                                                                                                  // 9
DDPCommon.MethodInvocation = function (options) {                                                    // 10
  var self = this;                                                                                   // 11
                                                                                                     // 12
  // true if we're running not the actual method, but a stub (that is,                               // 13
  // if we're on a client (which may be a browser, or in the future a                                // 14
  // server connecting to another server) and presently running a                                    // 15
  // simulation of a server-side method for latency compensation                                     // 16
  // purposes). not currently true except in a client such as a browser,                             // 17
  // since there's usually no point in running stubs unless you have a                               // 18
  // zero-latency connection to the user.                                                            // 19
                                                                                                     // 20
  /**                                                                                                // 21
   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 22
   * @locus Anywhere                                                                                 // 23
   * @name  isSimulation                                                                             // 24
   * @memberOf DDPCommon.MethodInvocation                                                            // 25
   * @instance                                                                                       // 26
   * @type {Boolean}                                                                                 // 27
   */                                                                                                // 28
  this.isSimulation = options.isSimulation;                                                          // 29
                                                                                                     // 30
  // call this function to allow other method invocations (from the                                  // 31
  // same client) to continue running without waiting for this one to                                // 32
  // complete.                                                                                       // 33
  this._unblock = options.unblock || function () {};                                                 // 34
  this._calledUnblock = false;                                                                       // 35
                                                                                                     // 36
  // current user id                                                                                 // 37
                                                                                                     // 38
  /**                                                                                                // 39
   * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 40
   * @locus Anywhere                                                                                 // 41
   * @name  userId                                                                                   // 42
   * @memberOf DDPCommon.MethodInvocation                                                            // 43
   * @instance                                                                                       // 44
   */                                                                                                // 45
  this.userId = options.userId;                                                                      // 46
                                                                                                     // 47
  // sets current user id in all appropriate server contexts and                                     // 48
  // reruns subscriptions                                                                            // 49
  this._setUserId = options.setUserId || function () {};                                             // 50
                                                                                                     // 51
  // On the server, the connection this method call came in on.                                      // 52
                                                                                                     // 53
  /**                                                                                                // 54
   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
   * @locus Server                                                                                   // 56
   * @name  connection                                                                               // 57
   * @memberOf DDPCommon.MethodInvocation                                                            // 58
   * @instance                                                                                       // 59
   */                                                                                                // 60
  this.connection = options.connection;                                                              // 61
                                                                                                     // 62
  // The seed for randomStream value generation                                                      // 63
  this.randomSeed = options.randomSeed;                                                              // 64
                                                                                                     // 65
  // This is set by RandomStream.get; and holds the random stream state                              // 66
  this.randomStream = null;                                                                          // 67
};                                                                                                   // 68
                                                                                                     // 69
_.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 70
  /**                                                                                                // 71
   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
   * @locus Server                                                                                   // 73
   * @memberOf DDPCommon.MethodInvocation                                                            // 74
   * @instance                                                                                       // 75
   */                                                                                                // 76
  unblock: function () {                                                                             // 77
    var self = this;                                                                                 // 78
    self._calledUnblock = true;                                                                      // 79
    self._unblock();                                                                                 // 80
  },                                                                                                 // 81
                                                                                                     // 82
  /**                                                                                                // 83
   * @summary Set the logged in user.                                                                // 84
   * @locus Server                                                                                   // 85
   * @memberOf DDPCommon.MethodInvocation                                                            // 86
   * @instance                                                                                       // 87
   * @param {String | null} userId The value that should be returned by `userId` on this connection.
   */                                                                                                // 89
  setUserId: function(userId) {                                                                      // 90
    var self = this;                                                                                 // 91
    if (self._calledUnblock)                                                                         // 92
      throw new Error("Can't call setUserId in a method after calling unblock");                     // 93
    self.userId = userId;                                                                            // 94
    self._setUserId(userId);                                                                         // 95
  }                                                                                                  // 96
});                                                                                                  // 97
                                                                                                     // 98
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/ddp-common/random_stream.js                                                              //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
// RandomStream allows for generation of pseudo-random values, from a seed.                          // 1
//                                                                                                   // 2
// We use this for consistent 'random' numbers across the client and server.                         // 3
// We want to generate probably-unique IDs on the client, and we ideally want                        // 4
// the server to generate the same IDs when it executes the method.                                  // 5
//                                                                                                   // 6
// For generated values to be the same, we must seed ourselves the same way,                         // 7
// and we must keep track of the current state of our pseudo-random generators.                      // 8
// We call this state the scope. By default, we use the current DDP method                           // 9
// invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10
// If a randomSeed is provided it will be used to seed our random sequences.                         // 11
// In this way, client and server method calls will generate the same values.                        // 12
//                                                                                                   // 13
// We expose multiple named streams; each stream is independent                                      // 14
// and is seeded differently (but predictably from the name).                                        // 15
// By using multiple streams, we support reordering of requests,                                     // 16
// as long as they occur on different streams.                                                       // 17
//                                                                                                   // 18
// @param options {Optional Object}                                                                  // 19
//   seed: Array or value - Seed value(s) for the generator.                                         // 20
//                          If an array, will be used as-is                                          // 21
//                          If a value, will be converted to a single-value array                    // 22
//                          If omitted, a random array will be used as the seed.                     // 23
DDPCommon.RandomStream = function (options) {                                                        // 24
  var self = this;                                                                                   // 25
                                                                                                     // 26
  this.seed = [].concat(options.seed || randomToken());                                              // 27
                                                                                                     // 28
  this.sequences = {};                                                                               // 29
};                                                                                                   // 30
                                                                                                     // 31
// Returns a random string of sufficient length for a random seed.                                   // 32
// This is a placeholder function; a similar function is planned                                     // 33
// for Random itself; when that is added we should remove this function,                             // 34
// and call Random's randomToken instead.                                                            // 35
function randomToken() {                                                                             // 36
  return Random.hexString(20);                                                                       // 37
};                                                                                                   // 38
                                                                                                     // 39
// Returns the random stream with the specified name, in the specified                               // 40
// scope. If a scope is passed, then we use that to seed a (not                                      // 41
// cryptographically secure) PRNG using the fast Alea algorithm.  If                                 // 42
// scope is null (or otherwise falsey) then we use a generated seed.                                 // 43
//                                                                                                   // 44
// However, scope will normally be the current DDP method invocation,                                // 45
// so we'll use the stream with the specified name, and we should get                                // 46
// consistent values on the client and server sides of a method call.                                // 47
DDPCommon.RandomStream.get = function (scope, name) {                                                // 48
  if (!name) {                                                                                       // 49
    name = "default";                                                                                // 50
  }                                                                                                  // 51
  if (!scope) {                                                                                      // 52
    // There was no scope passed in; the sequence won't actually be                                  // 53
    // reproducible. but make it fast (and not cryptographically                                     // 54
    // secure) anyways, so that the behavior is similar to what you'd                                // 55
    // get by passing in a scope.                                                                    // 56
    return Random.insecure;                                                                          // 57
  }                                                                                                  // 58
  var randomStream = scope.randomStream;                                                             // 59
  if (!randomStream) {                                                                               // 60
    scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 61
      seed: scope.randomSeed                                                                         // 62
    });                                                                                              // 63
  }                                                                                                  // 64
  return randomStream._sequence(name);                                                               // 65
};                                                                                                   // 66
                                                                                                     // 67
                                                                                                     // 68
// Creates a randomSeed for passing to a method call.                                                // 69
// Note that we take enclosing as an argument,                                                       // 70
// though we expect it to be DDP._CurrentInvocation.get()                                            // 71
// However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 72
// invocation may not be the one currently in scope.                                                 // 73
// If enclosing is null, we'll use Random and values won't be repeatable.                            // 74
DDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 75
  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 76
  return stream.hexString(20);                                                                       // 77
};                                                                                                   // 78
                                                                                                     // 79
_.extend(DDPCommon.RandomStream.prototype, {                                                         // 80
  // Get a random sequence with the specified name, creating it if does not exist.                   // 81
  // New sequences are seeded with the seed concatenated with the name.                              // 82
  // By passing a seed into Random.create, we use the Alea generator.                                // 83
  _sequence: function (name) {                                                                       // 84
    var self = this;                                                                                 // 85
                                                                                                     // 86
    var sequence = self.sequences[name] || null;                                                     // 87
    if (sequence === null) {                                                                         // 88
      var sequenceSeed = self.seed.concat(name);                                                     // 89
      for (var i = 0; i < sequenceSeed.length; i++) {                                                // 90
        if (_.isFunction(sequenceSeed[i])) {                                                         // 91
          sequenceSeed[i] = sequenceSeed[i]();                                                       // 92
        }                                                                                            // 93
      }                                                                                              // 94
      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 95
    }                                                                                                // 96
    return sequence;                                                                                 // 97
  }                                                                                                  // 98
});                                                                                                  // 99
                                                                                                     // 100
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ddp-common'] = {}, {
  DDPCommon: DDPCommon
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;

/* Package-scope variables */
var Reload;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
// packages/reload/reload.js                                                               //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                           //
/**                                                                                        // 1
 * This code does _NOT_ support hot (session-restoring) reloads on                         // 2
 * IE6,7. It only works on browsers with sessionStorage support.                           // 3
 *                                                                                         // 4
 * There are a couple approaches to add IE6,7 support:                                     // 5
 *                                                                                         // 6
 * - use IE's "userData" mechanism in combination with window.name.                        // 7
 * This mostly works, however the problem is that it can not get to the                    // 8
 * data until after DOMReady. This is a problem for us since this API                      // 9
 * relies on the data being ready before API users run. We could                           // 10
 * refactor using Meteor.startup in all API users, but that might slow                     // 11
 * page loads as we couldn't start the stream until after DOMReady.                        // 12
 * Here are some resources on this approach:                                               // 13
 * https://github.com/hugeinc/USTORE.js                                                    // 14
 * http://thudjs.tumblr.com/post/419577524/localstorage-userdata                           // 15
 * http://www.javascriptkit.com/javatutors/domstorage2.shtml                               // 16
 *                                                                                         // 17
 * - POST the data to the server, and have the server send it back on                      // 18
 * page load. This is nice because it sidesteps all the local storage                      // 19
 * compatibility issues, however it is kinda tricky. We can use a unique                   // 20
 * token in the URL, then get rid of it with HTML5 pushstate, but that                     // 21
 * only works on pushstate browsers.                                                       // 22
 *                                                                                         // 23
 * This will all need to be reworked entirely when we add server-side                      // 24
 * HTML rendering. In that case, the server will need to have access to                    // 25
 * the client's session to render properly.                                                // 26
 */                                                                                        // 27
                                                                                           // 28
// XXX when making this API public, also expose a flag for the app                         // 29
// developer to know whether a hot code push is happening. This is                         // 30
// useful for apps using `window.onbeforeunload`. See                                      // 31
// https://github.com/meteor/meteor/pull/657                                               // 32
                                                                                           // 33
Reload = {};                                                                               // 34
                                                                                           // 35
var KEY_NAME = 'Meteor_Reload';                                                            // 36
                                                                                           // 37
var old_data = {};                                                                         // 38
// read in old data at startup.                                                            // 39
var old_json;                                                                              // 40
                                                                                           // 41
// This logic for sessionStorage detection is based on browserstate/history.js             // 42
var safeSessionStorage = null;                                                             // 43
try {                                                                                      // 44
  // This throws a SecurityError on Chrome if cookies & localStorage are                   // 45
  // explicitly disabled                                                                   // 46
  //                                                                                       // 47
  // On Firefox with dom.storage.enabled set to false, sessionStorage is null              // 48
  //                                                                                       // 49
  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely            // 50
  // on the throw if sessionStorage == null; the alternative is browser                    // 51
  // detection, but this seems better.                                                     // 52
  safeSessionStorage = window.sessionStorage;                                              // 53
                                                                                           // 54
  // Check we can actually use it                                                          // 55
  if (safeSessionStorage) {                                                                // 56
    safeSessionStorage.setItem('__dummy__', '1');                                          // 57
    safeSessionStorage.removeItem('__dummy__');                                            // 58
  } else {                                                                                 // 59
    // Be consistently null, for safety                                                    // 60
    safeSessionStorage = null;                                                             // 61
  }                                                                                        // 62
} catch(e) {                                                                               // 63
  // Expected on chrome with strict security, or if sessionStorage not supported           // 64
  safeSessionStorage = null;                                                               // 65
}                                                                                          // 66
                                                                                           // 67
// Exported for test.                                                                      // 68
Reload._getData = function () {                                                            // 69
  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);                       // 70
};                                                                                         // 71
                                                                                           // 72
if (safeSessionStorage) {                                                                  // 73
  old_json = Reload._getData();                                                            // 74
  safeSessionStorage.removeItem(KEY_NAME);                                                 // 75
} else {                                                                                   // 76
  // Unsupported browser (IE 6,7) or locked down security settings.                        // 77
  // No session resumption.                                                                // 78
  // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");                                    // 79
}                                                                                          // 80
                                                                                           // 81
if (!old_json) old_json = '{}';                                                            // 82
var old_parsed = {};                                                                       // 83
try {                                                                                      // 84
  old_parsed = JSON.parse(old_json);                                                       // 85
  if (typeof old_parsed !== "object") {                                                    // 86
    Meteor._debug("Got bad data on reload. Ignoring.");                                    // 87
    old_parsed = {};                                                                       // 88
  }                                                                                        // 89
} catch (err) {                                                                            // 90
  Meteor._debug("Got invalid JSON on reload. Ignoring.");                                  // 91
}                                                                                          // 92
                                                                                           // 93
if (old_parsed.reload && typeof old_parsed.data === "object") {                            // 94
  // Meteor._debug("Restoring reload data.");                                              // 95
  old_data = old_parsed.data;                                                              // 96
}                                                                                          // 97
                                                                                           // 98
                                                                                           // 99
var providers = [];                                                                        // 100
                                                                                           // 101
////////// External API //////////                                                         // 102
                                                                                           // 103
// Packages that support migration should register themselves by calling                   // 104
// this function. When it's time to migrate, callback will be called                       // 105
// with one argument, the "retry function," and an optional 'option'                       // 106
// argument (containing a key 'immediateMigration'). If the package                        // 107
// is ready to migrate, it should return [true, data], where data is                       // 108
// its migration data, an arbitrary JSON value (or [true] if it has                        // 109
// no migration data this time). If the package needs more time                            // 110
// before it is ready to migrate, it should return false. Then, once                       // 111
// it is ready to migrating again, it should call the retry                                // 112
// function. The retry function will return immediately, but will                          // 113
// schedule the migration to be retried, meaning that every package                        // 114
// will be polled once again for its migration data. If they are all                       // 115
// ready this time, then the migration will happen. name must be set if there              // 116
// is migration data. If 'immediateMigration' is set in the options                        // 117
// argument, then it doesn't matter whether the package is ready to                        // 118
// migrate or not; the reload will happen immediately without waiting                      // 119
// (used for OAuth redirect login).                                                        // 120
//                                                                                         // 121
Reload._onMigrate = function (name, callback) {                                            // 122
  if (!callback) {                                                                         // 123
    // name not provided, so first arg is callback.                                        // 124
    callback = name;                                                                       // 125
    name = undefined;                                                                      // 126
  }                                                                                        // 127
  providers.push({name: name, callback: callback});                                        // 128
};                                                                                         // 129
                                                                                           // 130
// Called by packages when they start up.                                                  // 131
// Returns the object that was saved, or undefined if none saved.                          // 132
//                                                                                         // 133
Reload._migrationData = function (name) {                                                  // 134
  return old_data[name];                                                                   // 135
};                                                                                         // 136
                                                                                           // 137
// Options are the same as for `Reload._migrate`.                                          // 138
var pollProviders = function (tryReload, options) {                                        // 139
  tryReload = tryReload || function () {};                                                 // 140
  options = options || {};                                                                 // 141
                                                                                           // 142
  var migrationData = {};                                                                  // 143
  var remaining = _.clone(providers);                                                      // 144
  var allReady = true;                                                                     // 145
  while (remaining.length) {                                                               // 146
    var p = remaining.shift();                                                             // 147
    var status = p.callback(tryReload, options);                                           // 148
    if (!status[0])                                                                        // 149
      allReady = false;                                                                    // 150
    if (status.length > 1 && p.name)                                                       // 151
      migrationData[p.name] = status[1];                                                   // 152
  };                                                                                       // 153
  if (allReady || options.immediateMigration)                                              // 154
    return migrationData;                                                                  // 155
  else                                                                                     // 156
    return null;                                                                           // 157
};                                                                                         // 158
                                                                                           // 159
// Options are:                                                                            // 160
//  - immediateMigration: true if the page will be reloaded immediately                    // 161
//    regardless of whether packages report that they are ready or not.                    // 162
Reload._migrate = function (tryReload, options) {                                          // 163
  // Make sure each package is ready to go, and collect their                              // 164
  // migration data                                                                        // 165
  var migrationData = pollProviders(tryReload, options);                                   // 166
  if (migrationData === null)                                                              // 167
    return false; // not ready yet..                                                       // 168
                                                                                           // 169
  try {                                                                                    // 170
    // Persist the migration data                                                          // 171
    var json = JSON.stringify({                                                            // 172
      data: migrationData, reload: true                                                    // 173
    });                                                                                    // 174
  } catch (err) {                                                                          // 175
    Meteor._debug("Couldn't serialize data for migration", migrationData);                 // 176
    throw err;                                                                             // 177
  }                                                                                        // 178
                                                                                           // 179
  if (safeSessionStorage) {                                                                // 180
    try {                                                                                  // 181
      safeSessionStorage.setItem(KEY_NAME, json);                                          // 182
    } catch (err) {                                                                        // 183
      // We should have already checked this, but just log - don't throw                   // 184
      Meteor._debug("Couldn't save data for migration to sessionStorage", err);            // 185
    }                                                                                      // 186
  } else {                                                                                 // 187
    Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
  }                                                                                        // 189
                                                                                           // 190
  return true;                                                                             // 191
};                                                                                         // 192
                                                                                           // 193
// Allows tests to isolate the list of providers.                                          // 194
Reload._withFreshProvidersForTest = function (f) {                                         // 195
  var originalProviders = _.clone(providers);                                              // 196
  providers = [];                                                                          // 197
  try {                                                                                    // 198
    f();                                                                                   // 199
  } finally {                                                                              // 200
    providers = originalProviders;                                                         // 201
  }                                                                                        // 202
};                                                                                         // 203
                                                                                           // 204
// Migrating reload: reload this page (presumably to pick up a new                         // 205
// version of the code or assets), but save the program state and                          // 206
// migrate it over. This function returns immediately. The reload                          // 207
// will happen at some point in the future once all of the packages                        // 208
// are ready to migrate.                                                                   // 209
//                                                                                         // 210
var reloading = false;                                                                     // 211
Reload._reload = function (options) {                                                      // 212
  options = options || {};                                                                 // 213
                                                                                           // 214
  if (reloading)                                                                           // 215
    return;                                                                                // 216
  reloading = true;                                                                        // 217
                                                                                           // 218
  var tryReload = function () { _.defer(function () {                                      // 219
    if (Reload._migrate(tryReload, options)) {                                             // 220
      // We'd like to make the browser reload the page using location.replace()            // 221
      // instead of location.reload(), because this avoids validating assets               // 222
      // with the server if we still have a valid cached copy. This doesn't work           // 223
      // when the location contains a hash however, because that wouldn't reload           // 224
      // the page and just scroll to the hash location instead.                            // 225
      if (window.location.hash || window.location.href.endsWith("#")) {                    // 226
        window.location.reload();                                                          // 227
      } else {                                                                             // 228
        window.location.replace(window.location.href);                                     // 229
      }                                                                                    // 230
    }                                                                                      // 231
  }); };                                                                                   // 232
                                                                                           // 233
  tryReload();                                                                             // 234
};                                                                                         // 235
                                                                                           // 236
/////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
// packages/reload/deprecated.js                                                           //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                           //
// Reload functionality used to live on Meteor._reload. Be nice and try not to             // 1
// break code that uses it, even though it's internal.                                     // 2
// XXX COMPAT WITH 0.6.4                                                                   // 3
Meteor._reload = {                                                                         // 4
  onMigrate: Reload._onMigrate,                                                            // 5
  migrationData: Reload._migrationData,                                                    // 6
  reload: Reload._reload                                                                   // 7
};                                                                                         // 8
                                                                                           // 9
/////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.reload = {}, {
  Reload: Reload
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var check = Package.check.check;
var Match = Package.check.Match;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Retry = Package.retry.Retry;
var IdMap = Package['id-map'].IdMap;
var DDPCommon = Package['ddp-common'].DDPCommon;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var MongoID = Package['mongo-id'].MongoID;

/* Package-scope variables */
var DDP, LivedataTest, MongoIDMap, SockJS, toSockjsUrl, toWebsocketUrl, allConnections;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/namespace.js                                                                               //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
/**                                                                                                               // 1
 * @namespace DDP                                                                                                 // 2
 * @summary Namespace for DDP-related methods/classes.                                                            // 3
 */                                                                                                               // 4
DDP          = {};                                                                                                // 5
LivedataTest = {};                                                                                                // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/id_map.js                                                                                  //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
MongoIDMap = function () {                                                                                        // 1
  var self = this;                                                                                                // 2
  IdMap.call(self, MongoID.idStringify, MongoID.idParse);                                                         // 3
};                                                                                                                // 4
                                                                                                                  // 5
Meteor._inherits(MongoIDMap, IdMap);                                                                              // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/sockjs-0.3.4.js                                                                            //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// XXX METEOR changes in <METEOR>                                                                                 // 1
                                                                                                                  // 2
/* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                   // 3
                                                                                                                  // 4
Copyright (c) 2011-2012 VMware, Inc.                                                                              // 5
                                                                                                                  // 6
Permission is hereby granted, free of charge, to any person obtaining a copy                                      // 7
of this software and associated documentation files (the "Software"), to deal                                     // 8
in the Software without restriction, including without limitation the rights                                      // 9
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                         // 10
copies of the Software, and to permit persons to whom the Software is                                             // 11
furnished to do so, subject to the following conditions:                                                          // 12
                                                                                                                  // 13
The above copyright notice and this permission notice shall be included in                                        // 14
all copies or substantial portions of the Software.                                                               // 15
                                                                                                                  // 16
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                        // 17
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                          // 18
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                       // 19
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                            // 20
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                     // 21
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                         // 22
THE SOFTWARE.                                                                                                     // 23
*/                                                                                                                // 24
                                                                                                                  // 25
// <METEOR> Commented out JSO implementation (use json package instead).                                          // 26
// JSON2 by Douglas Crockford (minified).                                                                         // 27
// var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
// </METEOR>                                                                                                      // 29
                                                                                                                  // 30
//     [*] Including lib/index.js                                                                                 // 31
// Public object                                                                                                  // 32
SockJS = (function(){                                                                                             // 33
              var _document = document;                                                                           // 34
              var _window = window;                                                                               // 35
              var utils = {};                                                                                     // 36
                                                                                                                  // 37
                                                                                                                  // 38
//         [*] Including lib/reventtarget.js                                                                      // 39
/*                                                                                                                // 40
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 41
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 42
 *                                                                                                                // 43
 * For the license see COPYING.                                                                                   // 44
 * ***** END LICENSE BLOCK *****                                                                                  // 45
 */                                                                                                               // 46
                                                                                                                  // 47
/* Simplified implementation of DOM2 EventTarget.                                                                 // 48
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                       // 49
 */                                                                                                               // 50
var REventTarget = function() {};                                                                                 // 51
REventTarget.prototype.addEventListener = function (eventType, listener) {                                        // 52
    if(!this._listeners) {                                                                                        // 53
         this._listeners = {};                                                                                    // 54
    }                                                                                                             // 55
    if(!(eventType in this._listeners)) {                                                                         // 56
        this._listeners[eventType] = [];                                                                          // 57
    }                                                                                                             // 58
    var arr = this._listeners[eventType];                                                                         // 59
    if(utils.arrIndexOf(arr, listener) === -1) {                                                                  // 60
        arr.push(listener);                                                                                       // 61
    }                                                                                                             // 62
    return;                                                                                                       // 63
};                                                                                                                // 64
                                                                                                                  // 65
REventTarget.prototype.removeEventListener = function (eventType, listener) {                                     // 66
    if(!(this._listeners && (eventType in this._listeners))) {                                                    // 67
        return;                                                                                                   // 68
    }                                                                                                             // 69
    var arr = this._listeners[eventType];                                                                         // 70
    var idx = utils.arrIndexOf(arr, listener);                                                                    // 71
    if (idx !== -1) {                                                                                             // 72
        if(arr.length > 1) {                                                                                      // 73
            this._listeners[eventType] = arr.slice(0, idx).concat( arr.slice(idx+1) );                            // 74
        } else {                                                                                                  // 75
            delete this._listeners[eventType];                                                                    // 76
        }                                                                                                         // 77
        return;                                                                                                   // 78
    }                                                                                                             // 79
    return;                                                                                                       // 80
};                                                                                                                // 81
                                                                                                                  // 82
REventTarget.prototype.dispatchEvent = function (event) {                                                         // 83
    var t = event.type;                                                                                           // 84
    var args = Array.prototype.slice.call(arguments, 0);                                                          // 85
    if (this['on'+t]) {                                                                                           // 86
        this['on'+t].apply(this, args);                                                                           // 87
    }                                                                                                             // 88
    if (this._listeners && t in this._listeners) {                                                                // 89
        for(var i=0; i < this._listeners[t].length; i++) {                                                        // 90
            this._listeners[t][i].apply(this, args);                                                              // 91
        }                                                                                                         // 92
    }                                                                                                             // 93
};                                                                                                                // 94
//         [*] End of lib/reventtarget.js                                                                         // 95
                                                                                                                  // 96
                                                                                                                  // 97
//         [*] Including lib/simpleevent.js                                                                       // 98
/*                                                                                                                // 99
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 100
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 101
 *                                                                                                                // 102
 * For the license see COPYING.                                                                                   // 103
 * ***** END LICENSE BLOCK *****                                                                                  // 104
 */                                                                                                               // 105
                                                                                                                  // 106
var SimpleEvent = function(type, obj) {                                                                           // 107
    this.type = type;                                                                                             // 108
    if (typeof obj !== 'undefined') {                                                                             // 109
        for(var k in obj) {                                                                                       // 110
            if (!obj.hasOwnProperty(k)) continue;                                                                 // 111
            this[k] = obj[k];                                                                                     // 112
        }                                                                                                         // 113
    }                                                                                                             // 114
};                                                                                                                // 115
                                                                                                                  // 116
SimpleEvent.prototype.toString = function() {                                                                     // 117
    var r = [];                                                                                                   // 118
    for(var k in this) {                                                                                          // 119
        if (!this.hasOwnProperty(k)) continue;                                                                    // 120
        var v = this[k];                                                                                          // 121
        if (typeof v === 'function') v = '[function]';                                                            // 122
        r.push(k + '=' + v);                                                                                      // 123
    }                                                                                                             // 124
    return 'SimpleEvent(' + r.join(', ') + ')';                                                                   // 125
};                                                                                                                // 126
//         [*] End of lib/simpleevent.js                                                                          // 127
                                                                                                                  // 128
                                                                                                                  // 129
//         [*] Including lib/eventemitter.js                                                                      // 130
/*                                                                                                                // 131
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 132
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 133
 *                                                                                                                // 134
 * For the license see COPYING.                                                                                   // 135
 * ***** END LICENSE BLOCK *****                                                                                  // 136
 */                                                                                                               // 137
                                                                                                                  // 138
var EventEmitter = function(events) {                                                                             // 139
    var that = this;                                                                                              // 140
    that._events = events || [];                                                                                  // 141
    that._listeners = {};                                                                                         // 142
};                                                                                                                // 143
EventEmitter.prototype.emit = function(type) {                                                                    // 144
    var that = this;                                                                                              // 145
    that._verifyType(type);                                                                                       // 146
    if (that._nuked) return;                                                                                      // 147
                                                                                                                  // 148
    var args = Array.prototype.slice.call(arguments, 1);                                                          // 149
    if (that['on'+type]) {                                                                                        // 150
        that['on'+type].apply(that, args);                                                                        // 151
    }                                                                                                             // 152
    if (type in that._listeners) {                                                                                // 153
        for(var i = 0; i < that._listeners[type].length; i++) {                                                   // 154
            that._listeners[type][i].apply(that, args);                                                           // 155
        }                                                                                                         // 156
    }                                                                                                             // 157
};                                                                                                                // 158
                                                                                                                  // 159
EventEmitter.prototype.on = function(type, callback) {                                                            // 160
    var that = this;                                                                                              // 161
    that._verifyType(type);                                                                                       // 162
    if (that._nuked) return;                                                                                      // 163
                                                                                                                  // 164
    if (!(type in that._listeners)) {                                                                             // 165
        that._listeners[type] = [];                                                                               // 166
    }                                                                                                             // 167
    that._listeners[type].push(callback);                                                                         // 168
};                                                                                                                // 169
                                                                                                                  // 170
EventEmitter.prototype._verifyType = function(type) {                                                             // 171
    var that = this;                                                                                              // 172
    if (utils.arrIndexOf(that._events, type) === -1) {                                                            // 173
        utils.log('Event ' + JSON.stringify(type) +                                                               // 174
                  ' not listed ' + JSON.stringify(that._events) +                                                 // 175
                  ' in ' + that);                                                                                 // 176
    }                                                                                                             // 177
};                                                                                                                // 178
                                                                                                                  // 179
EventEmitter.prototype.nuke = function() {                                                                        // 180
    var that = this;                                                                                              // 181
    that._nuked = true;                                                                                           // 182
    for(var i=0; i<that._events.length; i++) {                                                                    // 183
        delete that[that._events[i]];                                                                             // 184
    }                                                                                                             // 185
    that._listeners = {};                                                                                         // 186
};                                                                                                                // 187
//         [*] End of lib/eventemitter.js                                                                         // 188
                                                                                                                  // 189
                                                                                                                  // 190
//         [*] Including lib/utils.js                                                                             // 191
/*                                                                                                                // 192
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 193
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 194
 *                                                                                                                // 195
 * For the license see COPYING.                                                                                   // 196
 * ***** END LICENSE BLOCK *****                                                                                  // 197
 */                                                                                                               // 198
                                                                                                                  // 199
var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';                                                // 200
utils.random_string = function(length, max) {                                                                     // 201
    max = max || random_string_chars.length;                                                                      // 202
    var i, ret = [];                                                                                              // 203
    for(i=0; i < length; i++) {                                                                                   // 204
        ret.push( random_string_chars.substr(Math.floor(Math.random() * max),1) );                                // 205
    }                                                                                                             // 206
    return ret.join('');                                                                                          // 207
};                                                                                                                // 208
utils.random_number = function(max) {                                                                             // 209
    return Math.floor(Math.random() * max);                                                                       // 210
};                                                                                                                // 211
utils.random_number_string = function(max) {                                                                      // 212
    var t = (''+(max - 1)).length;                                                                                // 213
    var p = Array(t+1).join('0');                                                                                 // 214
    return (p + utils.random_number(max)).slice(-t);                                                              // 215
};                                                                                                                // 216
                                                                                                                  // 217
// Assuming that url looks like: http://asdasd:111/asd                                                            // 218
utils.getOrigin = function(url) {                                                                                 // 219
    url += '/';                                                                                                   // 220
    var parts = url.split('/').slice(0, 3);                                                                       // 221
    return parts.join('/');                                                                                       // 222
};                                                                                                                // 223
                                                                                                                  // 224
utils.isSameOriginUrl = function(url_a, url_b) {                                                                  // 225
    // location.origin would do, but it's not always available.                                                   // 226
    if (!url_b) url_b = _window.location.href;                                                                    // 227
                                                                                                                  // 228
    return (url_a.split('/').slice(0,3).join('/')                                                                 // 229
                ===                                                                                               // 230
            url_b.split('/').slice(0,3).join('/'));                                                               // 231
};                                                                                                                // 232
                                                                                                                  // 233
// <METEOR>                                                                                                       // 234
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 235
utils.isSameOriginScheme = function(url_a, url_b) {                                                               // 236
    if (!url_b) url_b = _window.location.href;                                                                    // 237
                                                                                                                  // 238
    return (url_a.split(':')[0]                                                                                   // 239
                ===                                                                                               // 240
            url_b.split(':')[0]);                                                                                 // 241
};                                                                                                                // 242
// </METEOR>                                                                                                      // 243
                                                                                                                  // 244
                                                                                                                  // 245
utils.getParentDomain = function(url) {                                                                           // 246
    // ipv4 ip address                                                                                            // 247
    if (/^[0-9.]*$/.test(url)) return url;                                                                        // 248
    // ipv6 ip address                                                                                            // 249
    if (/^\[/.test(url)) return url;                                                                              // 250
    // no dots                                                                                                    // 251
    if (!(/[.]/.test(url))) return url;                                                                           // 252
                                                                                                                  // 253
    var parts = url.split('.').slice(1);                                                                          // 254
    return parts.join('.');                                                                                       // 255
};                                                                                                                // 256
                                                                                                                  // 257
utils.objectExtend = function(dst, src) {                                                                         // 258
    for(var k in src) {                                                                                           // 259
        if (src.hasOwnProperty(k)) {                                                                              // 260
            dst[k] = src[k];                                                                                      // 261
        }                                                                                                         // 262
    }                                                                                                             // 263
    return dst;                                                                                                   // 264
};                                                                                                                // 265
                                                                                                                  // 266
var WPrefix = '_jp';                                                                                              // 267
                                                                                                                  // 268
utils.polluteGlobalNamespace = function() {                                                                       // 269
    if (!(WPrefix in _window)) {                                                                                  // 270
        _window[WPrefix] = {};                                                                                    // 271
    }                                                                                                             // 272
};                                                                                                                // 273
                                                                                                                  // 274
utils.closeFrame = function (code, reason) {                                                                      // 275
    return 'c'+JSON.stringify([code, reason]);                                                                    // 276
};                                                                                                                // 277
                                                                                                                  // 278
utils.userSetCode = function (code) {                                                                             // 279
    return code === 1000 || (code >= 3000 && code <= 4999);                                                       // 280
};                                                                                                                // 281
                                                                                                                  // 282
// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                         // 283
// and RFC 2988.                                                                                                  // 284
utils.countRTO = function (rtt) {                                                                                 // 285
    var rto;                                                                                                      // 286
    if (rtt > 100) {                                                                                              // 287
        rto = 3 * rtt; // rto > 300msec                                                                           // 288
    } else {                                                                                                      // 289
        rto = rtt + 200; // 200msec < rto <= 300msec                                                              // 290
    }                                                                                                             // 291
    return rto;                                                                                                   // 292
}                                                                                                                 // 293
                                                                                                                  // 294
utils.log = function() {                                                                                          // 295
    if (_window.console && console.log && console.log.apply) {                                                    // 296
        console.log.apply(console, arguments);                                                                    // 297
    }                                                                                                             // 298
};                                                                                                                // 299
                                                                                                                  // 300
utils.bind = function(fun, that) {                                                                                // 301
    if (fun.bind) {                                                                                               // 302
        return fun.bind(that);                                                                                    // 303
    } else {                                                                                                      // 304
        return function() {                                                                                       // 305
            return fun.apply(that, arguments);                                                                    // 306
        };                                                                                                        // 307
    }                                                                                                             // 308
};                                                                                                                // 309
                                                                                                                  // 310
utils.flatUrl = function(url) {                                                                                   // 311
    return url.indexOf('?') === -1 && url.indexOf('#') === -1;                                                    // 312
};                                                                                                                // 313
                                                                                                                  // 314
// `relativeTo` is an optional absolute URL. If provided, `url` will be                                           // 315
// interpreted relative to `relativeTo`. Defaults to `document.location`.                                         // 316
// <METEOR>                                                                                                       // 317
utils.amendUrl = function(url, relativeTo) {                                                                      // 318
    var baseUrl;                                                                                                  // 319
    if (relativeTo === undefined) {                                                                               // 320
      baseUrl = _document.location;                                                                               // 321
    } else {                                                                                                      // 322
      var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);                                                   // 323
      if (protocolMatch) {                                                                                        // 324
        var protocol = protocolMatch[0].toLowerCase();                                                            // 325
        var rest = relativeTo.substring(protocol.length);                                                         // 326
        var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);                                                      // 327
        if (hostMatch)                                                                                            // 328
          var host = hostMatch[0];                                                                                // 329
      }                                                                                                           // 330
      if (! protocol || ! host)                                                                                   // 331
        throw new Error("relativeTo must be an absolute url");                                                    // 332
      baseUrl = {                                                                                                 // 333
        protocol: protocol,                                                                                       // 334
        host: host                                                                                                // 335
      };                                                                                                          // 336
    }                                                                                                             // 337
    if (!url) {                                                                                                   // 338
        throw new Error('Wrong url for SockJS');                                                                  // 339
    }                                                                                                             // 340
    if (!utils.flatUrl(url)) {                                                                                    // 341
        throw new Error('Only basic urls are supported in SockJS');                                               // 342
    }                                                                                                             // 343
                                                                                                                  // 344
    //  '//abc' --> 'http://abc'                                                                                  // 345
    if (url.indexOf('//') === 0) {                                                                                // 346
        url = baseUrl.protocol + url;                                                                             // 347
    }                                                                                                             // 348
    // '/abc' --> 'http://localhost:1234/abc'                                                                     // 349
    if (url.indexOf('/') === 0) {                                                                                 // 350
        url = baseUrl.protocol + '//' + baseUrl.host + url;                                                       // 351
    }                                                                                                             // 352
    // </METEOR>                                                                                                  // 353
    // strip trailing slashes                                                                                     // 354
    url = url.replace(/[/]+$/,'');                                                                                // 355
                                                                                                                  // 356
    // We have a full url here, with proto and host. For some browsers                                            // 357
    // http://localhost:80/ is not in the same origin as http://localhost/                                        // 358
	// Remove explicit :80 or :443 in such cases. See #74                                                            // 359
    var parts = url.split("/");                                                                                   // 360
    if ((parts[0] === "http:" && /:80$/.test(parts[2])) ||                                                        // 361
	    (parts[0] === "https:" && /:443$/.test(parts[2]))) {                                                         // 362
		parts[2] = parts[2].replace(/:(80|443)$/, "");                                                                  // 363
	}                                                                                                                // 364
    url = parts.join("/");                                                                                        // 365
    return url;                                                                                                   // 366
};                                                                                                                // 367
                                                                                                                  // 368
// IE doesn't support [].indexOf.                                                                                 // 369
utils.arrIndexOf = function(arr, obj){                                                                            // 370
    for(var i=0; i < arr.length; i++){                                                                            // 371
        if(arr[i] === obj){                                                                                       // 372
            return i;                                                                                             // 373
        }                                                                                                         // 374
    }                                                                                                             // 375
    return -1;                                                                                                    // 376
};                                                                                                                // 377
                                                                                                                  // 378
utils.arrSkip = function(arr, obj) {                                                                              // 379
    var idx = utils.arrIndexOf(arr, obj);                                                                         // 380
    if (idx === -1) {                                                                                             // 381
        return arr.slice();                                                                                       // 382
    } else {                                                                                                      // 383
        var dst = arr.slice(0, idx);                                                                              // 384
        return dst.concat(arr.slice(idx+1));                                                                      // 385
    }                                                                                                             // 386
};                                                                                                                // 387
                                                                                                                  // 388
// Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                  // 389
utils.isArray = Array.isArray || function(value) {                                                                // 390
    return {}.toString.call(value).indexOf('Array') >= 0                                                          // 391
};                                                                                                                // 392
                                                                                                                  // 393
utils.delay = function(t, fun) {                                                                                  // 394
    if(typeof t === 'function') {                                                                                 // 395
        fun = t;                                                                                                  // 396
        t = 0;                                                                                                    // 397
    }                                                                                                             // 398
    return setTimeout(fun, t);                                                                                    // 399
};                                                                                                                // 400
                                                                                                                  // 401
                                                                                                                  // 402
// Chars worth escaping, as defined by Douglas Crockford:                                                         // 403
//   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196      // 404
var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    json_lookup = {                                                                                               // 406
"\u0000":"\\u0000","\u0001":"\\u0001","\u0002":"\\u0002","\u0003":"\\u0003",                                      // 407
"\u0004":"\\u0004","\u0005":"\\u0005","\u0006":"\\u0006","\u0007":"\\u0007",                                      // 408
"\b":"\\b","\t":"\\t","\n":"\\n","\u000b":"\\u000b","\f":"\\f","\r":"\\r",                                        // 409
"\u000e":"\\u000e","\u000f":"\\u000f","\u0010":"\\u0010","\u0011":"\\u0011",                                      // 410
"\u0012":"\\u0012","\u0013":"\\u0013","\u0014":"\\u0014","\u0015":"\\u0015",                                      // 411
"\u0016":"\\u0016","\u0017":"\\u0017","\u0018":"\\u0018","\u0019":"\\u0019",                                      // 412
"\u001a":"\\u001a","\u001b":"\\u001b","\u001c":"\\u001c","\u001d":"\\u001d",                                      // 413
"\u001e":"\\u001e","\u001f":"\\u001f","\"":"\\\"","\\":"\\\\",                                                    // 414
"\u007f":"\\u007f","\u0080":"\\u0080","\u0081":"\\u0081","\u0082":"\\u0082",                                      // 415
"\u0083":"\\u0083","\u0084":"\\u0084","\u0085":"\\u0085","\u0086":"\\u0086",                                      // 416
"\u0087":"\\u0087","\u0088":"\\u0088","\u0089":"\\u0089","\u008a":"\\u008a",                                      // 417
"\u008b":"\\u008b","\u008c":"\\u008c","\u008d":"\\u008d","\u008e":"\\u008e",                                      // 418
"\u008f":"\\u008f","\u0090":"\\u0090","\u0091":"\\u0091","\u0092":"\\u0092",                                      // 419
"\u0093":"\\u0093","\u0094":"\\u0094","\u0095":"\\u0095","\u0096":"\\u0096",                                      // 420
"\u0097":"\\u0097","\u0098":"\\u0098","\u0099":"\\u0099","\u009a":"\\u009a",                                      // 421
"\u009b":"\\u009b","\u009c":"\\u009c","\u009d":"\\u009d","\u009e":"\\u009e",                                      // 422
"\u009f":"\\u009f","\u00ad":"\\u00ad","\u0600":"\\u0600","\u0601":"\\u0601",                                      // 423
"\u0602":"\\u0602","\u0603":"\\u0603","\u0604":"\\u0604","\u070f":"\\u070f",                                      // 424
"\u17b4":"\\u17b4","\u17b5":"\\u17b5","\u200c":"\\u200c","\u200d":"\\u200d",                                      // 425
"\u200e":"\\u200e","\u200f":"\\u200f","\u2028":"\\u2028","\u2029":"\\u2029",                                      // 426
"\u202a":"\\u202a","\u202b":"\\u202b","\u202c":"\\u202c","\u202d":"\\u202d",                                      // 427
"\u202e":"\\u202e","\u202f":"\\u202f","\u2060":"\\u2060","\u2061":"\\u2061",                                      // 428
"\u2062":"\\u2062","\u2063":"\\u2063","\u2064":"\\u2064","\u2065":"\\u2065",                                      // 429
"\u2066":"\\u2066","\u2067":"\\u2067","\u2068":"\\u2068","\u2069":"\\u2069",                                      // 430
"\u206a":"\\u206a","\u206b":"\\u206b","\u206c":"\\u206c","\u206d":"\\u206d",                                      // 431
"\u206e":"\\u206e","\u206f":"\\u206f","\ufeff":"\\ufeff","\ufff0":"\\ufff0",                                      // 432
"\ufff1":"\\ufff1","\ufff2":"\\ufff2","\ufff3":"\\ufff3","\ufff4":"\\ufff4",                                      // 433
"\ufff5":"\\ufff5","\ufff6":"\\ufff6","\ufff7":"\\ufff7","\ufff8":"\\ufff8",                                      // 434
"\ufff9":"\\ufff9","\ufffa":"\\ufffa","\ufffb":"\\ufffb","\ufffc":"\\ufffc",                                      // 435
"\ufffd":"\\ufffd","\ufffe":"\\ufffe","\uffff":"\\uffff"};                                                        // 436
                                                                                                                  // 437
// Some extra characters that Chrome gets wrong, and substitutes with                                             // 438
// something else on the wire.                                                                                    // 439
var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
    extra_lookup;                                                                                                 // 441
                                                                                                                  // 442
// JSON Quote string. Use native implementation when possible.                                                    // 443
var JSONQuote = (JSON && JSON.stringify) || function(string) {                                                    // 444
    json_escapable.lastIndex = 0;                                                                                 // 445
    if (json_escapable.test(string)) {                                                                            // 446
        string = string.replace(json_escapable, function(a) {                                                     // 447
            return json_lookup[a];                                                                                // 448
        });                                                                                                       // 449
    }                                                                                                             // 450
    return '"' + string + '"';                                                                                    // 451
};                                                                                                                // 452
                                                                                                                  // 453
// This may be quite slow, so let's delay until user actually uses bad                                            // 454
// characters.                                                                                                    // 455
var unroll_lookup = function(escapable) {                                                                         // 456
    var i;                                                                                                        // 457
    var unrolled = {}                                                                                             // 458
    var c = []                                                                                                    // 459
    for(i=0; i<65536; i++) {                                                                                      // 460
        c.push( String.fromCharCode(i) );                                                                         // 461
    }                                                                                                             // 462
    escapable.lastIndex = 0;                                                                                      // 463
    c.join('').replace(escapable, function (a) {                                                                  // 464
        unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                // 465
        return '';                                                                                                // 466
    });                                                                                                           // 467
    escapable.lastIndex = 0;                                                                                      // 468
    return unrolled;                                                                                              // 469
};                                                                                                                // 470
                                                                                                                  // 471
// Quote string, also taking care of unicode characters that browsers                                             // 472
// often break. Especially, take care of unicode surrogates:                                                      // 473
//    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                       // 474
utils.quote = function(string) {                                                                                  // 475
    var quoted = JSONQuote(string);                                                                               // 476
                                                                                                                  // 477
    // In most cases this should be very fast and good enough.                                                    // 478
    extra_escapable.lastIndex = 0;                                                                                // 479
    if(!extra_escapable.test(quoted)) {                                                                           // 480
        return quoted;                                                                                            // 481
    }                                                                                                             // 482
                                                                                                                  // 483
    if(!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);                                              // 484
                                                                                                                  // 485
    return quoted.replace(extra_escapable, function(a) {                                                          // 486
        return extra_lookup[a];                                                                                   // 487
    });                                                                                                           // 488
}                                                                                                                 // 489
                                                                                                                  // 490
var _all_protocols = ['websocket',                                                                                // 491
                      'xdr-streaming',                                                                            // 492
                      'xhr-streaming',                                                                            // 493
                      'iframe-eventsource',                                                                       // 494
                      'iframe-htmlfile',                                                                          // 495
                      'xdr-polling',                                                                              // 496
                      'xhr-polling',                                                                              // 497
                      'iframe-xhr-polling',                                                                       // 498
                      'jsonp-polling'];                                                                           // 499
                                                                                                                  // 500
utils.probeProtocols = function() {                                                                               // 501
    var probed = {};                                                                                              // 502
    for(var i=0; i<_all_protocols.length; i++) {                                                                  // 503
        var protocol = _all_protocols[i];                                                                         // 504
        // User can have a typo in protocol name.                                                                 // 505
        probed[protocol] = SockJS[protocol] &&                                                                    // 506
                           SockJS[protocol].enabled();                                                            // 507
    }                                                                                                             // 508
    return probed;                                                                                                // 509
};                                                                                                                // 510
                                                                                                                  // 511
utils.detectProtocols = function(probed, protocols_whitelist, info) {                                             // 512
    var pe = {},                                                                                                  // 513
        protocols = [];                                                                                           // 514
    if (!protocols_whitelist) protocols_whitelist = _all_protocols;                                               // 515
    for(var i=0; i<protocols_whitelist.length; i++) {                                                             // 516
        var protocol = protocols_whitelist[i];                                                                    // 517
        pe[protocol] = probed[protocol];                                                                          // 518
    }                                                                                                             // 519
    var maybe_push = function(protos) {                                                                           // 520
        var proto = protos.shift();                                                                               // 521
        if (pe[proto]) {                                                                                          // 522
            protocols.push(proto);                                                                                // 523
        } else {                                                                                                  // 524
            if (protos.length > 0) {                                                                              // 525
                maybe_push(protos);                                                                               // 526
            }                                                                                                     // 527
        }                                                                                                         // 528
    }                                                                                                             // 529
                                                                                                                  // 530
    // 1. Websocket                                                                                               // 531
    if (info.websocket !== false) {                                                                               // 532
        maybe_push(['websocket']);                                                                                // 533
    }                                                                                                             // 534
                                                                                                                  // 535
    // 2. Streaming                                                                                               // 536
    if (pe['xhr-streaming'] && !info.null_origin) {                                                               // 537
        protocols.push('xhr-streaming');                                                                          // 538
    } else {                                                                                                      // 539
        if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {                                    // 540
            protocols.push('xdr-streaming');                                                                      // 541
        } else {                                                                                                  // 542
            maybe_push(['iframe-eventsource',                                                                     // 543
                        'iframe-htmlfile']);                                                                      // 544
        }                                                                                                         // 545
    }                                                                                                             // 546
                                                                                                                  // 547
    // 3. Polling                                                                                                 // 548
    if (pe['xhr-polling'] && !info.null_origin) {                                                                 // 549
        protocols.push('xhr-polling');                                                                            // 550
    } else {                                                                                                      // 551
        if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {                                      // 552
            protocols.push('xdr-polling');                                                                        // 553
        } else {                                                                                                  // 554
            maybe_push(['iframe-xhr-polling',                                                                     // 555
                        'jsonp-polling']);                                                                        // 556
        }                                                                                                         // 557
    }                                                                                                             // 558
    return protocols;                                                                                             // 559
}                                                                                                                 // 560
//         [*] End of lib/utils.js                                                                                // 561
                                                                                                                  // 562
                                                                                                                  // 563
//         [*] Including lib/dom.js                                                                               // 564
/*                                                                                                                // 565
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 566
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 567
 *                                                                                                                // 568
 * For the license see COPYING.                                                                                   // 569
 * ***** END LICENSE BLOCK *****                                                                                  // 570
 */                                                                                                               // 571
                                                                                                                  // 572
// May be used by htmlfile jsonp and transports.                                                                  // 573
var MPrefix = '_sockjs_global';                                                                                   // 574
utils.createHook = function() {                                                                                   // 575
    var window_id = 'a' + utils.random_string(8);                                                                 // 576
    if (!(MPrefix in _window)) {                                                                                  // 577
        var map = {};                                                                                             // 578
        _window[MPrefix] = function(window_id) {                                                                  // 579
            if (!(window_id in map)) {                                                                            // 580
                map[window_id] = {                                                                                // 581
                    id: window_id,                                                                                // 582
                    del: function() {delete map[window_id];}                                                      // 583
                };                                                                                                // 584
            }                                                                                                     // 585
            return map[window_id];                                                                                // 586
        }                                                                                                         // 587
    }                                                                                                             // 588
    return _window[MPrefix](window_id);                                                                           // 589
};                                                                                                                // 590
                                                                                                                  // 591
                                                                                                                  // 592
                                                                                                                  // 593
utils.attachMessage = function(listener) {                                                                        // 594
    utils.attachEvent('message', listener);                                                                       // 595
};                                                                                                                // 596
utils.attachEvent = function(event, listener) {                                                                   // 597
    if (typeof _window.addEventListener !== 'undefined') {                                                        // 598
        _window.addEventListener(event, listener, false);                                                         // 599
    } else {                                                                                                      // 600
        // IE quirks.                                                                                             // 601
        // According to: http://stevesouders.com/misc/test-postmessage.php                                        // 602
        // the message gets delivered only to 'document', not 'window'.                                           // 603
        _document.attachEvent("on" + event, listener);                                                            // 604
        // I get 'window' for ie8.                                                                                // 605
        _window.attachEvent("on" + event, listener);                                                              // 606
    }                                                                                                             // 607
};                                                                                                                // 608
                                                                                                                  // 609
utils.detachMessage = function(listener) {                                                                        // 610
    utils.detachEvent('message', listener);                                                                       // 611
};                                                                                                                // 612
utils.detachEvent = function(event, listener) {                                                                   // 613
    if (typeof _window.addEventListener !== 'undefined') {                                                        // 614
        _window.removeEventListener(event, listener, false);                                                      // 615
    } else {                                                                                                      // 616
        _document.detachEvent("on" + event, listener);                                                            // 617
        _window.detachEvent("on" + event, listener);                                                              // 618
    }                                                                                                             // 619
};                                                                                                                // 620
                                                                                                                  // 621
                                                                                                                  // 622
var on_unload = {};                                                                                               // 623
// Things registered after beforeunload are to be called immediately.                                             // 624
var after_unload = false;                                                                                         // 625
                                                                                                                  // 626
var trigger_unload_callbacks = function() {                                                                       // 627
    for(var ref in on_unload) {                                                                                   // 628
        on_unload[ref]();                                                                                         // 629
        delete on_unload[ref];                                                                                    // 630
    };                                                                                                            // 631
};                                                                                                                // 632
                                                                                                                  // 633
var unload_triggered = function() {                                                                               // 634
    if(after_unload) return;                                                                                      // 635
    after_unload = true;                                                                                          // 636
    trigger_unload_callbacks();                                                                                   // 637
};                                                                                                                // 638
                                                                                                                  // 639
// 'unload' alone is not reliable in opera within an iframe, but we                                               // 640
// can't use `beforeunload` as IE fires it on javascript: links.                                                  // 641
utils.attachEvent('unload', unload_triggered);                                                                    // 642
                                                                                                                  // 643
utils.unload_add = function(listener) {                                                                           // 644
    var ref = utils.random_string(8);                                                                             // 645
    on_unload[ref] = listener;                                                                                    // 646
    if (after_unload) {                                                                                           // 647
        utils.delay(trigger_unload_callbacks);                                                                    // 648
    }                                                                                                             // 649
    return ref;                                                                                                   // 650
};                                                                                                                // 651
utils.unload_del = function(ref) {                                                                                // 652
    if (ref in on_unload)                                                                                         // 653
        delete on_unload[ref];                                                                                    // 654
};                                                                                                                // 655
                                                                                                                  // 656
                                                                                                                  // 657
utils.createIframe = function (iframe_url, error_callback) {                                                      // 658
    var iframe = _document.createElement('iframe');                                                               // 659
    var tref, unload_ref;                                                                                         // 660
    var unattach = function() {                                                                                   // 661
        clearTimeout(tref);                                                                                       // 662
        // Explorer had problems with that.                                                                       // 663
        try {iframe.onload = null;} catch (x) {}                                                                  // 664
        iframe.onerror = null;                                                                                    // 665
    };                                                                                                            // 666
    var cleanup = function() {                                                                                    // 667
        if (iframe) {                                                                                             // 668
            unattach();                                                                                           // 669
            // This timeout makes chrome fire onbeforeunload event                                                // 670
            // within iframe. Without the timeout it goes straight to                                             // 671
            // onunload.                                                                                          // 672
            setTimeout(function() {                                                                               // 673
                if(iframe) {                                                                                      // 674
                    iframe.parentNode.removeChild(iframe);                                                        // 675
                }                                                                                                 // 676
                iframe = null;                                                                                    // 677
            }, 0);                                                                                                // 678
            utils.unload_del(unload_ref);                                                                         // 679
        }                                                                                                         // 680
    };                                                                                                            // 681
    var onerror = function(r) {                                                                                   // 682
        if (iframe) {                                                                                             // 683
            cleanup();                                                                                            // 684
            error_callback(r);                                                                                    // 685
        }                                                                                                         // 686
    };                                                                                                            // 687
    var post = function(msg, origin) {                                                                            // 688
        try {                                                                                                     // 689
            // When the iframe is not loaded, IE raises an exception                                              // 690
            // on 'contentWindow'.                                                                                // 691
            if (iframe && iframe.contentWindow) {                                                                 // 692
                iframe.contentWindow.postMessage(msg, origin);                                                    // 693
            }                                                                                                     // 694
        } catch (x) {};                                                                                           // 695
    };                                                                                                            // 696
                                                                                                                  // 697
    iframe.src = iframe_url;                                                                                      // 698
    iframe.style.display = 'none';                                                                                // 699
    iframe.style.position = 'absolute';                                                                           // 700
    iframe.onerror = function(){onerror('onerror');};                                                             // 701
    iframe.onload = function() {                                                                                  // 702
        // `onload` is triggered before scripts on the iframe are                                                 // 703
        // executed. Give it few seconds to actually load stuff.                                                  // 704
        clearTimeout(tref);                                                                                       // 705
        tref = setTimeout(function(){onerror('onload timeout');}, 2000);                                          // 706
    };                                                                                                            // 707
    _document.body.appendChild(iframe);                                                                           // 708
    tref = setTimeout(function(){onerror('timeout');}, 15000);                                                    // 709
    unload_ref = utils.unload_add(cleanup);                                                                       // 710
    return {                                                                                                      // 711
        post: post,                                                                                               // 712
        cleanup: cleanup,                                                                                         // 713
        loaded: unattach                                                                                          // 714
    };                                                                                                            // 715
};                                                                                                                // 716
                                                                                                                  // 717
utils.createHtmlfile = function (iframe_url, error_callback) {                                                    // 718
    var doc = new ActiveXObject('htmlfile');                                                                      // 719
    var tref, unload_ref;                                                                                         // 720
    var iframe;                                                                                                   // 721
    var unattach = function() {                                                                                   // 722
        clearTimeout(tref);                                                                                       // 723
    };                                                                                                            // 724
    var cleanup = function() {                                                                                    // 725
        if (doc) {                                                                                                // 726
            unattach();                                                                                           // 727
            utils.unload_del(unload_ref);                                                                         // 728
            iframe.parentNode.removeChild(iframe);                                                                // 729
            iframe = doc = null;                                                                                  // 730
            CollectGarbage();                                                                                     // 731
        }                                                                                                         // 732
    };                                                                                                            // 733
    var onerror = function(r)  {                                                                                  // 734
        if (doc) {                                                                                                // 735
            cleanup();                                                                                            // 736
            error_callback(r);                                                                                    // 737
        }                                                                                                         // 738
    };                                                                                                            // 739
    var post = function(msg, origin) {                                                                            // 740
        try {                                                                                                     // 741
            // When the iframe is not loaded, IE raises an exception                                              // 742
            // on 'contentWindow'.                                                                                // 743
            if (iframe && iframe.contentWindow) {                                                                 // 744
                iframe.contentWindow.postMessage(msg, origin);                                                    // 745
            }                                                                                                     // 746
        } catch (x) {};                                                                                           // 747
    };                                                                                                            // 748
                                                                                                                  // 749
    doc.open();                                                                                                   // 750
    doc.write('<html><s' + 'cript>' +                                                                             // 751
              'document.domain="' + document.domain + '";' +                                                      // 752
              '</s' + 'cript></html>');                                                                           // 753
    doc.close();                                                                                                  // 754
    doc.parentWindow[WPrefix] = _window[WPrefix];                                                                 // 755
    var c = doc.createElement('div');                                                                             // 756
    doc.body.appendChild(c);                                                                                      // 757
    iframe = doc.createElement('iframe');                                                                         // 758
    c.appendChild(iframe);                                                                                        // 759
    iframe.src = iframe_url;                                                                                      // 760
    tref = setTimeout(function(){onerror('timeout');}, 15000);                                                    // 761
    unload_ref = utils.unload_add(cleanup);                                                                       // 762
    return {                                                                                                      // 763
        post: post,                                                                                               // 764
        cleanup: cleanup,                                                                                         // 765
        loaded: unattach                                                                                          // 766
    };                                                                                                            // 767
};                                                                                                                // 768
//         [*] End of lib/dom.js                                                                                  // 769
                                                                                                                  // 770
                                                                                                                  // 771
//         [*] Including lib/dom2.js                                                                              // 772
/*                                                                                                                // 773
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 774
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 775
 *                                                                                                                // 776
 * For the license see COPYING.                                                                                   // 777
 * ***** END LICENSE BLOCK *****                                                                                  // 778
 */                                                                                                               // 779
                                                                                                                  // 780
var AbstractXHRObject = function(){};                                                                             // 781
AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);                                              // 782
                                                                                                                  // 783
AbstractXHRObject.prototype._start = function(method, url, payload, opts) {                                       // 784
    var that = this;                                                                                              // 785
                                                                                                                  // 786
    try {                                                                                                         // 787
        that.xhr = new XMLHttpRequest();                                                                          // 788
    } catch(x) {};                                                                                                // 789
                                                                                                                  // 790
    if (!that.xhr) {                                                                                              // 791
        try {                                                                                                     // 792
            that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');                                            // 793
        } catch(x) {};                                                                                            // 794
    }                                                                                                             // 795
    if (_window.ActiveXObject || _window.XDomainRequest) {                                                        // 796
        // IE8 caches even POSTs                                                                                  // 797
        url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);                                        // 798
    }                                                                                                             // 799
                                                                                                                  // 800
    // Explorer tends to keep connection open, even after the                                                     // 801
    // tab gets closed: http://bugs.jquery.com/ticket/5280                                                        // 802
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});                                         // 803
    try {                                                                                                         // 804
        that.xhr.open(method, url, true);                                                                         // 805
    } catch(e) {                                                                                                  // 806
        // IE raises an exception on wrong port.                                                                  // 807
        that.emit('finish', 0, '');                                                                               // 808
        that._cleanup();                                                                                          // 809
        return;                                                                                                   // 810
    };                                                                                                            // 811
                                                                                                                  // 812
    if (!opts || !opts.no_credentials) {                                                                          // 813
        // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                    // 814
        // "This never affects same-site requests."                                                               // 815
        that.xhr.withCredentials = 'true';                                                                        // 816
    }                                                                                                             // 817
    if (opts && opts.headers) {                                                                                   // 818
        for(var key in opts.headers) {                                                                            // 819
            that.xhr.setRequestHeader(key, opts.headers[key]);                                                    // 820
        }                                                                                                         // 821
    }                                                                                                             // 822
                                                                                                                  // 823
    that.xhr.onreadystatechange = function() {                                                                    // 824
        if (that.xhr) {                                                                                           // 825
            var x = that.xhr;                                                                                     // 826
            switch (x.readyState) {                                                                               // 827
            case 3:                                                                                               // 828
                // IE doesn't like peeking into responseText or status                                            // 829
                // on Microsoft.XMLHTTP and readystate=3                                                          // 830
                try {                                                                                             // 831
                    var status = x.status;                                                                        // 832
                    var text = x.responseText;                                                                    // 833
                } catch (x) {};                                                                                   // 834
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 835
                if (status === 1223) status = 204;                                                                // 836
                                                                                                                  // 837
                // IE does return readystate == 3 for 404 answers.                                                // 838
                if (text && text.length > 0) {                                                                    // 839
                    that.emit('chunk', status, text);                                                             // 840
                }                                                                                                 // 841
                break;                                                                                            // 842
            case 4:                                                                                               // 843
                var status = x.status;                                                                            // 844
                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                                    // 845
                if (status === 1223) status = 204;                                                                // 846
                                                                                                                  // 847
                that.emit('finish', status, x.responseText);                                                      // 848
                that._cleanup(false);                                                                             // 849
                break;                                                                                            // 850
            }                                                                                                     // 851
        }                                                                                                         // 852
    };                                                                                                            // 853
    that.xhr.send(payload);                                                                                       // 854
};                                                                                                                // 855
                                                                                                                  // 856
AbstractXHRObject.prototype._cleanup = function(abort) {                                                          // 857
    var that = this;                                                                                              // 858
    if (!that.xhr) return;                                                                                        // 859
    utils.unload_del(that.unload_ref);                                                                            // 860
                                                                                                                  // 861
    // IE needs this field to be a function                                                                       // 862
    that.xhr.onreadystatechange = function(){};                                                                   // 863
                                                                                                                  // 864
    if (abort) {                                                                                                  // 865
        try {                                                                                                     // 866
            that.xhr.abort();                                                                                     // 867
        } catch(x) {};                                                                                            // 868
    }                                                                                                             // 869
    that.unload_ref = that.xhr = null;                                                                            // 870
};                                                                                                                // 871
                                                                                                                  // 872
AbstractXHRObject.prototype.close = function() {                                                                  // 873
    var that = this;                                                                                              // 874
    that.nuke();                                                                                                  // 875
    that._cleanup(true);                                                                                          // 876
};                                                                                                                // 877
                                                                                                                  // 878
var XHRCorsObject = utils.XHRCorsObject = function() {                                                            // 879
    var that = this, args = arguments;                                                                            // 880
    utils.delay(function(){that._start.apply(that, args);});                                                      // 881
};                                                                                                                // 882
XHRCorsObject.prototype = new AbstractXHRObject();                                                                // 883
                                                                                                                  // 884
var XHRLocalObject = utils.XHRLocalObject = function(method, url, payload) {                                      // 885
    var that = this;                                                                                              // 886
    utils.delay(function(){                                                                                       // 887
        that._start(method, url, payload, {                                                                       // 888
            no_credentials: true                                                                                  // 889
        });                                                                                                       // 890
    });                                                                                                           // 891
};                                                                                                                // 892
XHRLocalObject.prototype = new AbstractXHRObject();                                                               // 893
                                                                                                                  // 894
                                                                                                                  // 895
                                                                                                                  // 896
// References:                                                                                                    // 897
//   http://ajaxian.com/archives/100-line-ajax-wrapper                                                            // 898
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                               // 899
var XDRObject = utils.XDRObject = function(method, url, payload) {                                                // 900
    var that = this;                                                                                              // 901
    utils.delay(function(){that._start(method, url, payload);});                                                  // 902
};                                                                                                                // 903
XDRObject.prototype = new EventEmitter(['chunk', 'finish']);                                                      // 904
XDRObject.prototype._start = function(method, url, payload) {                                                     // 905
    var that = this;                                                                                              // 906
    var xdr = new XDomainRequest();                                                                               // 907
    // IE caches even POSTs                                                                                       // 908
    url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);                                            // 909
                                                                                                                  // 910
    var onerror = xdr.ontimeout = xdr.onerror = function() {                                                      // 911
        that.emit('finish', 0, '');                                                                               // 912
        that._cleanup(false);                                                                                     // 913
    };                                                                                                            // 914
    xdr.onprogress = function() {                                                                                 // 915
        that.emit('chunk', 200, xdr.responseText);                                                                // 916
    };                                                                                                            // 917
    xdr.onload = function() {                                                                                     // 918
        that.emit('finish', 200, xdr.responseText);                                                               // 919
        that._cleanup(false);                                                                                     // 920
    };                                                                                                            // 921
    that.xdr = xdr;                                                                                               // 922
    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});                                         // 923
    try {                                                                                                         // 924
        // Fails with AccessDenied if port number is bogus                                                        // 925
        that.xdr.open(method, url);                                                                               // 926
        that.xdr.send(payload);                                                                                   // 927
    } catch(x) {                                                                                                  // 928
        onerror();                                                                                                // 929
    }                                                                                                             // 930
};                                                                                                                // 931
                                                                                                                  // 932
XDRObject.prototype._cleanup = function(abort) {                                                                  // 933
    var that = this;                                                                                              // 934
    if (!that.xdr) return;                                                                                        // 935
    utils.unload_del(that.unload_ref);                                                                            // 936
                                                                                                                  // 937
    that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress =                                                 // 938
        that.xdr.onload = null;                                                                                   // 939
    if (abort) {                                                                                                  // 940
        try {                                                                                                     // 941
            that.xdr.abort();                                                                                     // 942
        } catch(x) {};                                                                                            // 943
    }                                                                                                             // 944
    that.unload_ref = that.xdr = null;                                                                            // 945
};                                                                                                                // 946
                                                                                                                  // 947
XDRObject.prototype.close = function() {                                                                          // 948
    var that = this;                                                                                              // 949
    that.nuke();                                                                                                  // 950
    that._cleanup(true);                                                                                          // 951
};                                                                                                                // 952
                                                                                                                  // 953
// 1. Is natively via XHR                                                                                         // 954
// 2. Is natively via XDR                                                                                         // 955
// 3. Nope, but postMessage is there so it should work via the Iframe.                                            // 956
// 4. Nope, sorry.                                                                                                // 957
utils.isXHRCorsCapable = function() {                                                                             // 958
    if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {                                    // 959
        return 1;                                                                                                 // 960
    }                                                                                                             // 961
    // XDomainRequest doesn't work if page is served from file://                                                 // 962
    if (_window.XDomainRequest && _document.domain) {                                                             // 963
        return 2;                                                                                                 // 964
    }                                                                                                             // 965
    if (IframeTransport.enabled()) {                                                                              // 966
        return 3;                                                                                                 // 967
    }                                                                                                             // 968
    return 4;                                                                                                     // 969
};                                                                                                                // 970
//         [*] End of lib/dom2.js                                                                                 // 971
                                                                                                                  // 972
                                                                                                                  // 973
//         [*] Including lib/sockjs.js                                                                            // 974
/*                                                                                                                // 975
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 976
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 977
 *                                                                                                                // 978
 * For the license see COPYING.                                                                                   // 979
 * ***** END LICENSE BLOCK *****                                                                                  // 980
 */                                                                                                               // 981
                                                                                                                  // 982
var SockJS = function(url, dep_protocols_whitelist, options) {                                                    // 983
    if (!(this instanceof SockJS)) {                                                                              // 984
        // makes `new` optional                                                                                   // 985
        return new SockJS(url, dep_protocols_whitelist, options);                                                 // 986
    }                                                                                                             // 987
                                                                                                                  // 988
    var that = this, protocols_whitelist;                                                                         // 989
    that._options = {devel: false, debug: false, protocols_whitelist: [],                                         // 990
                     info: undefined, rtt: undefined};                                                            // 991
    if (options) {                                                                                                // 992
        utils.objectExtend(that._options, options);                                                               // 993
    }                                                                                                             // 994
    that._base_url = utils.amendUrl(url);                                                                         // 995
    that._server = that._options.server || utils.random_number_string(1000);                                      // 996
    if (that._options.protocols_whitelist &&                                                                      // 997
        that._options.protocols_whitelist.length) {                                                               // 998
        protocols_whitelist = that._options.protocols_whitelist;                                                  // 999
    } else {                                                                                                      // 1000
        // Deprecated API                                                                                         // 1001
        if (typeof dep_protocols_whitelist === 'string' &&                                                        // 1002
            dep_protocols_whitelist.length > 0) {                                                                 // 1003
            protocols_whitelist = [dep_protocols_whitelist];                                                      // 1004
        } else if (utils.isArray(dep_protocols_whitelist)) {                                                      // 1005
            protocols_whitelist = dep_protocols_whitelist                                                         // 1006
        } else {                                                                                                  // 1007
            protocols_whitelist = null;                                                                           // 1008
        }                                                                                                         // 1009
        if (protocols_whitelist) {                                                                                // 1010
            that._debug('Deprecated API: Use "protocols_whitelist" option ' +                                     // 1011
                        'instead of supplying protocol list as a second ' +                                       // 1012
                        'parameter to SockJS constructor.');                                                      // 1013
        }                                                                                                         // 1014
    }                                                                                                             // 1015
    that._protocols = [];                                                                                         // 1016
    that.protocol = null;                                                                                         // 1017
    that.readyState = SockJS.CONNECTING;                                                                          // 1018
    that._ir = createInfoReceiver(that._base_url);                                                                // 1019
    that._ir.onfinish = function(info, rtt) {                                                                     // 1020
        that._ir = null;                                                                                          // 1021
        if (info) {                                                                                               // 1022
            if (that._options.info) {                                                                             // 1023
                // Override if user supplies the option                                                           // 1024
                info = utils.objectExtend(info, that._options.info);                                              // 1025
            }                                                                                                     // 1026
            if (that._options.rtt) {                                                                              // 1027
                rtt = that._options.rtt;                                                                          // 1028
            }                                                                                                     // 1029
            that._applyInfo(info, rtt, protocols_whitelist);                                                      // 1030
            that._didClose();                                                                                     // 1031
        } else {                                                                                                  // 1032
            that._didClose(1002, 'Can\'t connect to server', true);                                               // 1033
        }                                                                                                         // 1034
    };                                                                                                            // 1035
};                                                                                                                // 1036
// Inheritance                                                                                                    // 1037
SockJS.prototype = new REventTarget();                                                                            // 1038
                                                                                                                  // 1039
SockJS.version = "0.3.4";                                                                                         // 1040
                                                                                                                  // 1041
SockJS.CONNECTING = 0;                                                                                            // 1042
SockJS.OPEN = 1;                                                                                                  // 1043
SockJS.CLOSING = 2;                                                                                               // 1044
SockJS.CLOSED = 3;                                                                                                // 1045
                                                                                                                  // 1046
SockJS.prototype._debug = function() {                                                                            // 1047
    if (this._options.debug)                                                                                      // 1048
        utils.log.apply(utils, arguments);                                                                        // 1049
};                                                                                                                // 1050
                                                                                                                  // 1051
SockJS.prototype._dispatchOpen = function() {                                                                     // 1052
    var that = this;                                                                                              // 1053
    if (that.readyState === SockJS.CONNECTING) {                                                                  // 1054
        if (that._transport_tref) {                                                                               // 1055
            clearTimeout(that._transport_tref);                                                                   // 1056
            that._transport_tref = null;                                                                          // 1057
        }                                                                                                         // 1058
        that.readyState = SockJS.OPEN;                                                                            // 1059
        that.dispatchEvent(new SimpleEvent("open"));                                                              // 1060
    } else {                                                                                                      // 1061
        // The server might have been restarted, and lost track of our                                            // 1062
        // connection.                                                                                            // 1063
        that._didClose(1006, "Server lost session");                                                              // 1064
    }                                                                                                             // 1065
};                                                                                                                // 1066
                                                                                                                  // 1067
SockJS.prototype._dispatchMessage = function(data) {                                                              // 1068
    var that = this;                                                                                              // 1069
    if (that.readyState !== SockJS.OPEN)                                                                          // 1070
            return;                                                                                               // 1071
    that.dispatchEvent(new SimpleEvent("message", {data: data}));                                                 // 1072
};                                                                                                                // 1073
                                                                                                                  // 1074
SockJS.prototype._dispatchHeartbeat = function(data) {                                                            // 1075
    var that = this;                                                                                              // 1076
    if (that.readyState !== SockJS.OPEN)                                                                          // 1077
        return;                                                                                                   // 1078
    that.dispatchEvent(new SimpleEvent('heartbeat', {}));                                                         // 1079
};                                                                                                                // 1080
                                                                                                                  // 1081
SockJS.prototype._didClose = function(code, reason, force) {                                                      // 1082
    var that = this;                                                                                              // 1083
    if (that.readyState !== SockJS.CONNECTING &&                                                                  // 1084
        that.readyState !== SockJS.OPEN &&                                                                        // 1085
        that.readyState !== SockJS.CLOSING)                                                                       // 1086
            throw new Error('INVALID_STATE_ERR');                                                                 // 1087
    if (that._ir) {                                                                                               // 1088
        that._ir.nuke();                                                                                          // 1089
        that._ir = null;                                                                                          // 1090
    }                                                                                                             // 1091
                                                                                                                  // 1092
    if (that._transport) {                                                                                        // 1093
        that._transport.doCleanup();                                                                              // 1094
        that._transport = null;                                                                                   // 1095
    }                                                                                                             // 1096
                                                                                                                  // 1097
    var close_event = new SimpleEvent("close", {                                                                  // 1098
        code: code,                                                                                               // 1099
        reason: reason,                                                                                           // 1100
        wasClean: utils.userSetCode(code)});                                                                      // 1101
                                                                                                                  // 1102
    if (!utils.userSetCode(code) &&                                                                               // 1103
        that.readyState === SockJS.CONNECTING && !force) {                                                        // 1104
        if (that._try_next_protocol(close_event)) {                                                               // 1105
            return;                                                                                               // 1106
        }                                                                                                         // 1107
        close_event = new SimpleEvent("close", {code: 2000,                                                       // 1108
                                                reason: "All transports failed",                                  // 1109
                                                wasClean: false,                                                  // 1110
                                                last_event: close_event});                                        // 1111
    }                                                                                                             // 1112
    that.readyState = SockJS.CLOSED;                                                                              // 1113
                                                                                                                  // 1114
    utils.delay(function() {                                                                                      // 1115
                   that.dispatchEvent(close_event);                                                               // 1116
                });                                                                                               // 1117
};                                                                                                                // 1118
                                                                                                                  // 1119
SockJS.prototype._didMessage = function(data) {                                                                   // 1120
    var that = this;                                                                                              // 1121
    var type = data.slice(0, 1);                                                                                  // 1122
    switch(type) {                                                                                                // 1123
    case 'o':                                                                                                     // 1124
        that._dispatchOpen();                                                                                     // 1125
        break;                                                                                                    // 1126
    case 'a':                                                                                                     // 1127
        var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1128
        for(var i=0; i < payload.length; i++){                                                                    // 1129
            that._dispatchMessage(payload[i]);                                                                    // 1130
        }                                                                                                         // 1131
        break;                                                                                                    // 1132
    case 'm':                                                                                                     // 1133
        var payload = JSON.parse(data.slice(1) || 'null');                                                        // 1134
        that._dispatchMessage(payload);                                                                           // 1135
        break;                                                                                                    // 1136
    case 'c':                                                                                                     // 1137
        var payload = JSON.parse(data.slice(1) || '[]');                                                          // 1138
        that._didClose(payload[0], payload[1]);                                                                   // 1139
        break;                                                                                                    // 1140
    case 'h':                                                                                                     // 1141
        that._dispatchHeartbeat();                                                                                // 1142
        break;                                                                                                    // 1143
    }                                                                                                             // 1144
};                                                                                                                // 1145
                                                                                                                  // 1146
SockJS.prototype._try_next_protocol = function(close_event) {                                                     // 1147
    var that = this;                                                                                              // 1148
    if (that.protocol) {                                                                                          // 1149
        that._debug('Closed transport:', that.protocol, ''+close_event);                                          // 1150
        that.protocol = null;                                                                                     // 1151
    }                                                                                                             // 1152
    if (that._transport_tref) {                                                                                   // 1153
        clearTimeout(that._transport_tref);                                                                       // 1154
        that._transport_tref = null;                                                                              // 1155
    }                                                                                                             // 1156
                                                                                                                  // 1157
    while(1) {                                                                                                    // 1158
        var protocol = that.protocol = that._protocols.shift();                                                   // 1159
        if (!protocol) {                                                                                          // 1160
            return false;                                                                                         // 1161
        }                                                                                                         // 1162
        // Some protocols require access to `body`, what if were in                                               // 1163
        // the `head`?                                                                                            // 1164
        if (SockJS[protocol] &&                                                                                   // 1165
            SockJS[protocol].need_body === true &&                                                                // 1166
            (!_document.body ||                                                                                   // 1167
             (typeof _document.readyState !== 'undefined'                                                         // 1168
              && _document.readyState !== 'complete'))) {                                                         // 1169
            that._protocols.unshift(protocol);                                                                    // 1170
            that.protocol = 'waiting-for-load';                                                                   // 1171
            utils.attachEvent('load', function(){                                                                 // 1172
                that._try_next_protocol();                                                                        // 1173
            });                                                                                                   // 1174
            return true;                                                                                          // 1175
        }                                                                                                         // 1176
                                                                                                                  // 1177
        if (!SockJS[protocol] ||                                                                                  // 1178
              !SockJS[protocol].enabled(that._options)) {                                                         // 1179
            that._debug('Skipping transport:', protocol);                                                         // 1180
        } else {                                                                                                  // 1181
            var roundTrips = SockJS[protocol].roundTrips || 1;                                                    // 1182
            var to = ((that._options.rto || 0) * roundTrips) || 5000;                                             // 1183
            that._transport_tref = utils.delay(to, function() {                                                   // 1184
                if (that.readyState === SockJS.CONNECTING) {                                                      // 1185
                    // I can't understand how it is possible to run                                               // 1186
                    // this timer, when the state is CLOSED, but                                                  // 1187
                    // apparently in IE everythin is possible.                                                    // 1188
                    that._didClose(2007, "Transport timeouted");                                                  // 1189
                }                                                                                                 // 1190
            });                                                                                                   // 1191
                                                                                                                  // 1192
            var connid = utils.random_string(8);                                                                  // 1193
            var trans_url = that._base_url + '/' + that._server + '/' + connid;                                   // 1194
            that._debug('Opening transport:', protocol, ' url:'+trans_url,                                        // 1195
                        ' RTO:'+that._options.rto);                                                               // 1196
            that._transport = new SockJS[protocol](that, trans_url,                                               // 1197
                                                   that._base_url);                                               // 1198
            return true;                                                                                          // 1199
        }                                                                                                         // 1200
    }                                                                                                             // 1201
};                                                                                                                // 1202
                                                                                                                  // 1203
SockJS.prototype.close = function(code, reason) {                                                                 // 1204
    var that = this;                                                                                              // 1205
    if (code && !utils.userSetCode(code))                                                                         // 1206
        throw new Error("INVALID_ACCESS_ERR");                                                                    // 1207
    if(that.readyState !== SockJS.CONNECTING &&                                                                   // 1208
       that.readyState !== SockJS.OPEN) {                                                                         // 1209
        return false;                                                                                             // 1210
    }                                                                                                             // 1211
    that.readyState = SockJS.CLOSING;                                                                             // 1212
    that._didClose(code || 1000, reason || "Normal closure");                                                     // 1213
    return true;                                                                                                  // 1214
};                                                                                                                // 1215
                                                                                                                  // 1216
SockJS.prototype.send = function(data) {                                                                          // 1217
    var that = this;                                                                                              // 1218
    if (that.readyState === SockJS.CONNECTING)                                                                    // 1219
        throw new Error('INVALID_STATE_ERR');                                                                     // 1220
    if (that.readyState === SockJS.OPEN) {                                                                        // 1221
        that._transport.doSend(utils.quote('' + data));                                                           // 1222
    }                                                                                                             // 1223
    return true;                                                                                                  // 1224
};                                                                                                                // 1225
                                                                                                                  // 1226
SockJS.prototype._applyInfo = function(info, rtt, protocols_whitelist) {                                          // 1227
    var that = this;                                                                                              // 1228
    that._options.info = info;                                                                                    // 1229
    that._options.rtt = rtt;                                                                                      // 1230
    that._options.rto = utils.countRTO(rtt);                                                                      // 1231
    that._options.info.null_origin = !_document.domain;                                                           // 1232
    // Servers can override base_url, eg to provide a randomized domain name and                                  // 1233
    // avoid browser per-domain connection limits.                                                                // 1234
    if (info.base_url)                                                                                            // 1235
      // <METEOR>                                                                                                 // 1236
      that._base_url = utils.amendUrl(info.base_url, that._base_url);                                             // 1237
      // </METEOR>                                                                                                // 1238
    var probed = utils.probeProtocols();                                                                          // 1239
    that._protocols = utils.detectProtocols(probed, protocols_whitelist, info);                                   // 1240
// <METEOR>                                                                                                       // 1241
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 1242
    // Hack to avoid XDR when using different protocols                                                           // 1243
    // We're on IE trying to do cross-protocol. jsonp only.                                                       // 1244
    if (!utils.isSameOriginScheme(that._base_url) &&                                                              // 1245
        2 === utils.isXHRCorsCapable()) {                                                                         // 1246
        that._protocols = ['jsonp-polling'];                                                                      // 1247
    }                                                                                                             // 1248
// </METEOR>                                                                                                      // 1249
};                                                                                                                // 1250
//         [*] End of lib/sockjs.js                                                                               // 1251
                                                                                                                  // 1252
                                                                                                                  // 1253
//         [*] Including lib/trans-websocket.js                                                                   // 1254
/*                                                                                                                // 1255
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1256
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1257
 *                                                                                                                // 1258
 * For the license see COPYING.                                                                                   // 1259
 * ***** END LICENSE BLOCK *****                                                                                  // 1260
 */                                                                                                               // 1261
                                                                                                                  // 1262
var WebSocketTransport = SockJS.websocket = function(ri, trans_url) {                                             // 1263
    var that = this;                                                                                              // 1264
    var url = trans_url + '/websocket';                                                                           // 1265
    if (url.slice(0, 5) === 'https') {                                                                            // 1266
        url = 'wss' + url.slice(5);                                                                               // 1267
    } else {                                                                                                      // 1268
        url = 'ws' + url.slice(4);                                                                                // 1269
    }                                                                                                             // 1270
    that.ri = ri;                                                                                                 // 1271
    that.url = url;                                                                                               // 1272
    var Constructor = _window.WebSocket || _window.MozWebSocket;                                                  // 1273
                                                                                                                  // 1274
    that.ws = new Constructor(that.url);                                                                          // 1275
    that.ws.onmessage = function(e) {                                                                             // 1276
        that.ri._didMessage(e.data);                                                                              // 1277
    };                                                                                                            // 1278
    // Firefox has an interesting bug. If a websocket connection is                                               // 1279
    // created after onunload, it stays alive even when user                                                      // 1280
    // navigates away from the page. In such situation let's lie -                                                // 1281
    // let's not open the ws connection at all. See:                                                              // 1282
    // https://github.com/sockjs/sockjs-client/issues/28                                                          // 1283
    // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                        // 1284
    that.unload_ref = utils.unload_add(function(){that.ws.close()});                                              // 1285
    that.ws.onclose = function() {                                                                                // 1286
        that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));                               // 1287
    };                                                                                                            // 1288
};                                                                                                                // 1289
                                                                                                                  // 1290
WebSocketTransport.prototype.doSend = function(data) {                                                            // 1291
    this.ws.send('[' + data + ']');                                                                               // 1292
};                                                                                                                // 1293
                                                                                                                  // 1294
WebSocketTransport.prototype.doCleanup = function() {                                                             // 1295
    var that = this;                                                                                              // 1296
    var ws = that.ws;                                                                                             // 1297
    if (ws) {                                                                                                     // 1298
        ws.onmessage = ws.onclose = null;                                                                         // 1299
        ws.close();                                                                                               // 1300
        utils.unload_del(that.unload_ref);                                                                        // 1301
        that.unload_ref = that.ri = that.ws = null;                                                               // 1302
    }                                                                                                             // 1303
};                                                                                                                // 1304
                                                                                                                  // 1305
WebSocketTransport.enabled = function() {                                                                         // 1306
    return !!(_window.WebSocket || _window.MozWebSocket);                                                         // 1307
};                                                                                                                // 1308
                                                                                                                  // 1309
// In theory, ws should require 1 round trip. But in chrome, this is                                              // 1310
// not very stable over SSL. Most likely a ws connection requires a                                               // 1311
// separate SSL connection, in which case 2 round trips are an                                                    // 1312
// absolute minumum.                                                                                              // 1313
WebSocketTransport.roundTrips = 2;                                                                                // 1314
//         [*] End of lib/trans-websocket.js                                                                      // 1315
                                                                                                                  // 1316
                                                                                                                  // 1317
//         [*] Including lib/trans-sender.js                                                                      // 1318
/*                                                                                                                // 1319
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1320
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1321
 *                                                                                                                // 1322
 * For the license see COPYING.                                                                                   // 1323
 * ***** END LICENSE BLOCK *****                                                                                  // 1324
 */                                                                                                               // 1325
                                                                                                                  // 1326
var BufferedSender = function() {};                                                                               // 1327
BufferedSender.prototype.send_constructor = function(sender) {                                                    // 1328
    var that = this;                                                                                              // 1329
    that.send_buffer = [];                                                                                        // 1330
    that.sender = sender;                                                                                         // 1331
};                                                                                                                // 1332
BufferedSender.prototype.doSend = function(message) {                                                             // 1333
    var that = this;                                                                                              // 1334
    that.send_buffer.push(message);                                                                               // 1335
    if (!that.send_stop) {                                                                                        // 1336
        that.send_schedule();                                                                                     // 1337
    }                                                                                                             // 1338
};                                                                                                                // 1339
                                                                                                                  // 1340
// For polling transports in a situation when in the message callback,                                            // 1341
// new message is being send. If the sending connection was started                                               // 1342
// before receiving one, it is possible to saturate the network and                                               // 1343
// timeout due to the lack of receiving socket. To avoid that we delay                                            // 1344
// sending messages by some small time, in order to let receiving                                                 // 1345
// connection be started beforehand. This is only a halfmeasure and                                               // 1346
// does not fix the big problem, but it does make the tests go more                                               // 1347
// stable on slow networks.                                                                                       // 1348
BufferedSender.prototype.send_schedule_wait = function() {                                                        // 1349
    var that = this;                                                                                              // 1350
    var tref;                                                                                                     // 1351
    that.send_stop = function() {                                                                                 // 1352
        that.send_stop = null;                                                                                    // 1353
        clearTimeout(tref);                                                                                       // 1354
    };                                                                                                            // 1355
    tref = utils.delay(25, function() {                                                                           // 1356
        that.send_stop = null;                                                                                    // 1357
        that.send_schedule();                                                                                     // 1358
    });                                                                                                           // 1359
};                                                                                                                // 1360
                                                                                                                  // 1361
BufferedSender.prototype.send_schedule = function() {                                                             // 1362
    var that = this;                                                                                              // 1363
    if (that.send_buffer.length > 0) {                                                                            // 1364
        var payload = '[' + that.send_buffer.join(',') + ']';                                                     // 1365
        that.send_stop = that.sender(that.trans_url, payload, function(success, abort_reason) {                   // 1366
            that.send_stop = null;                                                                                // 1367
            if (success === false) {                                                                              // 1368
                that.ri._didClose(1006, 'Sending error ' + abort_reason);                                         // 1369
            } else {                                                                                              // 1370
                that.send_schedule_wait();                                                                        // 1371
            }                                                                                                     // 1372
        });                                                                                                       // 1373
        that.send_buffer = [];                                                                                    // 1374
    }                                                                                                             // 1375
};                                                                                                                // 1376
                                                                                                                  // 1377
BufferedSender.prototype.send_destructor = function() {                                                           // 1378
    var that = this;                                                                                              // 1379
    if (that._send_stop) {                                                                                        // 1380
        that._send_stop();                                                                                        // 1381
    }                                                                                                             // 1382
    that._send_stop = null;                                                                                       // 1383
};                                                                                                                // 1384
                                                                                                                  // 1385
var jsonPGenericSender = function(url, payload, callback) {                                                       // 1386
    var that = this;                                                                                              // 1387
                                                                                                                  // 1388
    if (!('_send_form' in that)) {                                                                                // 1389
        var form = that._send_form = _document.createElement('form');                                             // 1390
        var area = that._send_area = _document.createElement('textarea');                                         // 1391
        area.name = 'd';                                                                                          // 1392
        form.style.display = 'none';                                                                              // 1393
        form.style.position = 'absolute';                                                                         // 1394
        form.method = 'POST';                                                                                     // 1395
        form.enctype = 'application/x-www-form-urlencoded';                                                       // 1396
        form.acceptCharset = "UTF-8";                                                                             // 1397
        form.appendChild(area);                                                                                   // 1398
        _document.body.appendChild(form);                                                                         // 1399
    }                                                                                                             // 1400
    var form = that._send_form;                                                                                   // 1401
    var area = that._send_area;                                                                                   // 1402
    var id = 'a' + utils.random_string(8);                                                                        // 1403
    form.target = id;                                                                                             // 1404
    form.action = url + '/jsonp_send?i=' + id;                                                                    // 1405
                                                                                                                  // 1406
    var iframe;                                                                                                   // 1407
    try {                                                                                                         // 1408
        // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)                                    // 1409
        iframe = _document.createElement('<iframe name="'+ id +'">');                                             // 1410
    } catch(x) {                                                                                                  // 1411
        iframe = _document.createElement('iframe');                                                               // 1412
        iframe.name = id;                                                                                         // 1413
    }                                                                                                             // 1414
    iframe.id = id;                                                                                               // 1415
    form.appendChild(iframe);                                                                                     // 1416
    iframe.style.display = 'none';                                                                                // 1417
                                                                                                                  // 1418
    try {                                                                                                         // 1419
        area.value = payload;                                                                                     // 1420
    } catch(e) {                                                                                                  // 1421
        utils.log('Your browser is seriously broken. Go home! ' + e.message);                                     // 1422
    }                                                                                                             // 1423
    form.submit();                                                                                                // 1424
                                                                                                                  // 1425
    var completed = function(e) {                                                                                 // 1426
        if (!iframe.onerror) return;                                                                              // 1427
        iframe.onreadystatechange = iframe.onerror = iframe.onload = null;                                        // 1428
        // Opera mini doesn't like if we GC iframe                                                                // 1429
        // immediately, thus this timeout.                                                                        // 1430
        utils.delay(500, function() {                                                                             // 1431
                       iframe.parentNode.removeChild(iframe);                                                     // 1432
                       iframe = null;                                                                             // 1433
                   });                                                                                            // 1434
        area.value = '';                                                                                          // 1435
        // It is not possible to detect if the iframe succeeded or                                                // 1436
        // failed to submit our form.                                                                             // 1437
        callback(true);                                                                                           // 1438
    };                                                                                                            // 1439
    iframe.onerror = iframe.onload = completed;                                                                   // 1440
    iframe.onreadystatechange = function(e) {                                                                     // 1441
        if (iframe.readyState == 'complete') completed();                                                         // 1442
    };                                                                                                            // 1443
    return completed;                                                                                             // 1444
};                                                                                                                // 1445
                                                                                                                  // 1446
var createAjaxSender = function(AjaxObject) {                                                                     // 1447
    return function(url, payload, callback) {                                                                     // 1448
        var xo = new AjaxObject('POST', url + '/xhr_send', payload);                                              // 1449
        xo.onfinish = function(status, text) {                                                                    // 1450
            callback(status === 200 || status === 204,                                                            // 1451
                     'http status ' + status);                                                                    // 1452
        };                                                                                                        // 1453
        return function(abort_reason) {                                                                           // 1454
            callback(false, abort_reason);                                                                        // 1455
        };                                                                                                        // 1456
    };                                                                                                            // 1457
};                                                                                                                // 1458
//         [*] End of lib/trans-sender.js                                                                         // 1459
                                                                                                                  // 1460
                                                                                                                  // 1461
//         [*] Including lib/trans-jsonp-receiver.js                                                              // 1462
/*                                                                                                                // 1463
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1464
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1465
 *                                                                                                                // 1466
 * For the license see COPYING.                                                                                   // 1467
 * ***** END LICENSE BLOCK *****                                                                                  // 1468
 */                                                                                                               // 1469
                                                                                                                  // 1470
// Parts derived from Socket.io:                                                                                  // 1471
//    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js               // 1472
// and jQuery-JSONP:                                                                                              // 1473
//    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                             // 1474
var jsonPGenericReceiver = function(url, callback) {                                                              // 1475
    var tref;                                                                                                     // 1476
    var script = _document.createElement('script');                                                               // 1477
    var script2;  // Opera synchronous load trick.                                                                // 1478
    var close_script = function(frame) {                                                                          // 1479
        if (script2) {                                                                                            // 1480
            script2.parentNode.removeChild(script2);                                                              // 1481
            script2 = null;                                                                                       // 1482
        }                                                                                                         // 1483
        if (script) {                                                                                             // 1484
            clearTimeout(tref);                                                                                   // 1485
            // Unfortunately, you can't really abort script loading of                                            // 1486
            // the script.                                                                                        // 1487
            script.parentNode.removeChild(script);                                                                // 1488
            script.onreadystatechange = script.onerror =                                                          // 1489
                script.onload = script.onclick = null;                                                            // 1490
            script = null;                                                                                        // 1491
            callback(frame);                                                                                      // 1492
            callback = null;                                                                                      // 1493
        }                                                                                                         // 1494
    };                                                                                                            // 1495
                                                                                                                  // 1496
    // IE9 fires 'error' event after orsc or before, in random order.                                             // 1497
    var loaded_okay = false;                                                                                      // 1498
    var error_timer = null;                                                                                       // 1499
                                                                                                                  // 1500
    script.id = 'a' + utils.random_string(8);                                                                     // 1501
    script.src = url;                                                                                             // 1502
    script.type = 'text/javascript';                                                                              // 1503
    script.charset = 'UTF-8';                                                                                     // 1504
    script.onerror = function(e) {                                                                                // 1505
        if (!error_timer) {                                                                                       // 1506
            // Delay firing close_script.                                                                         // 1507
            error_timer = setTimeout(function() {                                                                 // 1508
                if (!loaded_okay) {                                                                               // 1509
                    close_script(utils.closeFrame(                                                                // 1510
                        1006,                                                                                     // 1511
                        "JSONP script loaded abnormally (onerror)"));                                             // 1512
                }                                                                                                 // 1513
            }, 1000);                                                                                             // 1514
        }                                                                                                         // 1515
    };                                                                                                            // 1516
    script.onload = function(e) {                                                                                 // 1517
        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));                          // 1518
    };                                                                                                            // 1519
                                                                                                                  // 1520
    script.onreadystatechange = function(e) {                                                                     // 1521
        if (/loaded|closed/.test(script.readyState)) {                                                            // 1522
            if (script && script.htmlFor && script.onclick) {                                                     // 1523
                loaded_okay = true;                                                                               // 1524
                try {                                                                                             // 1525
                    // In IE, actually execute the script.                                                        // 1526
                    script.onclick();                                                                             // 1527
                } catch (x) {}                                                                                    // 1528
            }                                                                                                     // 1529
            if (script) {                                                                                         // 1530
                close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));      // 1531
            }                                                                                                     // 1532
        }                                                                                                         // 1533
    };                                                                                                            // 1534
    // IE: event/htmlFor/onclick trick.                                                                           // 1535
    // One can't rely on proper order for onreadystatechange. In order to                                         // 1536
    // make sure, set a 'htmlFor' and 'event' properties, so that                                                 // 1537
    // script code will be installed as 'onclick' handler for the                                                 // 1538
    // script object. Later, onreadystatechange, manually execute this                                            // 1539
    // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                // 1540
    // set. For reference see:                                                                                    // 1541
    //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                    // 1542
    // Also, read on that about script ordering:                                                                  // 1543
    //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                               // 1544
    if (typeof script.async === 'undefined' && _document.attachEvent) {                                           // 1545
        // According to mozilla docs, in recent browsers script.async defaults                                    // 1546
        // to 'true', so we may use it to detect a good browser:                                                  // 1547
        // https://developer.mozilla.org/en/HTML/Element/script                                                   // 1548
        if (!/opera/i.test(navigator.userAgent)) {                                                                // 1549
            // Naively assume we're in IE                                                                         // 1550
            try {                                                                                                 // 1551
                script.htmlFor = script.id;                                                                       // 1552
                script.event = "onclick";                                                                         // 1553
            } catch (x) {}                                                                                        // 1554
            script.async = true;                                                                                  // 1555
        } else {                                                                                                  // 1556
            // Opera, second sync script hack                                                                     // 1557
            script2 = _document.createElement('script');                                                          // 1558
            script2.text = "try{var a = document.getElementById('"+script.id+"'); if(a)a.onerror();}catch(x){};";
            script.async = script2.async = false;                                                                 // 1560
        }                                                                                                         // 1561
    }                                                                                                             // 1562
    if (typeof script.async !== 'undefined') {                                                                    // 1563
        script.async = true;                                                                                      // 1564
    }                                                                                                             // 1565
                                                                                                                  // 1566
    // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                  // 1567
    tref = setTimeout(function() {                                                                                // 1568
                          close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));       // 1569
                      }, 35000);                                                                                  // 1570
                                                                                                                  // 1571
    var head = _document.getElementsByTagName('head')[0];                                                         // 1572
    head.insertBefore(script, head.firstChild);                                                                   // 1573
    if (script2) {                                                                                                // 1574
        head.insertBefore(script2, head.firstChild);                                                              // 1575
    }                                                                                                             // 1576
    return close_script;                                                                                          // 1577
};                                                                                                                // 1578
//         [*] End of lib/trans-jsonp-receiver.js                                                                 // 1579
                                                                                                                  // 1580
                                                                                                                  // 1581
//         [*] Including lib/trans-jsonp-polling.js                                                               // 1582
/*                                                                                                                // 1583
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1584
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1585
 *                                                                                                                // 1586
 * For the license see COPYING.                                                                                   // 1587
 * ***** END LICENSE BLOCK *****                                                                                  // 1588
 */                                                                                                               // 1589
                                                                                                                  // 1590
// The simplest and most robust transport, using the well-know cross                                              // 1591
// domain hack - JSONP. This transport is quite inefficient - one                                                 // 1592
// mssage could use up to one http request. But at least it works almost                                          // 1593
// everywhere.                                                                                                    // 1594
// Known limitations:                                                                                             // 1595
//   o you will get a spinning cursor                                                                             // 1596
//   o for Konqueror a dumb timer is needed to detect errors                                                      // 1597
                                                                                                                  // 1598
                                                                                                                  // 1599
var JsonPTransport = SockJS['jsonp-polling'] = function(ri, trans_url) {                                          // 1600
    utils.polluteGlobalNamespace();                                                                               // 1601
    var that = this;                                                                                              // 1602
    that.ri = ri;                                                                                                 // 1603
    that.trans_url = trans_url;                                                                                   // 1604
    that.send_constructor(jsonPGenericSender);                                                                    // 1605
    that._schedule_recv();                                                                                        // 1606
};                                                                                                                // 1607
                                                                                                                  // 1608
// Inheritnace                                                                                                    // 1609
JsonPTransport.prototype = new BufferedSender();                                                                  // 1610
                                                                                                                  // 1611
JsonPTransport.prototype._schedule_recv = function() {                                                            // 1612
    var that = this;                                                                                              // 1613
    var callback = function(data) {                                                                               // 1614
        that._recv_stop = null;                                                                                   // 1615
        if (data) {                                                                                               // 1616
            // no data - heartbeat;                                                                               // 1617
            if (!that._is_closing) {                                                                              // 1618
                that.ri._didMessage(data);                                                                        // 1619
            }                                                                                                     // 1620
        }                                                                                                         // 1621
        // The message can be a close message, and change is_closing state.                                       // 1622
        if (!that._is_closing) {                                                                                  // 1623
            that._schedule_recv();                                                                                // 1624
        }                                                                                                         // 1625
    };                                                                                                            // 1626
    that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp',                                             // 1627
                                           jsonPGenericReceiver, callback);                                       // 1628
};                                                                                                                // 1629
                                                                                                                  // 1630
JsonPTransport.enabled = function() {                                                                             // 1631
    return true;                                                                                                  // 1632
};                                                                                                                // 1633
                                                                                                                  // 1634
JsonPTransport.need_body = true;                                                                                  // 1635
                                                                                                                  // 1636
                                                                                                                  // 1637
JsonPTransport.prototype.doCleanup = function() {                                                                 // 1638
    var that = this;                                                                                              // 1639
    that._is_closing = true;                                                                                      // 1640
    if (that._recv_stop) {                                                                                        // 1641
        that._recv_stop();                                                                                        // 1642
    }                                                                                                             // 1643
    that.ri = that._recv_stop = null;                                                                             // 1644
    that.send_destructor();                                                                                       // 1645
};                                                                                                                // 1646
                                                                                                                  // 1647
                                                                                                                  // 1648
// Abstract away code that handles global namespace pollution.                                                    // 1649
var jsonPReceiverWrapper = function(url, constructReceiver, user_callback) {                                      // 1650
    var id = 'a' + utils.random_string(6);                                                                        // 1651
    var url_id = url + '?c=' + escape(WPrefix + '.' + id);                                                        // 1652
                                                                                                                  // 1653
    // Unfortunately it is not possible to abort loading of the                                                   // 1654
    // script. We need to keep track of frake close frames.                                                       // 1655
    var aborting = 0;                                                                                             // 1656
                                                                                                                  // 1657
    // Callback will be called exactly once.                                                                      // 1658
    var callback = function(frame) {                                                                              // 1659
        switch(aborting) {                                                                                        // 1660
        case 0:                                                                                                   // 1661
            // Normal behaviour - delete hook _and_ emit message.                                                 // 1662
            delete _window[WPrefix][id];                                                                          // 1663
            user_callback(frame);                                                                                 // 1664
            break;                                                                                                // 1665
        case 1:                                                                                                   // 1666
            // Fake close frame - emit but don't delete hook.                                                     // 1667
            user_callback(frame);                                                                                 // 1668
            aborting = 2;                                                                                         // 1669
            break;                                                                                                // 1670
        case 2:                                                                                                   // 1671
            // Got frame after connection was closed, delete hook, don't emit.                                    // 1672
            delete _window[WPrefix][id];                                                                          // 1673
            break;                                                                                                // 1674
        }                                                                                                         // 1675
    };                                                                                                            // 1676
                                                                                                                  // 1677
    var close_script = constructReceiver(url_id, callback);                                                       // 1678
    _window[WPrefix][id] = close_script;                                                                          // 1679
    var stop = function() {                                                                                       // 1680
        if (_window[WPrefix][id]) {                                                                               // 1681
            aborting = 1;                                                                                         // 1682
            _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));                              // 1683
        }                                                                                                         // 1684
    };                                                                                                            // 1685
    return stop;                                                                                                  // 1686
};                                                                                                                // 1687
//         [*] End of lib/trans-jsonp-polling.js                                                                  // 1688
                                                                                                                  // 1689
                                                                                                                  // 1690
//         [*] Including lib/trans-xhr.js                                                                         // 1691
/*                                                                                                                // 1692
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1693
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1694
 *                                                                                                                // 1695
 * For the license see COPYING.                                                                                   // 1696
 * ***** END LICENSE BLOCK *****                                                                                  // 1697
 */                                                                                                               // 1698
                                                                                                                  // 1699
var AjaxBasedTransport = function() {};                                                                           // 1700
AjaxBasedTransport.prototype = new BufferedSender();                                                              // 1701
                                                                                                                  // 1702
AjaxBasedTransport.prototype.run = function(ri, trans_url,                                                        // 1703
                                            url_suffix, Receiver, AjaxObject) {                                   // 1704
    var that = this;                                                                                              // 1705
    that.ri = ri;                                                                                                 // 1706
    that.trans_url = trans_url;                                                                                   // 1707
    that.send_constructor(createAjaxSender(AjaxObject));                                                          // 1708
    that.poll = new Polling(ri, Receiver,                                                                         // 1709
                            trans_url + url_suffix, AjaxObject);                                                  // 1710
};                                                                                                                // 1711
                                                                                                                  // 1712
AjaxBasedTransport.prototype.doCleanup = function() {                                                             // 1713
    var that = this;                                                                                              // 1714
    if (that.poll) {                                                                                              // 1715
        that.poll.abort();                                                                                        // 1716
        that.poll = null;                                                                                         // 1717
    }                                                                                                             // 1718
};                                                                                                                // 1719
                                                                                                                  // 1720
// xhr-streaming                                                                                                  // 1721
var XhrStreamingTransport = SockJS['xhr-streaming'] = function(ri, trans_url) {                                   // 1722
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);                                  // 1723
};                                                                                                                // 1724
                                                                                                                  // 1725
XhrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1726
                                                                                                                  // 1727
XhrStreamingTransport.enabled = function() {                                                                      // 1728
    // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                  // 1729
    // doesn't do streaming.                                                                                      // 1730
    return (_window.XMLHttpRequest &&                                                                             // 1731
            'withCredentials' in new XMLHttpRequest() &&                                                          // 1732
            (!/opera/i.test(navigator.userAgent)));                                                               // 1733
};                                                                                                                // 1734
XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1735
                                                                                                                  // 1736
// Safari gets confused when a streaming ajax request is started                                                  // 1737
// before onload. This causes the load indicator to spin indefinetely.                                            // 1738
XhrStreamingTransport.need_body = true;                                                                           // 1739
                                                                                                                  // 1740
                                                                                                                  // 1741
// According to:                                                                                                  // 1742
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests           // 1743
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                        // 1744
                                                                                                                  // 1745
                                                                                                                  // 1746
// xdr-streaming                                                                                                  // 1747
var XdrStreamingTransport = SockJS['xdr-streaming'] = function(ri, trans_url) {                                   // 1748
    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);                                      // 1749
};                                                                                                                // 1750
                                                                                                                  // 1751
XdrStreamingTransport.prototype = new AjaxBasedTransport();                                                       // 1752
                                                                                                                  // 1753
XdrStreamingTransport.enabled = function() {                                                                      // 1754
    return !!_window.XDomainRequest;                                                                              // 1755
};                                                                                                                // 1756
XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                          // 1757
                                                                                                                  // 1758
                                                                                                                  // 1759
                                                                                                                  // 1760
// xhr-polling                                                                                                    // 1761
var XhrPollingTransport = SockJS['xhr-polling'] = function(ri, trans_url) {                                       // 1762
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);                                            // 1763
};                                                                                                                // 1764
                                                                                                                  // 1765
XhrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1766
                                                                                                                  // 1767
XhrPollingTransport.enabled = XhrStreamingTransport.enabled;                                                      // 1768
XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1769
                                                                                                                  // 1770
                                                                                                                  // 1771
// xdr-polling                                                                                                    // 1772
var XdrPollingTransport = SockJS['xdr-polling'] = function(ri, trans_url) {                                       // 1773
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);                                                // 1774
};                                                                                                                // 1775
                                                                                                                  // 1776
XdrPollingTransport.prototype = new AjaxBasedTransport();                                                         // 1777
                                                                                                                  // 1778
XdrPollingTransport.enabled = XdrStreamingTransport.enabled;                                                      // 1779
XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                            // 1780
//         [*] End of lib/trans-xhr.js                                                                            // 1781
                                                                                                                  // 1782
                                                                                                                  // 1783
//         [*] Including lib/trans-iframe.js                                                                      // 1784
/*                                                                                                                // 1785
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1786
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1787
 *                                                                                                                // 1788
 * For the license see COPYING.                                                                                   // 1789
 * ***** END LICENSE BLOCK *****                                                                                  // 1790
 */                                                                                                               // 1791
                                                                                                                  // 1792
// Few cool transports do work only for same-origin. In order to make                                             // 1793
// them working cross-domain we shall use iframe, served form the                                                 // 1794
// remote domain. New browsers, have capabilities to communicate with                                             // 1795
// cross domain iframe, using postMessage(). In IE it was implemented                                             // 1796
// from IE 8+, but of course, IE got some details wrong:                                                          // 1797
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                              // 1798
//    http://stevesouders.com/misc/test-postmessage.php                                                           // 1799
                                                                                                                  // 1800
var IframeTransport = function() {};                                                                              // 1801
                                                                                                                  // 1802
IframeTransport.prototype.i_constructor = function(ri, trans_url, base_url) {                                     // 1803
    var that = this;                                                                                              // 1804
    that.ri = ri;                                                                                                 // 1805
    that.origin = utils.getOrigin(base_url);                                                                      // 1806
    that.base_url = base_url;                                                                                     // 1807
    that.trans_url = trans_url;                                                                                   // 1808
                                                                                                                  // 1809
    var iframe_url = base_url + '/iframe.html';                                                                   // 1810
    if (that.ri._options.devel) {                                                                                 // 1811
        iframe_url += '?t=' + (+new Date);                                                                        // 1812
    }                                                                                                             // 1813
    that.window_id = utils.random_string(8);                                                                      // 1814
    iframe_url += '#' + that.window_id;                                                                           // 1815
                                                                                                                  // 1816
    that.iframeObj = utils.createIframe(iframe_url, function(r) {                                                 // 1817
                                            that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");      // 1818
                                        });                                                                       // 1819
                                                                                                                  // 1820
    that.onmessage_cb = utils.bind(that.onmessage, that);                                                         // 1821
    utils.attachMessage(that.onmessage_cb);                                                                       // 1822
};                                                                                                                // 1823
                                                                                                                  // 1824
IframeTransport.prototype.doCleanup = function() {                                                                // 1825
    var that = this;                                                                                              // 1826
    if (that.iframeObj) {                                                                                         // 1827
        utils.detachMessage(that.onmessage_cb);                                                                   // 1828
        try {                                                                                                     // 1829
            // When the iframe is not loaded, IE raises an exception                                              // 1830
            // on 'contentWindow'.                                                                                // 1831
            if (that.iframeObj.iframe.contentWindow) {                                                            // 1832
                that.postMessage('c');                                                                            // 1833
            }                                                                                                     // 1834
        } catch (x) {}                                                                                            // 1835
        that.iframeObj.cleanup();                                                                                 // 1836
        that.iframeObj = null;                                                                                    // 1837
        that.onmessage_cb = that.iframeObj = null;                                                                // 1838
    }                                                                                                             // 1839
};                                                                                                                // 1840
                                                                                                                  // 1841
IframeTransport.prototype.onmessage = function(e) {                                                               // 1842
    var that = this;                                                                                              // 1843
    if (e.origin !== that.origin) return;                                                                         // 1844
    var window_id = e.data.slice(0, 8);                                                                           // 1845
    var type = e.data.slice(8, 9);                                                                                // 1846
    var data = e.data.slice(9);                                                                                   // 1847
                                                                                                                  // 1848
    if (window_id !== that.window_id) return;                                                                     // 1849
                                                                                                                  // 1850
    switch(type) {                                                                                                // 1851
    case 's':                                                                                                     // 1852
        that.iframeObj.loaded();                                                                                  // 1853
        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));    // 1854
        break;                                                                                                    // 1855
    case 't':                                                                                                     // 1856
        that.ri._didMessage(data);                                                                                // 1857
        break;                                                                                                    // 1858
    }                                                                                                             // 1859
};                                                                                                                // 1860
                                                                                                                  // 1861
IframeTransport.prototype.postMessage = function(type, data) {                                                    // 1862
    var that = this;                                                                                              // 1863
    that.iframeObj.post(that.window_id + type + (data || ''), that.origin);                                       // 1864
};                                                                                                                // 1865
                                                                                                                  // 1866
IframeTransport.prototype.doSend = function (message) {                                                           // 1867
    this.postMessage('m', message);                                                                               // 1868
};                                                                                                                // 1869
                                                                                                                  // 1870
IframeTransport.enabled = function() {                                                                            // 1871
    // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                // 1872
    // huge delay, or not at all.                                                                                 // 1873
    var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;          // 1874
    return ((typeof _window.postMessage === 'function' ||                                                         // 1875
            typeof _window.postMessage === 'object') && (!konqueror));                                            // 1876
};                                                                                                                // 1877
//         [*] End of lib/trans-iframe.js                                                                         // 1878
                                                                                                                  // 1879
                                                                                                                  // 1880
//         [*] Including lib/trans-iframe-within.js                                                               // 1881
/*                                                                                                                // 1882
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1883
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1884
 *                                                                                                                // 1885
 * For the license see COPYING.                                                                                   // 1886
 * ***** END LICENSE BLOCK *****                                                                                  // 1887
 */                                                                                                               // 1888
                                                                                                                  // 1889
var curr_window_id;                                                                                               // 1890
                                                                                                                  // 1891
var postMessage = function (type, data) {                                                                         // 1892
    if(parent !== _window) {                                                                                      // 1893
        parent.postMessage(curr_window_id + type + (data || ''), '*');                                            // 1894
    } else {                                                                                                      // 1895
        utils.log("Can't postMessage, no parent window.", type, data);                                            // 1896
    }                                                                                                             // 1897
};                                                                                                                // 1898
                                                                                                                  // 1899
var FacadeJS = function() {};                                                                                     // 1900
FacadeJS.prototype._didClose = function (code, reason) {                                                          // 1901
    postMessage('t', utils.closeFrame(code, reason));                                                             // 1902
};                                                                                                                // 1903
FacadeJS.prototype._didMessage = function (frame) {                                                               // 1904
    postMessage('t', frame);                                                                                      // 1905
};                                                                                                                // 1906
FacadeJS.prototype._doSend = function (data) {                                                                    // 1907
    this._transport.doSend(data);                                                                                 // 1908
};                                                                                                                // 1909
FacadeJS.prototype._doCleanup = function () {                                                                     // 1910
    this._transport.doCleanup();                                                                                  // 1911
};                                                                                                                // 1912
                                                                                                                  // 1913
utils.parent_origin = undefined;                                                                                  // 1914
                                                                                                                  // 1915
SockJS.bootstrap_iframe = function() {                                                                            // 1916
    var facade;                                                                                                   // 1917
    curr_window_id = _document.location.hash.slice(1);                                                            // 1918
    var onMessage = function(e) {                                                                                 // 1919
        if(e.source !== parent) return;                                                                           // 1920
        if(typeof utils.parent_origin === 'undefined')                                                            // 1921
            utils.parent_origin = e.origin;                                                                       // 1922
        if (e.origin !== utils.parent_origin) return;                                                             // 1923
                                                                                                                  // 1924
        var window_id = e.data.slice(0, 8);                                                                       // 1925
        var type = e.data.slice(8, 9);                                                                            // 1926
        var data = e.data.slice(9);                                                                               // 1927
        if (window_id !== curr_window_id) return;                                                                 // 1928
        switch(type) {                                                                                            // 1929
        case 's':                                                                                                 // 1930
            var p = JSON.parse(data);                                                                             // 1931
            var version = p[0];                                                                                   // 1932
            var protocol = p[1];                                                                                  // 1933
            var trans_url = p[2];                                                                                 // 1934
            var base_url = p[3];                                                                                  // 1935
            if (version !== SockJS.version) {                                                                     // 1936
                utils.log("Incompatibile SockJS! Main site uses:" +                                               // 1937
                          " \"" + version + "\", the iframe:" +                                                   // 1938
                          " \"" + SockJS.version + "\".");                                                        // 1939
            }                                                                                                     // 1940
            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {                                          // 1941
                utils.log("Only basic urls are supported in SockJS");                                             // 1942
                return;                                                                                           // 1943
            }                                                                                                     // 1944
                                                                                                                  // 1945
            if (!utils.isSameOriginUrl(trans_url) ||                                                              // 1946
                !utils.isSameOriginUrl(base_url)) {                                                               // 1947
                utils.log("Can't connect to different domain from within an " +                                   // 1948
                          "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) +            // 1949
                          ")");                                                                                   // 1950
                return;                                                                                           // 1951
            }                                                                                                     // 1952
            facade = new FacadeJS();                                                                              // 1953
            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);                              // 1954
            break;                                                                                                // 1955
        case 'm':                                                                                                 // 1956
            facade._doSend(data);                                                                                 // 1957
            break;                                                                                                // 1958
        case 'c':                                                                                                 // 1959
            if (facade)                                                                                           // 1960
                facade._doCleanup();                                                                              // 1961
            facade = null;                                                                                        // 1962
            break;                                                                                                // 1963
        }                                                                                                         // 1964
    };                                                                                                            // 1965
                                                                                                                  // 1966
    // alert('test ticker');                                                                                      // 1967
    // facade = new FacadeJS();                                                                                   // 1968
    // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');   // 1969
                                                                                                                  // 1970
    utils.attachMessage(onMessage);                                                                               // 1971
                                                                                                                  // 1972
    // Start                                                                                                      // 1973
    postMessage('s');                                                                                             // 1974
};                                                                                                                // 1975
//         [*] End of lib/trans-iframe-within.js                                                                  // 1976
                                                                                                                  // 1977
                                                                                                                  // 1978
//         [*] Including lib/info.js                                                                              // 1979
/*                                                                                                                // 1980
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 1981
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 1982
 *                                                                                                                // 1983
 * For the license see COPYING.                                                                                   // 1984
 * ***** END LICENSE BLOCK *****                                                                                  // 1985
 */                                                                                                               // 1986
                                                                                                                  // 1987
var InfoReceiver = function(base_url, AjaxObject) {                                                               // 1988
    var that = this;                                                                                              // 1989
    utils.delay(function(){that.doXhr(base_url, AjaxObject);});                                                   // 1990
};                                                                                                                // 1991
                                                                                                                  // 1992
InfoReceiver.prototype = new EventEmitter(['finish']);                                                            // 1993
                                                                                                                  // 1994
InfoReceiver.prototype.doXhr = function(base_url, AjaxObject) {                                                   // 1995
    var that = this;                                                                                              // 1996
    var t0 = (new Date()).getTime();                                                                              // 1997
                                                                                                                  // 1998
// <METEOR>                                                                                                       // 1999
  // https://github.com/sockjs/sockjs-client/pull/129                                                             // 2000
  // var xo = new AjaxObject('GET', base_url + '/info');                                                          // 2001
                                                                                                                  // 2002
    var xo = new AjaxObject(                                                                                      // 2003
      // add cachebusting parameter to url to work around a chrome bug:                                           // 2004
      // https://code.google.com/p/chromium/issues/detail?id=263981                                               // 2005
      // or misbehaving proxies.                                                                                  // 2006
      'GET', base_url + '/info?cb=' + utils.random_string(10))                                                    // 2007
// </METEOR>                                                                                                      // 2008
                                                                                                                  // 2009
    var tref = utils.delay(8000,                                                                                  // 2010
                           function(){xo.ontimeout();});                                                          // 2011
                                                                                                                  // 2012
    xo.onfinish = function(status, text) {                                                                        // 2013
        clearTimeout(tref);                                                                                       // 2014
        tref = null;                                                                                              // 2015
        if (status === 200) {                                                                                     // 2016
            var rtt = (new Date()).getTime() - t0;                                                                // 2017
            var info = JSON.parse(text);                                                                          // 2018
            if (typeof info !== 'object') info = {};                                                              // 2019
            that.emit('finish', info, rtt);                                                                       // 2020
        } else {                                                                                                  // 2021
            that.emit('finish');                                                                                  // 2022
        }                                                                                                         // 2023
    };                                                                                                            // 2024
    xo.ontimeout = function() {                                                                                   // 2025
        xo.close();                                                                                               // 2026
        that.emit('finish');                                                                                      // 2027
    };                                                                                                            // 2028
};                                                                                                                // 2029
                                                                                                                  // 2030
var InfoReceiverIframe = function(base_url) {                                                                     // 2031
    var that = this;                                                                                              // 2032
    var go = function() {                                                                                         // 2033
        var ifr = new IframeTransport();                                                                          // 2034
        ifr.protocol = 'w-iframe-info-receiver';                                                                  // 2035
        var fun = function(r) {                                                                                   // 2036
            if (typeof r === 'string' && r.substr(0,1) === 'm') {                                                 // 2037
                var d = JSON.parse(r.substr(1));                                                                  // 2038
                var info = d[0], rtt = d[1];                                                                      // 2039
                that.emit('finish', info, rtt);                                                                   // 2040
            } else {                                                                                              // 2041
                that.emit('finish');                                                                              // 2042
            }                                                                                                     // 2043
            ifr.doCleanup();                                                                                      // 2044
            ifr = null;                                                                                           // 2045
        };                                                                                                        // 2046
        var mock_ri = {                                                                                           // 2047
            _options: {},                                                                                         // 2048
            _didClose: fun,                                                                                       // 2049
            _didMessage: fun                                                                                      // 2050
        };                                                                                                        // 2051
        ifr.i_constructor(mock_ri, base_url, base_url);                                                           // 2052
    }                                                                                                             // 2053
    if(!_document.body) {                                                                                         // 2054
        utils.attachEvent('load', go);                                                                            // 2055
    } else {                                                                                                      // 2056
        go();                                                                                                     // 2057
    }                                                                                                             // 2058
};                                                                                                                // 2059
InfoReceiverIframe.prototype = new EventEmitter(['finish']);                                                      // 2060
                                                                                                                  // 2061
                                                                                                                  // 2062
var InfoReceiverFake = function() {                                                                               // 2063
    // It may not be possible to do cross domain AJAX to get the info                                             // 2064
    // data, for example for IE7. But we want to run JSONP, so let's                                              // 2065
    // fake the response, with rtt=2s (rto=6s).                                                                   // 2066
    var that = this;                                                                                              // 2067
    utils.delay(function() {                                                                                      // 2068
        that.emit('finish', {}, 2000);                                                                            // 2069
    });                                                                                                           // 2070
};                                                                                                                // 2071
InfoReceiverFake.prototype = new EventEmitter(['finish']);                                                        // 2072
                                                                                                                  // 2073
var createInfoReceiver = function(base_url) {                                                                     // 2074
    if (utils.isSameOriginUrl(base_url)) {                                                                        // 2075
        // If, for some reason, we have SockJS locally - there's no                                               // 2076
        // need to start up the complex machinery. Just use ajax.                                                 // 2077
        return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2078
    }                                                                                                             // 2079
    switch (utils.isXHRCorsCapable()) {                                                                           // 2080
    case 1:                                                                                                       // 2081
        // XHRLocalObject -> no_credentials=true                                                                  // 2082
        return new InfoReceiver(base_url, utils.XHRLocalObject);                                                  // 2083
    case 2:                                                                                                       // 2084
// <METEOR>                                                                                                       // 2085
// https://github.com/sockjs/sockjs-client/issues/79                                                              // 2086
        // XDR doesn't work across different schemes                                                              // 2087
        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
        if (utils.isSameOriginScheme(base_url))                                                                   // 2089
            return new InfoReceiver(base_url, utils.XDRObject);                                                   // 2090
        else                                                                                                      // 2091
            return new InfoReceiverFake();                                                                        // 2092
// </METEOR>                                                                                                      // 2093
    case 3:                                                                                                       // 2094
        // Opera                                                                                                  // 2095
        return new InfoReceiverIframe(base_url);                                                                  // 2096
    default:                                                                                                      // 2097
        // IE 7                                                                                                   // 2098
        return new InfoReceiverFake();                                                                            // 2099
    };                                                                                                            // 2100
};                                                                                                                // 2101
                                                                                                                  // 2102
                                                                                                                  // 2103
var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function(ri, _trans_url, base_url) {               // 2104
    var ir = new InfoReceiver(base_url, utils.XHRLocalObject);                                                    // 2105
    ir.onfinish = function(info, rtt) {                                                                           // 2106
        ri._didMessage('m'+JSON.stringify([info, rtt]));                                                          // 2107
        ri._didClose();                                                                                           // 2108
    }                                                                                                             // 2109
};                                                                                                                // 2110
WInfoReceiverIframe.prototype.doCleanup = function() {};                                                          // 2111
//         [*] End of lib/info.js                                                                                 // 2112
                                                                                                                  // 2113
                                                                                                                  // 2114
//         [*] Including lib/trans-iframe-eventsource.js                                                          // 2115
/*                                                                                                                // 2116
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2117
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2118
 *                                                                                                                // 2119
 * For the license see COPYING.                                                                                   // 2120
 * ***** END LICENSE BLOCK *****                                                                                  // 2121
 */                                                                                                               // 2122
                                                                                                                  // 2123
var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {                                     // 2124
    var that = this;                                                                                              // 2125
    that.protocol = 'w-iframe-eventsource';                                                                       // 2126
    that.i_constructor.apply(that, arguments);                                                                    // 2127
};                                                                                                                // 2128
                                                                                                                  // 2129
EventSourceIframeTransport.prototype = new IframeTransport();                                                     // 2130
                                                                                                                  // 2131
EventSourceIframeTransport.enabled = function () {                                                                // 2132
    return ('EventSource' in _window) && IframeTransport.enabled();                                               // 2133
};                                                                                                                // 2134
                                                                                                                  // 2135
EventSourceIframeTransport.need_body = true;                                                                      // 2136
EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                       // 2137
                                                                                                                  // 2138
                                                                                                                  // 2139
// w-iframe-eventsource                                                                                           // 2140
var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function(ri, trans_url) {                           // 2141
    this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);                           // 2142
}                                                                                                                 // 2143
EventSourceTransport.prototype = new AjaxBasedTransport();                                                        // 2144
//         [*] End of lib/trans-iframe-eventsource.js                                                             // 2145
                                                                                                                  // 2146
                                                                                                                  // 2147
//         [*] Including lib/trans-iframe-xhr-polling.js                                                          // 2148
/*                                                                                                                // 2149
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2150
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2151
 *                                                                                                                // 2152
 * For the license see COPYING.                                                                                   // 2153
 * ***** END LICENSE BLOCK *****                                                                                  // 2154
 */                                                                                                               // 2155
                                                                                                                  // 2156
var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {                                      // 2157
    var that = this;                                                                                              // 2158
    that.protocol = 'w-iframe-xhr-polling';                                                                       // 2159
    that.i_constructor.apply(that, arguments);                                                                    // 2160
};                                                                                                                // 2161
                                                                                                                  // 2162
XhrPollingIframeTransport.prototype = new IframeTransport();                                                      // 2163
                                                                                                                  // 2164
XhrPollingIframeTransport.enabled = function () {                                                                 // 2165
    return _window.XMLHttpRequest && IframeTransport.enabled();                                                   // 2166
};                                                                                                                // 2167
                                                                                                                  // 2168
XhrPollingIframeTransport.need_body = true;                                                                       // 2169
XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                // 2170
                                                                                                                  // 2171
                                                                                                                  // 2172
// w-iframe-xhr-polling                                                                                           // 2173
var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function(ri, trans_url) {                           // 2174
    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);                                           // 2175
};                                                                                                                // 2176
                                                                                                                  // 2177
XhrPollingITransport.prototype = new AjaxBasedTransport();                                                        // 2178
//         [*] End of lib/trans-iframe-xhr-polling.js                                                             // 2179
                                                                                                                  // 2180
                                                                                                                  // 2181
//         [*] Including lib/trans-iframe-htmlfile.js                                                             // 2182
/*                                                                                                                // 2183
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2184
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2185
 *                                                                                                                // 2186
 * For the license see COPYING.                                                                                   // 2187
 * ***** END LICENSE BLOCK *****                                                                                  // 2188
 */                                                                                                               // 2189
                                                                                                                  // 2190
// This transport generally works in any browser, but will cause a                                                // 2191
// spinning cursor to appear in any browser other than IE.                                                        // 2192
// We may test this transport in all browsers - why not, but in                                                   // 2193
// production it should be only run in IE.                                                                        // 2194
                                                                                                                  // 2195
var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {                                           // 2196
    var that = this;                                                                                              // 2197
    that.protocol = 'w-iframe-htmlfile';                                                                          // 2198
    that.i_constructor.apply(that, arguments);                                                                    // 2199
};                                                                                                                // 2200
                                                                                                                  // 2201
// Inheritance.                                                                                                   // 2202
HtmlFileIframeTransport.prototype = new IframeTransport();                                                        // 2203
                                                                                                                  // 2204
HtmlFileIframeTransport.enabled = function() {                                                                    // 2205
    return IframeTransport.enabled();                                                                             // 2206
};                                                                                                                // 2207
                                                                                                                  // 2208
HtmlFileIframeTransport.need_body = true;                                                                         // 2209
HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                             // 2210
                                                                                                                  // 2211
                                                                                                                  // 2212
// w-iframe-htmlfile                                                                                              // 2213
var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function(ri, trans_url) {                                 // 2214
    this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);                                 // 2215
};                                                                                                                // 2216
HtmlFileTransport.prototype = new AjaxBasedTransport();                                                           // 2217
//         [*] End of lib/trans-iframe-htmlfile.js                                                                // 2218
                                                                                                                  // 2219
                                                                                                                  // 2220
//         [*] Including lib/trans-polling.js                                                                     // 2221
/*                                                                                                                // 2222
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2223
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2224
 *                                                                                                                // 2225
 * For the license see COPYING.                                                                                   // 2226
 * ***** END LICENSE BLOCK *****                                                                                  // 2227
 */                                                                                                               // 2228
                                                                                                                  // 2229
var Polling = function(ri, Receiver, recv_url, AjaxObject) {                                                      // 2230
    var that = this;                                                                                              // 2231
    that.ri = ri;                                                                                                 // 2232
    that.Receiver = Receiver;                                                                                     // 2233
    that.recv_url = recv_url;                                                                                     // 2234
    that.AjaxObject = AjaxObject;                                                                                 // 2235
    that._scheduleRecv();                                                                                         // 2236
};                                                                                                                // 2237
                                                                                                                  // 2238
Polling.prototype._scheduleRecv = function() {                                                                    // 2239
    var that = this;                                                                                              // 2240
    var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);                                     // 2241
    var msg_counter = 0;                                                                                          // 2242
    poll.onmessage = function(e) {                                                                                // 2243
        msg_counter += 1;                                                                                         // 2244
        that.ri._didMessage(e.data);                                                                              // 2245
    };                                                                                                            // 2246
    poll.onclose = function(e) {                                                                                  // 2247
        that.poll = poll = poll.onmessage = poll.onclose = null;                                                  // 2248
        if (!that.poll_is_closing) {                                                                              // 2249
            if (e.reason === 'permanent') {                                                                       // 2250
                that.ri._didClose(1006, 'Polling error (' + e.reason + ')');                                      // 2251
            } else {                                                                                              // 2252
                that._scheduleRecv();                                                                             // 2253
            }                                                                                                     // 2254
        }                                                                                                         // 2255
    };                                                                                                            // 2256
};                                                                                                                // 2257
                                                                                                                  // 2258
Polling.prototype.abort = function() {                                                                            // 2259
    var that = this;                                                                                              // 2260
    that.poll_is_closing = true;                                                                                  // 2261
    if (that.poll) {                                                                                              // 2262
        that.poll.abort();                                                                                        // 2263
    }                                                                                                             // 2264
};                                                                                                                // 2265
//         [*] End of lib/trans-polling.js                                                                        // 2266
                                                                                                                  // 2267
                                                                                                                  // 2268
//         [*] Including lib/trans-receiver-eventsource.js                                                        // 2269
/*                                                                                                                // 2270
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2271
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2272
 *                                                                                                                // 2273
 * For the license see COPYING.                                                                                   // 2274
 * ***** END LICENSE BLOCK *****                                                                                  // 2275
 */                                                                                                               // 2276
                                                                                                                  // 2277
var EventSourceReceiver = function(url) {                                                                         // 2278
    var that = this;                                                                                              // 2279
    var es = new EventSource(url);                                                                                // 2280
    es.onmessage = function(e) {                                                                                  // 2281
        that.dispatchEvent(new SimpleEvent('message',                                                             // 2282
                                           {'data': unescape(e.data)}));                                          // 2283
    };                                                                                                            // 2284
    that.es_close = es.onerror = function(e, abort_reason) {                                                      // 2285
        // ES on reconnection has readyState = 0 or 1.                                                            // 2286
        // on network error it's CLOSED = 2                                                                       // 2287
        var reason = abort_reason ? 'user' :                                                                      // 2288
            (es.readyState !== 2 ? 'network' : 'permanent');                                                      // 2289
        that.es_close = es.onmessage = es.onerror = null;                                                         // 2290
        // EventSource reconnects automatically.                                                                  // 2291
        es.close();                                                                                               // 2292
        es = null;                                                                                                // 2293
        // Safari and chrome < 15 crash if we close window before                                                 // 2294
        // waiting for ES cleanup. See:                                                                           // 2295
        //   https://code.google.com/p/chromium/issues/detail?id=89155                                            // 2296
        utils.delay(200, function() {                                                                             // 2297
                        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));                           // 2298
                    });                                                                                           // 2299
    };                                                                                                            // 2300
};                                                                                                                // 2301
                                                                                                                  // 2302
EventSourceReceiver.prototype = new REventTarget();                                                               // 2303
                                                                                                                  // 2304
EventSourceReceiver.prototype.abort = function() {                                                                // 2305
    var that = this;                                                                                              // 2306
    if (that.es_close) {                                                                                          // 2307
        that.es_close({}, true);                                                                                  // 2308
    }                                                                                                             // 2309
};                                                                                                                // 2310
//         [*] End of lib/trans-receiver-eventsource.js                                                           // 2311
                                                                                                                  // 2312
                                                                                                                  // 2313
//         [*] Including lib/trans-receiver-htmlfile.js                                                           // 2314
/*                                                                                                                // 2315
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2316
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2317
 *                                                                                                                // 2318
 * For the license see COPYING.                                                                                   // 2319
 * ***** END LICENSE BLOCK *****                                                                                  // 2320
 */                                                                                                               // 2321
                                                                                                                  // 2322
var _is_ie_htmlfile_capable;                                                                                      // 2323
var isIeHtmlfileCapable = function() {                                                                            // 2324
    if (_is_ie_htmlfile_capable === undefined) {                                                                  // 2325
        if ('ActiveXObject' in _window) {                                                                         // 2326
            try {                                                                                                 // 2327
                _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');                                        // 2328
            } catch (x) {}                                                                                        // 2329
        } else {                                                                                                  // 2330
            _is_ie_htmlfile_capable = false;                                                                      // 2331
        }                                                                                                         // 2332
    }                                                                                                             // 2333
    return _is_ie_htmlfile_capable;                                                                               // 2334
};                                                                                                                // 2335
                                                                                                                  // 2336
                                                                                                                  // 2337
var HtmlfileReceiver = function(url) {                                                                            // 2338
    var that = this;                                                                                              // 2339
    utils.polluteGlobalNamespace();                                                                               // 2340
                                                                                                                  // 2341
    that.id = 'a' + utils.random_string(6, 26);                                                                   // 2342
    url += ((url.indexOf('?') === -1) ? '?' : '&') +                                                              // 2343
        'c=' + escape(WPrefix + '.' + that.id);                                                                   // 2344
                                                                                                                  // 2345
    var constructor = isIeHtmlfileCapable() ?                                                                     // 2346
        utils.createHtmlfile : utils.createIframe;                                                                // 2347
                                                                                                                  // 2348
    var iframeObj;                                                                                                // 2349
    _window[WPrefix][that.id] = {                                                                                 // 2350
        start: function () {                                                                                      // 2351
            iframeObj.loaded();                                                                                   // 2352
        },                                                                                                        // 2353
        message: function (data) {                                                                                // 2354
            that.dispatchEvent(new SimpleEvent('message', {'data': data}));                                       // 2355
        },                                                                                                        // 2356
        stop: function () {                                                                                       // 2357
            that.iframe_close({}, 'network');                                                                     // 2358
        }                                                                                                         // 2359
    };                                                                                                            // 2360
    that.iframe_close = function(e, abort_reason) {                                                               // 2361
        iframeObj.cleanup();                                                                                      // 2362
        that.iframe_close = iframeObj = null;                                                                     // 2363
        delete _window[WPrefix][that.id];                                                                         // 2364
        that.dispatchEvent(new SimpleEvent('close', {reason: abort_reason}));                                     // 2365
    };                                                                                                            // 2366
    iframeObj = constructor(url, function(e) {                                                                    // 2367
                                that.iframe_close({}, 'permanent');                                               // 2368
                            });                                                                                   // 2369
};                                                                                                                // 2370
                                                                                                                  // 2371
HtmlfileReceiver.prototype = new REventTarget();                                                                  // 2372
                                                                                                                  // 2373
HtmlfileReceiver.prototype.abort = function() {                                                                   // 2374
    var that = this;                                                                                              // 2375
    if (that.iframe_close) {                                                                                      // 2376
        that.iframe_close({}, 'user');                                                                            // 2377
    }                                                                                                             // 2378
};                                                                                                                // 2379
//         [*] End of lib/trans-receiver-htmlfile.js                                                              // 2380
                                                                                                                  // 2381
                                                                                                                  // 2382
//         [*] Including lib/trans-receiver-xhr.js                                                                // 2383
/*                                                                                                                // 2384
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2385
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2386
 *                                                                                                                // 2387
 * For the license see COPYING.                                                                                   // 2388
 * ***** END LICENSE BLOCK *****                                                                                  // 2389
 */                                                                                                               // 2390
                                                                                                                  // 2391
var XhrReceiver = function(url, AjaxObject) {                                                                     // 2392
    var that = this;                                                                                              // 2393
    var buf_pos = 0;                                                                                              // 2394
                                                                                                                  // 2395
    that.xo = new AjaxObject('POST', url, null);                                                                  // 2396
    that.xo.onchunk = function(status, text) {                                                                    // 2397
        if (status !== 200) return;                                                                               // 2398
        while (1) {                                                                                               // 2399
            var buf = text.slice(buf_pos);                                                                        // 2400
            var p = buf.indexOf('\n');                                                                            // 2401
            if (p === -1) break;                                                                                  // 2402
            buf_pos += p+1;                                                                                       // 2403
            var msg = buf.slice(0, p);                                                                            // 2404
            that.dispatchEvent(new SimpleEvent('message', {data: msg}));                                          // 2405
        }                                                                                                         // 2406
    };                                                                                                            // 2407
    that.xo.onfinish = function(status, text) {                                                                   // 2408
        that.xo.onchunk(status, text);                                                                            // 2409
        that.xo = null;                                                                                           // 2410
        var reason = status === 200 ? 'network' : 'permanent';                                                    // 2411
        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));                                           // 2412
    }                                                                                                             // 2413
};                                                                                                                // 2414
                                                                                                                  // 2415
XhrReceiver.prototype = new REventTarget();                                                                       // 2416
                                                                                                                  // 2417
XhrReceiver.prototype.abort = function() {                                                                        // 2418
    var that = this;                                                                                              // 2419
    if (that.xo) {                                                                                                // 2420
        that.xo.close();                                                                                          // 2421
        that.dispatchEvent(new SimpleEvent('close', {reason: 'user'}));                                           // 2422
        that.xo = null;                                                                                           // 2423
    }                                                                                                             // 2424
};                                                                                                                // 2425
//         [*] End of lib/trans-receiver-xhr.js                                                                   // 2426
                                                                                                                  // 2427
                                                                                                                  // 2428
//         [*] Including lib/test-hooks.js                                                                        // 2429
/*                                                                                                                // 2430
 * ***** BEGIN LICENSE BLOCK *****                                                                                // 2431
 * Copyright (c) 2011-2012 VMware, Inc.                                                                           // 2432
 *                                                                                                                // 2433
 * For the license see COPYING.                                                                                   // 2434
 * ***** END LICENSE BLOCK *****                                                                                  // 2435
 */                                                                                                               // 2436
                                                                                                                  // 2437
// For testing                                                                                                    // 2438
SockJS.getUtils = function(){                                                                                     // 2439
    return utils;                                                                                                 // 2440
};                                                                                                                // 2441
                                                                                                                  // 2442
SockJS.getIframeTransport = function(){                                                                           // 2443
    return IframeTransport;                                                                                       // 2444
};                                                                                                                // 2445
//         [*] End of lib/test-hooks.js                                                                           // 2446
                                                                                                                  // 2447
                  return SockJS;                                                                                  // 2448
          })();                                                                                                   // 2449
if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1);                                                    // 2450
                                                                                                                  // 2451
// AMD compliance                                                                                                 // 2452
if (typeof define === 'function' && define.amd) {                                                                 // 2453
    define('sockjs', [], function(){return SockJS;});                                                             // 2454
}                                                                                                                 // 2455
//     [*] End of lib/index.js                                                                                    // 2456
                                                                                                                  // 2457
// [*] End of lib/all.js                                                                                          // 2458
                                                                                                                  // 2459
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/stream_client_sockjs.js                                                                    //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// @param url {String} URL to Meteor app                                                                          // 1
//   "http://subdomain.meteor.com/" or "/" or                                                                     // 2
//   "ddp+sockjs://foo-**.meteor.com/sockjs"                                                                      // 3
LivedataTest.ClientStream = function (url, options) {                                                             // 4
  var self = this;                                                                                                // 5
  self.options = _.extend({                                                                                       // 6
    retry: true                                                                                                   // 7
  }, options);                                                                                                    // 8
  self._initCommon(self.options);                                                                                 // 9
                                                                                                                  // 10
  //// Constants                                                                                                  // 11
                                                                                                                  // 12
                                                                                                                  // 13
  // how long between hearing heartbeat from the server until we declare                                          // 14
  // the connection dead. heartbeats come every 45s (stream_server.js)                                            // 15
  //                                                                                                              // 16
  // NOTE: this is a older timeout mechanism. We now send heartbeats at                                           // 17
  // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                              // 18
  // expect those timeouts to kill a non-responsive connection before                                             // 19
  // this timeout fires. This is kept around for compatibility (when                                              // 20
  // talking to a server that doesn't support DDP heartbeats) and can be                                          // 21
  // removed later.                                                                                               // 22
  self.HEARTBEAT_TIMEOUT = 100*1000;                                                                              // 23
                                                                                                                  // 24
  self.rawUrl = url;                                                                                              // 25
  self.socket = null;                                                                                             // 26
                                                                                                                  // 27
  self.heartbeatTimer = null;                                                                                     // 28
                                                                                                                  // 29
  // Listen to global 'online' event if we are running in a browser.                                              // 30
  // (IE8 does not support addEventListener)                                                                      // 31
  if (typeof window !== 'undefined' && window.addEventListener)                                                   // 32
    window.addEventListener("online", _.bind(self._online, self),                                                 // 33
                            false /* useCapture. make FF3.6 happy. */);                                           // 34
                                                                                                                  // 35
  //// Kickoff!                                                                                                   // 36
  self._launchConnection();                                                                                       // 37
};                                                                                                                // 38
                                                                                                                  // 39
_.extend(LivedataTest.ClientStream.prototype, {                                                                   // 40
                                                                                                                  // 41
  // data is a utf8 string. Data sent while not connected is dropped on                                           // 42
  // the floor, and it is up the user of this API to retransmit lost                                              // 43
  // messages on 'reset'                                                                                          // 44
  send: function (data) {                                                                                         // 45
    var self = this;                                                                                              // 46
    if (self.currentStatus.connected) {                                                                           // 47
      self.socket.send(data);                                                                                     // 48
    }                                                                                                             // 49
  },                                                                                                              // 50
                                                                                                                  // 51
  // Changes where this connection points                                                                         // 52
  _changeUrl: function (url) {                                                                                    // 53
    var self = this;                                                                                              // 54
    self.rawUrl = url;                                                                                            // 55
  },                                                                                                              // 56
                                                                                                                  // 57
  _connected: function () {                                                                                       // 58
    var self = this;                                                                                              // 59
                                                                                                                  // 60
    if (self.connectionTimer) {                                                                                   // 61
      clearTimeout(self.connectionTimer);                                                                         // 62
      self.connectionTimer = null;                                                                                // 63
    }                                                                                                             // 64
                                                                                                                  // 65
    if (self.currentStatus.connected) {                                                                           // 66
      // already connected. do nothing. this probably shouldn't happen.                                           // 67
      return;                                                                                                     // 68
    }                                                                                                             // 69
                                                                                                                  // 70
    // update status                                                                                              // 71
    self.currentStatus.status = "connected";                                                                      // 72
    self.currentStatus.connected = true;                                                                          // 73
    self.currentStatus.retryCount = 0;                                                                            // 74
    self.statusChanged();                                                                                         // 75
                                                                                                                  // 76
    // fire resets. This must come after status change so that clients                                            // 77
    // can call send from within a reset callback.                                                                // 78
    _.each(self.eventCallbacks.reset, function (callback) { callback(); });                                       // 79
                                                                                                                  // 80
  },                                                                                                              // 81
                                                                                                                  // 82
  _cleanup: function (maybeError) {                                                                               // 83
    var self = this;                                                                                              // 84
                                                                                                                  // 85
    self._clearConnectionAndHeartbeatTimers();                                                                    // 86
    if (self.socket) {                                                                                            // 87
      self.socket.onmessage = self.socket.onclose                                                                 // 88
        = self.socket.onerror = self.socket.onheartbeat = function () {};                                         // 89
      self.socket.close();                                                                                        // 90
      self.socket = null;                                                                                         // 91
    }                                                                                                             // 92
                                                                                                                  // 93
    _.each(self.eventCallbacks.disconnect, function (callback) {                                                  // 94
      callback(maybeError);                                                                                       // 95
    });                                                                                                           // 96
  },                                                                                                              // 97
                                                                                                                  // 98
  _clearConnectionAndHeartbeatTimers: function () {                                                               // 99
    var self = this;                                                                                              // 100
    if (self.connectionTimer) {                                                                                   // 101
      clearTimeout(self.connectionTimer);                                                                         // 102
      self.connectionTimer = null;                                                                                // 103
    }                                                                                                             // 104
    if (self.heartbeatTimer) {                                                                                    // 105
      clearTimeout(self.heartbeatTimer);                                                                          // 106
      self.heartbeatTimer = null;                                                                                 // 107
    }                                                                                                             // 108
  },                                                                                                              // 109
                                                                                                                  // 110
  _heartbeat_timeout: function () {                                                                               // 111
    var self = this;                                                                                              // 112
    Meteor._debug("Connection timeout. No sockjs heartbeat received.");                                           // 113
    self._lostConnection(new DDP.ConnectionError("Heartbeat timed out"));                                         // 114
  },                                                                                                              // 115
                                                                                                                  // 116
  _heartbeat_received: function () {                                                                              // 117
    var self = this;                                                                                              // 118
    // If we've already permanently shut down this stream, the timeout is                                         // 119
    // already cleared, and we don't need to set it again.                                                        // 120
    if (self._forcedToDisconnect)                                                                                 // 121
      return;                                                                                                     // 122
    if (self.heartbeatTimer)                                                                                      // 123
      clearTimeout(self.heartbeatTimer);                                                                          // 124
    self.heartbeatTimer = setTimeout(                                                                             // 125
      _.bind(self._heartbeat_timeout, self),                                                                      // 126
      self.HEARTBEAT_TIMEOUT);                                                                                    // 127
  },                                                                                                              // 128
                                                                                                                  // 129
  _sockjsProtocolsWhitelist: function () {                                                                        // 130
    // only allow polling protocols. no streaming.  streaming                                                     // 131
    // makes safari spin.                                                                                         // 132
    var protocolsWhitelist = [                                                                                    // 133
      'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];                                       // 134
                                                                                                                  // 135
    // iOS 4 and 5 and below crash when using websockets over certain                                             // 136
    // proxies. this seems to be resolved with iOS 6. eg                                                          // 137
    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                   // 138
    //                                                                                                            // 139
    // iOS <4 doesn't support websockets at all so sockjs will just                                               // 140
    // immediately fall back to http                                                                              // 141
    var noWebsockets = navigator &&                                                                               // 142
          /iPhone|iPad|iPod/.test(navigator.userAgent) &&                                                         // 143
          /OS 4_|OS 5_/.test(navigator.userAgent);                                                                // 144
                                                                                                                  // 145
    if (!noWebsockets)                                                                                            // 146
      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);                                              // 147
                                                                                                                  // 148
    return protocolsWhitelist;                                                                                    // 149
  },                                                                                                              // 150
                                                                                                                  // 151
  _launchConnection: function () {                                                                                // 152
    var self = this;                                                                                              // 153
    self._cleanup(); // cleanup the old socket, if there was one.                                                 // 154
                                                                                                                  // 155
    var options = _.extend({                                                                                      // 156
      protocols_whitelist:self._sockjsProtocolsWhitelist()                                                        // 157
    }, self.options._sockjsOptions);                                                                              // 158
                                                                                                                  // 159
    // Convert raw URL to SockJS URL each time we open a connection, so that we                                   // 160
    // can connect to random hostnames and get around browser per-host                                            // 161
    // connection limits.                                                                                         // 162
    self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options);                                       // 163
    self.socket.onopen = function (data) {                                                                        // 164
      self._connected();                                                                                          // 165
    };                                                                                                            // 166
    self.socket.onmessage = function (data) {                                                                     // 167
      self._heartbeat_received();                                                                                 // 168
                                                                                                                  // 169
      if (self.currentStatus.connected)                                                                           // 170
        _.each(self.eventCallbacks.message, function (callback) {                                                 // 171
          callback(data.data);                                                                                    // 172
        });                                                                                                       // 173
    };                                                                                                            // 174
    self.socket.onclose = function () {                                                                           // 175
      self._lostConnection();                                                                                     // 176
    };                                                                                                            // 177
    self.socket.onerror = function () {                                                                           // 178
      // XXX is this ever called?                                                                                 // 179
      Meteor._debug("stream error", _.toArray(arguments), (new Date()).toDateString());                           // 180
    };                                                                                                            // 181
                                                                                                                  // 182
    self.socket.onheartbeat =  function () {                                                                      // 183
      self._heartbeat_received();                                                                                 // 184
    };                                                                                                            // 185
                                                                                                                  // 186
    if (self.connectionTimer)                                                                                     // 187
      clearTimeout(self.connectionTimer);                                                                         // 188
    self.connectionTimer = setTimeout(function () {                                                               // 189
      self._lostConnection(                                                                                       // 190
        new DDP.ConnectionError("DDP connection timed out"));                                                     // 191
    }, self.CONNECT_TIMEOUT);                                                                                     // 192
  }                                                                                                               // 193
});                                                                                                               // 194
                                                                                                                  // 195
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/stream_client_common.js                                                                    //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                        // 1
var startsWith = function(str, starts) {                                                                          // 2
  return str.length >= starts.length &&                                                                           // 3
    str.substring(0, starts.length) === starts;                                                                   // 4
};                                                                                                                // 5
var endsWith = function(str, ends) {                                                                              // 6
  return str.length >= ends.length &&                                                                             // 7
    str.substring(str.length - ends.length) === ends;                                                             // 8
};                                                                                                                // 9
                                                                                                                  // 10
// @param url {String} URL to Meteor app, eg:                                                                     // 11
//   "/" or "madewith.meteor.com" or "https://foo.meteor.com"                                                     // 12
//   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                            // 13
// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                               // 14
// for scheme "http" and subPath "sockjs"                                                                         // 15
//   "http://subdomain.meteor.com/sockjs" or "/sockjs"                                                            // 16
//   or "https://ddp--1234-foo.meteor.com/sockjs"                                                                 // 17
var translateUrl =  function(url, newSchemeBase, subPath) {                                                       // 18
  if (! newSchemeBase) {                                                                                          // 19
    newSchemeBase = "http";                                                                                       // 20
  }                                                                                                               // 21
                                                                                                                  // 22
  var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);                                                           // 23
  var httpUrlMatch = url.match(/^http(s?):\/\//);                                                                 // 24
  var newScheme;                                                                                                  // 25
  if (ddpUrlMatch) {                                                                                              // 26
    // Remove scheme and split off the host.                                                                      // 27
    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);                                                          // 28
    newScheme = ddpUrlMatch[1] === "i" ? newSchemeBase : newSchemeBase + "s";                                     // 29
    var slashPos = urlAfterDDP.indexOf('/');                                                                      // 30
    var host =                                                                                                    // 31
          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);                                        // 32
    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);                                               // 33
                                                                                                                  // 34
    // In the host (ONLY!), change '*' characters into random digits. This                                        // 35
    // allows different stream connections to connect to different hostnames                                      // 36
    // and avoid browser per-hostname connection limits.                                                          // 37
    host = host.replace(/\*/g, function () {                                                                      // 38
      return Math.floor(Random.fraction()*10);                                                                    // 39
    });                                                                                                           // 40
                                                                                                                  // 41
    return newScheme + '://' + host + rest;                                                                       // 42
  } else if (httpUrlMatch) {                                                                                      // 43
    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + "s";                                           // 44
    var urlAfterHttp = url.substr(httpUrlMatch[0].length);                                                        // 45
    url = newScheme + "://" + urlAfterHttp;                                                                       // 46
  }                                                                                                               // 47
                                                                                                                  // 48
  // Prefix FQDNs but not relative URLs                                                                           // 49
  if (url.indexOf("://") === -1 && !startsWith(url, "/")) {                                                       // 50
    url = newSchemeBase + "://" + url;                                                                            // 51
  }                                                                                                               // 52
                                                                                                                  // 53
  // XXX This is not what we should be doing: if I have a site                                                    // 54
  // deployed at "/foo", then DDP.connect("/") should actually connect                                            // 55
  // to "/", not to "/foo". "/" is an absolute path. (Contrast: if                                                // 56
  // deployed at "/foo", it would be reasonable for DDP.connect("bar")                                            // 57
  // to connect to "/foo/bar").                                                                                   // 58
  //                                                                                                              // 59
  // We should make this properly honor absolute paths rather than                                                // 60
  // forcing the path to be relative to the site root. Simultaneously,                                            // 61
  // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                 // 62
  // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                           // 63
  url = Meteor._relativeToSiteRootUrl(url);                                                                       // 64
                                                                                                                  // 65
  if (endsWith(url, "/"))                                                                                         // 66
    return url + subPath;                                                                                         // 67
  else                                                                                                            // 68
    return url + "/" + subPath;                                                                                   // 69
};                                                                                                                // 70
                                                                                                                  // 71
toSockjsUrl = function (url) {                                                                                    // 72
  return translateUrl(url, "http", "sockjs");                                                                     // 73
};                                                                                                                // 74
                                                                                                                  // 75
toWebsocketUrl = function (url) {                                                                                 // 76
  var ret = translateUrl(url, "ws", "websocket");                                                                 // 77
  return ret;                                                                                                     // 78
};                                                                                                                // 79
                                                                                                                  // 80
LivedataTest.toSockjsUrl = toSockjsUrl;                                                                           // 81
                                                                                                                  // 82
                                                                                                                  // 83
_.extend(LivedataTest.ClientStream.prototype, {                                                                   // 84
                                                                                                                  // 85
  // Register for callbacks.                                                                                      // 86
  on: function (name, callback) {                                                                                 // 87
    var self = this;                                                                                              // 88
                                                                                                                  // 89
    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')                                          // 90
      throw new Error("unknown event type: " + name);                                                             // 91
                                                                                                                  // 92
    if (!self.eventCallbacks[name])                                                                               // 93
      self.eventCallbacks[name] = [];                                                                             // 94
    self.eventCallbacks[name].push(callback);                                                                     // 95
  },                                                                                                              // 96
                                                                                                                  // 97
                                                                                                                  // 98
  _initCommon: function (options) {                                                                               // 99
    var self = this;                                                                                              // 100
    options = options || {};                                                                                      // 101
                                                                                                                  // 102
    //// Constants                                                                                                // 103
                                                                                                                  // 104
    // how long to wait until we declare the connection attempt                                                   // 105
    // failed.                                                                                                    // 106
    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;                                                     // 107
                                                                                                                  // 108
    self.eventCallbacks = {}; // name -> [callback]                                                               // 109
                                                                                                                  // 110
    self._forcedToDisconnect = false;                                                                             // 111
                                                                                                                  // 112
    //// Reactive status                                                                                          // 113
    self.currentStatus = {                                                                                        // 114
      status: "connecting",                                                                                       // 115
      connected: false,                                                                                           // 116
      retryCount: 0                                                                                               // 117
    };                                                                                                            // 118
                                                                                                                  // 119
                                                                                                                  // 120
    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;                              // 121
    self.statusChanged = function () {                                                                            // 122
      if (self.statusListeners)                                                                                   // 123
        self.statusListeners.changed();                                                                           // 124
    };                                                                                                            // 125
                                                                                                                  // 126
    //// Retry logic                                                                                              // 127
    self._retry = new Retry;                                                                                      // 128
    self.connectionTimer = null;                                                                                  // 129
                                                                                                                  // 130
  },                                                                                                              // 131
                                                                                                                  // 132
  // Trigger a reconnect.                                                                                         // 133
  reconnect: function (options) {                                                                                 // 134
    var self = this;                                                                                              // 135
    options = options || {};                                                                                      // 136
                                                                                                                  // 137
    if (options.url) {                                                                                            // 138
      self._changeUrl(options.url);                                                                               // 139
    }                                                                                                             // 140
                                                                                                                  // 141
    if (options._sockjsOptions) {                                                                                 // 142
      self.options._sockjsOptions = options._sockjsOptions;                                                       // 143
    }                                                                                                             // 144
                                                                                                                  // 145
    if (self.currentStatus.connected) {                                                                           // 146
      if (options._force || options.url) {                                                                        // 147
        // force reconnect.                                                                                       // 148
        self._lostConnection(new DDP.ForcedReconnectError);                                                       // 149
      } // else, noop.                                                                                            // 150
      return;                                                                                                     // 151
    }                                                                                                             // 152
                                                                                                                  // 153
    // if we're mid-connection, stop it.                                                                          // 154
    if (self.currentStatus.status === "connecting") {                                                             // 155
      // Pretend it's a clean close.                                                                              // 156
      self._lostConnection();                                                                                     // 157
    }                                                                                                             // 158
                                                                                                                  // 159
    self._retry.clear();                                                                                          // 160
    self.currentStatus.retryCount -= 1; // don't count manual retries                                             // 161
    self._retryNow();                                                                                             // 162
  },                                                                                                              // 163
                                                                                                                  // 164
  disconnect: function (options) {                                                                                // 165
    var self = this;                                                                                              // 166
    options = options || {};                                                                                      // 167
                                                                                                                  // 168
    // Failed is permanent. If we're failed, don't let people go back                                             // 169
    // online by calling 'disconnect' then 'reconnect'.                                                           // 170
    if (self._forcedToDisconnect)                                                                                 // 171
      return;                                                                                                     // 172
                                                                                                                  // 173
    // If _permanent is set, permanently disconnect a stream. Once a stream                                       // 174
    // is forced to disconnect, it can never reconnect. This is for                                               // 175
    // error cases such as ddp version mismatch, where trying again                                               // 176
    // won't fix the problem.                                                                                     // 177
    if (options._permanent) {                                                                                     // 178
      self._forcedToDisconnect = true;                                                                            // 179
    }                                                                                                             // 180
                                                                                                                  // 181
    self._cleanup();                                                                                              // 182
    self._retry.clear();                                                                                          // 183
                                                                                                                  // 184
    self.currentStatus = {                                                                                        // 185
      status: (options._permanent ? "failed" : "offline"),                                                        // 186
      connected: false,                                                                                           // 187
      retryCount: 0                                                                                               // 188
    };                                                                                                            // 189
                                                                                                                  // 190
    if (options._permanent && options._error)                                                                     // 191
      self.currentStatus.reason = options._error;                                                                 // 192
                                                                                                                  // 193
    self.statusChanged();                                                                                         // 194
  },                                                                                                              // 195
                                                                                                                  // 196
  // maybeError is set unless it's a clean protocol-level close.                                                  // 197
  _lostConnection: function (maybeError) {                                                                        // 198
    var self = this;                                                                                              // 199
                                                                                                                  // 200
    self._cleanup(maybeError);                                                                                    // 201
    self._retryLater(maybeError); // sets status. no need to do it here.                                          // 202
  },                                                                                                              // 203
                                                                                                                  // 204
  // fired when we detect that we've gone online. try to reconnect                                                // 205
  // immediately.                                                                                                 // 206
  _online: function () {                                                                                          // 207
    // if we've requested to be offline by disconnecting, don't reconnect.                                        // 208
    if (this.currentStatus.status != "offline")                                                                   // 209
      this.reconnect();                                                                                           // 210
  },                                                                                                              // 211
                                                                                                                  // 212
  _retryLater: function (maybeError) {                                                                            // 213
    var self = this;                                                                                              // 214
                                                                                                                  // 215
    var timeout = 0;                                                                                              // 216
    if (self.options.retry ||                                                                                     // 217
        (maybeError && maybeError.errorType === "DDP.ForcedReconnectError")) {                                    // 218
      timeout = self._retry.retryLater(                                                                           // 219
        self.currentStatus.retryCount,                                                                            // 220
        _.bind(self._retryNow, self)                                                                              // 221
      );                                                                                                          // 222
      self.currentStatus.status = "waiting";                                                                      // 223
      self.currentStatus.retryTime = (new Date()).getTime() + timeout;                                            // 224
    } else {                                                                                                      // 225
      self.currentStatus.status = "failed";                                                                       // 226
      delete self.currentStatus.retryTime;                                                                        // 227
    }                                                                                                             // 228
                                                                                                                  // 229
    self.currentStatus.connected = false;                                                                         // 230
    self.statusChanged();                                                                                         // 231
  },                                                                                                              // 232
                                                                                                                  // 233
  _retryNow: function () {                                                                                        // 234
    var self = this;                                                                                              // 235
                                                                                                                  // 236
    if (self._forcedToDisconnect)                                                                                 // 237
      return;                                                                                                     // 238
                                                                                                                  // 239
    self.currentStatus.retryCount += 1;                                                                           // 240
    self.currentStatus.status = "connecting";                                                                     // 241
    self.currentStatus.connected = false;                                                                         // 242
    delete self.currentStatus.retryTime;                                                                          // 243
    self.statusChanged();                                                                                         // 244
                                                                                                                  // 245
    self._launchConnection();                                                                                     // 246
  },                                                                                                              // 247
                                                                                                                  // 248
                                                                                                                  // 249
  // Get current status. Reactive.                                                                                // 250
  status: function () {                                                                                           // 251
    var self = this;                                                                                              // 252
    if (self.statusListeners)                                                                                     // 253
      self.statusListeners.depend();                                                                              // 254
    return self.currentStatus;                                                                                    // 255
  }                                                                                                               // 256
});                                                                                                               // 257
                                                                                                                  // 258
DDP.ConnectionError = Meteor.makeErrorType(                                                                       // 259
  "DDP.ConnectionError", function (message) {                                                                     // 260
    var self = this;                                                                                              // 261
    self.message = message;                                                                                       // 262
});                                                                                                               // 263
                                                                                                                  // 264
DDP.ForcedReconnectError = Meteor.makeErrorType(                                                                  // 265
  "DDP.ForcedReconnectError", function () {});                                                                    // 266
                                                                                                                  // 267
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/livedata_common.js                                                                         //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
LivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;                                           // 1
                                                                                                                  // 2
// This is private but it's used in a few places. accounts-base uses                                              // 3
// it to get the current user. Meteor.setTimeout and friends clear                                                // 4
// it. We can probably find a better way to factor this.                                                          // 5
DDP._CurrentInvocation = new Meteor.EnvironmentVariable;                                                          // 6
                                                                                                                  // 7
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/random_stream.js                                                                           //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// Returns the named sequence of pseudo-random values.                                                            // 1
// The scope will be DDP._CurrentInvocation.get(), so the stream will produce                                     // 2
// consistent values for method calls on the client and server.                                                   // 3
DDP.randomStream = function (name) {                                                                              // 4
  var scope = DDP._CurrentInvocation.get();                                                                       // 5
  return DDPCommon.RandomStream.get(scope, name);                                                                 // 6
};                                                                                                                // 7
                                                                                                                  // 8
                                                                                                                  // 9
                                                                                                                  // 10
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/livedata_connection.js                                                                     //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
if (Meteor.isServer) {                                                                                            // 1
  var path = Npm.require('path');                                                                                 // 2
  var Fiber = Npm.require('fibers');                                                                              // 3
  var Future = Npm.require(path.join('fibers', 'future'));                                                        // 4
}                                                                                                                 // 5
                                                                                                                  // 6
// @param url {String|Object} URL to Meteor app,                                                                  // 7
//   or an object as a test hook (see code)                                                                       // 8
// Options:                                                                                                       // 9
//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                  // 10
//   headers: extra headers to send on the websockets connection, for                                             // 11
//     server-to-server DDP only                                                                                  // 12
//   _sockjsOptions: Specifies options to pass through to the sockjs client                                       // 13
//   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                     // 14
//                                                                                                                // 15
// XXX There should be a way to destroy a DDP connection, causing all                                             // 16
// outstanding method calls to fail.                                                                              // 17
//                                                                                                                // 18
// XXX Our current way of handling failure and reconnection is great                                              // 19
// for an app (where we want to tolerate being disconnected as an                                                 // 20
// expect state, and keep trying forever to reconnect) but cumbersome                                             // 21
// for something like a command line tool that wants to make a                                                    // 22
// connection, call a method, and print an error if connection                                                    // 23
// fails. We should have better usability in the latter case (while                                               // 24
// still transparently reconnecting if it's just a transient failure                                              // 25
// or the server migrating us).                                                                                   // 26
var Connection = function (url, options) {                                                                        // 27
  var self = this;                                                                                                // 28
  options = _.extend({                                                                                            // 29
    onConnected: function () {},                                                                                  // 30
    onDDPVersionNegotiationFailure: function (description) {                                                      // 31
      Meteor._debug(description);                                                                                 // 32
    },                                                                                                            // 33
    heartbeatInterval: 17500,                                                                                     // 34
    heartbeatTimeout: 15000,                                                                                      // 35
    npmFayeOptions: {},                                                                                           // 36
    // These options are only for testing.                                                                        // 37
    reloadWithOutstanding: false,                                                                                 // 38
    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,                                                       // 39
    retry: true,                                                                                                  // 40
    respondToPings: true,                                                                                         // 41
    // When updates are coming within this ms interval, batch them together.                                      // 42
    bufferedWritesInterval: 5,                                                                                    // 43
    // Flush buffers immediately if writes are happening continuously for more than this many ms.                 // 44
    bufferedWritesMaxAge: 500                                                                                     // 45
  }, options);                                                                                                    // 46
                                                                                                                  // 47
  // If set, called when we reconnect, queuing method calls _before_ the                                          // 48
  // existing outstanding ones. This is the only data member that is part of the                                  // 49
  // public API!                                                                                                  // 50
  self.onReconnect = null;                                                                                        // 51
                                                                                                                  // 52
  // as a test hook, allow passing a stream instead of a url.                                                     // 53
  if (typeof url === "object") {                                                                                  // 54
    self._stream = url;                                                                                           // 55
  } else {                                                                                                        // 56
    self._stream = new LivedataTest.ClientStream(url, {                                                           // 57
      retry: options.retry,                                                                                       // 58
      headers: options.headers,                                                                                   // 59
      _sockjsOptions: options._sockjsOptions,                                                                     // 60
      // Used to keep some tests quiet, or for other cases in which                                               // 61
      // the right thing to do with connection errors is to silently                                              // 62
      // fail (e.g. sending package usage stats). At some point we                                                // 63
      // should have a real API for handling client-stream-level                                                  // 64
      // errors.                                                                                                  // 65
      _dontPrintErrors: options._dontPrintErrors,                                                                 // 66
      connectTimeoutMs: options.connectTimeoutMs,                                                                 // 67
      npmFayeOptions: options.npmFayeOptions                                                                      // 68
    });                                                                                                           // 69
  }                                                                                                               // 70
                                                                                                                  // 71
  self._lastSessionId = null;                                                                                     // 72
  self._versionSuggestion = null;  // The last proposed DDP version.                                              // 73
  self._version = null;   // The DDP version agreed on by client and server.                                      // 74
  self._stores = {}; // name -> object with methods                                                               // 75
  self._methodHandlers = {}; // name -> func                                                                      // 76
  self._nextMethodId = 1;                                                                                         // 77
  self._supportedDDPVersions = options.supportedDDPVersions;                                                      // 78
                                                                                                                  // 79
  self._heartbeatInterval = options.heartbeatInterval;                                                            // 80
  self._heartbeatTimeout = options.heartbeatTimeout;                                                              // 81
                                                                                                                  // 82
  // Tracks methods which the user has tried to call but which have not yet                                       // 83
  // called their user callback (ie, they are waiting on their result or for all                                  // 84
  // of their writes to be written to the local cache). Map from method ID to                                     // 85
  // MethodInvoker object.                                                                                        // 86
  self._methodInvokers = {};                                                                                      // 87
                                                                                                                  // 88
  // Tracks methods which the user has called but whose result messages have not                                  // 89
  // arrived yet.                                                                                                 // 90
  //                                                                                                              // 91
  // _outstandingMethodBlocks is an array of blocks of methods. Each block                                        // 92
  // represents a set of methods that can run at the same time. The first block                                   // 93
  // represents the methods which are currently in flight; subsequent blocks                                      // 94
  // must wait for previous blocks to be fully finished before they can be sent                                   // 95
  // to the server.                                                                                               // 96
  //                                                                                                              // 97
  // Each block is an object with the following fields:                                                           // 98
  // - methods: a list of MethodInvoker objects                                                                   // 99
  // - wait: a boolean; if true, this block had a single method invoked with                                      // 100
  //         the "wait" option                                                                                    // 101
  //                                                                                                              // 102
  // There will never be adjacent blocks with wait=false, because the only thing                                  // 103
  // that makes methods need to be serialized is a wait method.                                                   // 104
  //                                                                                                              // 105
  // Methods are removed from the first block when their "result" is                                              // 106
  // received. The entire first block is only removed when all of the in-flight                                   // 107
  // methods have received their results (so the "methods" list is empty) *AND*                                   // 108
  // all of the data written by those methods are visible in the local cache. So                                  // 109
  // it is possible for the first block's methods list to be empty, if we are                                     // 110
  // still waiting for some objects to quiesce.                                                                   // 111
  //                                                                                                              // 112
  // Example:                                                                                                     // 113
  //  _outstandingMethodBlocks = [                                                                                // 114
  //    {wait: false, methods: []},                                                                               // 115
  //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                     // 116
  //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                        // 117
  //                            <MethodInvoker for 'bar'>]}]                                                      // 118
  // This means that there were some methods which were sent to the server and                                    // 119
  // which have returned their results, but some of the data written by                                           // 120
  // the methods may not be visible in the local cache. Once all that data is                                     // 121
  // visible, we will send a 'login' method. Once the login method has returned                                   // 122
  // and all the data is visible (including re-running subs if userId changes),                                   // 123
  // we will send the 'foo' and 'bar' methods in parallel.                                                        // 124
  self._outstandingMethodBlocks = [];                                                                             // 125
                                                                                                                  // 126
  // method ID -> array of objects with keys 'collection' and 'id', listing                                       // 127
  // documents written by a given method's stub. keys are associated with                                         // 128
  // methods whose stub wrote at least one document, and whose data-done message                                  // 129
  // has not yet been received.                                                                                   // 130
  self._documentsWrittenByStub = {};                                                                              // 131
  // collection -> IdMap of "server document" object. A "server document" has:                                    // 132
  // - "document": the version of the document according the                                                      // 133
  //   server (ie, the snapshot before a stub wrote it, amended by any changes                                    // 134
  //   received from the server)                                                                                  // 135
  //   It is undefined if we think the document does not exist                                                    // 136
  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document                                    // 137
  //   whose "data done" messages have not yet been processed                                                     // 138
  self._serverDocuments = {};                                                                                     // 139
                                                                                                                  // 140
  // Array of callbacks to be called after the next update of the local                                           // 141
  // cache. Used for:                                                                                             // 142
  //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                           // 143
  //    the relevant data is flushed.                                                                             // 144
  //  - Invoking the callbacks of "half-finished" methods after reconnect                                         // 145
  //    quiescence. Specifically, methods whose result was received over the old                                  // 146
  //    connection (so we don't re-send it) but whose data had not been made                                      // 147
  //    visible.                                                                                                  // 148
  self._afterUpdateCallbacks = [];                                                                                // 149
                                                                                                                  // 150
  // In two contexts, we buffer all incoming data messages and then process them                                  // 151
  // all at once in a single update:                                                                              // 152
  //   - During reconnect, we buffer all data messages until all subs that had                                    // 153
  //     been ready before reconnect are ready again, and all methods that are                                    // 154
  //     active have returned their "data done message"; then                                                     // 155
  //   - During the execution of a "wait" method, we buffer all data messages                                     // 156
  //     until the wait method gets its "data done" message. (If the wait method                                  // 157
  //     occurs during reconnect, it doesn't get any special handling.)                                           // 158
  // all data messages are processed in one update.                                                               // 159
  //                                                                                                              // 160
  // The following fields are used for this "quiescence" process.                                                 // 161
                                                                                                                  // 162
  // This buffers the messages that aren't being processed yet.                                                   // 163
  self._messagesBufferedUntilQuiescence = [];                                                                     // 164
  // Map from method ID -> true. Methods are removed from this when their                                         // 165
  // "data done" message is received, and we will not quiesce until it is                                         // 166
  // empty.                                                                                                       // 167
  self._methodsBlockingQuiescence = {};                                                                           // 168
  // map from sub ID -> true for subs that were ready (ie, called the sub                                         // 169
  // ready callback) before reconnect but haven't become ready again yet                                          // 170
  self._subsBeingRevived = {}; // map from sub._id -> true                                                        // 171
  // if true, the next data update should reset all stores. (set during                                           // 172
  // reconnect.)                                                                                                  // 173
  self._resetStores = false;                                                                                      // 174
                                                                                                                  // 175
  // name -> array of updates for (yet to be created) collections                                                 // 176
  self._updatesForUnknownStores = {};                                                                             // 177
  // if we're blocking a migration, the retry func                                                                // 178
  self._retryMigrate = null;                                                                                      // 179
                                                                                                                  // 180
  self.__flushBufferedWrites = Meteor.bindEnvironment(                                                            // 181
    self._flushBufferedWrites, "flushing DDP buffered writes", self);                                             // 182
  // Collection name -> array of messages.                                                                        // 183
  self._bufferedWrites = {};                                                                                      // 184
  // When current buffer of updates must be flushed at, in ms timestamp.                                          // 185
  self._bufferedWritesFlushAt = null;                                                                             // 186
  // Timeout handle for the next processing of all pending writes                                                 // 187
  self._bufferedWritesFlushHandle = null;                                                                         // 188
                                                                                                                  // 189
  self._bufferedWritesInterval = options.bufferedWritesInterval;                                                  // 190
  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge;                                                      // 191
                                                                                                                  // 192
  // metadata for subscriptions.  Map from sub ID to object with keys:                                            // 193
  //   - id                                                                                                       // 194
  //   - name                                                                                                     // 195
  //   - params                                                                                                   // 196
  //   - inactive (if true, will be cleaned up if not reused in re-run)                                           // 197
  //   - ready (has the 'ready' message been received?)                                                           // 198
  //   - readyCallback (an optional callback to call when ready)                                                  // 199
  //   - errorCallback (an optional callback to call if the sub terminates with                                   // 200
  //                    an error, XXX COMPAT WITH 1.0.3.1)                                                        // 201
  //   - stopCallback (an optional callback to call when the sub terminates                                       // 202
  //     for any reason, with an error argument if an error triggered the stop)                                   // 203
  self._subscriptions = {};                                                                                       // 204
                                                                                                                  // 205
  // Reactive userId.                                                                                             // 206
  self._userId = null;                                                                                            // 207
  self._userIdDeps = new Tracker.Dependency;                                                                      // 208
                                                                                                                  // 209
  // Block auto-reload while we're waiting for method responses.                                                  // 210
  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {                                      // 211
    Package.reload.Reload._onMigrate(function (retry) {                                                           // 212
      if (!self._readyToMigrate()) {                                                                              // 213
        if (self._retryMigrate)                                                                                   // 214
          throw new Error("Two migrations in progress?");                                                         // 215
        self._retryMigrate = retry;                                                                               // 216
        return false;                                                                                             // 217
      } else {                                                                                                    // 218
        return [true];                                                                                            // 219
      }                                                                                                           // 220
    });                                                                                                           // 221
  }                                                                                                               // 222
                                                                                                                  // 223
  var onMessage = function (raw_msg) {                                                                            // 224
    try {                                                                                                         // 225
      var msg = DDPCommon.parseDDP(raw_msg);                                                                      // 226
    } catch (e) {                                                                                                 // 227
      Meteor._debug("Exception while parsing DDP", e);                                                            // 228
      return;                                                                                                     // 229
    }                                                                                                             // 230
                                                                                                                  // 231
    // Any message counts as receiving a pong, as it demonstrates that                                            // 232
    // the server is still alive.                                                                                 // 233
    if (self._heartbeat) {                                                                                        // 234
      self._heartbeat.messageReceived();                                                                          // 235
    }                                                                                                             // 236
                                                                                                                  // 237
    if (msg === null || !msg.msg) {                                                                               // 238
      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                           // 239
      // compat.  Remove this 'if' once the server stops sending welcome                                          // 240
      // messages (stream_server.js).                                                                             // 241
      if (! (msg && msg.server_id))                                                                               // 242
        Meteor._debug("discarding invalid livedata message", msg);                                                // 243
      return;                                                                                                     // 244
    }                                                                                                             // 245
                                                                                                                  // 246
    if (msg.msg === 'connected') {                                                                                // 247
      self._version = self._versionSuggestion;                                                                    // 248
      self._livedata_connected(msg);                                                                              // 249
      options.onConnected();                                                                                      // 250
    }                                                                                                             // 251
    else if (msg.msg === 'failed') {                                                                              // 252
      if (_.contains(self._supportedDDPVersions, msg.version)) {                                                  // 253
        self._versionSuggestion = msg.version;                                                                    // 254
        self._stream.reconnect({_force: true});                                                                   // 255
      } else {                                                                                                    // 256
        var description =                                                                                         // 257
              "DDP version negotiation failed; server requested version " + msg.version;                          // 258
        self._stream.disconnect({_permanent: true, _error: description});                                         // 259
        options.onDDPVersionNegotiationFailure(description);                                                      // 260
      }                                                                                                           // 261
    }                                                                                                             // 262
    else if (msg.msg === 'ping' && options.respondToPings) {                                                      // 263
      self._send({msg: "pong", id: msg.id});                                                                      // 264
    }                                                                                                             // 265
    else if (msg.msg === 'pong') {                                                                                // 266
      // noop, as we assume everything's a pong                                                                   // 267
    }                                                                                                             // 268
    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))                             // 269
      self._livedata_data(msg);                                                                                   // 270
    else if (msg.msg === 'nosub')                                                                                 // 271
      self._livedata_nosub(msg);                                                                                  // 272
    else if (msg.msg === 'result')                                                                                // 273
      self._livedata_result(msg);                                                                                 // 274
    else if (msg.msg === 'error')                                                                                 // 275
      self._livedata_error(msg);                                                                                  // 276
    else                                                                                                          // 277
      Meteor._debug("discarding unknown livedata message type", msg);                                             // 278
  };                                                                                                              // 279
                                                                                                                  // 280
  var onReset = function () {                                                                                     // 281
    // Send a connect message at the beginning of the stream.                                                     // 282
    // NOTE: reset is called even on the first connection, so this is                                             // 283
    // the only place we send this message.                                                                       // 284
    var msg = {msg: 'connect'};                                                                                   // 285
    if (self._lastSessionId)                                                                                      // 286
      msg.session = self._lastSessionId;                                                                          // 287
    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];                                       // 288
    self._versionSuggestion = msg.version;                                                                        // 289
    msg.support = self._supportedDDPVersions;                                                                     // 290
    self._send(msg);                                                                                              // 291
                                                                                                                  // 292
    // Mark non-retry calls as failed. This has to be done early as getting these methods out of the              // 293
    // current block is pretty important to making sure that quiescence is properly calculated, as                // 294
    // well as possibly moving on to another useful block.                                                        // 295
                                                                                                                  // 296
    // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if               // 297
    // we are connecting for the first time.                                                                      // 298
    if (self._outstandingMethodBlocks.length > 0) {                                                               // 299
      // If there is an outstanding method block, we only care about the first one as that is the                 // 300
      // one that could have already sent messages with no response, that are not allowed to retry.               // 301
      _.each(self._outstandingMethodBlocks[0].methods, function(methodInvoker) {                                  // 302
        // If the message wasn't sent or it's allowed to retry, do nothing.                                       // 303
        if (methodInvoker.sentMessage && methodInvoker.noRetry) {                                                 // 304
          // The next loop serves to get the index in the current method block of this method.                    // 305
          var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                      // 306
          var loopMethod;                                                                                         // 307
          for (var i = 0; i < currentMethodBlock.length; i++) {                                                   // 308
            loopMethod = currentMethodBlock[i];                                                                   // 309
            if (loopMethod.methodId === methodInvoker.methodId) {                                                 // 310
              break;                                                                                              // 311
            }                                                                                                     // 312
          }                                                                                                       // 313
                                                                                                                  // 314
          // Remove from current method block. This may leave the block empty, but we                             // 315
          // don't move on to the next block until the callback has been delivered, in                            // 316
          // _outstandingMethodFinished.                                                                          // 317
          currentMethodBlock.splice(i, 1);                                                                        // 318
                                                                                                                  // 319
          // Make sure that the method is told that it failed.                                                    // 320
          methodInvoker.receiveResult(new Meteor.Error('invocation-failed',                                       // 321
            'Method invocation might have failed due to dropped connection. ' +                                   // 322
            'Failing because `noRetry` option was passed to Meteor.apply.'));                                     // 323
        }                                                                                                         // 324
      });                                                                                                         // 325
    }                                                                                                             // 326
                                                                                                                  // 327
    // Now, to minimize setup latency, go ahead and blast out all of                                              // 328
    // our pending methods ands subscriptions before we've even taken                                             // 329
    // the necessary RTT to know if we successfully reconnected. (1)                                              // 330
    // They're supposed to be idempotent, and where they are not,                                                 // 331
    // they can block retry in apply; (2) even if we did reconnect,                                               // 332
    // we're not sure what messages might have gotten lost                                                        // 333
    // (in either direction) since we were disconnected (TCP being                                                // 334
    // sloppy about that.)                                                                                        // 335
                                                                                                                  // 336
    // If the current block of methods all got their results (but didn't all get                                  // 337
    // their data visible), discard the empty block now.                                                          // 338
    if (! _.isEmpty(self._outstandingMethodBlocks) &&                                                             // 339
        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {                                                    // 340
      self._outstandingMethodBlocks.shift();                                                                      // 341
    }                                                                                                             // 342
                                                                                                                  // 343
    // Mark all messages as unsent, they have not yet been sent on this                                           // 344
    // connection.                                                                                                // 345
    _.each(self._methodInvokers, function (m) {                                                                   // 346
      m.sentMessage = false;                                                                                      // 347
    });                                                                                                           // 348
                                                                                                                  // 349
    // If an `onReconnect` handler is set, call it first. Go through                                              // 350
    // some hoops to ensure that methods that are called from within                                              // 351
    // `onReconnect` get executed _before_ ones that were originally                                              // 352
    // outstanding (since `onReconnect` is used to re-establish auth                                              // 353
    // certificates)                                                                                              // 354
    if (self.onReconnect)                                                                                         // 355
      self._callOnReconnectAndSendAppropriateOutstandingMethods();                                                // 356
    else                                                                                                          // 357
      self._sendOutstandingMethods();                                                                             // 358
                                                                                                                  // 359
    // add new subscriptions at the end. this way they take effect after                                          // 360
    // the handlers and we don't see flicker.                                                                     // 361
    _.each(self._subscriptions, function (sub, id) {                                                              // 362
      self._send({                                                                                                // 363
        msg: 'sub',                                                                                               // 364
        id: id,                                                                                                   // 365
        name: sub.name,                                                                                           // 366
        params: sub.params                                                                                        // 367
      });                                                                                                         // 368
    });                                                                                                           // 369
  };                                                                                                              // 370
                                                                                                                  // 371
  var onDisconnect = function () {                                                                                // 372
    if (self._heartbeat) {                                                                                        // 373
      self._heartbeat.stop();                                                                                     // 374
      self._heartbeat = null;                                                                                     // 375
    }                                                                                                             // 376
  };                                                                                                              // 377
                                                                                                                  // 378
  if (Meteor.isServer) {                                                                                          // 379
    self._stream.on('message', Meteor.bindEnvironment(onMessage, "handling DDP message"));                        // 380
    self._stream.on('reset', Meteor.bindEnvironment(onReset, "handling DDP reset"));                              // 381
    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, "handling DDP disconnect"));               // 382
  } else {                                                                                                        // 383
    self._stream.on('message', onMessage);                                                                        // 384
    self._stream.on('reset', onReset);                                                                            // 385
    self._stream.on('disconnect', onDisconnect);                                                                  // 386
  }                                                                                                               // 387
};                                                                                                                // 388
                                                                                                                  // 389
// A MethodInvoker manages sending a method to the server and calling the user's                                  // 390
// callbacks. On construction, it registers itself in the connection's                                            // 391
// _methodInvokers map; it removes itself once the method is fully finished and                                   // 392
// the callback is invoked. This occurs when it has both received a result,                                       // 393
// and the data written by it is fully visible.                                                                   // 394
var MethodInvoker = function (options) {                                                                          // 395
  var self = this;                                                                                                // 396
                                                                                                                  // 397
  // Public (within this file) fields.                                                                            // 398
  self.methodId = options.methodId;                                                                               // 399
  self.sentMessage = false;                                                                                       // 400
                                                                                                                  // 401
  self._callback = options.callback;                                                                              // 402
  self._connection = options.connection;                                                                          // 403
  self._message = options.message;                                                                                // 404
  self._onResultReceived = options.onResultReceived || function () {};                                            // 405
  self._wait = options.wait;                                                                                      // 406
  self.noRetry = options.noRetry;                                                                                 // 407
  self._methodResult = null;                                                                                      // 408
  self._dataVisible = false;                                                                                      // 409
                                                                                                                  // 410
  // Register with the connection.                                                                                // 411
  self._connection._methodInvokers[self.methodId] = self;                                                         // 412
};                                                                                                                // 413
_.extend(MethodInvoker.prototype, {                                                                               // 414
  // Sends the method message to the server. May be called additional times if                                    // 415
  // we lose the connection and reconnect before receiving a result.                                              // 416
  sendMessage: function () {                                                                                      // 417
    var self = this;                                                                                              // 418
    // This function is called before sending a method (including resending on                                    // 419
    // reconnect). We should only (re)send methods where we don't already have a                                  // 420
    // result!                                                                                                    // 421
    if (self.gotResult())                                                                                         // 422
      throw new Error("sendingMethod is called on method with result");                                           // 423
                                                                                                                  // 424
                                                                                                                  // 425
    // If we're re-sending it, it doesn't matter if data was written the first                                    // 426
    // time.                                                                                                      // 427
    self._dataVisible = false;                                                                                    // 428
    self.sentMessage = true;                                                                                      // 429
                                                                                                                  // 430
    // If this is a wait method, make all data messages be buffered until it is                                   // 431
    // done.                                                                                                      // 432
    if (self._wait)                                                                                               // 433
      self._connection._methodsBlockingQuiescence[self.methodId] = true;                                          // 434
                                                                                                                  // 435
    // Actually send the message.                                                                                 // 436
    self._connection._send(self._message);                                                                        // 437
  },                                                                                                              // 438
  // Invoke the callback, if we have both a result and know that all data has                                     // 439
  // been written to the local cache.                                                                             // 440
  _maybeInvokeCallback: function () {                                                                             // 441
    var self = this;                                                                                              // 442
    if (self._methodResult && self._dataVisible) {                                                                // 443
      // Call the callback. (This won't throw: the callback was wrapped with                                      // 444
      // bindEnvironment.)                                                                                        // 445
      self._callback(self._methodResult[0], self._methodResult[1]);                                               // 446
                                                                                                                  // 447
      // Forget about this method.                                                                                // 448
      delete self._connection._methodInvokers[self.methodId];                                                     // 449
                                                                                                                  // 450
      // Let the connection know that this method is finished, so it can try to                                   // 451
      // move on to the next block of methods.                                                                    // 452
      self._connection._outstandingMethodFinished();                                                              // 453
    }                                                                                                             // 454
  },                                                                                                              // 455
  // Call with the result of the method from the server. Only may be called                                       // 456
  // once; once it is called, you should not call sendMessage again.                                              // 457
  // If the user provided an onResultReceived callback, call it immediately.                                      // 458
  // Then invoke the main callback if data is also visible.                                                       // 459
  receiveResult: function (err, result) {                                                                         // 460
    var self = this;                                                                                              // 461
    if (self.gotResult())                                                                                         // 462
      throw new Error("Methods should only receive results once");                                                // 463
    self._methodResult = [err, result];                                                                           // 464
    self._onResultReceived(err, result);                                                                          // 465
    self._maybeInvokeCallback();                                                                                  // 466
  },                                                                                                              // 467
  // Call this when all data written by the method is visible. This means that                                    // 468
  // the method has returns its "data is done" message *AND* all server                                           // 469
  // documents that are buffered at that time have been written to the local                                      // 470
  // cache. Invokes the main callback if the result has been received.                                            // 471
  dataVisible: function () {                                                                                      // 472
    var self = this;                                                                                              // 473
    self._dataVisible = true;                                                                                     // 474
    self._maybeInvokeCallback();                                                                                  // 475
  },                                                                                                              // 476
  // True if receiveResult has been called.                                                                       // 477
  gotResult: function () {                                                                                        // 478
    var self = this;                                                                                              // 479
    return !!self._methodResult;                                                                                  // 480
  }                                                                                                               // 481
});                                                                                                               // 482
                                                                                                                  // 483
_.extend(Connection.prototype, {                                                                                  // 484
  // 'name' is the name of the data on the wire that should go in the                                             // 485
  // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                  // 486
  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                  // 487
  registerStore: function (name, wrappedStore) {                                                                  // 488
    var self = this;                                                                                              // 489
                                                                                                                  // 490
    if (name in self._stores)                                                                                     // 491
      return false;                                                                                               // 492
                                                                                                                  // 493
    // Wrap the input object in an object which makes any store method not                                        // 494
    // implemented by 'store' into a no-op.                                                                       // 495
    var store = {};                                                                                               // 496
    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',                                                // 497
            'retrieveOriginals', 'getDoc',                                                                        // 498
			'_getCollection'], function (method) {                                                                         // 499
              store[method] = function () {                                                                       // 500
                return (wrappedStore[method]                                                                      // 501
                        ? wrappedStore[method].apply(wrappedStore, arguments)                                     // 502
                        : undefined);                                                                             // 503
              };                                                                                                  // 504
            });                                                                                                   // 505
                                                                                                                  // 506
    self._stores[name] = store;                                                                                   // 507
                                                                                                                  // 508
    var queued = self._updatesForUnknownStores[name];                                                             // 509
    if (queued) {                                                                                                 // 510
      store.beginUpdate(queued.length, false);                                                                    // 511
      _.each(queued, function (msg) {                                                                             // 512
        store.update(msg);                                                                                        // 513
      });                                                                                                         // 514
      store.endUpdate();                                                                                          // 515
      delete self._updatesForUnknownStores[name];                                                                 // 516
    }                                                                                                             // 517
                                                                                                                  // 518
    return true;                                                                                                  // 519
  },                                                                                                              // 520
                                                                                                                  // 521
  /**                                                                                                             // 522
   * @memberOf Meteor                                                                                             // 523
   * @importFromPackage meteor                                                                                    // 524
   * @summary Subscribe to a record set.  Returns a handle that provides                                          // 525
   * `stop()` and `ready()` methods.                                                                              // 526
   * @locus Client                                                                                                // 527
   * @param {String} name Name of the subscription.  Matches the name of the                                      // 528
   * server's `publish()` call.                                                                                   // 529
   * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher                                     // 530
   * function on server.                                                                                          // 531
   * @param {Function|Object} [callbacks] Optional. May include `onStop`                                          // 532
   * and `onReady` callbacks. If there is an error, it is passed as an                                            // 533
   * argument to `onStop`. If a function is passed instead of an object, it                                       // 534
   * is interpreted as an `onReady` callback.                                                                     // 535
   */                                                                                                             // 536
  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {                                       // 537
    var self = this;                                                                                              // 538
                                                                                                                  // 539
    var params = Array.prototype.slice.call(arguments, 1);                                                        // 540
    var callbacks = {};                                                                                           // 541
    if (params.length) {                                                                                          // 542
      var lastParam = params[params.length - 1];                                                                  // 543
      if (_.isFunction(lastParam)) {                                                                              // 544
        callbacks.onReady = params.pop();                                                                         // 545
      } else if (lastParam &&                                                                                     // 546
        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                          // 547
        // onStop with an error callback instead.                                                                 // 548
        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],                                           // 549
          _.isFunction)) {                                                                                        // 550
        callbacks = params.pop();                                                                                 // 551
      }                                                                                                           // 552
    }                                                                                                             // 553
                                                                                                                  // 554
    // Is there an existing sub with the same name and param, run in an                                           // 555
    // invalidated Computation? This will happen if we are rerunning an                                           // 556
    // existing computation.                                                                                      // 557
    //                                                                                                            // 558
    // For example, consider a rerun of:                                                                          // 559
    //                                                                                                            // 560
    //     Tracker.autorun(function () {                                                                          // 561
    //       Meteor.subscribe("foo", Session.get("foo"));                                                         // 562
    //       Meteor.subscribe("bar", Session.get("bar"));                                                         // 563
    //     });                                                                                                    // 564
    //                                                                                                            // 565
    // If "foo" has changed but "bar" has not, we will match the "bar"                                            // 566
    // subcribe to an existing inactive subscription in order to not                                              // 567
    // unsub and resub the subscription unnecessarily.                                                            // 568
    //                                                                                                            // 569
    // We only look for one such sub; if there are N apparently-identical subs                                    // 570
    // being invalidated, we will require N matching subscribe calls to keep                                      // 571
    // them all active.                                                                                           // 572
    var existing = _.find(self._subscriptions, function (sub) {                                                   // 573
      return sub.inactive && sub.name === name &&                                                                 // 574
        EJSON.equals(sub.params, params);                                                                         // 575
    });                                                                                                           // 576
                                                                                                                  // 577
    var id;                                                                                                       // 578
    if (existing) {                                                                                               // 579
      id = existing.id;                                                                                           // 580
      existing.inactive = false; // reactivate                                                                    // 581
                                                                                                                  // 582
      if (callbacks.onReady) {                                                                                    // 583
        // If the sub is not already ready, replace any ready callback with the                                   // 584
        // one provided now. (It's not really clear what users would expect for                                   // 585
        // an onReady callback inside an autorun; the semantics we provide is                                     // 586
        // that at the time the sub first becomes ready, we call the last                                         // 587
        // onReady callback provided, if any.)                                                                    // 588
        if (!existing.ready)                                                                                      // 589
          existing.readyCallback = callbacks.onReady;                                                             // 590
      }                                                                                                           // 591
                                                                                                                  // 592
      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                          // 593
      // onStop with an optional error argument                                                                   // 594
      if (callbacks.onError) {                                                                                    // 595
        // Replace existing callback if any, so that errors aren't                                                // 596
        // double-reported.                                                                                       // 597
        existing.errorCallback = callbacks.onError;                                                               // 598
      }                                                                                                           // 599
                                                                                                                  // 600
      if (callbacks.onStop) {                                                                                     // 601
        existing.stopCallback = callbacks.onStop;                                                                 // 602
      }                                                                                                           // 603
    } else {                                                                                                      // 604
      // New sub! Generate an id, save it locally, and send message.                                              // 605
      id = Random.id();                                                                                           // 606
      self._subscriptions[id] = {                                                                                 // 607
        id: id,                                                                                                   // 608
        name: name,                                                                                               // 609
        params: EJSON.clone(params),                                                                              // 610
        inactive: false,                                                                                          // 611
        ready: false,                                                                                             // 612
        readyDeps: new Tracker.Dependency,                                                                        // 613
        readyCallback: callbacks.onReady,                                                                         // 614
        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                 // 615
        errorCallback: callbacks.onError,                                                                         // 616
        stopCallback: callbacks.onStop,                                                                           // 617
        connection: self,                                                                                         // 618
        remove: function() {                                                                                      // 619
          delete this.connection._subscriptions[this.id];                                                         // 620
          this.ready && this.readyDeps.changed();                                                                 // 621
        },                                                                                                        // 622
        stop: function() {                                                                                        // 623
          this.connection._send({msg: 'unsub', id: id});                                                          // 624
          this.remove();                                                                                          // 625
                                                                                                                  // 626
          if (callbacks.onStop) {                                                                                 // 627
            callbacks.onStop();                                                                                   // 628
          }                                                                                                       // 629
        }                                                                                                         // 630
      };                                                                                                          // 631
      self._send({msg: 'sub', id: id, name: name, params: params});                                               // 632
    }                                                                                                             // 633
                                                                                                                  // 634
    // return a handle to the application.                                                                        // 635
    var handle = {                                                                                                // 636
      stop: function () {                                                                                         // 637
        if (!_.has(self._subscriptions, id))                                                                      // 638
          return;                                                                                                 // 639
                                                                                                                  // 640
        self._subscriptions[id].stop();                                                                           // 641
      },                                                                                                          // 642
      ready: function () {                                                                                        // 643
        // return false if we've unsubscribed.                                                                    // 644
        if (!_.has(self._subscriptions, id))                                                                      // 645
          return false;                                                                                           // 646
        var record = self._subscriptions[id];                                                                     // 647
        record.readyDeps.depend();                                                                                // 648
        return record.ready;                                                                                      // 649
      },                                                                                                          // 650
      subscriptionId: id                                                                                          // 651
    };                                                                                                            // 652
                                                                                                                  // 653
    if (Tracker.active) {                                                                                         // 654
      // We're in a reactive computation, so we'd like to unsubscribe when the                                    // 655
      // computation is invalidated... but not if the rerun just re-subscribes                                    // 656
      // to the same subscription!  When a rerun happens, we use onInvalidate                                     // 657
      // as a change to mark the subscription "inactive" so that it can                                           // 658
      // be reused from the rerun.  If it isn't reused, it's killed from                                          // 659
      // an afterFlush.                                                                                           // 660
      Tracker.onInvalidate(function (c) {                                                                         // 661
        if (_.has(self._subscriptions, id))                                                                       // 662
          self._subscriptions[id].inactive = true;                                                                // 663
                                                                                                                  // 664
        Tracker.afterFlush(function () {                                                                          // 665
          if (_.has(self._subscriptions, id) &&                                                                   // 666
              self._subscriptions[id].inactive)                                                                   // 667
            handle.stop();                                                                                        // 668
        });                                                                                                       // 669
      });                                                                                                         // 670
    }                                                                                                             // 671
                                                                                                                  // 672
    return handle;                                                                                                // 673
  },                                                                                                              // 674
                                                                                                                  // 675
  // options:                                                                                                     // 676
  // - onLateError {Function(error)} called if an error was received after the ready event.                       // 677
  //     (errors received before ready cause an error to be thrown)                                               // 678
  _subscribeAndWait: function (name, args, options) {                                                             // 679
    var self = this;                                                                                              // 680
    var f = new Future();                                                                                         // 681
    var ready = false;                                                                                            // 682
    var handle;                                                                                                   // 683
    args = args || [];                                                                                            // 684
    args.push({                                                                                                   // 685
      onReady: function () {                                                                                      // 686
        ready = true;                                                                                             // 687
        f['return']();                                                                                            // 688
      },                                                                                                          // 689
      onError: function (e) {                                                                                     // 690
        if (!ready)                                                                                               // 691
          f['throw'](e);                                                                                          // 692
        else                                                                                                      // 693
          options && options.onLateError && options.onLateError(e);                                               // 694
      }                                                                                                           // 695
    });                                                                                                           // 696
                                                                                                                  // 697
    handle = self.subscribe.apply(self, [name].concat(args));                                                     // 698
    f.wait();                                                                                                     // 699
    return handle;                                                                                                // 700
  },                                                                                                              // 701
                                                                                                                  // 702
  methods: function (methods) {                                                                                   // 703
    var self = this;                                                                                              // 704
    _.each(methods, function (func, name) {                                                                       // 705
      if (typeof func !== 'function')                                                                             // 706
        throw new Error("Method '" + name + "' must be a function");                                              // 707
      if (self._methodHandlers[name])                                                                             // 708
        throw new Error("A method named '" + name + "' is already defined");                                      // 709
      self._methodHandlers[name] = func;                                                                          // 710
    });                                                                                                           // 711
  },                                                                                                              // 712
                                                                                                                  // 713
  /**                                                                                                             // 714
   * @memberOf Meteor                                                                                             // 715
   * @importFromPackage meteor                                                                                    // 716
   * @summary Invokes a method passing any number of arguments.                                                   // 717
   * @locus Anywhere                                                                                              // 718
   * @param {String} name Name of method to invoke                                                                // 719
   * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                  // 720
   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
   */                                                                                                             // 722
  call: function (name /* .. [arguments] .. callback */) {                                                        // 723
    // if it's a function, the last argument is the result callback,                                              // 724
    // not a parameter to the remote method.                                                                      // 725
    var args = Array.prototype.slice.call(arguments, 1);                                                          // 726
    if (args.length && typeof args[args.length - 1] === "function")                                               // 727
      var callback = args.pop();                                                                                  // 728
    return this.apply(name, args, callback);                                                                      // 729
  },                                                                                                              // 730
                                                                                                                  // 731
  // @param options {Optional Object}                                                                             // 732
  //   wait: Boolean - Should we wait to call this until all current methods                                      // 733
  //                   are fully finished, and block subsequent method calls                                      // 734
  //                   until this method is fully finished?                                                       // 735
  //                   (does not affect methods called from within this method)                                   // 736
  //   onResultReceived: Function - a callback to call as soon as the method                                      // 737
  //                                result is received. the data written by                                       // 738
  //                                the method may not yet be in the cache!                                       // 739
  //   returnStubValue: Boolean - If true then in cases where we would have                                       // 740
  //                              otherwise discarded the stub's return value                                     // 741
  //                              and returned undefined, instead we go ahead                                     // 742
  //                              and return it.  Specifically, this is any                                       // 743
  //                              time other than when (a) we are already                                         // 744
  //                              inside a stub or (b) we are in Node and no                                      // 745
  //                              callback was provided.  Currently we require                                    // 746
  //                              this flag to be explicitly passed to reduce                                     // 747
  //                              the likelihood that stub return values will                                     // 748
  //                              be confused with server return values; we                                       // 749
  //                              may improve this in future.                                                     // 750
  // @param callback {Optional Function}                                                                          // 751
                                                                                                                  // 752
  /**                                                                                                             // 753
   * @memberOf Meteor                                                                                             // 754
   * @importFromPackage meteor                                                                                    // 755
   * @summary Invoke a method passing an array of arguments.                                                      // 756
   * @locus Anywhere                                                                                              // 757
   * @param {String} name Name of method to invoke                                                                // 758
   * @param {EJSONable[]} args Method arguments                                                                   // 759
   * @param {Object} [options]                                                                                    // 760
   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
   * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).     // 764
   */                                                                                                             // 765
  apply: function (name, args, options, callback) {                                                               // 766
    var self = this;                                                                                              // 767
                                                                                                                  // 768
    // We were passed 3 arguments. They may be either (name, args, options)                                       // 769
    // or (name, args, callback)                                                                                  // 770
    if (!callback && typeof options === 'function') {                                                             // 771
      callback = options;                                                                                         // 772
      options = {};                                                                                               // 773
    }                                                                                                             // 774
    options = options || {};                                                                                      // 775
                                                                                                                  // 776
    if (callback) {                                                                                               // 777
      // XXX would it be better form to do the binding in stream.on,                                              // 778
      // or caller, instead of here?                                                                              // 779
      // XXX improve error message (and how we report it)                                                         // 780
      callback = Meteor.bindEnvironment(                                                                          // 781
        callback,                                                                                                 // 782
        "delivering result of invoking '" + name + "'"                                                            // 783
      );                                                                                                          // 784
    }                                                                                                             // 785
                                                                                                                  // 786
    // Keep our args safe from mutation (eg if we don't send the message for a                                    // 787
    // while because of a wait method).                                                                           // 788
    args = EJSON.clone(args);                                                                                     // 789
                                                                                                                  // 790
    // Lazily allocate method ID once we know that it'll be needed.                                               // 791
    var methodId = (function () {                                                                                 // 792
      var id;                                                                                                     // 793
      return function () {                                                                                        // 794
        if (id === undefined)                                                                                     // 795
          id = '' + (self._nextMethodId++);                                                                       // 796
        return id;                                                                                                // 797
      };                                                                                                          // 798
    })();                                                                                                         // 799
                                                                                                                  // 800
    var enclosing = DDP._CurrentInvocation.get();                                                                 // 801
    var alreadyInSimulation = enclosing && enclosing.isSimulation;                                                // 802
                                                                                                                  // 803
    // Lazily generate a randomSeed, only if it is requested by the stub.                                         // 804
    // The random streams only have utility if they're used on both the client                                    // 805
    // and the server; if the client doesn't generate any 'random' values                                         // 806
    // then we don't expect the server to generate any either.                                                    // 807
    // Less commonly, the server may perform different actions from the client,                                   // 808
    // and may in fact generate values where the client did not, but we don't                                     // 809
    // have any client-side values to match, so even here we may as well just                                     // 810
    // use a random seed on the server.  In that case, we don't pass the                                          // 811
    // randomSeed to save bandwidth, and we don't even generate it to save a                                      // 812
    // bit of CPU and to avoid consuming entropy.                                                                 // 813
    var randomSeed = null;                                                                                        // 814
    var randomSeedGenerator = function () {                                                                       // 815
      if (randomSeed === null) {                                                                                  // 816
        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);                                                      // 817
      }                                                                                                           // 818
      return randomSeed;                                                                                          // 819
    };                                                                                                            // 820
                                                                                                                  // 821
    // Run the stub, if we have one. The stub is supposed to make some                                            // 822
    // temporary writes to the database to give the user a smooth experience                                      // 823
    // until the actual result of executing the method comes back from the                                        // 824
    // server (whereupon the temporary writes to the database will be reversed                                    // 825
    // during the beginUpdate/endUpdate process.)                                                                 // 826
    //                                                                                                            // 827
    // Normally, we ignore the return value of the stub (even if it is an                                         // 828
    // exception), in favor of the real return value from the server. The                                         // 829
    // exception is if the *caller* is a stub. In that case, we're not going                                      // 830
    // to do a RPC, so we use the return value of the stub as our return                                          // 831
    // value.                                                                                                     // 832
                                                                                                                  // 833
    var stub = self._methodHandlers[name];                                                                        // 834
    if (stub) {                                                                                                   // 835
      var setUserId = function(userId) {                                                                          // 836
        self.setUserId(userId);                                                                                   // 837
      };                                                                                                          // 838
                                                                                                                  // 839
      var invocation = new DDPCommon.MethodInvocation({                                                           // 840
        isSimulation: true,                                                                                       // 841
        userId: self.userId(),                                                                                    // 842
        setUserId: setUserId,                                                                                     // 843
        randomSeed: function () { return randomSeedGenerator(); }                                                 // 844
      });                                                                                                         // 845
                                                                                                                  // 846
      if (!alreadyInSimulation)                                                                                   // 847
        self._saveOriginals();                                                                                    // 848
                                                                                                                  // 849
      try {                                                                                                       // 850
        // Note that unlike in the corresponding server code, we never audit                                      // 851
        // that stubs check() their arguments.                                                                    // 852
        var stubReturnValue = DDP._CurrentInvocation.withValue(invocation, function () {                          // 853
          if (Meteor.isServer) {                                                                                  // 854
            // Because saveOriginals and retrieveOriginals aren't reentrant,                                      // 855
            // don't allow stubs to yield.                                                                        // 856
            return Meteor._noYieldsAllowed(function () {                                                          // 857
              // re-clone, so that the stub can't affect our caller's values                                      // 858
              return stub.apply(invocation, EJSON.clone(args));                                                   // 859
            });                                                                                                   // 860
          } else {                                                                                                // 861
            return stub.apply(invocation, EJSON.clone(args));                                                     // 862
          }                                                                                                       // 863
        });                                                                                                       // 864
      }                                                                                                           // 865
      catch (e) {                                                                                                 // 866
        var exception = e;                                                                                        // 867
      }                                                                                                           // 868
                                                                                                                  // 869
      if (!alreadyInSimulation)                                                                                   // 870
        self._retrieveAndStoreOriginals(methodId());                                                              // 871
    }                                                                                                             // 872
                                                                                                                  // 873
    // If we're in a simulation, stop and return the result we have,                                              // 874
    // rather than going on to do an RPC. If there was no stub,                                                   // 875
    // we'll end up returning undefined.                                                                          // 876
    if (alreadyInSimulation) {                                                                                    // 877
      if (callback) {                                                                                             // 878
        callback(exception, stubReturnValue);                                                                     // 879
        return undefined;                                                                                         // 880
      }                                                                                                           // 881
      if (exception)                                                                                              // 882
        throw exception;                                                                                          // 883
      return stubReturnValue;                                                                                     // 884
    }                                                                                                             // 885
                                                                                                                  // 886
    // If an exception occurred in a stub, and we're ignoring it                                                  // 887
    // because we're doing an RPC and want to use what the server                                                 // 888
    // returns instead, log it so the developer knows                                                             // 889
    // (unless they explicitly ask to see the error).                                                             // 890
    //                                                                                                            // 891
    // Tests can set the 'expected' flag on an exception so it won't                                              // 892
    // go to log.                                                                                                 // 893
    if (exception) {                                                                                              // 894
      if (options.throwStubExceptions) {                                                                          // 895
        throw exception;                                                                                          // 896
      } else if (!exception.expected) {                                                                           // 897
        Meteor._debug("Exception while simulating the effect of invoking '" +                                     // 898
          name + "'", exception, exception.stack);                                                                // 899
      }                                                                                                           // 900
    }                                                                                                             // 901
                                                                                                                  // 902
                                                                                                                  // 903
    // At this point we're definitely doing an RPC, and we're going to                                            // 904
    // return the value of the RPC to the caller.                                                                 // 905
                                                                                                                  // 906
    // If the caller didn't give a callback, decide what to do.                                                   // 907
    if (!callback) {                                                                                              // 908
      if (Meteor.isClient) {                                                                                      // 909
        // On the client, we don't have fibers, so we can't block. The                                            // 910
        // only thing we can do is to return undefined and discard the                                            // 911
        // result of the RPC. If an error occurred then print the error                                           // 912
        // to the console.                                                                                        // 913
        callback = function (err) {                                                                               // 914
          err && Meteor._debug("Error invoking Method '" + name + "':",                                           // 915
                               err.message);                                                                      // 916
        };                                                                                                        // 917
      } else {                                                                                                    // 918
        // On the server, make the function synchronous. Throw on                                                 // 919
        // errors, return on success.                                                                             // 920
        var future = new Future;                                                                                  // 921
        callback = future.resolver();                                                                             // 922
      }                                                                                                           // 923
    }                                                                                                             // 924
    // Send the RPC. Note that on the client, it is important that the                                            // 925
    // stub have finished before we send the RPC, so that we know we have                                         // 926
    // a complete list of which local documents the stub wrote.                                                   // 927
    var message = {                                                                                               // 928
      msg: 'method',                                                                                              // 929
      method: name,                                                                                               // 930
      params: args,                                                                                               // 931
      id: methodId()                                                                                              // 932
    };                                                                                                            // 933
                                                                                                                  // 934
    // Send the randomSeed only if we used it                                                                     // 935
    if (randomSeed !== null) {                                                                                    // 936
      message.randomSeed = randomSeed;                                                                            // 937
    }                                                                                                             // 938
                                                                                                                  // 939
    var methodInvoker = new MethodInvoker({                                                                       // 940
      methodId: methodId(),                                                                                       // 941
      callback: callback,                                                                                         // 942
      connection: self,                                                                                           // 943
      onResultReceived: options.onResultReceived,                                                                 // 944
      wait: !!options.wait,                                                                                       // 945
      message: message,                                                                                           // 946
      noRetry: !!options.noRetry                                                                                  // 947
    });                                                                                                           // 948
                                                                                                                  // 949
    if (options.wait) {                                                                                           // 950
      // It's a wait method! Wait methods go in their own block.                                                  // 951
      self._outstandingMethodBlocks.push(                                                                         // 952
        {wait: true, methods: [methodInvoker]});                                                                  // 953
    } else {                                                                                                      // 954
      // Not a wait method. Start a new block if the previous block was a wait                                    // 955
      // block, and add it to the last block of methods.                                                          // 956
      if (_.isEmpty(self._outstandingMethodBlocks) ||                                                             // 957
          _.last(self._outstandingMethodBlocks).wait)                                                             // 958
        self._outstandingMethodBlocks.push({wait: false, methods: []});                                           // 959
      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);                                          // 960
    }                                                                                                             // 961
                                                                                                                  // 962
    // If we added it to the first block, send it out now.                                                        // 963
    if (self._outstandingMethodBlocks.length === 1)                                                               // 964
      methodInvoker.sendMessage();                                                                                // 965
                                                                                                                  // 966
    // If we're using the default callback on the server,                                                         // 967
    // block waiting for the result.                                                                              // 968
    if (future) {                                                                                                 // 969
      return future.wait();                                                                                       // 970
    }                                                                                                             // 971
    return options.returnStubValue ? stubReturnValue : undefined;                                                 // 972
  },                                                                                                              // 973
                                                                                                                  // 974
  // Before calling a method stub, prepare all stores to track changes and allow                                  // 975
  // _retrieveAndStoreOriginals to get the original versions of changed                                           // 976
  // documents.                                                                                                   // 977
  _saveOriginals: function () {                                                                                   // 978
    var self = this;                                                                                              // 979
    if (!self._waitingForQuiescence())                                                                            // 980
      self._flushBufferedWrites();                                                                                // 981
    _.each(self._stores, function (s) {                                                                           // 982
      s.saveOriginals();                                                                                          // 983
    });                                                                                                           // 984
  },                                                                                                              // 985
  // Retrieves the original versions of all documents modified by the stub for                                    // 986
  // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                  // 987
  // by document) and _documentsWrittenByStub (keyed by method ID).                                               // 988
  _retrieveAndStoreOriginals: function (methodId) {                                                               // 989
    var self = this;                                                                                              // 990
    if (self._documentsWrittenByStub[methodId])                                                                   // 991
      throw new Error("Duplicate methodId in _retrieveAndStoreOriginals");                                        // 992
                                                                                                                  // 993
    var docsWritten = [];                                                                                         // 994
    _.each(self._stores, function (s, collection) {                                                               // 995
      var originals = s.retrieveOriginals();                                                                      // 996
      // not all stores define retrieveOriginals                                                                  // 997
      if (!originals)                                                                                             // 998
        return;                                                                                                   // 999
      originals.forEach(function (doc, id) {                                                                      // 1000
        docsWritten.push({collection: collection, id: id});                                                       // 1001
        if (!_.has(self._serverDocuments, collection))                                                            // 1002
          self._serverDocuments[collection] = new MongoIDMap;                                                     // 1003
        var serverDoc = self._serverDocuments[collection].setDefault(id, {});                                     // 1004
        if (serverDoc.writtenByStubs) {                                                                           // 1005
          // We're not the first stub to write this doc. Just add our method ID                                   // 1006
          // to the record.                                                                                       // 1007
          serverDoc.writtenByStubs[methodId] = true;                                                              // 1008
        } else {                                                                                                  // 1009
          // First stub! Save the original value and our method ID.                                               // 1010
          serverDoc.document = doc;                                                                               // 1011
          serverDoc.flushCallbacks = [];                                                                          // 1012
          serverDoc.writtenByStubs = {};                                                                          // 1013
          serverDoc.writtenByStubs[methodId] = true;                                                              // 1014
        }                                                                                                         // 1015
      });                                                                                                         // 1016
    });                                                                                                           // 1017
    if (!_.isEmpty(docsWritten)) {                                                                                // 1018
      self._documentsWrittenByStub[methodId] = docsWritten;                                                       // 1019
    }                                                                                                             // 1020
  },                                                                                                              // 1021
                                                                                                                  // 1022
  // This is very much a private function we use to make the tests                                                // 1023
  // take up fewer server resources after they complete.                                                          // 1024
  _unsubscribeAll: function () {                                                                                  // 1025
    var self = this;                                                                                              // 1026
    _.each(_.clone(self._subscriptions), function (sub, id) {                                                     // 1027
      // Avoid killing the autoupdate subscription so that developers                                             // 1028
      // still get hot code pushes when writing tests.                                                            // 1029
      //                                                                                                          // 1030
      // XXX it's a hack to encode knowledge about autoupdate here,                                               // 1031
      // but it doesn't seem worth it yet to have a special API for                                               // 1032
      // subscriptions to preserve after unit tests.                                                              // 1033
      if (sub.name !== 'meteor_autoupdate_clientVersions') {                                                      // 1034
        self._subscriptions[id].stop();                                                                           // 1035
      }                                                                                                           // 1036
    });                                                                                                           // 1037
  },                                                                                                              // 1038
                                                                                                                  // 1039
  // Sends the DDP stringification of the given message object                                                    // 1040
  _send: function (obj) {                                                                                         // 1041
    var self = this;                                                                                              // 1042
    self._stream.send(DDPCommon.stringifyDDP(obj));                                                               // 1043
  },                                                                                                              // 1044
                                                                                                                  // 1045
  // We detected via DDP-level heartbeats that we've lost the                                                     // 1046
  // connection.  Unlike `disconnect` or `close`, a lost connection                                               // 1047
  // will be automatically retried.                                                                               // 1048
  _lostConnection: function (error) {                                                                             // 1049
    var self = this;                                                                                              // 1050
    self._stream._lostConnection(error);                                                                          // 1051
  },                                                                                                              // 1052
                                                                                                                  // 1053
  /**                                                                                                             // 1054
   * @summary Get the current connection status. A reactive data source.                                          // 1055
   * @locus Client                                                                                                // 1056
   * @memberOf Meteor                                                                                             // 1057
   * @importFromPackage meteor                                                                                    // 1058
   */                                                                                                             // 1059
  status: function (/*passthrough args*/) {                                                                       // 1060
    var self = this;                                                                                              // 1061
    return self._stream.status.apply(self._stream, arguments);                                                    // 1062
  },                                                                                                              // 1063
                                                                                                                  // 1064
  /**                                                                                                             // 1065
   * @summary Force an immediate reconnection attempt if the client is not connected to the server.               // 1066
                                                                                                                  // 1067
  This method does nothing if the client is already connected.                                                    // 1068
   * @locus Client                                                                                                // 1069
   * @memberOf Meteor                                                                                             // 1070
   * @importFromPackage meteor                                                                                    // 1071
   */                                                                                                             // 1072
  reconnect: function (/*passthrough args*/) {                                                                    // 1073
    var self = this;                                                                                              // 1074
    return self._stream.reconnect.apply(self._stream, arguments);                                                 // 1075
  },                                                                                                              // 1076
                                                                                                                  // 1077
  /**                                                                                                             // 1078
   * @summary Disconnect the client from the server.                                                              // 1079
   * @locus Client                                                                                                // 1080
   * @memberOf Meteor                                                                                             // 1081
   * @importFromPackage meteor                                                                                    // 1082
   */                                                                                                             // 1083
  disconnect: function (/*passthrough args*/) {                                                                   // 1084
    var self = this;                                                                                              // 1085
    return self._stream.disconnect.apply(self._stream, arguments);                                                // 1086
  },                                                                                                              // 1087
                                                                                                                  // 1088
  close: function () {                                                                                            // 1089
    var self = this;                                                                                              // 1090
    return self._stream.disconnect({_permanent: true});                                                           // 1091
  },                                                                                                              // 1092
                                                                                                                  // 1093
  ///                                                                                                             // 1094
  /// Reactive user system                                                                                        // 1095
  ///                                                                                                             // 1096
  userId: function () {                                                                                           // 1097
    var self = this;                                                                                              // 1098
    if (self._userIdDeps)                                                                                         // 1099
      self._userIdDeps.depend();                                                                                  // 1100
    return self._userId;                                                                                          // 1101
  },                                                                                                              // 1102
                                                                                                                  // 1103
  setUserId: function (userId) {                                                                                  // 1104
    var self = this;                                                                                              // 1105
    // Avoid invalidating dependents if setUserId is called with current value.                                   // 1106
    if (self._userId === userId)                                                                                  // 1107
      return;                                                                                                     // 1108
    self._userId = userId;                                                                                        // 1109
    if (self._userIdDeps)                                                                                         // 1110
      self._userIdDeps.changed();                                                                                 // 1111
  },                                                                                                              // 1112
                                                                                                                  // 1113
  // Returns true if we are in a state after reconnect of waiting for subs to be                                  // 1114
  // revived or early methods to finish their data, or we are waiting for a                                       // 1115
  // "wait" method to finish.                                                                                     // 1116
  _waitingForQuiescence: function () {                                                                            // 1117
    var self = this;                                                                                              // 1118
    return (! _.isEmpty(self._subsBeingRevived) ||                                                                // 1119
            ! _.isEmpty(self._methodsBlockingQuiescence));                                                        // 1120
  },                                                                                                              // 1121
                                                                                                                  // 1122
  // Returns true if any method whose message has been sent to the server has                                     // 1123
  // not yet invoked its user callback.                                                                           // 1124
  _anyMethodsAreOutstanding: function () {                                                                        // 1125
    var self = this;                                                                                              // 1126
    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));                                                   // 1127
  },                                                                                                              // 1128
                                                                                                                  // 1129
  _livedata_connected: function (msg) {                                                                           // 1130
    var self = this;                                                                                              // 1131
                                                                                                                  // 1132
    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {                                              // 1133
      self._heartbeat = new DDPCommon.Heartbeat({                                                                 // 1134
        heartbeatInterval: self._heartbeatInterval,                                                               // 1135
        heartbeatTimeout: self._heartbeatTimeout,                                                                 // 1136
        onTimeout: function () {                                                                                  // 1137
          self._lostConnection(                                                                                   // 1138
            new DDP.ConnectionError("DDP heartbeat timed out"));                                                  // 1139
        },                                                                                                        // 1140
        sendPing: function () {                                                                                   // 1141
          self._send({msg: 'ping'});                                                                              // 1142
        }                                                                                                         // 1143
      });                                                                                                         // 1144
      self._heartbeat.start();                                                                                    // 1145
    }                                                                                                             // 1146
                                                                                                                  // 1147
    // If this is a reconnect, we'll have to reset all stores.                                                    // 1148
    if (self._lastSessionId)                                                                                      // 1149
      self._resetStores = true;                                                                                   // 1150
                                                                                                                  // 1151
    if (typeof (msg.session) === "string") {                                                                      // 1152
      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);                                   // 1153
      self._lastSessionId = msg.session;                                                                          // 1154
    }                                                                                                             // 1155
                                                                                                                  // 1156
    if (reconnectedToPreviousSession) {                                                                           // 1157
      // Successful reconnection -- pick up where we left off.  Note that right                                   // 1158
      // now, this never happens: the server never connects us to a previous                                      // 1159
      // session, because DDP doesn't provide enough data for the server to know                                  // 1160
      // what messages the client has processed. We need to improve DDP to make                                   // 1161
      // this possible, at which point we'll probably need more code here.                                        // 1162
      return;                                                                                                     // 1163
    }                                                                                                             // 1164
                                                                                                                  // 1165
    // Server doesn't have our data any more. Re-sync a new session.                                              // 1166
                                                                                                                  // 1167
    // Forget about messages we were buffering for unknown collections. They'll                                   // 1168
    // be resent if still relevant.                                                                               // 1169
    self._updatesForUnknownStores = {};                                                                           // 1170
                                                                                                                  // 1171
    if (self._resetStores) {                                                                                      // 1172
      // Forget about the effects of stubs. We'll be resetting all collections                                    // 1173
      // anyway.                                                                                                  // 1174
      self._documentsWrittenByStub = {};                                                                          // 1175
      self._serverDocuments = {};                                                                                 // 1176
    }                                                                                                             // 1177
                                                                                                                  // 1178
    // Clear _afterUpdateCallbacks.                                                                               // 1179
    self._afterUpdateCallbacks = [];                                                                              // 1180
                                                                                                                  // 1181
    // Mark all named subscriptions which are ready (ie, we already called the                                    // 1182
    // ready callback) as needing to be revived.                                                                  // 1183
    // XXX We should also block reconnect quiescence until unnamed subscriptions                                  // 1184
    //     (eg, autopublish) are done re-publishing to avoid flicker!                                             // 1185
    self._subsBeingRevived = {};                                                                                  // 1186
    _.each(self._subscriptions, function (sub, id) {                                                              // 1187
      if (sub.ready)                                                                                              // 1188
        self._subsBeingRevived[id] = true;                                                                        // 1189
    });                                                                                                           // 1190
                                                                                                                  // 1191
    // Arrange for "half-finished" methods to have their callbacks run, and                                       // 1192
    // track methods that were sent on this connection so that we don't                                           // 1193
    // quiesce until they are all done.                                                                           // 1194
    //                                                                                                            // 1195
    // Start by clearing _methodsBlockingQuiescence: methods sent before                                          // 1196
    // reconnect don't matter, and any "wait" methods sent on the new connection                                  // 1197
    // that we drop here will be restored by the loop below.                                                      // 1198
    self._methodsBlockingQuiescence = {};                                                                         // 1199
    if (self._resetStores) {                                                                                      // 1200
      _.each(self._methodInvokers, function (invoker) {                                                           // 1201
        if (invoker.gotResult()) {                                                                                // 1202
          // This method already got its result, but it didn't call its callback                                  // 1203
          // because its data didn't become visible. We did not resend the                                        // 1204
          // method RPC. We'll call its callback when we get a full quiesce,                                      // 1205
          // since that's as close as we'll get to "data must be visible".                                        // 1206
          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));                                  // 1207
        } else if (invoker.sentMessage) {                                                                         // 1208
          // This method has been sent on this connection (maybe as a resend                                      // 1209
          // from the last connection, maybe from onReconnect, maybe just very                                    // 1210
          // quickly before processing the connected message).                                                    // 1211
          //                                                                                                      // 1212
          // We don't need to do anything special to ensure its callbacks get                                     // 1213
          // called, but we'll count it as a method which is preventing                                           // 1214
          // reconnect quiescence. (eg, it might be a login method that was run                                   // 1215
          // from onReconnect, and we don't want to see flicker by seeing a                                       // 1216
          // logged-out state.)                                                                                   // 1217
          self._methodsBlockingQuiescence[invoker.methodId] = true;                                               // 1218
        }                                                                                                         // 1219
      });                                                                                                         // 1220
    }                                                                                                             // 1221
                                                                                                                  // 1222
    self._messagesBufferedUntilQuiescence = [];                                                                   // 1223
                                                                                                                  // 1224
    // If we're not waiting on any methods or subs, we can reset the stores and                                   // 1225
    // call the callbacks immediately.                                                                            // 1226
    if (!self._waitingForQuiescence()) {                                                                          // 1227
      if (self._resetStores) {                                                                                    // 1228
        _.each(self._stores, function (s) {                                                                       // 1229
          s.beginUpdate(0, true);                                                                                 // 1230
          s.endUpdate();                                                                                          // 1231
        });                                                                                                       // 1232
        self._resetStores = false;                                                                                // 1233
      }                                                                                                           // 1234
      self._runAfterUpdateCallbacks();                                                                            // 1235
    }                                                                                                             // 1236
  },                                                                                                              // 1237
                                                                                                                  // 1238
                                                                                                                  // 1239
  _processOneDataMessage: function (msg, updates) {                                                               // 1240
    var self = this;                                                                                              // 1241
    // Using underscore here so as not to need to capitalize.                                                     // 1242
    self['_process_' + msg.msg](msg, updates);                                                                    // 1243
  },                                                                                                              // 1244
                                                                                                                  // 1245
                                                                                                                  // 1246
  _livedata_data: function (msg) {                                                                                // 1247
    var self = this;                                                                                              // 1248
                                                                                                                  // 1249
    if (self._waitingForQuiescence()) {                                                                           // 1250
      self._messagesBufferedUntilQuiescence.push(msg);                                                            // 1251
                                                                                                                  // 1252
      if (msg.msg === "nosub")                                                                                    // 1253
        delete self._subsBeingRevived[msg.id];                                                                    // 1254
                                                                                                                  // 1255
      _.each(msg.subs || [], function (subId) {                                                                   // 1256
        delete self._subsBeingRevived[subId];                                                                     // 1257
      });                                                                                                         // 1258
      _.each(msg.methods || [], function (methodId) {                                                             // 1259
        delete self._methodsBlockingQuiescence[methodId];                                                         // 1260
      });                                                                                                         // 1261
                                                                                                                  // 1262
      if (self._waitingForQuiescence())                                                                           // 1263
        return;                                                                                                   // 1264
                                                                                                                  // 1265
      // No methods or subs are blocking quiescence!                                                              // 1266
      // We'll now process and all of our buffered messages, reset all stores,                                    // 1267
      // and apply them all at once.                                                                              // 1268
      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {                                      // 1269
        self._processOneDataMessage(bufferedMsg, self._bufferedWrites);                                           // 1270
      });                                                                                                         // 1271
      self._messagesBufferedUntilQuiescence = [];                                                                 // 1272
    } else {                                                                                                      // 1273
      self._processOneDataMessage(msg, self._bufferedWrites);                                                     // 1274
    }                                                                                                             // 1275
                                                                                                                  // 1276
    // Immediately flush writes when:                                                                             // 1277
    //  1. Buffering is disabled. Or;                                                                             // 1278
    //  2. any non-(added/changed/removed) message arrives.                                                       // 1279
    var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg);                                      // 1280
    if (self._bufferedWritesInterval === 0 || !standardWrite) {                                                   // 1281
      self._flushBufferedWrites();                                                                                // 1282
      return;                                                                                                     // 1283
    }                                                                                                             // 1284
                                                                                                                  // 1285
    if (self._bufferedWritesFlushAt === null) {                                                                   // 1286
      self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;                            // 1287
    }                                                                                                             // 1288
    else if (self._bufferedWritesFlushAt < new Date().valueOf()) {                                                // 1289
      self._flushBufferedWrites();                                                                                // 1290
      return;                                                                                                     // 1291
    }                                                                                                             // 1292
                                                                                                                  // 1293
    if (self._bufferedWritesFlushHandle) {                                                                        // 1294
      clearTimeout(self._bufferedWritesFlushHandle);                                                              // 1295
    }                                                                                                             // 1296
    self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites,                                      // 1297
                                                      self._bufferedWritesInterval);                              // 1298
  },                                                                                                              // 1299
                                                                                                                  // 1300
  _flushBufferedWrites: function () {                                                                             // 1301
    var self = this;                                                                                              // 1302
    if (self._bufferedWritesFlushHandle) {                                                                        // 1303
      clearTimeout(self._bufferedWritesFlushHandle);                                                              // 1304
      self._bufferedWritesFlushHandle = null;                                                                     // 1305
    }                                                                                                             // 1306
                                                                                                                  // 1307
    self._bufferedWritesFlushAt = null;                                                                           // 1308
    // We need to clear the buffer before passing it to                                                           // 1309
    //  performWrites. As there's no guarantee that it                                                            // 1310
    //  will exit cleanly.                                                                                        // 1311
    var writes = self._bufferedWrites;                                                                            // 1312
    self._bufferedWrites = {};                                                                                    // 1313
    self._performWrites(writes);                                                                                  // 1314
  },                                                                                                              // 1315
                                                                                                                  // 1316
  _performWrites: function(updates){                                                                              // 1317
    var self = this;                                                                                              // 1318
                                                                                                                  // 1319
    if (self._resetStores || !_.isEmpty(updates)) {                                                               // 1320
      // Begin a transactional update of each store.                                                              // 1321
      _.each(self._stores, function (s, storeName) {                                                              // 1322
        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,                                  // 1323
                      self._resetStores);                                                                         // 1324
      });                                                                                                         // 1325
      self._resetStores = false;                                                                                  // 1326
                                                                                                                  // 1327
      _.each(updates, function (updateMessages, storeName) {                                                      // 1328
        var store = self._stores[storeName];                                                                      // 1329
        if (store) {                                                                                              // 1330
          _.each(updateMessages, function (updateMessage) {                                                       // 1331
            store.update(updateMessage);                                                                          // 1332
          });                                                                                                     // 1333
        } else {                                                                                                  // 1334
          // Nobody's listening for this data. Queue it up until                                                  // 1335
          // someone wants it.                                                                                    // 1336
          // XXX memory use will grow without bound if you forget to                                              // 1337
          // create a collection or just don't care about it... going                                             // 1338
          // to have to do something about that.                                                                  // 1339
          if (!_.has(self._updatesForUnknownStores, storeName))                                                   // 1340
            self._updatesForUnknownStores[storeName] = [];                                                        // 1341
          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],                                    // 1342
                                     updateMessages);                                                             // 1343
        }                                                                                                         // 1344
      });                                                                                                         // 1345
                                                                                                                  // 1346
      // End update transaction.                                                                                  // 1347
      _.each(self._stores, function (s) { s.endUpdate(); });                                                      // 1348
    }                                                                                                             // 1349
                                                                                                                  // 1350
    self._runAfterUpdateCallbacks();                                                                              // 1351
  },                                                                                                              // 1352
                                                                                                                  // 1353
  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                       // 1354
  // relevant docs have been flushed, as well as dataVisible callbacks at                                         // 1355
  // reconnect-quiescence time.                                                                                   // 1356
  _runAfterUpdateCallbacks: function () {                                                                         // 1357
    var self = this;                                                                                              // 1358
    var callbacks = self._afterUpdateCallbacks;                                                                   // 1359
    self._afterUpdateCallbacks = [];                                                                              // 1360
    _.each(callbacks, function (c) {                                                                              // 1361
      c();                                                                                                        // 1362
    });                                                                                                           // 1363
  },                                                                                                              // 1364
                                                                                                                  // 1365
  _pushUpdate: function (updates, collection, msg) {                                                              // 1366
    var self = this;                                                                                              // 1367
    if (!_.has(updates, collection)) {                                                                            // 1368
      updates[collection] = [];                                                                                   // 1369
    }                                                                                                             // 1370
    updates[collection].push(msg);                                                                                // 1371
  },                                                                                                              // 1372
                                                                                                                  // 1373
  _getServerDoc: function (collection, id) {                                                                      // 1374
    var self = this;                                                                                              // 1375
    if (!_.has(self._serverDocuments, collection))                                                                // 1376
      return null;                                                                                                // 1377
    var serverDocsForCollection = self._serverDocuments[collection];                                              // 1378
    return serverDocsForCollection.get(id) || null;                                                               // 1379
  },                                                                                                              // 1380
                                                                                                                  // 1381
  _process_added: function (msg, updates) {                                                                       // 1382
    var self = this;                                                                                              // 1383
    var id = MongoID.idParse(msg.id);                                                                             // 1384
    var serverDoc = self._getServerDoc(msg.collection, id);                                                       // 1385
    if (serverDoc) {                                                                                              // 1386
      // Some outstanding stub wrote here.                                                                        // 1387
      var isExisting = (serverDoc.document !== undefined);                                                        // 1388
                                                                                                                  // 1389
      serverDoc.document = msg.fields || {};                                                                      // 1390
      serverDoc.document._id = id;                                                                                // 1391
                                                                                                                  // 1392
      if (self._resetStores) {                                                                                    // 1393
        // During reconnect the server is sending adds for existing ids.                                          // 1394
        // Always push an update so that document stays in the store after                                        // 1395
        // reset. Use current version of the document for this update, so                                         // 1396
        // that stub-written values are preserved.                                                                // 1397
        var currentDoc = self._stores[msg.collection].getDoc(msg.id);                                             // 1398
        if (currentDoc !== undefined)                                                                             // 1399
          msg.fields = currentDoc;                                                                                // 1400
                                                                                                                  // 1401
        self._pushUpdate(updates, msg.collection, msg);                                                           // 1402
      } else if (isExisting) {                                                                                    // 1403
        throw new Error("Server sent add for existing id: " + msg.id);                                            // 1404
      }                                                                                                           // 1405
    } else {                                                                                                      // 1406
      self._pushUpdate(updates, msg.collection, msg);                                                             // 1407
    }                                                                                                             // 1408
  },                                                                                                              // 1409
                                                                                                                  // 1410
  _process_changed: function (msg, updates) {                                                                     // 1411
    var self = this;                                                                                              // 1412
    var serverDoc = self._getServerDoc(                                                                           // 1413
      msg.collection, MongoID.idParse(msg.id));                                                                   // 1414
    if (serverDoc) {                                                                                              // 1415
      if (serverDoc.document === undefined)                                                                       // 1416
        throw new Error("Server sent changed for nonexisting id: " + msg.id);                                     // 1417
      DiffSequence.applyChanges(serverDoc.document, msg.fields);                                                  // 1418
    } else {                                                                                                      // 1419
      self._pushUpdate(updates, msg.collection, msg);                                                             // 1420
    }                                                                                                             // 1421
  },                                                                                                              // 1422
                                                                                                                  // 1423
  _process_removed: function (msg, updates) {                                                                     // 1424
    var self = this;                                                                                              // 1425
    var serverDoc = self._getServerDoc(                                                                           // 1426
      msg.collection, MongoID.idParse(msg.id));                                                                   // 1427
    if (serverDoc) {                                                                                              // 1428
      // Some outstanding stub wrote here.                                                                        // 1429
      if (serverDoc.document === undefined)                                                                       // 1430
        throw new Error("Server sent removed for nonexisting id:" + msg.id);                                      // 1431
      serverDoc.document = undefined;                                                                             // 1432
    } else {                                                                                                      // 1433
      self._pushUpdate(updates, msg.collection, {                                                                 // 1434
        msg: 'removed',                                                                                           // 1435
        collection: msg.collection,                                                                               // 1436
        id: msg.id                                                                                                // 1437
      });                                                                                                         // 1438
    }                                                                                                             // 1439
  },                                                                                                              // 1440
                                                                                                                  // 1441
  _process_updated: function (msg, updates) {                                                                     // 1442
    var self = this;                                                                                              // 1443
    // Process "method done" messages.                                                                            // 1444
    _.each(msg.methods, function (methodId) {                                                                     // 1445
      _.each(self._documentsWrittenByStub[methodId], function (written) {                                         // 1446
        var serverDoc = self._getServerDoc(written.collection, written.id);                                       // 1447
        if (!serverDoc)                                                                                           // 1448
          throw new Error("Lost serverDoc for " + JSON.stringify(written));                                       // 1449
        if (!serverDoc.writtenByStubs[methodId])                                                                  // 1450
          throw new Error("Doc " + JSON.stringify(written) +                                                      // 1451
                          " not written by  method " + methodId);                                                 // 1452
        delete serverDoc.writtenByStubs[methodId];                                                                // 1453
        if (_.isEmpty(serverDoc.writtenByStubs)) {                                                                // 1454
          // All methods whose stubs wrote this method have completed! We can                                     // 1455
          // now copy the saved document to the database (reverting the stub's                                    // 1456
          // change if the server did not write to this object, or applying the                                   // 1457
          // server's writes if it did).                                                                          // 1458
                                                                                                                  // 1459
          // This is a fake ddp 'replace' message.  It's just for talking                                         // 1460
          // between livedata connections and minimongo.  (We have to stringify                                   // 1461
          // the ID because it's supposed to look like a wire message.)                                           // 1462
          self._pushUpdate(updates, written.collection, {                                                         // 1463
            msg: 'replace',                                                                                       // 1464
            id: MongoID.idStringify(written.id),                                                                  // 1465
            replace: serverDoc.document                                                                           // 1466
          });                                                                                                     // 1467
          // Call all flush callbacks.                                                                            // 1468
          _.each(serverDoc.flushCallbacks, function (c) {                                                         // 1469
            c();                                                                                                  // 1470
          });                                                                                                     // 1471
                                                                                                                  // 1472
          // Delete this completed serverDocument. Don't bother to GC empty                                       // 1473
          // IdMaps inside self._serverDocuments, since there probably aren't                                     // 1474
          // many collections and they'll be written repeatedly.                                                  // 1475
          self._serverDocuments[written.collection].remove(written.id);                                           // 1476
        }                                                                                                         // 1477
      });                                                                                                         // 1478
      delete self._documentsWrittenByStub[methodId];                                                              // 1479
                                                                                                                  // 1480
      // We want to call the data-written callback, but we can't do so until all                                  // 1481
      // currently buffered messages are flushed.                                                                 // 1482
      var callbackInvoker = self._methodInvokers[methodId];                                                       // 1483
      if (!callbackInvoker)                                                                                       // 1484
        throw new Error("No callback invoker for method " + methodId);                                            // 1485
      self._runWhenAllServerDocsAreFlushed(                                                                       // 1486
        _.bind(callbackInvoker.dataVisible, callbackInvoker));                                                    // 1487
    });                                                                                                           // 1488
  },                                                                                                              // 1489
                                                                                                                  // 1490
  _process_ready: function (msg, updates) {                                                                       // 1491
    var self = this;                                                                                              // 1492
    // Process "sub ready" messages. "sub ready" messages don't take effect                                       // 1493
    // until all current server documents have been flushed to the local                                          // 1494
    // database. We can use a write fence to implement this.                                                      // 1495
    _.each(msg.subs, function (subId) {                                                                           // 1496
      self._runWhenAllServerDocsAreFlushed(function () {                                                          // 1497
        var subRecord = self._subscriptions[subId];                                                               // 1498
        // Did we already unsubscribe?                                                                            // 1499
        if (!subRecord)                                                                                           // 1500
          return;                                                                                                 // 1501
        // Did we already receive a ready message? (Oops!)                                                        // 1502
        if (subRecord.ready)                                                                                      // 1503
          return;                                                                                                 // 1504
        subRecord.ready = true;                                                                                   // 1505
        subRecord.readyCallback && subRecord.readyCallback();                                                     // 1506
        subRecord.readyDeps.changed();                                                                            // 1507
      });                                                                                                         // 1508
    });                                                                                                           // 1509
  },                                                                                                              // 1510
                                                                                                                  // 1511
  // Ensures that "f" will be called after all documents currently in                                             // 1512
  // _serverDocuments have been written to the local cache. f will not be called                                  // 1513
  // if the connection is lost before then!                                                                       // 1514
  _runWhenAllServerDocsAreFlushed: function (f) {                                                                 // 1515
    var self = this;                                                                                              // 1516
    var runFAfterUpdates = function () {                                                                          // 1517
      self._afterUpdateCallbacks.push(f);                                                                         // 1518
    };                                                                                                            // 1519
    var unflushedServerDocCount = 0;                                                                              // 1520
    var onServerDocFlush = function () {                                                                          // 1521
      --unflushedServerDocCount;                                                                                  // 1522
      if (unflushedServerDocCount === 0) {                                                                        // 1523
        // This was the last doc to flush! Arrange to run f after the updates                                     // 1524
        // have been applied.                                                                                     // 1525
        runFAfterUpdates();                                                                                       // 1526
      }                                                                                                           // 1527
    };                                                                                                            // 1528
    _.each(self._serverDocuments, function (collectionDocs) {                                                     // 1529
      collectionDocs.forEach(function (serverDoc) {                                                               // 1530
        var writtenByStubForAMethodWithSentMessage = _.any(                                                       // 1531
          serverDoc.writtenByStubs, function (dummy, methodId) {                                                  // 1532
            var invoker = self._methodInvokers[methodId];                                                         // 1533
            return invoker && invoker.sentMessage;                                                                // 1534
          });                                                                                                     // 1535
        if (writtenByStubForAMethodWithSentMessage) {                                                             // 1536
          ++unflushedServerDocCount;                                                                              // 1537
          serverDoc.flushCallbacks.push(onServerDocFlush);                                                        // 1538
        }                                                                                                         // 1539
      });                                                                                                         // 1540
    });                                                                                                           // 1541
    if (unflushedServerDocCount === 0) {                                                                          // 1542
      // There aren't any buffered docs --- we can call f as soon as the current                                  // 1543
      // round of updates is applied!                                                                             // 1544
      runFAfterUpdates();                                                                                         // 1545
    }                                                                                                             // 1546
  },                                                                                                              // 1547
                                                                                                                  // 1548
  _livedata_nosub: function (msg) {                                                                               // 1549
    var self = this;                                                                                              // 1550
                                                                                                                  // 1551
    // First pass it through _livedata_data, which only uses it to help get                                       // 1552
    // towards quiescence.                                                                                        // 1553
    self._livedata_data(msg);                                                                                     // 1554
                                                                                                                  // 1555
    // Do the rest of our processing immediately, with no                                                         // 1556
    // buffering-until-quiescence.                                                                                // 1557
                                                                                                                  // 1558
    // we weren't subbed anyway, or we initiated the unsub.                                                       // 1559
    if (!_.has(self._subscriptions, msg.id))                                                                      // 1560
      return;                                                                                                     // 1561
                                                                                                                  // 1562
    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1563
    var errorCallback = self._subscriptions[msg.id].errorCallback;                                                // 1564
    var stopCallback = self._subscriptions[msg.id].stopCallback;                                                  // 1565
                                                                                                                  // 1566
    self._subscriptions[msg.id].remove();                                                                         // 1567
                                                                                                                  // 1568
    var meteorErrorFromMsg = function (msgArg) {                                                                  // 1569
      return msgArg && msgArg.error && new Meteor.Error(                                                          // 1570
        msgArg.error.error, msgArg.error.reason, msgArg.error.details);                                           // 1571
    }                                                                                                             // 1572
                                                                                                                  // 1573
    // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                     // 1574
    if (errorCallback && msg.error) {                                                                             // 1575
      errorCallback(meteorErrorFromMsg(msg));                                                                     // 1576
    }                                                                                                             // 1577
                                                                                                                  // 1578
    if (stopCallback) {                                                                                           // 1579
      stopCallback(meteorErrorFromMsg(msg));                                                                      // 1580
    }                                                                                                             // 1581
  },                                                                                                              // 1582
                                                                                                                  // 1583
  _process_nosub: function () {                                                                                   // 1584
    // This is called as part of the "buffer until quiescence" process, but                                       // 1585
    // nosub's effect is always immediate. It only goes in the buffer at all                                      // 1586
    // because it's possible for a nosub to be the thing that triggers                                            // 1587
    // quiescence, if we were waiting for a sub to be revived and it dies                                         // 1588
    // instead.                                                                                                   // 1589
  },                                                                                                              // 1590
                                                                                                                  // 1591
  _livedata_result: function (msg) {                                                                              // 1592
    // id, result or error. error has error (code), reason, details                                               // 1593
                                                                                                                  // 1594
    var self = this;                                                                                              // 1595
                                                                                                                  // 1596
    // Lets make sure there are no buffered writes before returning result.                                       // 1597
    if (!_.isEmpty(self._bufferedWrites)) {                                                                       // 1598
      self._flushBufferedWrites();                                                                                // 1599
    }                                                                                                             // 1600
                                                                                                                  // 1601
    // find the outstanding request                                                                               // 1602
    // should be O(1) in nearly all realistic use cases                                                           // 1603
    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1604
      Meteor._debug("Received method result but no methods outstanding");                                         // 1605
      return;                                                                                                     // 1606
    }                                                                                                             // 1607
    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                            // 1608
    var m;                                                                                                        // 1609
    for (var i = 0; i < currentMethodBlock.length; i++) {                                                         // 1610
      m = currentMethodBlock[i];                                                                                  // 1611
      if (m.methodId === msg.id)                                                                                  // 1612
        break;                                                                                                    // 1613
    }                                                                                                             // 1614
                                                                                                                  // 1615
    if (!m) {                                                                                                     // 1616
      Meteor._debug("Can't match method response to original method call", msg);                                  // 1617
      return;                                                                                                     // 1618
    }                                                                                                             // 1619
                                                                                                                  // 1620
    // Remove from current method block. This may leave the block empty, but we                                   // 1621
    // don't move on to the next block until the callback has been delivered, in                                  // 1622
    // _outstandingMethodFinished.                                                                                // 1623
    currentMethodBlock.splice(i, 1);                                                                              // 1624
                                                                                                                  // 1625
    if (_.has(msg, 'error')) {                                                                                    // 1626
      m.receiveResult(new Meteor.Error(                                                                           // 1627
        msg.error.error, msg.error.reason,                                                                        // 1628
        msg.error.details));                                                                                      // 1629
    } else {                                                                                                      // 1630
      // msg.result may be undefined if the method didn't return a                                                // 1631
      // value                                                                                                    // 1632
      m.receiveResult(undefined, msg.result);                                                                     // 1633
    }                                                                                                             // 1634
  },                                                                                                              // 1635
                                                                                                                  // 1636
  // Called by MethodInvoker after a method's callback is invoked.  If this was                                   // 1637
  // the last outstanding method in the current block, runs the next block. If                                    // 1638
  // there are no more methods, consider accepting a hot code push.                                               // 1639
  _outstandingMethodFinished: function () {                                                                       // 1640
    var self = this;                                                                                              // 1641
    if (self._anyMethodsAreOutstanding())                                                                         // 1642
      return;                                                                                                     // 1643
                                                                                                                  // 1644
    // No methods are outstanding. This should mean that the first block of                                       // 1645
    // methods is empty. (Or it might not exist, if this was a method that                                        // 1646
    // half-finished before disconnect/reconnect.)                                                                // 1647
    if (! _.isEmpty(self._outstandingMethodBlocks)) {                                                             // 1648
      var firstBlock = self._outstandingMethodBlocks.shift();                                                     // 1649
      if (! _.isEmpty(firstBlock.methods))                                                                        // 1650
        throw new Error("No methods outstanding but nonempty block: " +                                           // 1651
                        JSON.stringify(firstBlock));                                                              // 1652
                                                                                                                  // 1653
      // Send the outstanding methods now in the first block.                                                     // 1654
      if (!_.isEmpty(self._outstandingMethodBlocks))                                                              // 1655
        self._sendOutstandingMethods();                                                                           // 1656
    }                                                                                                             // 1657
                                                                                                                  // 1658
    // Maybe accept a hot code push.                                                                              // 1659
    self._maybeMigrate();                                                                                         // 1660
  },                                                                                                              // 1661
                                                                                                                  // 1662
  // Sends messages for all the methods in the first block in                                                     // 1663
  // _outstandingMethodBlocks.                                                                                    // 1664
  _sendOutstandingMethods: function() {                                                                           // 1665
    var self = this;                                                                                              // 1666
    if (_.isEmpty(self._outstandingMethodBlocks))                                                                 // 1667
      return;                                                                                                     // 1668
    _.each(self._outstandingMethodBlocks[0].methods, function (m) {                                               // 1669
      m.sendMessage();                                                                                            // 1670
    });                                                                                                           // 1671
  },                                                                                                              // 1672
                                                                                                                  // 1673
  _livedata_error: function (msg) {                                                                               // 1674
    Meteor._debug("Received error from server: ", msg.reason);                                                    // 1675
    if (msg.offendingMessage)                                                                                     // 1676
      Meteor._debug("For: ", msg.offendingMessage);                                                               // 1677
  },                                                                                                              // 1678
                                                                                                                  // 1679
  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {                                              // 1680
    var self = this;                                                                                              // 1681
    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;                                               // 1682
    self._outstandingMethodBlocks = [];                                                                           // 1683
                                                                                                                  // 1684
    self.onReconnect();                                                                                           // 1685
                                                                                                                  // 1686
    if (_.isEmpty(oldOutstandingMethodBlocks))                                                                    // 1687
      return;                                                                                                     // 1688
                                                                                                                  // 1689
    // We have at least one block worth of old outstanding methods to try                                         // 1690
    // again. First: did onReconnect actually send anything? If not, we just                                      // 1691
    // restore all outstanding methods and run the first block.                                                   // 1692
    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                               // 1693
      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;                                                 // 1694
      self._sendOutstandingMethods();                                                                             // 1695
      return;                                                                                                     // 1696
    }                                                                                                             // 1697
                                                                                                                  // 1698
    // OK, there are blocks on both sides. Special case: merge the last block of                                  // 1699
    // the reconnect methods with the first block of the original methods, if                                     // 1700
    // neither of them are "wait" blocks.                                                                         // 1701
    if (!_.last(self._outstandingMethodBlocks).wait &&                                                            // 1702
        !oldOutstandingMethodBlocks[0].wait) {                                                                    // 1703
      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {                                                // 1704
        _.last(self._outstandingMethodBlocks).methods.push(m);                                                    // 1705
                                                                                                                  // 1706
        // If this "last block" is also the first block, send the message.                                        // 1707
        if (self._outstandingMethodBlocks.length === 1)                                                           // 1708
          m.sendMessage();                                                                                        // 1709
      });                                                                                                         // 1710
                                                                                                                  // 1711
      oldOutstandingMethodBlocks.shift();                                                                         // 1712
    }                                                                                                             // 1713
                                                                                                                  // 1714
    // Now add the rest of the original blocks on.                                                                // 1715
    _.each(oldOutstandingMethodBlocks, function (block) {                                                         // 1716
      self._outstandingMethodBlocks.push(block);                                                                  // 1717
    });                                                                                                           // 1718
  },                                                                                                              // 1719
                                                                                                                  // 1720
  // We can accept a hot code push if there are no methods in flight.                                             // 1721
  _readyToMigrate: function() {                                                                                   // 1722
    var self = this;                                                                                              // 1723
    return _.isEmpty(self._methodInvokers);                                                                       // 1724
  },                                                                                                              // 1725
                                                                                                                  // 1726
  // If we were blocking a migration, see if it's now possible to continue.                                       // 1727
  // Call whenever the set of outstanding/blocked methods shrinks.                                                // 1728
  _maybeMigrate: function () {                                                                                    // 1729
    var self = this;                                                                                              // 1730
    if (self._retryMigrate && self._readyToMigrate()) {                                                           // 1731
      self._retryMigrate();                                                                                       // 1732
      self._retryMigrate = null;                                                                                  // 1733
    }                                                                                                             // 1734
  }                                                                                                               // 1735
});                                                                                                               // 1736
                                                                                                                  // 1737
LivedataTest.Connection = Connection;                                                                             // 1738
                                                                                                                  // 1739
// @param url {String} URL to Meteor app,                                                                         // 1740
//     e.g.:                                                                                                      // 1741
//     "subdomain.meteor.com",                                                                                    // 1742
//     "http://subdomain.meteor.com",                                                                             // 1743
//     "/",                                                                                                       // 1744
//     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"                                                             // 1745
                                                                                                                  // 1746
/**                                                                                                               // 1747
 * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
 * @locus Anywhere                                                                                                // 1749
 * @param {String} url The URL of another Meteor application.                                                     // 1750
 */                                                                                                               // 1751
DDP.connect = function (url, options) {                                                                           // 1752
  var ret = new Connection(url, options);                                                                         // 1753
  allConnections.push(ret); // hack. see below.                                                                   // 1754
  return ret;                                                                                                     // 1755
};                                                                                                                // 1756
                                                                                                                  // 1757
// Hack for `spiderable` package: a way to see if the page is done                                                // 1758
// loading all the data it needs.                                                                                 // 1759
//                                                                                                                // 1760
allConnections = [];                                                                                              // 1761
DDP._allSubscriptionsReady = function () {                                                                        // 1762
  return _.all(allConnections, function (conn) {                                                                  // 1763
    return _.all(conn._subscriptions, function (sub) {                                                            // 1764
      return sub.ready;                                                                                           // 1765
    });                                                                                                           // 1766
  });                                                                                                             // 1767
};                                                                                                                // 1768
                                                                                                                  // 1769
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                //
// packages/ddp-client/client_convenience.js                                                                      //
//                                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                  //
// Meteor.refresh can be called on the client (if you're in common code) but it                                   // 1
// only has an effect on the server.                                                                              // 2
Meteor.refresh = function (notification) {                                                                        // 3
};                                                                                                                // 4
                                                                                                                  // 5
if (Meteor.isClient) {                                                                                            // 6
  // By default, try to connect back to the same endpoint as the page                                             // 7
  // was served from.                                                                                             // 8
  //                                                                                                              // 9
  // XXX We should be doing this a different way. Right now we don't                                              // 10
  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                // 11
  // include it on the server when computing                                                                      // 12
  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                   // 13
  // default, '/'.) We get by with this because DDP.connect then                                                  // 14
  // forces the URL passed to it to be interpreted relative to the                                                // 15
  // app's deploy path, even if it is absolute. Instead, we should                                                // 16
  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                            // 17
  // make the default ddpUrl be '' rather that '/'; and make                                                      // 18
  // _translateUrl in stream_client_common.js not force absolute paths                                            // 19
  // to be treated like relative paths. See also                                                                  // 20
  // stream_client_common.js #RationalizingRelativeDDPURLs                                                        // 21
  var ddpUrl = '/';                                                                                               // 22
  if (typeof __meteor_runtime_config__ !== "undefined") {                                                         // 23
    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL)                                                     // 24
      ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;                                              // 25
  }                                                                                                               // 26
                                                                                                                  // 27
  var retry = new Retry();                                                                                        // 28
                                                                                                                  // 29
  var onDDPVersionNegotiationFailure = function (description) {                                                   // 30
    Meteor._debug(description);                                                                                   // 31
    if (Package.reload) {                                                                                         // 32
      var migrationData = Package.reload.Reload._migrationData('livedata') || {};                                 // 33
      var failures = migrationData.DDPVersionNegotiationFailures || 0;                                            // 34
      ++failures;                                                                                                 // 35
      Package.reload.Reload._onMigrate('livedata', function () {                                                  // 36
        return [true, {DDPVersionNegotiationFailures: failures}];                                                 // 37
      });                                                                                                         // 38
      retry.retryLater(failures, function () {                                                                    // 39
        Package.reload.Reload._reload();                                                                          // 40
      });                                                                                                         // 41
    }                                                                                                             // 42
  };                                                                                                              // 43
                                                                                                                  // 44
  Meteor.connection =                                                                                             // 45
    DDP.connect(ddpUrl, {                                                                                         // 46
      onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure                                              // 47
    });                                                                                                           // 48
                                                                                                                  // 49
  // Proxy the public methods of Meteor.connection so they can                                                    // 50
  // be called directly on Meteor.                                                                                // 51
  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect',                                         // 52
          'disconnect'],                                                                                          // 53
         function (name) {                                                                                        // 54
           Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);                                     // 55
         });                                                                                                      // 56
} else {                                                                                                          // 57
  // Never set up a default connection on the server. Don't even map                                              // 58
  // subscribe/call/etc onto Meteor.                                                                              // 59
  Meteor.connection = null;                                                                                       // 60
}                                                                                                                 // 61
                                                                                                                  // 62
// Meteor.connection used to be called                                                                            // 63
// Meteor.default_connection. Provide backcompat as a courtesy even                                               // 64
// though it was never documented.                                                                                // 65
// XXX COMPAT WITH 0.6.4                                                                                          // 66
Meteor.default_connection = Meteor.connection;                                                                    // 67
                                                                                                                  // 68
// We should transition from Meteor.connect to DDP.connect.                                                       // 69
// XXX COMPAT WITH 0.6.4                                                                                          // 70
Meteor.connect = DDP.connect;                                                                                     // 71
                                                                                                                  // 72
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['ddp-client'] = {}, {
  DDP: DDP,
  LivedataTest: LivedataTest
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var DDP = Package['ddp-client'].DDP;



/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.ddp = {}, {
  DDP: DDP
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ddp-server'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var check = Package.check.check;
var Match = Package.check.Match;
var EJSON = Package.ejson.EJSON;
var DDP = Package['ddp-client'].DDP;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var AllowDeny;

var require = meteorInstall({"node_modules":{"meteor":{"allow-deny":{"allow-deny.js":function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
// packages/allow-deny/allow-deny.js                                                                             //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 //
///                                                                                                              // 1
/// Remote methods and access control.                                                                           // 2
///                                                                                                              // 3
// Restrict default mutators on collection. allow() and deny() take the                                          // 5
// same options:                                                                                                 // 6
//                                                                                                               // 7
// options.insert {Function(userId, doc)}                                                                        // 8
//   return true to allow/deny adding this document                                                              // 9
//                                                                                                               // 10
// options.update {Function(userId, docs, fields, modifier)}                                                     // 11
//   return true to allow/deny updating these documents.                                                         // 12
//   `fields` is passed as an array of fields that are to be modified                                            // 13
//                                                                                                               // 14
// options.remove {Function(userId, docs)}                                                                       // 15
//   return true to allow/deny removing these documents                                                          // 16
//                                                                                                               // 17
// options.fetch {Array}                                                                                         // 18
//   Fields to fetch for these validators. If any call to allow or deny                                          // 19
//   does not have this option then all fields are loaded.                                                       // 20
//                                                                                                               // 21
// allow and deny can be called multiple times. The validators are                                               // 22
// evaluated as follows:                                                                                         // 23
// - If neither deny() nor allow() has been called on the collection,                                            // 24
//   then the request is allowed if and only if the "insecure" smart                                             // 25
//   package is in use.                                                                                          // 26
// - Otherwise, if any deny() function returns true, the request is denied.                                      // 27
// - Otherwise, if any allow() function returns true, the request is allowed.                                    // 28
// - Otherwise, the request is denied.                                                                           // 29
//                                                                                                               // 30
// Meteor may call your deny() and allow() functions in any order, and may not                                   // 31
// call all of them if it is able to make a decision without calling them all                                    // 32
// (so don't include side effects).                                                                              // 33
AllowDeny = {                                                                                                    // 35
  CollectionPrototype: {}                                                                                        // 36
}; // In the `mongo` package, we will extend Mongo.Collection.prototype with these                               // 35
// methods                                                                                                       // 40
                                                                                                                 //
var CollectionPrototype = AllowDeny.CollectionPrototype; /**                                                     // 41
                                                          * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
                                                          * @locus Server                                        //
                                                          * @method allow                                        //
                                                          * @memberOf Mongo.Collection                           //
                                                          * @instance                                            //
                                                          * @param {Object} options                              //
                                                          * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
                                                          * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
                                                          * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
                                                          */                                                     //
                                                                                                                 //
CollectionPrototype.allow = function (options) {                                                                 // 54
  addValidator(this, 'allow', options);                                                                          // 55
}; /**                                                                                                           // 56
    * @summary Override `allow` rules.                                                                           //
    * @locus Server                                                                                              //
    * @method deny                                                                                               //
    * @memberOf Mongo.Collection                                                                                 //
    * @instance                                                                                                  //
    * @param {Object} options                                                                                    //
    * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
    * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
    * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
    */                                                                                                           //
                                                                                                                 //
CollectionPrototype.deny = function (options) {                                                                  // 69
  addValidator(this, 'deny', options);                                                                           // 70
};                                                                                                               // 71
                                                                                                                 //
CollectionPrototype._defineMutationMethods = function (options) {                                                // 73
  var self = this;                                                                                               // 74
  options = options || {}; // set to true once we call any allow or deny methods. If true, use                   // 75
  // allow/deny semantics. If false, use insecure mode semantics.                                                // 78
                                                                                                                 //
  self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which         // 79
  // means insecure iff the insecure package is loaded. This property can be                                     // 82
  // overriden by tests or packages wishing to change insecure mode behavior of                                  // 83
  // their collections.                                                                                          // 84
                                                                                                                 //
  self._insecure = undefined;                                                                                    // 85
  self._validators = {                                                                                           // 87
    insert: {                                                                                                    // 88
      allow: [],                                                                                                 // 88
      deny: []                                                                                                   // 88
    },                                                                                                           // 88
    update: {                                                                                                    // 89
      allow: [],                                                                                                 // 89
      deny: []                                                                                                   // 89
    },                                                                                                           // 89
    remove: {                                                                                                    // 90
      allow: [],                                                                                                 // 90
      deny: []                                                                                                   // 90
    },                                                                                                           // 90
    upsert: {                                                                                                    // 91
      allow: [],                                                                                                 // 91
      deny: []                                                                                                   // 91
    },                                                                                                           // 91
    // dummy arrays; can't set these!                                                                            // 91
    fetch: [],                                                                                                   // 92
    fetchAllFields: false                                                                                        // 93
  };                                                                                                             // 87
  if (!self._name) return; // anonymous collection                                                               // 96
  // XXX Think about method namespacing. Maybe methods should be                                                 // 99
  // "Meteor:Mongo:insert/NAME"?                                                                                 // 100
                                                                                                                 //
  self._prefix = '/' + self._name + '/'; // Mutation Methods                                                     // 101
  // Minimongo on the server gets no stubs; instead, by default                                                  // 104
  // it wait()s until its result is ready, yielding.                                                             // 105
  // This matches the behavior of macromongo on the server better.                                               // 106
  // XXX see #MeteorServerNull                                                                                   // 107
                                                                                                                 //
  if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {                             // 108
    (function () {                                                                                               // 108
      var m = {};                                                                                                // 109
                                                                                                                 //
      _.each(['insert', 'update', 'remove'], function (method) {                                                 // 111
        var methodName = self._prefix + method;                                                                  // 112
                                                                                                                 //
        if (options.useExisting) {                                                                               // 114
          var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
          // (Otherwise the .methods() call below will throw an error.)                                          // 117
                                                                                                                 //
          if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
        }                                                                                                        // 120
                                                                                                                 //
        m[methodName] = function () /* ... */{                                                                   // 122
          // All the methods do their own validation, instead of using check().                                  // 123
          check(arguments, [Match.Any]);                                                                         // 124
                                                                                                                 //
          var args = _.toArray(arguments);                                                                       // 125
                                                                                                                 //
          try {                                                                                                  // 126
            // For an insert, if the client didn't specify an _id, generate one                                  // 127
            // now; because this uses DDP.randomStream, it will be consistent with                               // 128
            // what the client generated. We generate it now rather than later so                                // 129
            // that if (eg) an allow/deny rule does an insert to the same                                        // 130
            // collection (not that it really should), the generated _id will                                    // 131
            // still be the first use of the stream and will be consistent.                                      // 132
            //                                                                                                   // 133
            // However, we don't actually stick the _id onto the document yet,                                   // 134
            // because we want allow/deny rules to be able to differentiate                                      // 135
            // between arbitrary client-specified _id fields and merely                                          // 136
            // client-controlled-via-randomSeed fields.                                                          // 137
            var generatedId = null;                                                                              // 138
                                                                                                                 //
            if (method === "insert" && !_.has(args[0], '_id')) {                                                 // 139
              generatedId = self._makeNewID();                                                                   // 140
            }                                                                                                    // 141
                                                                                                                 //
            if (this.isSimulation) {                                                                             // 143
              // In a client simulation, you can do any mutation (even with a                                    // 144
              // complex selector).                                                                              // 145
              if (generatedId !== null) args[0]._id = generatedId;                                               // 146
              return self._collection[method].apply(self._collection, args);                                     // 148
            } // This is the server receiving a method call from the client.                                     // 150
            // We don't allow arbitrary selectors in mutations from the client: only                             // 154
            // single-ID selectors.                                                                              // 155
                                                                                                                 //
                                                                                                                 //
            if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);                                    // 156
                                                                                                                 //
            if (self._restricted) {                                                                              // 159
              // short circuit if there is no way it will pass.                                                  // 160
              if (self._validators[method].allow.length === 0) {                                                 // 161
                throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
              }                                                                                                  // 165
                                                                                                                 //
              var validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);         // 167
              args.unshift(this.userId);                                                                         // 169
              method === 'insert' && args.push(generatedId);                                                     // 170
              return self[validatedMethodName].apply(self, args);                                                // 171
            } else if (self._isInsecure()) {                                                                     // 172
              if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
              // XXX This is kind of bogus.  Instead of blindly passing whatever                                 // 176
              //     we get from the network to this function, we should actually                                // 177
              //     know the correct arguments for the function and pass just                                   // 178
              //     them.  For example, if you have an extraneous extra null                                    // 179
              //     argument and this is Mongo on the server, the .wrapAsync'd                                  // 180
              //     functions like update will get confused and pass the                                        // 181
              //     "fut.resolver()" in the wrong slot, where _update will never                                // 182
              //     invoke it. Bam, broken DDP connection.  Probably should just                                // 183
              //     take this whole method and write it three times, invoking                                   // 184
              //     helpers for the common code.                                                                // 185
                                                                                                                 //
              return self._collection[method].apply(self._collection, args);                                     // 186
            } else {                                                                                             // 187
              // In secure mode, if we haven't called allow or deny, then nothing                                // 188
              // is permitted.                                                                                   // 189
              throw new Meteor.Error(403, "Access denied");                                                      // 190
            }                                                                                                    // 191
          } catch (e) {                                                                                          // 192
            if (e.name === 'MongoError' || e.name === 'MinimongoError') {                                        // 193
              throw new Meteor.Error(409, e.toString());                                                         // 194
            } else {                                                                                             // 195
              throw e;                                                                                           // 196
            }                                                                                                    // 197
          }                                                                                                      // 198
        };                                                                                                       // 199
      });                                                                                                        // 200
                                                                                                                 //
      self._connection.methods(m);                                                                               // 202
    })();                                                                                                        // 108
  }                                                                                                              // 203
};                                                                                                               // 204
                                                                                                                 //
CollectionPrototype._updateFetch = function (fields) {                                                           // 206
  var self = this;                                                                                               // 207
                                                                                                                 //
  if (!self._validators.fetchAllFields) {                                                                        // 209
    if (fields) {                                                                                                // 210
      self._validators.fetch = _.union(self._validators.fetch, fields);                                          // 211
    } else {                                                                                                     // 212
      self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it     // 213
                                                                                                                 //
      self._validators.fetch = null;                                                                             // 215
    }                                                                                                            // 216
  }                                                                                                              // 217
};                                                                                                               // 218
                                                                                                                 //
CollectionPrototype._isInsecure = function () {                                                                  // 220
  var self = this;                                                                                               // 221
  if (self._insecure === undefined) return !!Package.insecure;                                                   // 222
  return self._insecure;                                                                                         // 224
};                                                                                                               // 225
                                                                                                                 //
CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {                                     // 227
  var self = this; // call user validators.                                                                      // 229
  // Any deny returns true means denied.                                                                         // 232
                                                                                                                 //
  if (_.any(self._validators.insert.deny, function (validator) {                                                 // 233
    return validator(userId, docToValidate(validator, doc, generatedId));                                        // 234
  })) {                                                                                                          // 235
    throw new Meteor.Error(403, "Access denied");                                                                // 236
  } // Any allow returns true means proceed. Throw error if they all fail.                                       // 237
                                                                                                                 //
                                                                                                                 //
  if (_.all(self._validators.insert.allow, function (validator) {                                                // 239
    return !validator(userId, docToValidate(validator, doc, generatedId));                                       // 240
  })) {                                                                                                          // 241
    throw new Meteor.Error(403, "Access denied");                                                                // 242
  } // If we generated an ID above, insert it now: after the validation, but                                     // 243
  // before actually inserting.                                                                                  // 246
                                                                                                                 //
                                                                                                                 //
  if (generatedId !== null) doc._id = generatedId;                                                               // 247
                                                                                                                 //
  self._collection.insert.call(self._collection, doc);                                                           // 250
}; // Simulate a mongo `update` operation while validating that the access                                       // 251
// control rules set by calls to `allow/deny` are satisfied. If all                                              // 254
// pass, rewrite the mongo operation to use $in to set the list of                                               // 255
// document ids to change ##ValidatedChange                                                                      // 256
                                                                                                                 //
                                                                                                                 //
CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {                           // 257
  var self = this;                                                                                               // 259
  check(mutator, Object);                                                                                        // 261
  options = _.clone(options) || {};                                                                              // 263
  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
  // rules.                                                                                                      // 269
                                                                                                                 //
  if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
  var noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'."; // compute modified fields
                                                                                                                 //
  var fields = [];                                                                                               // 279
                                                                                                                 //
  if (_.isEmpty(mutator)) {                                                                                      // 280
    throw new Meteor.Error(403, noReplaceError);                                                                 // 281
  }                                                                                                              // 282
                                                                                                                 //
  _.each(mutator, function (params, op) {                                                                        // 283
    if (op.charAt(0) !== '$') {                                                                                  // 284
      throw new Meteor.Error(403, noReplaceError);                                                               // 285
    } else if (!_.has(ALLOWED_UPDATE_OPERATIONS, op)) {                                                          // 286
      throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
    } else {                                                                                                     // 289
      _.each(_.keys(params), function (field) {                                                                  // 290
        // treat dotted fields as if they are replacing their                                                    // 291
        // top-level part                                                                                        // 292
        if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change
                                                                                                                 //
        if (!_.contains(fields, field)) fields.push(field);                                                      // 297
      });                                                                                                        // 299
    }                                                                                                            // 300
  });                                                                                                            // 301
                                                                                                                 //
  var findOptions = {                                                                                            // 303
    transform: null                                                                                              // 303
  };                                                                                                             // 303
                                                                                                                 //
  if (!self._validators.fetchAllFields) {                                                                        // 304
    findOptions.fields = {};                                                                                     // 305
                                                                                                                 //
    _.each(self._validators.fetch, function (fieldName) {                                                        // 306
      findOptions.fields[fieldName] = 1;                                                                         // 307
    });                                                                                                          // 308
  }                                                                                                              // 309
                                                                                                                 //
  var doc = self._collection.findOne(selector, findOptions);                                                     // 311
                                                                                                                 //
  if (!doc) // none satisfied!                                                                                   // 312
    return 0; // call user validators.                                                                           // 313
  // Any deny returns true means denied.                                                                         // 316
                                                                                                                 //
  if (_.any(self._validators.update.deny, function (validator) {                                                 // 317
    var factoriedDoc = transformDoc(validator, doc);                                                             // 318
    return validator(userId, factoriedDoc, fields, mutator);                                                     // 319
  })) {                                                                                                          // 323
    throw new Meteor.Error(403, "Access denied");                                                                // 324
  } // Any allow returns true means proceed. Throw error if they all fail.                                       // 325
                                                                                                                 //
                                                                                                                 //
  if (_.all(self._validators.update.allow, function (validator) {                                                // 327
    var factoriedDoc = transformDoc(validator, doc);                                                             // 328
    return !validator(userId, factoriedDoc, fields, mutator);                                                    // 329
  })) {                                                                                                          // 333
    throw new Meteor.Error(403, "Access denied");                                                                // 334
  }                                                                                                              // 335
                                                                                                                 //
  options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually      // 337
  // rewrote the selector to include an _id clause before passing to Mongo to                                    // 340
  // avoid races, but since selector is guaranteed to already just be an ID, we                                  // 341
  // don't have to any more.                                                                                     // 342
                                                                                                                 //
  return self._collection.update.call(self._collection, selector, mutator, options);                             // 344
}; // Only allow these operations in validated updates. Specifically                                             // 346
// whitelist operations, rather than blacklist, so new complex                                                   // 349
// operations that are added aren't automatically allowed. A complex                                             // 350
// operation is one that does more than just modify its target                                                   // 351
// field. For now this contains all update operations except '$rename'.                                          // 352
// http://docs.mongodb.org/manual/reference/operators/#update                                                    // 353
                                                                                                                 //
                                                                                                                 //
var ALLOWED_UPDATE_OPERATIONS = {                                                                                // 354
  $inc: 1,                                                                                                       // 355
  $set: 1,                                                                                                       // 355
  $unset: 1,                                                                                                     // 355
  $addToSet: 1,                                                                                                  // 355
  $pop: 1,                                                                                                       // 355
  $pullAll: 1,                                                                                                   // 355
  $pull: 1,                                                                                                      // 355
  $pushAll: 1,                                                                                                   // 356
  $push: 1,                                                                                                      // 356
  $bit: 1                                                                                                        // 356
}; // Simulate a mongo `remove` operation while validating access control                                        // 354
// rules. See #ValidatedChange                                                                                   // 360
                                                                                                                 //
CollectionPrototype._validatedRemove = function (userId, selector) {                                             // 361
  var self = this;                                                                                               // 362
  var findOptions = {                                                                                            // 364
    transform: null                                                                                              // 364
  };                                                                                                             // 364
                                                                                                                 //
  if (!self._validators.fetchAllFields) {                                                                        // 365
    findOptions.fields = {};                                                                                     // 366
                                                                                                                 //
    _.each(self._validators.fetch, function (fieldName) {                                                        // 367
      findOptions.fields[fieldName] = 1;                                                                         // 368
    });                                                                                                          // 369
  }                                                                                                              // 370
                                                                                                                 //
  var doc = self._collection.findOne(selector, findOptions);                                                     // 372
                                                                                                                 //
  if (!doc) return 0; // call user validators.                                                                   // 373
  // Any deny returns true means denied.                                                                         // 377
                                                                                                                 //
  if (_.any(self._validators.remove.deny, function (validator) {                                                 // 378
    return validator(userId, transformDoc(validator, doc));                                                      // 379
  })) {                                                                                                          // 380
    throw new Meteor.Error(403, "Access denied");                                                                // 381
  } // Any allow returns true means proceed. Throw error if they all fail.                                       // 382
                                                                                                                 //
                                                                                                                 //
  if (_.all(self._validators.remove.allow, function (validator) {                                                // 384
    return !validator(userId, transformDoc(validator, doc));                                                     // 385
  })) {                                                                                                          // 386
    throw new Meteor.Error(403, "Access denied");                                                                // 387
  } // Back when we supported arbitrary client-provided selectors, we actually                                   // 388
  // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to                                 // 391
  // Mongo to avoid races, but since selector is guaranteed to already just be                                   // 392
  // an ID, we don't have to any more.                                                                           // 393
                                                                                                                 //
                                                                                                                 //
  return self._collection.remove.call(self._collection, selector);                                               // 395
};                                                                                                               // 396
                                                                                                                 //
CollectionPrototype._callMutatorMethod = function () {                                                           // 398
  function _callMutatorMethod(name, args, callback) {                                                            // 398
    if (Meteor.isClient && !callback && !alreadyInSimulation()) {                                                // 399
      // Client can't block, so it can't report errors by exception,                                             // 400
      // only by callback. If they forget the callback, give them a                                              // 401
      // default one that logs the error, so they aren't totally                                                 // 402
      // baffled if their writes don't work because their database is                                            // 403
      // down.                                                                                                   // 404
      // Don't give a default callback in simulation, because inside stubs we                                    // 405
      // want to return the results from the local collection immediately and                                    // 406
      // not force a callback.                                                                                   // 407
      callback = function (err) {                                                                                // 408
        if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));                                  // 409
      };                                                                                                         // 411
    } // For two out of three mutator methods, the first argument is a selector                                  // 412
                                                                                                                 //
                                                                                                                 //
    var firstArgIsSelector = name === "update" || name === "remove";                                             // 415
                                                                                                                 //
    if (firstArgIsSelector && !alreadyInSimulation()) {                                                          // 416
      // If we're about to actually send an RPC, we should throw an error if                                     // 417
      // this is a non-ID selector, because the mutation methods only allow                                      // 418
      // single-ID selectors. (If we don't throw here, we'll see flicker.)                                       // 419
      throwIfSelectorIsNotId(args[0], name);                                                                     // 420
    }                                                                                                            // 421
                                                                                                                 //
    var mutatorMethodName = this._prefix + name;                                                                 // 423
    return this._connection.apply(mutatorMethodName, args, {                                                     // 424
      returnStubValue: true                                                                                      // 425
    }, callback);                                                                                                // 425
  }                                                                                                              // 426
                                                                                                                 //
  return _callMutatorMethod;                                                                                     // 398
}();                                                                                                             // 398
                                                                                                                 //
function transformDoc(validator, doc) {                                                                          // 428
  if (validator.transform) return validator.transform(doc);                                                      // 429
  return doc;                                                                                                    // 431
}                                                                                                                // 432
                                                                                                                 //
function docToValidate(validator, doc, generatedId) {                                                            // 434
  var ret = doc;                                                                                                 // 435
                                                                                                                 //
  if (validator.transform) {                                                                                     // 436
    ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get         // 437
    // to tell the difference between "client specified the ID" and "server                                      // 439
    // generated the ID", because transforms expect to get _id.  If you want to                                  // 440
    // do that check, you can do it with a specific                                                              // 441
    // `C.allow({insert: f, transform: null})` validator.                                                        // 442
                                                                                                                 //
    if (generatedId !== null) {                                                                                  // 443
      ret._id = generatedId;                                                                                     // 444
    }                                                                                                            // 445
                                                                                                                 //
    ret = validator.transform(ret);                                                                              // 446
  }                                                                                                              // 447
                                                                                                                 //
  return ret;                                                                                                    // 448
}                                                                                                                // 449
                                                                                                                 //
function addValidator(collection, allowOrDeny, options) {                                                        // 451
  // validate keys                                                                                               // 452
  var VALID_KEYS = ['insert', 'update', 'remove', 'fetch', 'transform'];                                         // 453
                                                                                                                 //
  _.each(_.keys(options), function (key) {                                                                       // 454
    if (!_.contains(VALID_KEYS, key)) throw new Error(allowOrDeny + ": Invalid key: " + key);                    // 455
  });                                                                                                            // 457
                                                                                                                 //
  collection._restricted = true;                                                                                 // 459
                                                                                                                 //
  _.each(['insert', 'update', 'remove'], function (name) {                                                       // 461
    if (options.hasOwnProperty(name)) {                                                                          // 462
      if (!(options[name] instanceof Function)) {                                                                // 463
        throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");                          // 464
      } // If the transform is specified at all (including as 'null') in this                                    // 465
      // call, then take that; otherwise, take the transform from the                                            // 468
      // collection.                                                                                             // 469
                                                                                                                 //
                                                                                                                 //
      if (options.transform === undefined) {                                                                     // 470
        options[name].transform = collection._transform; // already wrapped                                      // 471
      } else {                                                                                                   // 472
        options[name].transform = LocalCollection.wrapTransform(options.transform);                              // 473
      }                                                                                                          // 475
                                                                                                                 //
      collection._validators[name][allowOrDeny].push(options[name]);                                             // 477
    }                                                                                                            // 478
  }); // Only update the fetch fields if we're passed things that affect                                         // 479
  // fetching. This way allow({}) and allow({insert: f}) don't result in                                         // 482
  // setting fetchAllFields                                                                                      // 483
                                                                                                                 //
                                                                                                                 //
  if (options.update || options.remove || options.fetch) {                                                       // 484
    if (options.fetch && !(options.fetch instanceof Array)) {                                                    // 485
      throw new Error(allowOrDeny + ": Value for `fetch` must be an array");                                     // 486
    }                                                                                                            // 487
                                                                                                                 //
    collection._updateFetch(options.fetch);                                                                      // 488
  }                                                                                                              // 489
}                                                                                                                // 490
                                                                                                                 //
function throwIfSelectorIsNotId(selector, methodName) {                                                          // 492
  if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {                                                 // 493
    throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");   // 494
  }                                                                                                              // 497
}                                                                                                                // 498
                                                                                                                 //
; // Determine if we are in a DDP method simulation                                                              // 498
                                                                                                                 //
function alreadyInSimulation() {                                                                                 // 501
  var enclosing = DDP._CurrentInvocation.get();                                                                  // 502
                                                                                                                 //
  return enclosing && enclosing.isSimulation;                                                                    // 503
}                                                                                                                // 504
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/allow-deny/allow-deny.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['allow-deny'] = {}, {
  AllowDeny: AllowDeny
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var AllowDeny = Package['allow-deny'].AllowDeny;
var Random = Package.random.Random;
var EJSON = Package.ejson.EJSON;
var _ = Package.underscore._;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;
var DDP = Package['ddp-client'].DDP;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var MongoID = Package['mongo-id'].MongoID;
var check = Package.check.check;
var Match = Package.check.Match;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var LocalCollectionDriver, Mongo;

var require = meteorInstall({"node_modules":{"meteor":{"mongo":{"local_collection_driver.js":function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/mongo/local_collection_driver.js                                                                    //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
LocalCollectionDriver = function () {                                                                           // 1
  var self = this;                                                                                              // 2
  self.noConnCollections = {};                                                                                  // 3
};                                                                                                              // 4
                                                                                                                //
var ensureCollection = function (name, collections) {                                                           // 6
  if (!(name in collections)) collections[name] = new LocalCollection(name);                                    // 7
  return collections[name];                                                                                     // 9
};                                                                                                              // 10
                                                                                                                //
_.extend(LocalCollectionDriver.prototype, {                                                                     // 12
  open: function (name, conn) {                                                                                 // 13
    var self = this;                                                                                            // 14
    if (!name) return new LocalCollection();                                                                    // 15
                                                                                                                //
    if (!conn) {                                                                                                // 17
      return ensureCollection(name, self.noConnCollections);                                                    // 18
    }                                                                                                           // 19
                                                                                                                //
    if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {}; // XXX is there a way to keep track of a connection's collections without
    // dangling it off the connection object?                                                                   // 23
                                                                                                                //
    return ensureCollection(name, conn._mongo_livedata_collections);                                            // 24
  }                                                                                                             // 25
}); // singleton                                                                                                // 12
                                                                                                                //
                                                                                                                //
LocalCollectionDriver = new LocalCollectionDriver();                                                            // 29
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"collection.js":function(require,exports,module){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/mongo/collection.js                                                                                 //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
// options.connection, if given, is a LivedataClient or LivedataServer                                          // 1
// XXX presently there is no way to destroy/clean up a Collection                                               // 2
/**                                                                                                             // 4
 * @summary Namespace for MongoDB-related items                                                                 //
 * @namespace                                                                                                   //
 */Mongo = {}; /**                                                                                              //
                * @summary Constructor for a Collection                                                         //
                * @locus Anywhere                                                                               //
                * @instancename collection                                                                      //
                * @class                                                                                        //
                * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
                * @param {Object} [options]                                                                     //
                * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
                * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
                                                                                                                //
                - **`'STRING'`**: random strings                                                                //
                - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                            //
                                                                                                                //
               The default id generation technique is `'STRING'`.                                               //
                * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
                * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
                */                                                                                              //
                                                                                                                //
Mongo.Collection = function (name, options) {                                                                   // 27
  var self = this;                                                                                              // 28
  if (!(self instanceof Mongo.Collection)) throw new Error('use "new" to construct a Mongo.Collection');        // 29
                                                                                                                //
  if (!name && name !== null) {                                                                                 // 32
    Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");
                                                                                                                //
    name = null;                                                                                                // 36
  }                                                                                                             // 37
                                                                                                                //
  if (name !== null && typeof name !== "string") {                                                              // 39
    throw new Error("First argument to new Mongo.Collection must be a string or null");                         // 40
  }                                                                                                             // 42
                                                                                                                //
  if (options && options.methods) {                                                                             // 44
    // Backwards compatibility hack with original signature (which passed                                       // 45
    // "connection" directly instead of in options. (Connections must have a "methods"                          // 46
    // method.)                                                                                                 // 47
    // XXX remove before 1.0                                                                                    // 48
    options = {                                                                                                 // 49
      connection: options                                                                                       // 49
    };                                                                                                          // 49
  } // Backwards compatibility: "connection" used to be called "manager".                                       // 50
                                                                                                                //
                                                                                                                //
  if (options && options.manager && !options.connection) {                                                      // 52
    options.connection = options.manager;                                                                       // 53
  }                                                                                                             // 54
                                                                                                                //
  options = _.extend({                                                                                          // 55
    connection: undefined,                                                                                      // 56
    idGeneration: 'STRING',                                                                                     // 57
    transform: null,                                                                                            // 58
    _driver: undefined,                                                                                         // 59
    _preventAutopublish: false                                                                                  // 60
  }, options);                                                                                                  // 55
                                                                                                                //
  switch (options.idGeneration) {                                                                               // 63
    case 'MONGO':                                                                                               // 64
      self._makeNewID = function () {                                                                           // 65
        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                             // 66
        return new Mongo.ObjectID(src.hexString(24));                                                           // 67
      };                                                                                                        // 68
                                                                                                                //
      break;                                                                                                    // 69
                                                                                                                //
    case 'STRING':                                                                                              // 70
    default:                                                                                                    // 71
      self._makeNewID = function () {                                                                           // 72
        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                             // 73
        return src.id();                                                                                        // 74
      };                                                                                                        // 75
                                                                                                                //
      break;                                                                                                    // 76
  }                                                                                                             // 63
                                                                                                                //
  self._transform = LocalCollection.wrapTransform(options.transform);                                           // 79
  if (!name || options.connection === null) // note: nameless collections never have a connection               // 81
    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;
                                                                                                                //
  if (!options._driver) {                                                                                       // 91
    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                   // 92
    // null. We should fully support the case of "want to use a Mongo-backed                                    // 93
    // collection from Node code without webapp", but we don't yet.                                             // 94
    // #MeteorServerNull                                                                                        // 95
    if (name && self._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                         // 99
    } else {                                                                                                    // 100
      options._driver = LocalCollectionDriver;                                                                  // 101
    }                                                                                                           // 102
  }                                                                                                             // 103
                                                                                                                //
  self._collection = options._driver.open(name, self._connection);                                              // 105
  self._name = name;                                                                                            // 106
  self._driver = options._driver;                                                                               // 107
                                                                                                                //
  if (self._connection && self._connection.registerStore) {                                                     // 109
    // OK, we're going to be a slave, replicating some remote                                                   // 110
    // database, except possibly with some temporary divergence while                                           // 111
    // we have unacknowledged RPC's.                                                                            // 112
    var ok = self._connection.registerStore(name, {                                                             // 113
      // Called at the beginning of a batch of updates. batchSize is the number                                 // 114
      // of update calls to expect.                                                                             // 115
      //                                                                                                        // 116
      // XXX This interface is pretty janky. reset probably ought to go back to                                 // 117
      // being its own function, and callers shouldn't have to calculate                                        // 118
      // batchSize. The optimization of not calling pause/remove should be                                      // 119
      // delayed until later: the first call to update() should buffer its                                      // 120
      // message, and then we can either directly apply it at endUpdate time if                                 // 121
      // it was the only update, or do pauseObservers/apply/apply at the next                                   // 122
      // update() if there's another one.                                                                       // 123
      beginUpdate: function (batchSize, reset) {                                                                // 124
        // pause observers so users don't see flicker when updating several                                     // 125
        // objects at once (including the post-reconnect reset-and-reapply                                      // 126
        // stage), and so that a re-sorting of a query can take advantage of the                                // 127
        // full _diffQuery moved calculation instead of applying change one at a                                // 128
        // time.                                                                                                // 129
        if (batchSize > 1 || reset) self._collection.pauseObservers();                                          // 130
        if (reset) self._collection.remove({});                                                                 // 133
      },                                                                                                        // 135
      // Apply an update.                                                                                       // 137
      // XXX better specify this interface (not in terms of a wire message)?                                    // 138
      update: function (msg) {                                                                                  // 139
        var mongoId = MongoID.idParse(msg.id);                                                                  // 140
                                                                                                                //
        var doc = self._collection.findOne(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
        // of method writes to an object? (Note that 'undefined' is a valid                                     // 144
        // value meaning "remove it".)                                                                          // 145
                                                                                                                //
                                                                                                                //
        if (msg.msg === 'replace') {                                                                            // 146
          var replace = msg.replace;                                                                            // 147
                                                                                                                //
          if (!replace) {                                                                                       // 148
            if (doc) self._collection.remove(mongoId);                                                          // 149
          } else if (!doc) {                                                                                    // 151
            self._collection.insert(replace);                                                                   // 152
          } else {                                                                                              // 153
            // XXX check that replace has no $ ops                                                              // 154
            self._collection.update(mongoId, replace);                                                          // 155
          }                                                                                                     // 156
                                                                                                                //
          return;                                                                                               // 157
        } else if (msg.msg === 'added') {                                                                       // 158
          if (doc) {                                                                                            // 159
            throw new Error("Expected not to find a document already present for an add");                      // 160
          }                                                                                                     // 161
                                                                                                                //
          self._collection.insert(_.extend({                                                                    // 162
            _id: mongoId                                                                                        // 162
          }, msg.fields));                                                                                      // 162
        } else if (msg.msg === 'removed') {                                                                     // 163
          if (!doc) throw new Error("Expected to find a document already present for removed");                 // 164
                                                                                                                //
          self._collection.remove(mongoId);                                                                     // 166
        } else if (msg.msg === 'changed') {                                                                     // 167
          if (!doc) throw new Error("Expected to find a document to change");                                   // 168
                                                                                                                //
          if (!_.isEmpty(msg.fields)) {                                                                         // 170
            var modifier = {};                                                                                  // 171
                                                                                                                //
            _.each(msg.fields, function (value, key) {                                                          // 172
              if (value === undefined) {                                                                        // 173
                if (!modifier.$unset) modifier.$unset = {};                                                     // 174
                modifier.$unset[key] = 1;                                                                       // 176
              } else {                                                                                          // 177
                if (!modifier.$set) modifier.$set = {};                                                         // 178
                modifier.$set[key] = value;                                                                     // 180
              }                                                                                                 // 181
            });                                                                                                 // 182
                                                                                                                //
            self._collection.update(mongoId, modifier);                                                         // 183
          }                                                                                                     // 184
        } else {                                                                                                // 185
          throw new Error("I don't know how to deal with this message");                                        // 186
        }                                                                                                       // 187
      },                                                                                                        // 189
      // Called at the end of a batch of updates.                                                               // 191
      endUpdate: function () {                                                                                  // 192
        self._collection.resumeObservers();                                                                     // 193
      },                                                                                                        // 194
      // Called around method stub invocations to capture the original versions                                 // 196
      // of modified documents.                                                                                 // 197
      saveOriginals: function () {                                                                              // 198
        self._collection.saveOriginals();                                                                       // 199
      },                                                                                                        // 200
      retrieveOriginals: function () {                                                                          // 201
        return self._collection.retrieveOriginals();                                                            // 202
      },                                                                                                        // 203
      // Used to preserve current versions of documents across a store reset.                                   // 205
      getDoc: function (id) {                                                                                   // 206
        return self.findOne(id);                                                                                // 207
      },                                                                                                        // 208
      // To be able to get back to the collection from the store.                                               // 210
      _getCollection: function () {                                                                             // 211
        return self;                                                                                            // 212
      }                                                                                                         // 213
    });                                                                                                         // 113
                                                                                                                //
    if (!ok) {                                                                                                  // 216
      var message = "There is already a collection named \"" + name + "\"";                                     // 217
                                                                                                                //
      if (options._suppressSameNameError === true) {                                                            // 218
        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined               // 219
        // for this collection name, but this will simply be another reference to it and everything             // 220
        // should work. However, we have historically thrown an error here, so for now we will                  // 221
        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in               // 222
        // and give this some real world testing.                                                               // 223
        console.warn ? console.warn(message) : console.log(message);                                            // 224
      } else {                                                                                                  // 225
        throw new Error(message);                                                                               // 226
      }                                                                                                         // 227
    }                                                                                                           // 228
  } // XXX don't define these until allow or deny is actually used for this                                     // 229
  // collection. Could be hard if the security rules are only defined on the                                    // 232
  // server.                                                                                                    // 233
                                                                                                                //
                                                                                                                //
  if (options.defineMutationMethods !== false) {                                                                // 234
    try {                                                                                                       // 235
      self._defineMutationMethods({                                                                             // 236
        useExisting: options._suppressSameNameError === true                                                    // 236
      });                                                                                                       // 236
    } catch (error) {                                                                                           // 237
      // Throw a more understandable error on the server for same collection name                               // 238
      if (error.message === "A method named '/" + name + "/insert' is already defined") throw new Error("There is already a collection named \"" + name + "\"");
      throw error;                                                                                              // 241
    }                                                                                                           // 242
  } // autopublish                                                                                              // 243
                                                                                                                //
                                                                                                                //
  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {    // 246
    self._connection.publish(null, function () {                                                                // 247
      return self.find();                                                                                       // 248
    }, {                                                                                                        // 249
      is_auto: true                                                                                             // 249
    });                                                                                                         // 249
  }                                                                                                             // 250
}; ///                                                                                                          // 251
/// Main collection API                                                                                         // 254
///                                                                                                             // 255
                                                                                                                //
                                                                                                                //
_.extend(Mongo.Collection.prototype, {                                                                          // 258
  _getFindSelector: function (args) {                                                                           // 260
    if (args.length == 0) return {};else return args[0];                                                        // 261
  },                                                                                                            // 265
  _getFindOptions: function (args) {                                                                            // 267
    var self = this;                                                                                            // 268
                                                                                                                //
    if (args.length < 2) {                                                                                      // 269
      return {                                                                                                  // 270
        transform: self._transform                                                                              // 270
      };                                                                                                        // 270
    } else {                                                                                                    // 271
      check(args[1], Match.Optional(Match.ObjectIncluding({                                                     // 272
        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                 // 273
        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),                                  // 274
        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                  // 275
        skip: Match.Optional(Match.OneOf(Number, undefined))                                                    // 276
      })));                                                                                                     // 272
      return _.extend({                                                                                         // 279
        transform: self._transform                                                                              // 280
      }, args[1]);                                                                                              // 279
    }                                                                                                           // 282
  },                                                                                                            // 283
  /**                                                                                                           // 285
   * @summary Find the documents in a collection that match the selector.                                       //
   * @locus Anywhere                                                                                            //
   * @method find                                                                                               //
   * @memberOf Mongo.Collection                                                                                 //
   * @instance                                                                                                  //
   * @param {MongoSelector} [selector] A query describing the documents to find                                 //
   * @param {Object} [options]                                                                                  //
   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
   * @param {Number} options.skip Number of results to skip at the beginning                                    //
   * @param {Number} options.limit Maximum number of results to return                                          //
   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity         //
   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
   * @returns {Mongo.Cursor}                                                                                    //
   */find: function () /* selector, options */{                                                                 //
    // Collection.find() (return all docs) behaves differently                                                  // 305
    // from Collection.find(undefined) (return 0 docs).  so be                                                  // 306
    // careful about the length of arguments.                                                                   // 307
    var self = this;                                                                                            // 308
                                                                                                                //
    var argArray = _.toArray(arguments);                                                                        // 309
                                                                                                                //
    return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));              // 310
  },                                                                                                            // 312
  /**                                                                                                           // 314
   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
   * @locus Anywhere                                                                                            //
   * @method findOne                                                                                            //
   * @memberOf Mongo.Collection                                                                                 //
   * @instance                                                                                                  //
   * @param {MongoSelector} [selector] A query describing the documents to find                                 //
   * @param {Object} [options]                                                                                  //
   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                               //
   * @param {Number} options.skip Number of results to skip at the beginning                                    //
   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                     //
   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity             //
   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
   * @returns {Object}                                                                                          //
   */findOne: function () /* selector, options */{                                                              //
    var self = this;                                                                                            // 330
                                                                                                                //
    var argArray = _.toArray(arguments);                                                                        // 331
                                                                                                                //
    return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));           // 332
  }                                                                                                             // 334
});                                                                                                             // 258
                                                                                                                //
Mongo.Collection._publishCursor = function (cursor, sub, collection) {                                          // 338
  var observeHandle = cursor.observeChanges({                                                                   // 339
    added: function (id, fields) {                                                                              // 340
      sub.added(collection, id, fields);                                                                        // 341
    },                                                                                                          // 342
    changed: function (id, fields) {                                                                            // 343
      sub.changed(collection, id, fields);                                                                      // 344
    },                                                                                                          // 345
    removed: function (id) {                                                                                    // 346
      sub.removed(collection, id);                                                                              // 347
    }                                                                                                           // 348
  }); // We don't call sub.ready() here: it gets called in livedata_server, after                               // 339
  // possibly calling _publishCursor on multiple returned cursors.                                              // 352
  // register stop callback (expects lambda w/ no args).                                                        // 354
                                                                                                                //
  sub.onStop(function () {                                                                                      // 355
    observeHandle.stop();                                                                                       // 355
  }); // return the observeHandle in case it needs to be stopped early                                          // 355
                                                                                                                //
  return observeHandle;                                                                                         // 358
}; // protect against dangerous selectors.  falsey and {_id: falsey} are both                                   // 359
// likely programmer error, and not what you want, particularly for destructive                                 // 362
// operations.  JS regexps don't serialize over DDP but can be trivially                                        // 363
// replaced by $regex.                                                                                          // 364
                                                                                                                //
                                                                                                                //
Mongo.Collection._rewriteSelector = function (selector) {                                                       // 365
  // shorthand -- scalars match _id                                                                             // 366
  if (LocalCollection._selectorIsId(selector)) selector = {                                                     // 367
    _id: selector                                                                                               // 368
  };                                                                                                            // 368
                                                                                                                //
  if (_.isArray(selector)) {                                                                                    // 370
    // This is consistent with the Mongo console itself; if we don't do this                                    // 371
    // check passing an empty array ends up selecting all items                                                 // 372
    throw new Error("Mongo selector can't be an array.");                                                       // 373
  }                                                                                                             // 374
                                                                                                                //
  if (!selector || '_id' in selector && !selector._id) // can't match anything                                  // 376
    return {                                                                                                    // 378
      _id: Random.id()                                                                                          // 378
    };                                                                                                          // 378
  var ret = {};                                                                                                 // 380
                                                                                                                //
  _.each(selector, function (value, key) {                                                                      // 381
    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                          // 382
    if (value instanceof RegExp) {                                                                              // 383
      ret[key] = convertRegexpToMongoSelector(value);                                                           // 384
    } else if (value && value.$regex instanceof RegExp) {                                                       // 385
      ret[key] = convertRegexpToMongoSelector(value.$regex); // if value is {$regex: /foo/, $options: ...} then $options
      // override the ones set on $regex.                                                                       // 388
                                                                                                                //
      if (value.$options !== undefined) ret[key].$options = value.$options;                                     // 389
    } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                      // 391
      // Translate lower levels of $and/$or/$nor                                                                // 393
      ret[key] = _.map(value, function (v) {                                                                    // 394
        return Mongo.Collection._rewriteSelector(v);                                                            // 395
      });                                                                                                       // 396
    } else {                                                                                                    // 397
      ret[key] = value;                                                                                         // 398
    }                                                                                                           // 399
  });                                                                                                           // 400
                                                                                                                //
  return ret;                                                                                                   // 401
}; // convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                        // 402
// selector                                                                                                     // 405
                                                                                                                //
                                                                                                                //
function convertRegexpToMongoSelector(regexp) {                                                                 // 406
  check(regexp, RegExp); // safety belt                                                                         // 407
                                                                                                                //
  var selector = {                                                                                              // 409
    $regex: regexp.source                                                                                       // 409
  };                                                                                                            // 409
  var regexOptions = ''; // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                   // 410
  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                            // 412
                                                                                                                //
  if (regexp.ignoreCase) regexOptions += 'i';                                                                   // 413
  if (regexp.multiline) regexOptions += 'm';                                                                    // 415
  if (regexOptions) selector.$options = regexOptions;                                                           // 417
  return selector;                                                                                              // 420
} // 'insert' immediately returns the inserted document's new _id.                                              // 421
// The others return values immediately if you are in a stub, an in-memory                                      // 424
// unmanaged collection, or a mongo-backed collection and you don't pass a                                      // 425
// callback. 'update' and 'remove' return the number of affected                                                // 426
// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                  // 427
// insert happened, 'insertedId'.                                                                               // 428
//                                                                                                              // 429
// Otherwise, the semantics are exactly like other methods: they take                                           // 430
// a callback as an optional last argument; if no callback is                                                   // 431
// provided, they block until the operation is complete, and throw an                                           // 432
// exception if it fails; if a callback is provided, then they don't                                            // 433
// necessarily block, and they call the callback when they finish with error and                                // 434
// result arguments.  (The insert method provides the document ID as its result;                                // 435
// update and remove provide the number of affected docs as the result; upsert                                  // 436
// provides an object with numberAffected and maybe insertedId.)                                                // 437
//                                                                                                              // 438
// On the client, blocking is impossible, so if a callback                                                      // 439
// isn't provided, they just return immediately and any error                                                   // 440
// information is lost.                                                                                         // 441
//                                                                                                              // 442
// There's one more tweak. On the client, if you don't provide a                                                // 443
// callback, then if there is an error, a message will be logged with                                           // 444
// Meteor._debug.                                                                                               // 445
//                                                                                                              // 446
// The intent (though this is actually determined by the underlying                                             // 447
// drivers) is that the operations should be done synchronously, not                                            // 448
// generating their result until the database has acknowledged                                                  // 449
// them. In the future maybe we should provide a flag to turn this                                              // 450
// off.                                                                                                         // 451
/**                                                                                                             // 453
 * @summary Insert a document in the collection.  Returns its unique _id.                                       //
 * @locus Anywhere                                                                                              //
 * @method  insert                                                                                              //
 * @memberOf Mongo.Collection                                                                                   //
 * @instance                                                                                                    //
 * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
 * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
 */                                                                                                             //
                                                                                                                //
Mongo.Collection.prototype.insert = function () {                                                               // 462
  function insert(doc, callback) {                                                                              // 462
    // Make sure we were passed a document to insert                                                            // 463
    if (!doc) {                                                                                                 // 464
      throw new Error("insert requires an argument");                                                           // 465
    } // Shallow-copy the document and possibly generate an ID                                                  // 466
                                                                                                                //
                                                                                                                //
    doc = _.extend({}, doc);                                                                                    // 469
                                                                                                                //
    if ('_id' in doc) {                                                                                         // 471
      if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                    // 472
        throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");            // 473
      }                                                                                                         // 474
    } else {                                                                                                    // 475
      var generateId = true; // Don't generate the id if we're the client and the 'outermost' call              // 476
      // This optimization saves us passing both the randomSeed and the id                                      // 479
      // Passing both is redundant.                                                                             // 480
                                                                                                                //
      if (this._isRemoteCollection()) {                                                                         // 481
        var enclosing = DDP._CurrentInvocation.get();                                                           // 482
                                                                                                                //
        if (!enclosing) {                                                                                       // 483
          generateId = false;                                                                                   // 484
        }                                                                                                       // 485
      }                                                                                                         // 486
                                                                                                                //
      if (generateId) {                                                                                         // 488
        doc._id = this._makeNewID();                                                                            // 489
      }                                                                                                         // 490
    } // On inserts, always return the id that we generated; on all other                                       // 491
    // operations, just return the result from the collection.                                                  // 494
                                                                                                                //
                                                                                                                //
    var chooseReturnValueFromCollectionResult = function (result) {                                             // 495
      if (doc._id) {                                                                                            // 496
        return doc._id;                                                                                         // 497
      } // XXX what is this for??                                                                               // 498
      // It's some iteraction between the callback to _callMutatorMethod and                                    // 501
      // the return value conversion                                                                            // 502
                                                                                                                //
                                                                                                                //
      doc._id = result;                                                                                         // 503
      return result;                                                                                            // 505
    };                                                                                                          // 506
                                                                                                                //
    var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                        // 508
                                                                                                                //
    if (this._isRemoteCollection()) {                                                                           // 510
      var result = this._callMutatorMethod("insert", [doc], wrappedCallback);                                   // 511
                                                                                                                //
      return chooseReturnValueFromCollectionResult(result);                                                     // 512
    } // it's my collection.  descend into the collection object                                                // 513
    // and propagate any exception.                                                                             // 516
                                                                                                                //
                                                                                                                //
    try {                                                                                                       // 517
      // If the user provided a callback and the collection implements this                                     // 518
      // operation asynchronously, then queryRet will be undefined, and the                                     // 519
      // result will be returned through the callback instead.                                                  // 520
      var _result = this._collection.insert(doc, wrappedCallback);                                              // 521
                                                                                                                //
      return chooseReturnValueFromCollectionResult(_result);                                                    // 522
    } catch (e) {                                                                                               // 523
      if (callback) {                                                                                           // 524
        callback(e);                                                                                            // 525
        return null;                                                                                            // 526
      }                                                                                                         // 527
                                                                                                                //
      throw e;                                                                                                  // 528
    }                                                                                                           // 529
  }                                                                                                             // 530
                                                                                                                //
  return insert;                                                                                                // 462
}(); /**                                                                                                        // 462
      * @summary Modify one or more documents in the collection. Returns the number of matched documents.       //
      * @locus Anywhere                                                                                         //
      * @method update                                                                                          //
      * @memberOf Mongo.Collection                                                                              //
      * @instance                                                                                               //
      * @param {MongoSelector} selector Specifies which documents to modify                                     //
      * @param {MongoModifier} modifier Specifies how to modify the documents                                   //
      * @param {Object} [options]                                                                               //
      * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
      * @param {Boolean} options.upsert True to insert a document if no matching documents are found.           //
      * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
      */                                                                                                        //
                                                                                                                //
Mongo.Collection.prototype.update = function () {                                                               // 545
  function update(selector, modifier) {                                                                         // 545
    for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      optionsAndCallback[_key - 2] = arguments[_key];                                                           // 545
    }                                                                                                           // 545
                                                                                                                //
    var callback = popCallbackFromArgs(optionsAndCallback);                                                     // 546
    selector = Mongo.Collection._rewriteSelector(selector); // We've already popped off the callback, so we are left with an array
    // of one or zero items                                                                                     // 551
                                                                                                                //
    var options = _.clone(optionsAndCallback[0]) || {};                                                         // 552
                                                                                                                //
    if (options && options.upsert) {                                                                            // 553
      // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                       // 554
      if (options.insertedId) {                                                                                 // 555
        if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
      } else if (!selector._id) {                                                                               // 558
        options.insertedId = this._makeNewID();                                                                 // 559
      }                                                                                                         // 560
    }                                                                                                           // 561
                                                                                                                //
    var wrappedCallback = wrapCallback(callback);                                                               // 563
                                                                                                                //
    if (this._isRemoteCollection()) {                                                                           // 565
      var args = [selector, modifier, options];                                                                 // 566
      return this._callMutatorMethod("update", args, wrappedCallback);                                          // 572
    } // it's my collection.  descend into the collection object                                                // 573
    // and propagate any exception.                                                                             // 576
                                                                                                                //
                                                                                                                //
    try {                                                                                                       // 577
      // If the user provided a callback and the collection implements this                                     // 578
      // operation asynchronously, then queryRet will be undefined, and the                                     // 579
      // result will be returned through the callback instead.                                                  // 580
      return this._collection.update(selector, modifier, options, wrappedCallback);                             // 581
    } catch (e) {                                                                                               // 583
      if (callback) {                                                                                           // 584
        callback(e);                                                                                            // 585
        return null;                                                                                            // 586
      }                                                                                                         // 587
                                                                                                                //
      throw e;                                                                                                  // 588
    }                                                                                                           // 589
  }                                                                                                             // 590
                                                                                                                //
  return update;                                                                                                // 545
}(); /**                                                                                                        // 545
      * @summary Remove documents from the collection                                                           //
      * @locus Anywhere                                                                                         //
      * @method remove                                                                                          //
      * @memberOf Mongo.Collection                                                                              //
      * @instance                                                                                               //
      * @param {MongoSelector} selector Specifies which documents to remove                                     //
      * @param {Function} [callback] Optional.  If present, called with an error object as its argument.        //
      */                                                                                                        //
                                                                                                                //
Mongo.Collection.prototype.remove = function () {                                                               // 601
  function remove(selector, callback) {                                                                         // 601
    selector = Mongo.Collection._rewriteSelector(selector);                                                     // 602
    var wrappedCallback = wrapCallback(callback);                                                               // 604
                                                                                                                //
    if (this._isRemoteCollection()) {                                                                           // 606
      return this._callMutatorMethod("remove", [selector], wrappedCallback);                                    // 607
    } // it's my collection.  descend into the collection object                                                // 608
    // and propagate any exception.                                                                             // 611
                                                                                                                //
                                                                                                                //
    try {                                                                                                       // 612
      // If the user provided a callback and the collection implements this                                     // 613
      // operation asynchronously, then queryRet will be undefined, and the                                     // 614
      // result will be returned through the callback instead.                                                  // 615
      return this._collection.remove(selector, wrappedCallback);                                                // 616
    } catch (e) {                                                                                               // 617
      if (callback) {                                                                                           // 618
        callback(e);                                                                                            // 619
        return null;                                                                                            // 620
      }                                                                                                         // 621
                                                                                                                //
      throw e;                                                                                                  // 622
    }                                                                                                           // 623
  }                                                                                                             // 624
                                                                                                                //
  return remove;                                                                                                // 601
}(); // Determine if this collection is simply a minimongo representation of a real                             // 601
// database on another server                                                                                   // 627
                                                                                                                //
                                                                                                                //
Mongo.Collection.prototype._isRemoteCollection = function () {                                                  // 628
  function _isRemoteCollection() {                                                                              // 628
    // XXX see #MeteorServerNull                                                                                // 629
    return this._connection && this._connection !== Meteor.server;                                              // 630
  }                                                                                                             // 631
                                                                                                                //
  return _isRemoteCollection;                                                                                   // 628
}(); // Convert the callback to not return a result if there is an error                                        // 628
                                                                                                                //
                                                                                                                //
function wrapCallback(callback, convertResult) {                                                                // 634
  if (!callback) {                                                                                              // 635
    return;                                                                                                     // 636
  } // If no convert function was passed in, just use a "blank function"                                        // 637
                                                                                                                //
                                                                                                                //
  convertResult = convertResult || _.identity;                                                                  // 640
  return function (error, result) {                                                                             // 642
    callback(error, !error && convertResult(result));                                                           // 643
  };                                                                                                            // 644
} /**                                                                                                           // 645
   * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
   * @locus Anywhere                                                                                            //
   * @param {MongoSelector} selector Specifies which documents to modify                                        //
   * @param {MongoModifier} modifier Specifies how to modify the documents                                      //
   * @param {Object} [options]                                                                                  //
   * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
   * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
   */                                                                                                           //
                                                                                                                //
Mongo.Collection.prototype.upsert = function () {                                                               // 656
  function upsert(selector, modifier, options, callback) {                                                      // 656
    if (!callback && typeof options === "function") {                                                           // 658
      callback = options;                                                                                       // 659
      options = {};                                                                                             // 660
    }                                                                                                           // 661
                                                                                                                //
    var updateOptions = _.extend({}, options, {                                                                 // 663
      _returnObject: true,                                                                                      // 664
      upsert: true                                                                                              // 665
    });                                                                                                         // 663
                                                                                                                //
    return this.update(selector, modifier, updateOptions, callback);                                            // 668
  }                                                                                                             // 669
                                                                                                                //
  return upsert;                                                                                                // 656
}(); // We'll actually design an index API later. For now, we just pass through to                              // 656
// Mongo's, but make it synchronous.                                                                            // 672
                                                                                                                //
                                                                                                                //
Mongo.Collection.prototype._ensureIndex = function (index, options) {                                           // 673
  var self = this;                                                                                              // 674
  if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections");      // 675
                                                                                                                //
  self._collection._ensureIndex(index, options);                                                                // 677
};                                                                                                              // 678
                                                                                                                //
Mongo.Collection.prototype._dropIndex = function (index) {                                                      // 679
  var self = this;                                                                                              // 680
  if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");          // 681
                                                                                                                //
  self._collection._dropIndex(index);                                                                           // 683
};                                                                                                              // 684
                                                                                                                //
Mongo.Collection.prototype._dropCollection = function () {                                                      // 685
  var self = this;                                                                                              // 686
  if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");
                                                                                                                //
  self._collection.dropCollection();                                                                            // 689
};                                                                                                              // 690
                                                                                                                //
Mongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                        // 691
  var self = this;                                                                                              // 692
  if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");
                                                                                                                //
  self._collection._createCappedCollection(byteSize, maxDocuments);                                             // 695
}; /**                                                                                                          // 696
    * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
    * @locus Server                                                                                             //
    */                                                                                                          //
                                                                                                                //
Mongo.Collection.prototype.rawCollection = function () {                                                        // 702
  var self = this;                                                                                              // 703
                                                                                                                //
  if (!self._collection.rawCollection) {                                                                        // 704
    throw new Error("Can only call rawCollection on server collections");                                       // 705
  }                                                                                                             // 706
                                                                                                                //
  return self._collection.rawCollection();                                                                      // 707
}; /**                                                                                                          // 708
    * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
    * @locus Server                                                                                             //
    */                                                                                                          //
                                                                                                                //
Mongo.Collection.prototype.rawDatabase = function () {                                                          // 714
  var self = this;                                                                                              // 715
                                                                                                                //
  if (!(self._driver.mongo && self._driver.mongo.db)) {                                                         // 716
    throw new Error("Can only call rawDatabase on server collections");                                         // 717
  }                                                                                                             // 718
                                                                                                                //
  return self._driver.mongo.db;                                                                                 // 719
}; /**                                                                                                          // 720
    * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
    * @locus Anywhere                                                                                           //
    * @class                                                                                                    //
    * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create    //
    */                                                                                                          //
                                                                                                                //
Mongo.ObjectID = MongoID.ObjectID; /**                                                                          // 729
                                    * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
                                    * @class                                                                    //
                                    * @instanceName cursor                                                      //
                                    */                                                                          //
Mongo.Cursor = LocalCollection.Cursor; /**                                                                      // 736
                                        * @deprecated in 0.9.1                                                  //
                                        */                                                                      //
Mongo.Collection.Cursor = Mongo.Cursor; /**                                                                     // 741
                                         * @deprecated in 0.9.1                                                 //
                                         */                                                                     //
Mongo.Collection.ObjectID = Mongo.ObjectID; /**                                                                 // 746
                                             * @deprecated in 0.9.1                                             //
                                             */                                                                 //
Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package                      // 751
                                                                                                                //
_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                           // 754
                                                                                                                //
function popCallbackFromArgs(args) {                                                                            // 756
  // Pull off any callback (or perhaps a 'callback' variable that was passed                                    // 757
  // in undefined, like how 'upsert' does it).                                                                  // 758
  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {      // 759
    return args.pop();                                                                                          // 762
  }                                                                                                             // 763
}                                                                                                               // 764
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/mongo/local_collection_driver.js");
require("./node_modules/meteor/mongo/collection.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.mongo = {}, {
  Mongo: Mongo
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;

/* Package-scope variables */
var ReactiveVar;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/reactive-var/reactive-var.js                                                                        //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
/*                                                                                                              // 1
 * ## [new] ReactiveVar(initialValue, [equalsFunc])                                                             // 2
 *                                                                                                              // 3
 * A ReactiveVar holds a single value that can be get and set,                                                  // 4
 * such that calling `set` will invalidate any Computations that                                                // 5
 * called `get`, according to the usual contract for reactive                                                   // 6
 * data sources.                                                                                                // 7
 *                                                                                                              // 8
 * A ReactiveVar is much like a Session variable -- compare `foo.get()`                                         // 9
 * to `Session.get("foo")` -- but it doesn't have a global name and isn't                                       // 10
 * automatically migrated across hot code pushes.  Also, while Session                                          // 11
 * variables can only hold JSON or EJSON, ReactiveVars can hold any value.                                      // 12
 *                                                                                                              // 13
 * An important property of ReactiveVars, which is sometimes the reason                                         // 14
 * to use one, is that setting the value to the same value as before has                                        // 15
 * no effect, meaning ReactiveVars can be used to absorb extra                                                  // 16
 * invalidations that wouldn't serve a purpose.  However, by default,                                           // 17
 * ReactiveVars are extremely conservative about what changes they                                              // 18
 * absorb.  Calling `set` with an object argument will *always* trigger                                         // 19
 * invalidations, because even if the new value is `===` the old value,                                         // 20
 * the object may have been mutated.  You can change the default behavior                                       // 21
 * by passing a function of two arguments, `oldValue` and `newValue`,                                           // 22
 * to the constructor as `equalsFunc`.                                                                          // 23
 *                                                                                                              // 24
 * This class is extremely basic right now, but the idea is to evolve                                           // 25
 * it into the ReactiveVar of Geoff's Lickable Forms proposal.                                                  // 26
 */                                                                                                             // 27
                                                                                                                // 28
/**                                                                                                             // 29
 * @class                                                                                                       // 30
 * @instanceName reactiveVar                                                                                    // 31
 * @summary Constructor for a ReactiveVar, which represents a single reactive variable.                         // 32
 * @locus Client                                                                                                // 33
 * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
 * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
 */                                                                                                             // 36
ReactiveVar = function (initialValue, equalsFunc) {                                                             // 37
  if (! (this instanceof ReactiveVar))                                                                          // 38
    // called without `new`                                                                                     // 39
    return new ReactiveVar(initialValue, equalsFunc);                                                           // 40
                                                                                                                // 41
  this.curValue = initialValue;                                                                                 // 42
  this.equalsFunc = equalsFunc;                                                                                 // 43
  this.dep = new Tracker.Dependency;                                                                            // 44
};                                                                                                              // 45
                                                                                                                // 46
ReactiveVar._isEqual = function (oldValue, newValue) {                                                          // 47
  var a = oldValue, b = newValue;                                                                               // 48
  // Two values are "equal" here if they are `===` and are                                                      // 49
  // number, boolean, string, undefined, or null.                                                               // 50
  if (a !== b)                                                                                                  // 51
    return false;                                                                                               // 52
  else                                                                                                          // 53
    return ((!a) || (typeof a === 'number') || (typeof a === 'boolean') ||                                      // 54
            (typeof a === 'string'));                                                                           // 55
};                                                                                                              // 56
                                                                                                                // 57
/**                                                                                                             // 58
 * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.                   // 59
 * @locus Client                                                                                                // 60
 */                                                                                                             // 61
ReactiveVar.prototype.get = function () {                                                                       // 62
  if (Tracker.active)                                                                                           // 63
    this.dep.depend();                                                                                          // 64
                                                                                                                // 65
  return this.curValue;                                                                                         // 66
};                                                                                                              // 67
                                                                                                                // 68
/**                                                                                                             // 69
 * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
 * @locus Client                                                                                                // 71
 * @param {Any} newValue                                                                                        // 72
 */                                                                                                             // 73
ReactiveVar.prototype.set = function (newValue) {                                                               // 74
  var oldValue = this.curValue;                                                                                 // 75
                                                                                                                // 76
  if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))                                            // 77
    // value is same as last time                                                                               // 78
    return;                                                                                                     // 79
                                                                                                                // 80
  this.curValue = newValue;                                                                                     // 81
  this.dep.changed();                                                                                           // 82
};                                                                                                              // 83
                                                                                                                // 84
ReactiveVar.prototype.toString = function () {                                                                  // 85
  return 'ReactiveVar{' + this.get() + '}';                                                                     // 86
};                                                                                                              // 87
                                                                                                                // 88
ReactiveVar.prototype._numListeners = function() {                                                              // 89
  // Tests want to know.                                                                                        // 90
  // Accesses a private field of Tracker.Dependency.                                                            // 91
  var count = 0;                                                                                                // 92
  for (var id in this.dep._dependentsById)                                                                      // 93
    count++;                                                                                                    // 94
  return count;                                                                                                 // 95
};                                                                                                              // 96
                                                                                                                // 97
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['reactive-var'] = {}, {
  ReactiveVar: ReactiveVar
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['ddp-rate-limiter'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Random = Package.random.Random;

(function(){

//////////////////////////////////////////////////////////////////////////////////////
//                                                                                  //
// packages/localstorage/localstorage.js                                            //
//                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////
                                                                                    //
// Meteor._localStorage is not an ideal name, but we can change it later.           // 1
                                                                                    // 2
// Let's test to make sure that localStorage actually works. For example, in        // 3
// Safari with private browsing on, window.localStorage exists but actually         // 4
// trying to use it throws.                                                         // 5
// Accessing window.localStorage can also immediately throw an error in IE (#1291).
                                                                                    // 7
var key = '_localstorage_test_' + Random.id();                                      // 8
var retrieved;                                                                      // 9
try {                                                                               // 10
  if (window.localStorage) {                                                        // 11
    window.localStorage.setItem(key, key);                                          // 12
    retrieved = window.localStorage.getItem(key);                                   // 13
    window.localStorage.removeItem(key);                                            // 14
  }                                                                                 // 15
} catch (e) {                                                                       // 16
  // ... ignore                                                                     // 17
}                                                                                   // 18
if (key === retrieved) {                                                            // 19
  Meteor._localStorage = {                                                          // 20
    getItem: function (key) {                                                       // 21
      return window.localStorage.getItem(key);                                      // 22
    },                                                                              // 23
    setItem: function (key, value) {                                                // 24
      window.localStorage.setItem(key, value);                                      // 25
    },                                                                              // 26
    removeItem: function (key) {                                                    // 27
      window.localStorage.removeItem(key);                                          // 28
    }                                                                               // 29
  };                                                                                // 30
}                                                                                   // 31
                                                                                    // 32
if (!Meteor._localStorage) {                                                        // 33
  Meteor._debug(                                                                    // 34
    "You are running a browser with no localStorage or userData "                   // 35
      + "support. Logging in from one tab will not cause another "                  // 36
      + "tab to be logged in.");                                                    // 37
                                                                                    // 38
  Meteor._localStorage = {                                                          // 39
    _data: {},                                                                      // 40
                                                                                    // 41
    setItem: function (key, val) {                                                  // 42
      this._data[key] = val;                                                        // 43
    },                                                                              // 44
    removeItem: function (key) {                                                    // 45
      delete this._data[key];                                                       // 46
    },                                                                              // 47
    getItem: function (key) {                                                       // 48
      var value = this._data[key];                                                  // 49
      if (value === undefined)                                                      // 50
        return null;                                                                // 51
      else                                                                          // 52
        return value;                                                               // 53
    }                                                                               // 54
  };                                                                                // 55
}                                                                                   // 56
                                                                                    // 57
//////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package.localstorage = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;

/* Package-scope variables */
var Hook;

(function(){

////////////////////////////////////////////////////////////////////////////////////
//                                                                                //
// packages/callback-hook/hook.js                                                 //
//                                                                                //
////////////////////////////////////////////////////////////////////////////////////
                                                                                  //
// XXX This pattern is under development. Do not add more callsites               // 1
// using this package for now. See:                                               // 2
// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f                   // 3
//                                                                                // 4
// Encapsulates the pattern of registering callbacks on a hook.                   // 5
//                                                                                // 6
// The `each` method of the hook calls its iterator function argument             // 7
// with each registered callback.  This allows the hook to                        // 8
// conditionally decide not to call the callback (if, for example, the            // 9
// observed object has been closed or terminated).                                // 10
//                                                                                // 11
// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
// called with the Meteor environment of the calling code that                    // 13
// registered the callback. Override by passing { bindEnvironment: false }        // 14
// to the constructor.                                                            // 15
//                                                                                // 16
// Registering a callback returns an object with a single `stop`                  // 17
// method which unregisters the callback.                                         // 18
//                                                                                // 19
// The code is careful to allow a callback to be safely unregistered              // 20
// while the callbacks are being iterated over.                                   // 21
//                                                                                // 22
// If the hook is configured with the `exceptionHandler` option, the              // 23
// handler will be called if a called callback throws an exception.               // 24
// By default (if the exception handler doesn't itself throw an                   // 25
// exception, or if the iterator function doesn't return a falsy value            // 26
// to terminate the calling of callbacks), the remaining callbacks                // 27
// will still be called.                                                          // 28
//                                                                                // 29
// Alternatively, the `debugPrintExceptions` option can be specified              // 30
// as string describing the callback.  On an exception the string and             // 31
// the exception will be printed to the console log with                          // 32
// `Meteor._debug`, and the exception otherwise ignored.                          // 33
//                                                                                // 34
// If an exception handler isn't specified, exceptions thrown in the              // 35
// callback will propagate up to the iterator function, and will                  // 36
// terminate calling the remaining callbacks if not caught.                       // 37
                                                                                  // 38
Hook = function (options) {                                                       // 39
  var self = this;                                                                // 40
  options = options || {};                                                        // 41
  self.nextCallbackId = 0;                                                        // 42
  self.callbacks = {};                                                            // 43
  // Whether to wrap callbacks with Meteor.bindEnvironment                        // 44
  self.bindEnvironment = true;                                                    // 45
  if (options.bindEnvironment === false)                                          // 46
    self.bindEnvironment = false;                                                 // 47
                                                                                  // 48
  if (options.exceptionHandler)                                                   // 49
    self.exceptionHandler = options.exceptionHandler;                             // 50
  else if (options.debugPrintExceptions) {                                        // 51
    if (! _.isString(options.debugPrintExceptions))                               // 52
      throw new Error("Hook option debugPrintExceptions should be a string");     // 53
    self.exceptionHandler = options.debugPrintExceptions;                         // 54
  }                                                                               // 55
};                                                                                // 56
                                                                                  // 57
_.extend(Hook.prototype, {                                                        // 58
  register: function (callback) {                                                 // 59
    var self = this;                                                              // 60
    var exceptionHandler =  self.exceptionHandler || function (exception) {       // 61
      // Note: this relies on the undocumented fact that if bindEnvironment's     // 62
      // onException throws, and you are invoking the callback either in the      // 63
      // browser or from within a Fiber in Node, the exception is propagated.     // 64
      throw exception;                                                            // 65
    };                                                                            // 66
                                                                                  // 67
    if (self.bindEnvironment) {                                                   // 68
      callback = Meteor.bindEnvironment(callback, exceptionHandler);              // 69
    } else {                                                                      // 70
      callback = dontBindEnvironment(callback, exceptionHandler);                 // 71
    }                                                                             // 72
                                                                                  // 73
    var id = self.nextCallbackId++;                                               // 74
    self.callbacks[id] = callback;                                                // 75
                                                                                  // 76
    return {                                                                      // 77
      stop: function () {                                                         // 78
        delete self.callbacks[id];                                                // 79
      }                                                                           // 80
    };                                                                            // 81
  },                                                                              // 82
                                                                                  // 83
  // For each registered callback, call the passed iterator function              // 84
  // with the callback.                                                           // 85
  //                                                                              // 86
  // The iterator function can choose whether or not to call the                  // 87
  // callback.  (For example, it might not call the callback if the               // 88
  // observed object has been closed or terminated).                              // 89
  //                                                                              // 90
  // The iteration is stopped if the iterator function returns a falsy            // 91
  // value or throws an exception.                                                // 92
  //                                                                              // 93
  each: function (iterator) {                                                     // 94
    var self = this;                                                              // 95
                                                                                  // 96
    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't    // 97
    // run them to completion (and exceptions thrown from onException are not     // 98
    // propagated), so we need to be in a Fiber.                                  // 99
    Meteor._nodeCodeMustBeInFiber();                                              // 100
                                                                                  // 101
    var ids = _.keys(self.callbacks);                                             // 102
    for (var i = 0;  i < ids.length;  ++i) {                                      // 103
      var id = ids[i];                                                            // 104
      // check to see if the callback was removed during iteration                // 105
      if (_.has(self.callbacks, id)) {                                            // 106
        var callback = self.callbacks[id];                                        // 107
                                                                                  // 108
        if (! iterator(callback))                                                 // 109
          break;                                                                  // 110
      }                                                                           // 111
    }                                                                             // 112
  }                                                                               // 113
});                                                                               // 114
                                                                                  // 115
// Copied from Meteor.bindEnvironment and removed all the env stuff.              // 116
var dontBindEnvironment = function (func, onException, _this) {                   // 117
  if (!onException || typeof(onException) === 'string') {                         // 118
    var description = onException || "callback of async function";                // 119
    onException = function (error) {                                              // 120
      Meteor._debug(                                                              // 121
        "Exception in " + description + ":",                                      // 122
        error && error.stack || error                                             // 123
      );                                                                          // 124
    };                                                                            // 125
  }                                                                               // 126
                                                                                  // 127
  return function (/* arguments */) {                                             // 128
    var args = _.toArray(arguments);                                              // 129
                                                                                  // 130
    var runAndHandleExceptions = function () {                                    // 131
      try {                                                                       // 132
        var ret = func.apply(_this, args);                                        // 133
      } catch (e) {                                                               // 134
        onException(e);                                                           // 135
      }                                                                           // 136
      return ret;                                                                 // 137
    };                                                                            // 138
                                                                                  // 139
    return runAndHandleExceptions();                                              // 140
  };                                                                              // 141
};                                                                                // 142
                                                                                  // 143
////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['callback-hook'] = {}, {
  Hook: Hook
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Random = Package.random.Random;
var Hook = Package['callback-hook'].Hook;
var DDP = Package['ddp-client'].DDP;
var Mongo = Package.mongo.Mongo;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var Accounts, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;

var require = meteorInstall({"node_modules":{"meteor":{"accounts-base":{"client_main.js":["./accounts_client.js","./url_client.js","./localstorage_token.js",function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/accounts-base/client_main.js                                                                             //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
module.export({                                                                                                      // 1
  AccountsClient: function () {                                                                                      // 1
    return AccountsClient;                                                                                           // 1
  },                                                                                                                 // 1
  AccountsTest: function () {                                                                                        // 1
    return AccountsTest;                                                                                             // 1
  }                                                                                                                  // 1
});                                                                                                                  // 1
var AccountsClient = void 0;                                                                                         // 1
module.import("./accounts_client.js", {                                                                              // 1
  "AccountsClient": function (v) {                                                                                   // 1
    AccountsClient = v;                                                                                              // 1
  }                                                                                                                  // 1
}, 0);                                                                                                               // 1
var AccountsTest = void 0;                                                                                           // 1
module.import("./url_client.js", {                                                                                   // 1
  "AccountsTest": function (v) {                                                                                     // 1
    AccountsTest = v;                                                                                                // 1
  }                                                                                                                  // 1
}, 1);                                                                                                               // 1
module.import("./localstorage_token.js");                                                                            // 1
/**                                                                                                                  // 5
 * @namespace Accounts                                                                                               //
 * @summary The namespace for all client-side accounts-related methods.                                              //
 */Accounts = new AccountsClient(); /**                                                                              //
                                     * @summary A [Mongo.Collection](#collections) containing user documents.        //
                                     * @locus Anywhere                                                               //
                                     * @type {Mongo.Collection}                                                      //
                                     * @importFromPackage meteor                                                     //
                                     */                                                                              //
Meteor.users = Accounts.users;                                                                                       // 17
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"accounts_client.js":["babel-runtime/helpers/classCallCheck","babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits","./accounts_common.js",function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/accounts-base/accounts_client.js                                                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                              //
                                                                                                                     //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //
                                                                                                                     //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                        //
                                                                                                                     //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                               //
                                                                                                                     //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                          //
                                                                                                                     //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                 //
                                                                                                                     //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                    //
                                                                                                                     //
module.export({                                                                                                      // 1
  AccountsClient: function () {                                                                                      // 1
    return AccountsClient;                                                                                           // 1
  }                                                                                                                  // 1
});                                                                                                                  // 1
var AccountsCommon = void 0;                                                                                         // 1
module.import("./accounts_common.js", {                                                                              // 1
  "AccountsCommon": function (v) {                                                                                   // 1
    AccountsCommon = v;                                                                                              // 1
  }                                                                                                                  // 1
}, 0);                                                                                                               // 1
                                                                                                                     //
var AccountsClient = function (_AccountsCommon) {                                                                    //
  (0, _inherits3.default)(AccountsClient, _AccountsCommon);                                                          //
                                                                                                                     //
  function AccountsClient(options) {                                                                                 // 14
    (0, _classCallCheck3.default)(this, AccountsClient);                                                             // 14
                                                                                                                     //
    var _this = (0, _possibleConstructorReturn3.default)(this, _AccountsCommon.call(this, options));                 // 14
                                                                                                                     //
    _this._loggingIn = false;                                                                                        // 17
    _this._loggingInDeps = new Tracker.Dependency();                                                                 // 18
    _this._loginServicesHandle = _this.connection.subscribe("meteor.loginServiceConfiguration");                     // 20
    _this._pageLoadLoginCallbacks = [];                                                                              // 23
    _this._pageLoadLoginAttemptInfo = null; // Defined in url_client.js.                                             // 24
                                                                                                                     //
    _this._initUrlMatching(); // Defined in localstorage_token.js.                                                   // 27
                                                                                                                     //
                                                                                                                     //
    _this._initLocalStorage();                                                                                       // 30
                                                                                                                     //
    return _this;                                                                                                    // 14
  } ///                                                                                                              // 31
  /// CURRENT USER                                                                                                   // 34
  ///                                                                                                                // 35
  // @override                                                                                                       // 37
                                                                                                                     //
                                                                                                                     //
  AccountsClient.prototype.userId = function () {                                                                    //
    function userId() {                                                                                              //
      return this.connection.userId();                                                                               // 39
    }                                                                                                                // 40
                                                                                                                     //
    return userId;                                                                                                   //
  }(); // This is mostly just called within this file, but Meteor.loginWithPassword                                  //
  // also uses it to make loggingIn() be true during the beginPasswordExchange                                       // 43
  // method call too.                                                                                                // 44
                                                                                                                     //
                                                                                                                     //
  AccountsClient.prototype._setLoggingIn = function () {                                                             //
    function _setLoggingIn(x) {                                                                                      //
      if (this._loggingIn !== x) {                                                                                   // 46
        this._loggingIn = x;                                                                                         // 47
                                                                                                                     //
        this._loggingInDeps.changed();                                                                               // 48
      }                                                                                                              // 49
    }                                                                                                                // 50
                                                                                                                     //
    return _setLoggingIn;                                                                                            //
  }(); /**                                                                                                           //
        * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.
        * @locus Client                                                                                              //
        */                                                                                                           //
                                                                                                                     //
  AccountsClient.prototype.loggingIn = function () {                                                                 //
    function loggingIn() {                                                                                           //
      this._loggingInDeps.depend();                                                                                  // 57
                                                                                                                     //
      return this._loggingIn;                                                                                        // 58
    }                                                                                                                // 59
                                                                                                                     //
    return loggingIn;                                                                                                //
  }(); /**                                                                                                           //
        * @summary Log the user out.                                                                                 //
        * @locus Client                                                                                              //
        * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
        */                                                                                                           //
                                                                                                                     //
  AccountsClient.prototype.logout = function () {                                                                    //
    function logout(callback) {                                                                                      //
      var self = this;                                                                                               // 67
      self.connection.apply('logout', [], {                                                                          // 68
        wait: true                                                                                                   // 69
      }, function (error, result) {                                                                                  // 68
        if (error) {                                                                                                 // 71
          callback && callback(error);                                                                               // 72
        } else {                                                                                                     // 73
          self.makeClientLoggedOut();                                                                                // 74
          callback && callback();                                                                                    // 75
        }                                                                                                            // 76
      });                                                                                                            // 77
    }                                                                                                                // 78
                                                                                                                     //
    return logout;                                                                                                   //
  }(); /**                                                                                                           //
        * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
        * @locus Client                                                                                              //
        * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
        */                                                                                                           //
                                                                                                                     //
  AccountsClient.prototype.logoutOtherClients = function () {                                                        //
    function logoutOtherClients(callback) {                                                                          //
      var self = this; // We need to make two method calls: one to replace our current token,                        // 86
      // and another to remove all tokens except the current one. We want to                                         // 89
      // call these two methods one after the other, without any other                                               // 90
      // methods running between them. For example, we don't want `logout`                                           // 91
      // to be called in between our two method calls (otherwise the second                                          // 92
      // method call would return an error). Another example: we don't want                                          // 93
      // logout to be called before the callback for `getNewToken`;                                                  // 94
      // otherwise we would momentarily log the user out and then write a                                            // 95
      // new token to localStorage.                                                                                  // 96
      //                                                                                                             // 97
      // To accomplish this, we make both calls as wait methods, and queue                                           // 98
      // them one after the other, without spinning off the event loop in                                            // 99
      // between. Even though we queue `removeOtherTokens` before                                                    // 100
      // `getNewToken`, we won't actually send the `removeOtherTokens` call                                          // 101
      // until the `getNewToken` callback has finished running, because they                                         // 102
      // are both wait methods.                                                                                      // 103
                                                                                                                     //
      self.connection.apply('getNewToken', [], {                                                                     // 104
        wait: true                                                                                                   // 107
      }, function (err, result) {                                                                                    // 107
        if (!err) {                                                                                                  // 109
          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);                                   // 110
        }                                                                                                            // 115
      });                                                                                                            // 116
      self.connection.apply('removeOtherTokens', [], {                                                               // 119
        wait: true                                                                                                   // 122
      }, function (err) {                                                                                            // 122
        callback && callback(err);                                                                                   // 124
      });                                                                                                            // 125
    }                                                                                                                // 127
                                                                                                                     //
    return logoutOtherClients;                                                                                       //
  }();                                                                                                               //
                                                                                                                     //
  return AccountsClient;                                                                                             //
}(AccountsCommon);                                                                                                   //
                                                                                                                     //
;                                                                                                                    // 128
var Ap = AccountsClient.prototype; /**                                                                               // 130
                                    * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.
                                    * @locus Client                                                                  //
                                    * @importFromPackage meteor                                                      //
                                    */                                                                               //
                                                                                                                     //
Meteor.loggingIn = function () {                                                                                     // 137
  return Accounts.loggingIn();                                                                                       // 138
}; ///                                                                                                               // 139
/// LOGIN METHODS                                                                                                    // 142
///                                                                                                                  // 143
// Call a login method on the server.                                                                                // 145
//                                                                                                                   // 146
// A login method is a method which on success calls `this.setUserId(id)` and                                        // 147
// `Accounts._setLoginToken` on the server and returns an object with fields                                         // 148
// 'id' (containing the user id), 'token' (containing a resume token), and                                           // 149
// optionally `tokenExpires`.                                                                                        // 150
//                                                                                                                   // 151
// This function takes care of:                                                                                      // 152
//   - Updating the Meteor.loggingIn() reactive data source                                                          // 153
//   - Calling the method in 'wait' mode                                                                             // 154
//   - On success, saving the resume token to localStorage                                                           // 155
//   - On success, calling Accounts.connection.setUserId()                                                           // 156
//   - Setting up an onReconnect handler which logs in with                                                          // 157
//     the resume token                                                                                              // 158
//                                                                                                                   // 159
// Options:                                                                                                          // 160
// - methodName: The method to call (default 'login')                                                                // 161
// - methodArguments: The arguments for the method                                                                   // 162
// - validateResult: If provided, will be called with the result of the                                              // 163
//                 method. If it throws, the client will not be logged in (and                                       // 164
//                 its error will be passed to the callback).                                                        // 165
// - userCallback: Will be called with no arguments once the user is fully                                           // 166
//                 logged in, or with the error on error.                                                            // 167
//                                                                                                                   // 168
                                                                                                                     //
                                                                                                                     //
Ap.callLoginMethod = function (options) {                                                                            // 169
  var self = this;                                                                                                   // 170
  options = _.extend({                                                                                               // 172
    methodName: 'login',                                                                                             // 173
    methodArguments: [{}],                                                                                           // 174
    _suppressLoggingIn: false                                                                                        // 175
  }, options); // Set defaults for callback arguments to no-op functions; make sure we                               // 172
  // override falsey values too.                                                                                     // 179
                                                                                                                     //
  _.each(['validateResult', 'userCallback'], function (f) {                                                          // 180
    if (!options[f]) options[f] = function () {};                                                                    // 181
  }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.                                          // 183
                                                                                                                     //
                                                                                                                     //
  var loginCallbacks = _.once(function (error) {                                                                     // 186
    if (!error) {                                                                                                    // 187
      self._onLoginHook.each(function (callback) {                                                                   // 188
        callback();                                                                                                  // 189
        return true;                                                                                                 // 190
      });                                                                                                            // 191
    } else {                                                                                                         // 192
      self._onLoginFailureHook.each(function (callback) {                                                            // 193
        callback({                                                                                                   // 194
          error: error                                                                                               // 194
        });                                                                                                          // 194
        return true;                                                                                                 // 195
      });                                                                                                            // 196
    }                                                                                                                // 197
                                                                                                                     //
    options.userCallback.apply(this, arguments);                                                                     // 198
  });                                                                                                                // 199
                                                                                                                     //
  var reconnected = false; // We want to set up onReconnect as soon as we get a result token back from               // 201
  // the server, without having to wait for subscriptions to rerun. This is                                          // 204
  // because if we disconnect and reconnect between getting the result and                                           // 205
  // getting the results of subscription rerun, we WILL NOT re-send this                                             // 206
  // method (because we never re-send methods whose results we've received)                                          // 207
  // but we WILL call loggedInAndDataReadyCallback at "reconnect quiesce"                                            // 208
  // time. This will lead to makeClientLoggedIn(result.id) even though we                                            // 209
  // haven't actually sent a login method!                                                                           // 210
  //                                                                                                                 // 211
  // But by making sure that we send this "resume" login in that case (and                                           // 212
  // calling makeClientLoggedOut if it fails), we'll end up with an accurate                                         // 213
  // client-side userId. (It's important that livedata_connection guarantees                                         // 214
  // that the "reconnect quiesce"-time call to loggedInAndDataReadyCallback                                          // 215
  // will occur before the callback from the resume login call.)                                                     // 216
                                                                                                                     //
  var onResultReceived = function (err, result) {                                                                    // 217
    if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was  // 218
      // already logged in they will still get logged in on reconnect.                                               // 220
      // See issue #4970.                                                                                            // 221
    } else {                                                                                                         // 222
      self.connection.onReconnect = function () {                                                                    // 223
        reconnected = true; // If our token was updated in storage, use the latest one.                              // 224
                                                                                                                     //
        var storedToken = self._storedLoginToken();                                                                  // 226
                                                                                                                     //
        if (storedToken) {                                                                                           // 227
          result = {                                                                                                 // 228
            token: storedToken,                                                                                      // 229
            tokenExpires: self._storedLoginTokenExpires()                                                            // 230
          };                                                                                                         // 228
        }                                                                                                            // 232
                                                                                                                     //
        if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());                           // 233
                                                                                                                     //
        if (self._tokenExpiresSoon(result.tokenExpires)) {                                                           // 235
          self.makeClientLoggedOut();                                                                                // 236
        } else {                                                                                                     // 237
          self.callLoginMethod({                                                                                     // 238
            methodArguments: [{                                                                                      // 239
              resume: result.token                                                                                   // 239
            }],                                                                                                      // 239
            // Reconnect quiescence ensures that the user doesn't see an                                             // 240
            // intermediate state before the login method finishes. So we don't                                      // 241
            // need to show a logging-in animation.                                                                  // 242
            _suppressLoggingIn: true,                                                                                // 243
            userCallback: function (error) {                                                                         // 244
              var storedTokenNow = self._storedLoginToken();                                                         // 245
                                                                                                                     //
              if (error) {                                                                                           // 246
                // If we had a login error AND the current stored token is the                                       // 247
                // one that we tried to log in with, then declare ourselves                                          // 248
                // logged out. If there's a token in storage but it's not the                                        // 249
                // token that we tried to log in with, we don't know anything                                        // 250
                // about whether that token is valid or not, so do nothing. The                                      // 251
                // periodic localStorage poll will decide if we are logged in or                                     // 252
                // out with this token, if it hasn't already. Of course, even                                        // 253
                // with this check, another tab could insert a new valid token                                       // 254
                // immediately before we clear localStorage here, which would                                        // 255
                // lead to both tabs being logged out, but by checking the token                                     // 256
                // in storage right now we hope to make that unlikely to happen.                                     // 257
                //                                                                                                   // 258
                // If there is no token in storage right now, we don't have to                                       // 259
                // do anything; whatever code removed the token from storage was                                     // 260
                // responsible for calling `makeClientLoggedOut()`, or the                                           // 261
                // periodic localStorage poll will call `makeClientLoggedOut`                                        // 262
                // eventually if another tab wiped the token from storage.                                           // 263
                if (storedTokenNow && storedTokenNow === result.token) {                                             // 264
                  self.makeClientLoggedOut();                                                                        // 265
                }                                                                                                    // 266
              } // Possibly a weird callback to call, but better than nothing if                                     // 267
              // there is a reconnect between "login result received" and "data                                      // 269
              // ready".                                                                                             // 270
                                                                                                                     //
                                                                                                                     //
              loginCallbacks(error);                                                                                 // 271
            }                                                                                                        // 272
          });                                                                                                        // 238
        }                                                                                                            // 273
      };                                                                                                             // 274
    }                                                                                                                // 275
  }; // This callback is called once the local cache of the current-user                                             // 276
  // subscription (and all subscriptions, in fact) are guaranteed to be up to                                        // 279
  // date.                                                                                                           // 280
                                                                                                                     //
                                                                                                                     //
  var loggedInAndDataReadyCallback = function (error, result) {                                                      // 281
    // If the login method returns its result but the connection is lost                                             // 282
    // before the data is in the local cache, it'll set an onReconnect (see                                          // 283
    // above). The onReconnect will try to log in using the token, and *it*                                          // 284
    // will call userCallback via its own version of this                                                            // 285
    // loggedInAndDataReadyCallback. So we don't have to do anything here.                                           // 286
    if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,                   // 287
    // because it could be matching a _setLoggingIn(true) from a                                                     // 291
    // half-completed pre-reconnect login method.                                                                    // 292
                                                                                                                     //
    self._setLoggingIn(false);                                                                                       // 293
                                                                                                                     //
    if (error || !result) {                                                                                          // 294
      error = error || new Error("No result from call to " + options.methodName);                                    // 295
      loginCallbacks(error);                                                                                         // 297
      return;                                                                                                        // 298
    }                                                                                                                // 299
                                                                                                                     //
    try {                                                                                                            // 300
      options.validateResult(result);                                                                                // 301
    } catch (e) {                                                                                                    // 302
      loginCallbacks(e);                                                                                             // 303
      return;                                                                                                        // 304
    } // Make the client logged in. (The user data should already be loaded!)                                        // 305
                                                                                                                     //
                                                                                                                     //
    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);                                           // 308
    loginCallbacks();                                                                                                // 309
  };                                                                                                                 // 310
                                                                                                                     //
  if (!options._suppressLoggingIn) self._setLoggingIn(true);                                                         // 312
  self.connection.apply(options.methodName, options.methodArguments, {                                               // 314
    wait: true,                                                                                                      // 317
    onResultReceived: onResultReceived                                                                               // 317
  }, loggedInAndDataReadyCallback);                                                                                  // 317
};                                                                                                                   // 319
                                                                                                                     //
Ap.makeClientLoggedOut = function () {                                                                               // 321
  // Ensure client was successfully logged in before running logout hooks.                                           // 322
  if (this.connection._userId) {                                                                                     // 323
    this._onLogoutHook.each(function (callback) {                                                                    // 324
      callback();                                                                                                    // 325
      return true;                                                                                                   // 326
    });                                                                                                              // 327
  }                                                                                                                  // 328
                                                                                                                     //
  this._unstoreLoginToken();                                                                                         // 329
                                                                                                                     //
  this.connection.setUserId(null);                                                                                   // 330
  this.connection.onReconnect = null;                                                                                // 331
};                                                                                                                   // 332
                                                                                                                     //
Ap.makeClientLoggedIn = function (userId, token, tokenExpires) {                                                     // 334
  this._storeLoginToken(userId, token, tokenExpires);                                                                // 335
                                                                                                                     //
  this.connection.setUserId(userId);                                                                                 // 336
}; /**                                                                                                               // 337
    * @summary Log the user out.                                                                                     //
    * @locus Client                                                                                                  //
    * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
    * @importFromPackage meteor                                                                                      //
    */                                                                                                               //
                                                                                                                     //
Meteor.logout = function (callback) {                                                                                // 345
  return Accounts.logout(callback);                                                                                  // 346
}; /**                                                                                                               // 347
    * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
    * @locus Client                                                                                                  //
    * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
    * @importFromPackage meteor                                                                                      //
    */                                                                                                               //
                                                                                                                     //
Meteor.logoutOtherClients = function (callback) {                                                                    // 355
  return Accounts.logoutOtherClients(callback);                                                                      // 356
}; ///                                                                                                               // 357
/// LOGIN SERVICES                                                                                                   // 361
///                                                                                                                  // 362
// A reactive function returning whether the loginServiceConfiguration                                               // 364
// subscription is ready. Used by accounts-ui to hide the login button                                               // 365
// until we have all the configuration loaded                                                                        // 366
//                                                                                                                   // 367
                                                                                                                     //
                                                                                                                     //
Ap.loginServicesConfigured = function () {                                                                           // 368
  return this._loginServicesHandle.ready();                                                                          // 369
}; // Some login services such as the redirect login flow or the resume                                              // 370
// login handler can log the user in at page load time.  The                                                         // 374
// Meteor.loginWithX functions have a callback argument, but the                                                     // 375
// callback function instance won't be in memory any longer if the                                                   // 376
// page was reloaded.  The `onPageLoadLogin` function allows a                                                       // 377
// callback to be registered for the case where the login was                                                        // 378
// initiated in a previous VM, and we now have the result of the login                                               // 379
// attempt in a new VM.                                                                                              // 380
// Register a callback to be called if we have information about a                                                   // 382
// login attempt at page load time.  Call the callback immediately if                                                // 383
// we already have the page load login attempt info, otherwise stash                                                 // 384
// the callback to be called if and when we do get the attempt info.                                                 // 385
//                                                                                                                   // 386
                                                                                                                     //
                                                                                                                     //
Ap.onPageLoadLogin = function (f) {                                                                                  // 387
  if (this._pageLoadLoginAttemptInfo) {                                                                              // 388
    f(this._pageLoadLoginAttemptInfo);                                                                               // 389
  } else {                                                                                                           // 390
    this._pageLoadLoginCallbacks.push(f);                                                                            // 391
  }                                                                                                                  // 392
}; // Receive the information about the login attempt at page load time.                                             // 393
// Call registered callbacks, and also record the info in case                                                       // 397
// someone's callback hasn't been registered yet.                                                                    // 398
//                                                                                                                   // 399
                                                                                                                     //
                                                                                                                     //
Ap._pageLoadLogin = function (attemptInfo) {                                                                         // 400
  if (this._pageLoadLoginAttemptInfo) {                                                                              // 401
    Meteor._debug("Ignoring unexpected duplicate page load login attempt info");                                     // 402
                                                                                                                     //
    return;                                                                                                          // 403
  }                                                                                                                  // 404
                                                                                                                     //
  _.each(this._pageLoadLoginCallbacks, function (callback) {                                                         // 406
    callback(attemptInfo);                                                                                           // 407
  });                                                                                                                // 408
                                                                                                                     //
  this._pageLoadLoginCallbacks = [];                                                                                 // 410
  this._pageLoadLoginAttemptInfo = attemptInfo;                                                                      // 411
}; ///                                                                                                               // 412
/// HANDLEBARS HELPERS                                                                                               // 416
///                                                                                                                  // 417
// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}                                            // 419
// global helpers.                                                                                                   // 420
                                                                                                                     //
                                                                                                                     //
if (Package.blaze) {                                                                                                 // 421
  /**                                                                                                                // 422
   * @global                                                                                                         //
   * @name  currentUser                                                                                              //
   * @isHelper true                                                                                                  //
   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.
   */Package.blaze.Blaze.Template.registerHelper('currentUser', function () {                                        //
    return Meteor.user();                                                                                            // 429
  }); /**                                                                                                            // 430
       * @global                                                                                                     //
       * @name  loggingIn                                                                                            //
       * @isHelper true                                                                                              //
       * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).                                                     //
       */                                                                                                            //
  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {                                             // 438
    return Meteor.loggingIn();                                                                                       // 439
  });                                                                                                                // 440
}                                                                                                                    // 441
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"accounts_common.js":["babel-runtime/helpers/classCallCheck",function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/accounts-base/accounts_common.js                                                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                              //
                                                                                                                     //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                     //
                                                                                                                     //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                    //
                                                                                                                     //
module.export({                                                                                                      // 1
  AccountsCommon: function () {                                                                                      // 1
    return AccountsCommon;                                                                                           // 1
  }                                                                                                                  // 1
});                                                                                                                  // 1
                                                                                                                     //
var AccountsCommon = function () {                                                                                   //
  function AccountsCommon(options) {                                                                                 // 11
    (0, _classCallCheck3.default)(this, AccountsCommon);                                                             // 11
    // Currently this is read directly by packages like accounts-password                                            // 12
    // and accounts-ui-unstyled.                                                                                     // 13
    this._options = {}; // Note that setting this.connection = null causes this.users to be a                        // 14
    // LocalCollection, which is not what we want.                                                                   // 17
                                                                                                                     //
    this.connection = undefined;                                                                                     // 18
                                                                                                                     //
    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to    // 19
    // this collection.                                                                                              // 22
                                                                                                                     //
                                                                                                                     //
    this.users = new Mongo.Collection("users", {                                                                     // 23
      _preventAutopublish: true,                                                                                     // 24
      connection: this.connection                                                                                    // 25
    }); // Callback exceptions are printed with Meteor._debug and ignored.                                           // 23
                                                                                                                     //
    this._onLoginHook = new Hook({                                                                                   // 29
      bindEnvironment: false,                                                                                        // 30
      debugPrintExceptions: "onLogin callback"                                                                       // 31
    });                                                                                                              // 29
    this._onLoginFailureHook = new Hook({                                                                            // 34
      bindEnvironment: false,                                                                                        // 35
      debugPrintExceptions: "onLoginFailure callback"                                                                // 36
    });                                                                                                              // 34
    this._onLogoutHook = new Hook({                                                                                  // 39
      bindEnvironment: false,                                                                                        // 40
      debugPrintExceptions: "onLogout callback"                                                                      // 41
    });                                                                                                              // 39
  } /**                                                                                                              // 43
     * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                  //
     * @locus Anywhere but publish functions                                                                         //
     */                                                                                                              //
                                                                                                                     //
  AccountsCommon.prototype.userId = function () {                                                                    //
    function userId() {                                                                                              //
      throw new Error("userId method not implemented");                                                              // 50
    }                                                                                                                // 51
                                                                                                                     //
    return userId;                                                                                                   //
  }(); /**                                                                                                           //
        * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.           //
        * @locus Anywhere but publish functions                                                                      //
        */                                                                                                           //
                                                                                                                     //
  AccountsCommon.prototype.user = function () {                                                                      //
    function user() {                                                                                                //
      var userId = this.userId();                                                                                    // 58
      return userId ? this.users.findOne(userId) : null;                                                             // 59
    }                                                                                                                // 60
                                                                                                                     //
    return user;                                                                                                     //
  }(); // Set up config for the accounts system. Call this on both the client                                        //
  // and the server.                                                                                                 // 63
  //                                                                                                                 // 64
  // Note that this method gets overridden on AccountsServer.prototype, but                                          // 65
  // the overriding method calls the overridden method.                                                              // 66
  //                                                                                                                 // 67
  // XXX we should add some enforcement that this is called on both the                                              // 68
  // client and the server. Otherwise, a user can                                                                    // 69
  // 'forbidClientAccountCreation' only on the client and while it looks                                             // 70
  // like their app is secure, the server will still accept createUser                                               // 71
  // calls. https://github.com/meteor/meteor/issues/828                                                              // 72
  //                                                                                                                 // 73
  // @param options {Object} an object with fields:                                                                  // 74
  // - sendVerificationEmail {Boolean}                                                                               // 75
  //     Send email address verification emails to new users created from                                            // 76
  //     client signups.                                                                                             // 77
  // - forbidClientAccountCreation {Boolean}                                                                         // 78
  //     Do not allow clients to create accounts directly.                                                           // 79
  // - restrictCreationByEmailDomain {Function or String}                                                            // 80
  //     Require created users to have an email matching the function or                                             // 81
  //     having the string as domain.                                                                                // 82
  // - loginExpirationInDays {Number}                                                                                // 83
  //     Number of days since login until a user is logged out (login token                                          // 84
  //     expires).                                                                                                   // 85
  // - passwordResetTokenExpirationInDays {Number}                                                                   // 86
  //     Number of days since password reset token creation until the                                                // 87
  //     token cannt be used any longer (password reset token expires).                                              // 88
  /**                                                                                                                // 90
   * @summary Set global accounts options.                                                                           //
   * @locus Anywhere                                                                                                 //
   * @param {Object} options                                                                                         //
   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.
   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the "Create account" link will not be available.
   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.
   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.
   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.
   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.
   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.
   */                                                                                                                //
                                                                                                                     //
  AccountsCommon.prototype.config = function () {                                                                    //
    function config(options) {                                                                                       //
      var self = this; // We don't want users to accidentally only call Accounts.config on the                       // 103
      // client, where some of the options will have partial effects (eg removing                                    // 106
      // the "create account" button from accounts-ui if forbidClientAccountCreation                                 // 107
      // is set, or redirecting Google login to a specific-domain page) without                                      // 108
      // having their full effects.                                                                                  // 109
                                                                                                                     //
      if (Meteor.isServer) {                                                                                         // 110
        __meteor_runtime_config__.accountsConfigCalled = true;                                                       // 111
      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                  // 112
        // XXX would be nice to "crash" the client and replace the UI with an error                                  // 113
        // message, but there's no trivial way to do this.                                                           // 114
        Meteor._debug("Accounts.config was called on the client but not on the " + "server; some configuration options may not take effect.");
      } // We need to validate the oauthSecretKey option at the time                                                 // 117
      // Accounts.config is called. We also deliberately don't store the                                             // 120
      // oauthSecretKey in Accounts._options.                                                                        // 121
                                                                                                                     //
                                                                                                                     //
      if (_.has(options, "oauthSecretKey")) {                                                                        // 122
        if (Meteor.isClient) throw new Error("The oauthSecretKey option may only be specified on the server");       // 123
        if (!Package["oauth-encryption"]) throw new Error("The oauth-encryption package must be loaded to set oauthSecretKey");
        Package["oauth-encryption"].OAuthEncryption.loadKey(options.oauthSecretKey);                                 // 127
        options = _.omit(options, "oauthSecretKey");                                                                 // 128
      } // validate option keys                                                                                      // 129
                                                                                                                     //
                                                                                                                     //
      var VALID_KEYS = ["sendVerificationEmail", "forbidClientAccountCreation", "passwordEnrollTokenExpirationInDays", "restrictCreationByEmailDomain", "loginExpirationInDays", "passwordResetTokenExpirationInDays"];
                                                                                                                     //
      _.each(_.keys(options), function (key) {                                                                       // 134
        if (!_.contains(VALID_KEYS, key)) {                                                                          // 135
          throw new Error("Accounts.config: Invalid key: " + key);                                                   // 136
        }                                                                                                            // 137
      }); // set values in Accounts._options                                                                         // 138
                                                                                                                     //
                                                                                                                     //
      _.each(VALID_KEYS, function (key) {                                                                            // 141
        if (key in options) {                                                                                        // 142
          if (key in self._options) {                                                                                // 143
            throw new Error("Can't set `" + key + "` more than once");                                               // 144
          }                                                                                                          // 145
                                                                                                                     //
          self._options[key] = options[key];                                                                         // 146
        }                                                                                                            // 147
      });                                                                                                            // 148
    }                                                                                                                // 149
                                                                                                                     //
    return config;                                                                                                   //
  }(); /**                                                                                                           //
        * @summary Register a callback to be called after a login attempt succeeds.                                  //
        * @locus Anywhere                                                                                            //
        * @param {Function} func The callback to be called when login is successful.                                 //
        */                                                                                                           //
                                                                                                                     //
  AccountsCommon.prototype.onLogin = function () {                                                                   //
    function onLogin(func) {                                                                                         //
      return this._onLoginHook.register(func);                                                                       // 157
    }                                                                                                                // 158
                                                                                                                     //
    return onLogin;                                                                                                  //
  }(); /**                                                                                                           //
        * @summary Register a callback to be called after a login attempt fails.                                     //
        * @locus Anywhere                                                                                            //
        * @param {Function} func The callback to be called after the login has failed.                               //
        */                                                                                                           //
                                                                                                                     //
  AccountsCommon.prototype.onLoginFailure = function () {                                                            //
    function onLoginFailure(func) {                                                                                  //
      return this._onLoginFailureHook.register(func);                                                                // 166
    }                                                                                                                // 167
                                                                                                                     //
    return onLoginFailure;                                                                                           //
  }(); /**                                                                                                           //
        * @summary Register a callback to be called after a logout attempt succeeds.                                 //
        * @locus Anywhere                                                                                            //
        * @param {Function} func The callback to be called when logout is successful.                                //
        */                                                                                                           //
                                                                                                                     //
  AccountsCommon.prototype.onLogout = function () {                                                                  //
    function onLogout(func) {                                                                                        //
      return this._onLogoutHook.register(func);                                                                      // 175
    }                                                                                                                // 176
                                                                                                                     //
    return onLogout;                                                                                                 //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._initConnection = function () {                                                           //
    function _initConnection(options) {                                                                              //
      if (!Meteor.isClient) {                                                                                        // 179
        return;                                                                                                      // 180
      } // The connection used by the Accounts system. This is the connection                                        // 181
      // that will get logged in by Meteor.login(), and this is the                                                  // 184
      // connection whose login state will be reflected by Meteor.userId().                                          // 185
      //                                                                                                             // 186
      // It would be much preferable for this to be in accounts_client.js,                                           // 187
      // but it has to be here because it's needed to create the                                                     // 188
      // Meteor.users collection.                                                                                    // 189
                                                                                                                     //
                                                                                                                     //
      if (options.connection) {                                                                                      // 191
        this.connection = options.connection;                                                                        // 192
      } else if (options.ddpUrl) {                                                                                   // 193
        this.connection = DDP.connect(options.ddpUrl);                                                               // 194
      } else if (typeof __meteor_runtime_config__ !== "undefined" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {
        // Temporary, internal hook to allow the server to point the client                                          // 197
        // to a different authentication server. This is for a very                                                  // 198
        // particular use case that comes up when implementing a oauth                                               // 199
        // server. Unsupported and may go away at any point in time.                                                 // 200
        //                                                                                                           // 201
        // We will eventually provide a general way to use account-base                                              // 202
        // against any DDP connection, not just one special one.                                                     // 203
        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                            // 204
      } else {                                                                                                       // 206
        this.connection = Meteor.connection;                                                                         // 207
      }                                                                                                              // 208
    }                                                                                                                // 209
                                                                                                                     //
    return _initConnection;                                                                                          //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._getTokenLifetimeMs = function () {                                                       //
    function _getTokenLifetimeMs() {                                                                                 //
      return (this._options.loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;           // 212
    }                                                                                                                // 214
                                                                                                                     //
    return _getTokenLifetimeMs;                                                                                      //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._getPasswordResetTokenLifetimeMs = function () {                                          //
    function _getPasswordResetTokenLifetimeMs() {                                                                    //
      return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
    }                                                                                                                // 219
                                                                                                                     //
    return _getPasswordResetTokenLifetimeMs;                                                                         //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._getPasswordEnrollTokenLifetimeMs = function () {                                         //
    function _getPasswordEnrollTokenLifetimeMs() {                                                                   //
      return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
    }                                                                                                                // 224
                                                                                                                     //
    return _getPasswordEnrollTokenLifetimeMs;                                                                        //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._tokenExpiration = function () {                                                          //
    function _tokenExpiration(when) {                                                                                //
      // We pass when through the Date constructor for backwards compatibility;                                      // 227
      // `when` used to be a number.                                                                                 // 228
      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                        // 229
    }                                                                                                                // 230
                                                                                                                     //
    return _tokenExpiration;                                                                                         //
  }();                                                                                                               //
                                                                                                                     //
  AccountsCommon.prototype._tokenExpiresSoon = function () {                                                         //
    function _tokenExpiresSoon(when) {                                                                               //
      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                           // 233
                                                                                                                     //
      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                     // 234
      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                        // 235
      return new Date() > new Date(when) - minLifetimeMs;                                                            // 237
    }                                                                                                                // 238
                                                                                                                     //
    return _tokenExpiresSoon;                                                                                        //
  }();                                                                                                               //
                                                                                                                     //
  return AccountsCommon;                                                                                             //
}();                                                                                                                 //
                                                                                                                     //
var Ap = AccountsCommon.prototype; // Note that Accounts is defined separately in accounts_client.js and             // 241
// accounts_server.js.                                                                                               // 244
/**                                                                                                                  // 246
 * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                      //
 * @locus Anywhere but publish functions                                                                             //
 * @importFromPackage meteor                                                                                         //
 */                                                                                                                  //
                                                                                                                     //
Meteor.userId = function () {                                                                                        // 251
  return Accounts.userId();                                                                                          // 252
}; /**                                                                                                               // 253
    * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.               //
    * @locus Anywhere but publish functions                                                                          //
    * @importFromPackage meteor                                                                                      //
    */                                                                                                               //
                                                                                                                     //
Meteor.user = function () {                                                                                          // 260
  return Accounts.user();                                                                                            // 261
}; // how long (in days) until a login token expires                                                                 // 262
                                                                                                                     //
                                                                                                                     //
var DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires                     // 265
                                                                                                                     //
var DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires       // 267
                                                                                                                     //
var DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within
// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                        // 271
// Tries to avoid abrupt disconnects from expiring tokens.                                                           // 272
                                                                                                                     //
var MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                  // 273
// how often (in milliseconds) we check for expired tokens                                                           // 274
                                                                                                                     //
EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                                // 275
// how long we wait before logging out clients when Meteor.logoutOtherClients is                                     // 276
// called                                                                                                            // 277
                                                                                                                     //
CONNECTION_CLOSE_DELAY_MS = 10 * 1000; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility
                                                                                                                     //
Meteor.startup(function () {                                                                                         // 281
  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                  // 282
  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                                // 284
  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                                 // 285
}); // Thrown when the user cancels the login process (eg, closes an oauth                                           // 286
// popup, declines retina scan, etc)                                                                                 // 289
                                                                                                                     //
var lceName = 'Accounts.LoginCancelledError';                                                                        // 290
Ap.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                      // 291
  this.message = description;                                                                                        // 294
});                                                                                                                  // 295
Ap.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We should
// come up with a more generic way to do this (eg, with some sort of symbolic                                        // 300
// error code rather than a number).                                                                                 // 301
                                                                                                                     //
Ap.LoginCancelledError.numericError = 0x8acdc2f;                                                                     // 302
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"localstorage_token.js":["./accounts_client.js",function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/accounts-base/localstorage_token.js                                                                      //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var AccountsClient = void 0;                                                                                         // 1
module.import("./accounts_client.js", {                                                                              // 1
  "AccountsClient": function (v) {                                                                                   // 1
    AccountsClient = v;                                                                                              // 1
  }                                                                                                                  // 1
}, 0);                                                                                                               // 1
var Ap = AccountsClient.prototype; // This file deals with storing a login token and user id in the                  // 2
// browser's localStorage facility. It polls local storage every few                                                 // 5
// seconds to synchronize login state between multiple tabs in the same                                              // 6
// browser.                                                                                                          // 7
// Login with a Meteor access token. This is the only public function                                                // 9
// here.                                                                                                             // 10
                                                                                                                     //
Meteor.loginWithToken = function (token, callback) {                                                                 // 11
  return Accounts.loginWithToken(token, callback);                                                                   // 12
};                                                                                                                   // 13
                                                                                                                     //
Ap.loginWithToken = function (token, callback) {                                                                     // 15
  this.callLoginMethod({                                                                                             // 16
    methodArguments: [{                                                                                              // 17
      resume: token                                                                                                  // 18
    }],                                                                                                              // 17
    userCallback: callback                                                                                           // 20
  });                                                                                                                // 16
}; // Semi-internal API. Call this function to re-enable auto login after                                            // 22
// if it was disabled at startup.                                                                                    // 25
                                                                                                                     //
                                                                                                                     //
Ap._enableAutoLogin = function () {                                                                                  // 26
  this._autoLoginEnabled = true;                                                                                     // 27
                                                                                                                     //
  this._pollStoredLoginToken();                                                                                      // 28
}; ///                                                                                                               // 29
/// STORING                                                                                                          // 33
///                                                                                                                  // 34
// Call this from the top level of the test file for any test that does                                              // 36
// logging in and out, to protect multiple tabs running the same tests                                               // 37
// simultaneously from interfering with each others' localStorage.                                                   // 38
                                                                                                                     //
                                                                                                                     //
Ap._isolateLoginTokenForTest = function () {                                                                         // 39
  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();                                                         // 40
  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();                                                                 // 41
};                                                                                                                   // 42
                                                                                                                     //
Ap._storeLoginToken = function (userId, token, tokenExpires) {                                                       // 44
  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);                                                            // 45
                                                                                                                     //
  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);                                                         // 46
                                                                                                                     //
  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());                                               // 47
                                                                                                                     //
  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to
  // connect a second time                                                                                           // 52
                                                                                                                     //
                                                                                                                     //
  this._lastLoginTokenWhenPolled = token;                                                                            // 53
};                                                                                                                   // 54
                                                                                                                     //
Ap._unstoreLoginToken = function () {                                                                                // 56
  Meteor._localStorage.removeItem(this.USER_ID_KEY);                                                                 // 57
                                                                                                                     //
  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);                                                             // 58
                                                                                                                     //
  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to
  // connect a second time                                                                                           // 62
                                                                                                                     //
                                                                                                                     //
  this._lastLoginTokenWhenPolled = null;                                                                             // 63
}; // This is private, but it is exported for now because it is used by a                                            // 64
// test in accounts-password.                                                                                        // 67
//                                                                                                                   // 68
                                                                                                                     //
                                                                                                                     //
Ap._storedLoginToken = function () {                                                                                 // 69
  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);                                                         // 70
};                                                                                                                   // 71
                                                                                                                     //
Ap._storedLoginTokenExpires = function () {                                                                          // 73
  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                 // 74
};                                                                                                                   // 75
                                                                                                                     //
Ap._storedUserId = function () {                                                                                     // 77
  return Meteor._localStorage.getItem(this.USER_ID_KEY);                                                             // 78
};                                                                                                                   // 79
                                                                                                                     //
Ap._unstoreLoginTokenIfExpiresSoon = function () {                                                                   // 81
  var tokenExpires = this._storedLoginTokenExpires();                                                                // 82
                                                                                                                     //
  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {                                              // 83
    this._unstoreLoginToken();                                                                                       // 84
  }                                                                                                                  // 85
}; ///                                                                                                               // 86
/// AUTO-LOGIN                                                                                                       // 89
///                                                                                                                  // 90
                                                                                                                     //
                                                                                                                     //
Ap._initLocalStorage = function () {                                                                                 // 92
  var self = this; // Key names to use in localStorage                                                               // 93
                                                                                                                     //
  self.LOGIN_TOKEN_KEY = "Meteor.loginToken";                                                                        // 96
  self.LOGIN_TOKEN_EXPIRES_KEY = "Meteor.loginTokenExpires";                                                         // 97
  self.USER_ID_KEY = "Meteor.userId";                                                                                // 98
  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                            // 100
                                                                                                                     //
  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {                                                  // 101
    // We want to keep using the same keys for existing apps that do not                                             // 102
    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have                                           // 103
    // to log in again after an app updates to a version of Meteor that                                              // 104
    // contains this code, but it's generally preferable to namespace the                                            // 105
    // keys so that connections from distinct apps to distinct DDP URLs                                              // 106
    // will be distinct in Meteor._localStorage.                                                                     // 107
    var namespace = ":" + this.connection._stream.rawUrl;                                                            // 108
                                                                                                                     //
    if (rootUrlPathPrefix) {                                                                                         // 109
      namespace += ":" + rootUrlPathPrefix;                                                                          // 110
    }                                                                                                                // 111
                                                                                                                     //
    self.LOGIN_TOKEN_KEY += namespace;                                                                               // 112
    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;                                                                       // 113
    self.USER_ID_KEY += namespace;                                                                                   // 114
  }                                                                                                                  // 115
                                                                                                                     //
  if (self._autoLoginEnabled) {                                                                                      // 117
    // Immediately try to log in via local storage, so that any DDP                                                  // 118
    // messages are sent after we have established our user account                                                  // 119
    self._unstoreLoginTokenIfExpiresSoon();                                                                          // 120
                                                                                                                     //
    var token = self._storedLoginToken();                                                                            // 121
                                                                                                                     //
    if (token) {                                                                                                     // 122
      // On startup, optimistically present us as logged in while the                                                // 123
      // request is in flight. This reduces page flicker on startup.                                                 // 124
      var userId = self._storedUserId();                                                                             // 125
                                                                                                                     //
      userId && self.connection.setUserId(userId);                                                                   // 126
      self.loginWithToken(token, function (err) {                                                                    // 127
        if (err) {                                                                                                   // 128
          Meteor._debug("Error logging in with token: " + err);                                                      // 129
                                                                                                                     //
          self.makeClientLoggedOut();                                                                                // 130
        }                                                                                                            // 131
                                                                                                                     //
        self._pageLoadLogin({                                                                                        // 133
          type: "resume",                                                                                            // 134
          allowed: !err,                                                                                             // 135
          error: err,                                                                                                // 136
          methodName: "login",                                                                                       // 137
          // XXX This is duplicate code with loginWithToken, but                                                     // 138
          // loginWithToken can also be called at other times besides                                                // 139
          // page load.                                                                                              // 140
          methodArguments: [{                                                                                        // 141
            resume: token                                                                                            // 141
          }]                                                                                                         // 141
        });                                                                                                          // 133
      });                                                                                                            // 143
    }                                                                                                                // 144
  } // Poll local storage every 3 seconds to login if someone logged in in                                           // 145
  // another tab                                                                                                     // 148
                                                                                                                     //
                                                                                                                     //
  self._lastLoginTokenWhenPolled = token;                                                                            // 149
                                                                                                                     //
  if (self._pollIntervalTimer) {                                                                                     // 151
    // Unlikely that _initLocalStorage will be called more than once for                                             // 152
    // the same AccountsClient instance, but just in case...                                                         // 153
    clearInterval(self._pollIntervalTimer);                                                                          // 154
  }                                                                                                                  // 155
                                                                                                                     //
  self._pollIntervalTimer = setInterval(function () {                                                                // 157
    self._pollStoredLoginToken();                                                                                    // 158
  }, 3000);                                                                                                          // 159
};                                                                                                                   // 160
                                                                                                                     //
Ap._pollStoredLoginToken = function () {                                                                             // 162
  var self = this;                                                                                                   // 163
                                                                                                                     //
  if (!self._autoLoginEnabled) {                                                                                     // 165
    return;                                                                                                          // 166
  }                                                                                                                  // 167
                                                                                                                     //
  var currentLoginToken = self._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same
                                                                                                                     //
                                                                                                                     //
  if (self._lastLoginTokenWhenPolled != currentLoginToken) {                                                         // 172
    if (currentLoginToken) {                                                                                         // 173
      self.loginWithToken(currentLoginToken, function (err) {                                                        // 174
        if (err) {                                                                                                   // 175
          self.makeClientLoggedOut();                                                                                // 176
        }                                                                                                            // 177
      });                                                                                                            // 178
    } else {                                                                                                         // 179
      self.logout();                                                                                                 // 180
    }                                                                                                                // 181
  }                                                                                                                  // 182
                                                                                                                     //
  self._lastLoginTokenWhenPolled = currentLoginToken;                                                                // 184
};                                                                                                                   // 185
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"url_client.js":["./accounts_client.js",function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/accounts-base/url_client.js                                                                              //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
module.export({                                                                                                      // 1
  AccountsTest: function () {                                                                                        // 1
    return AccountsTest;                                                                                             // 1
  }                                                                                                                  // 1
});                                                                                                                  // 1
var AccountsClient = void 0;                                                                                         // 1
module.import("./accounts_client.js", {                                                                              // 1
  "AccountsClient": function (v) {                                                                                   // 1
    AccountsClient = v;                                                                                              // 1
  }                                                                                                                  // 1
}, 0);                                                                                                               // 1
var Ap = AccountsClient.prototype; // All of the special hash URLs we support for accounts interactions              // 3
                                                                                                                     //
var accountsPaths = ["reset-password", "verify-email", "enroll-account"];                                            // 6
var savedHash = window.location.hash;                                                                                // 8
                                                                                                                     //
Ap._initUrlMatching = function () {                                                                                  // 10
  // By default, allow the autologin process to happen.                                                              // 11
  this._autoLoginEnabled = true; // We only support one callback per URL.                                            // 12
                                                                                                                     //
  this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.                             // 15
                                                                                                                     //
  this._attemptToMatchHash();                                                                                        // 18
}; // Separate out this functionality for testing                                                                    // 19
                                                                                                                     //
                                                                                                                     //
Ap._attemptToMatchHash = function () {                                                                               // 23
  attemptToMatchHash(this, savedHash, defaultSuccessHandler);                                                        // 24
}; // Note that both arguments are optional and are currently only passed by                                         // 25
// accounts_url_tests.js.                                                                                            // 28
                                                                                                                     //
                                                                                                                     //
function attemptToMatchHash(accounts, hash, success) {                                                               // 29
  _.each(accountsPaths, function (urlPart) {                                                                         // 30
    var token;                                                                                                       // 31
    var tokenRegex = new RegExp("^\\#\\/" + urlPart + "\\/(.*)$");                                                   // 33
    var match = hash.match(tokenRegex);                                                                              // 34
                                                                                                                     //
    if (match) {                                                                                                     // 36
      token = match[1]; // XXX COMPAT WITH 0.9.3                                                                     // 37
                                                                                                                     //
      if (urlPart === "reset-password") {                                                                            // 40
        accounts._resetPasswordToken = token;                                                                        // 41
      } else if (urlPart === "verify-email") {                                                                       // 42
        accounts._verifyEmailToken = token;                                                                          // 43
      } else if (urlPart === "enroll-account") {                                                                     // 44
        accounts._enrollAccountToken = token;                                                                        // 45
      }                                                                                                              // 46
    } else {                                                                                                         // 47
      return;                                                                                                        // 48
    } // If no handlers match the hash, then maybe it's meant to be consumed                                         // 49
    // by some entirely different code, so we only clear it the first time                                           // 52
    // a handler successfully matches. Note that later handlers reuse the                                            // 53
    // savedHash, so clearing window.location.hash here will not interfere                                           // 54
    // with their needs.                                                                                             // 55
                                                                                                                     //
                                                                                                                     //
    window.location.hash = ""; // Do some stuff with the token we matched                                            // 56
                                                                                                                     //
    success.call(accounts, token, urlPart);                                                                          // 59
  });                                                                                                                // 60
}                                                                                                                    // 61
                                                                                                                     //
function defaultSuccessHandler(token, urlPart) {                                                                     // 63
  var self = this; // put login in a suspended state to wait for the interaction to finish                           // 64
                                                                                                                     //
  self._autoLoginEnabled = false; // wait for other packages to register callbacks                                   // 67
                                                                                                                     //
  Meteor.startup(function () {                                                                                       // 70
    // if a callback has been registered for this kind of token, call it                                             // 71
    if (self._accountsCallbacks[urlPart]) {                                                                          // 72
      self._accountsCallbacks[urlPart](token, function () {                                                          // 73
        self._enableAutoLogin();                                                                                     // 74
      });                                                                                                            // 75
    }                                                                                                                // 76
  });                                                                                                                // 77
} // Export for testing                                                                                              // 78
                                                                                                                     //
                                                                                                                     //
var AccountsTest = {                                                                                                 // 81
  attemptToMatchHash: function (hash, success) {                                                                     // 82
    return attemptToMatchHash(Accounts, hash, success);                                                              // 83
  }                                                                                                                  // 84
};                                                                                                                   // 81
                                                                                                                     //
// XXX these should be moved to accounts-password eventually. Right now                                              // 87
// this is prevented by the need to set autoLoginEnabled=false, but in                                               // 88
// some bright future we won't need to do that anymore.                                                              // 89
/**                                                                                                                  // 91
 * @summary Register a function to call when a reset password link is clicked                                        //
 * in an email sent by                                                                                               //
 * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).                                            //
 * This function should be called in top-level code, not inside                                                      //
 * `Meteor.startup()`.                                                                                               //
 * @memberof! Accounts                                                                                               //
 * @name onResetPasswordLink                                                                                         //
 * @param  {Function} callback The function to call. It is given two arguments:                                      //
 *                                                                                                                   //
 * 1. `token`: A password reset token that can be passed to                                                          //
 * [`Accounts.resetPassword`](#accounts_resetpassword).                                                              //
 * 2. `done`: A function to call when the password reset UI flow is complete. The normal                             //
 * login process is suspended until this function is called, so that the                                             //
 * password for user A can be reset even if user B was logged in.                                                    //
 * @locus Client                                                                                                     //
 */Ap.onResetPasswordLink = function (callback) {                                                                    //
  if (this._accountsCallbacks["reset-password"]) {                                                                   // 109
    Meteor._debug("Accounts.onResetPasswordLink was called more than once. " + "Only one callback added will be executed.");
  }                                                                                                                  // 112
                                                                                                                     //
  this._accountsCallbacks["reset-password"] = callback;                                                              // 114
}; /**                                                                                                               // 115
    * @summary Register a function to call when an email verification link is                                        //
    * clicked in an email sent by                                                                                    //
    * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).                                           //
    * This function should be called in top-level code, not inside                                                   //
    * `Meteor.startup()`.                                                                                            //
    * @memberof! Accounts                                                                                            //
    * @name onEmailVerificationLink                                                                                  //
    * @param  {Function} callback The function to call. It is given two arguments:                                   //
    *                                                                                                                //
    * 1. `token`: An email verification token that can be passed to                                                  //
    * [`Accounts.verifyEmail`](#accounts_verifyemail).                                                               //
    * 2. `done`: A function to call when the email verification UI flow is complete.                                 //
    * The normal login process is suspended until this function is called, so                                        //
    * that the user can be notified that they are verifying their email before                                       //
    * being logged in.                                                                                               //
    * @locus Client                                                                                                  //
    */                                                                                                               //
                                                                                                                     //
Ap.onEmailVerificationLink = function (callback) {                                                                   // 135
  if (this._accountsCallbacks["verify-email"]) {                                                                     // 136
    Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " + "Only one callback added will be executed.");
  }                                                                                                                  // 139
                                                                                                                     //
  this._accountsCallbacks["verify-email"] = callback;                                                                // 141
}; /**                                                                                                               // 142
    * @summary Register a function to call when an account enrollment link is                                        //
    * clicked in an email sent by                                                                                    //
    * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).                                               //
    * This function should be called in top-level code, not inside                                                   //
    * `Meteor.startup()`.                                                                                            //
    * @memberof! Accounts                                                                                            //
    * @name onEnrollmentLink                                                                                         //
    * @param  {Function} callback The function to call. It is given two arguments:                                   //
    *                                                                                                                //
    * 1. `token`: A password reset token that can be passed to                                                       //
    * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly                                          //
    * enrolled account a password.                                                                                   //
    * 2. `done`: A function to call when the enrollment UI flow is complete.                                         //
    * The normal login process is suspended until this function is called, so that                                   //
    * user A can be enrolled even if user B was logged in.                                                           //
    * @locus Client                                                                                                  //
    */                                                                                                               //
                                                                                                                     //
Ap.onEnrollmentLink = function (callback) {                                                                          // 162
  if (this._accountsCallbacks["enroll-account"]) {                                                                   // 163
    Meteor._debug("Accounts.onEnrollmentLink was called more than once. " + "Only one callback added will be executed.");
  }                                                                                                                  // 166
                                                                                                                     //
  this._accountsCallbacks["enroll-account"] = callback;                                                              // 168
};                                                                                                                   // 169
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/accounts-base/client_main.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['accounts-base'] = exports, {
  Accounts: Accounts
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['npm-bcrypt'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var SHA256;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/sha/sha256.js                                                                                     //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
/// METEOR WRAPPER                                                                                            // 1
//                                                                                                            // 2
SHA256 = (function () {                                                                                       // 3
                                                                                                              // 4
                                                                                                              // 5
/**                                                                                                           // 6
*                                                                                                             // 7
*  Secure Hash Algorithm (SHA256)                                                                             // 8
*  http://www.webtoolkit.info/javascript-sha256.html                                                          // 9
*  http://anmar.eu.org/projects/jssha2/                                                                       // 10
*                                                                                                             // 11
*  Original code by Angel Marin, Paul Johnston.                                                               // 12
*                                                                                                             // 13
**/                                                                                                           // 14
                                                                                                              // 15
function SHA256(s){                                                                                           // 16
                                                                                                              // 17
	var chrsz   = 8;                                                                                             // 18
	var hexcase = 0;                                                                                             // 19
                                                                                                              // 20
	function safe_add (x, y) {                                                                                   // 21
		var lsw = (x & 0xFFFF) + (y & 0xFFFF);                                                                      // 22
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);                                                              // 23
		return (msw << 16) | (lsw & 0xFFFF);                                                                        // 24
	}                                                                                                            // 25
                                                                                                              // 26
	function S (X, n) { return ( X >>> n ) | (X << (32 - n)); }                                                  // 27
	function R (X, n) { return ( X >>> n ); }                                                                    // 28
	function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }                                                      // 29
	function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }                                              // 30
	function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }                                            // 31
	function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }                                            // 32
	function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }                                             // 33
	function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }                                           // 34
                                                                                                              // 35
	function core_sha256 (m, l) {                                                                                // 36
		var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
		var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
		var W = new Array(64);                                                                                      // 39
		var a, b, c, d, e, f, g, h, i, j;                                                                           // 40
		var T1, T2;                                                                                                 // 41
                                                                                                              // 42
		m[l >> 5] |= 0x80 << (24 - l % 32);                                                                         // 43
		m[((l + 64 >> 9) << 4) + 15] = l;                                                                           // 44
                                                                                                              // 45
		for ( var i = 0; i<m.length; i+=16 ) {                                                                      // 46
			a = HASH[0];                                                                                               // 47
			b = HASH[1];                                                                                               // 48
			c = HASH[2];                                                                                               // 49
			d = HASH[3];                                                                                               // 50
			e = HASH[4];                                                                                               // 51
			f = HASH[5];                                                                                               // 52
			g = HASH[6];                                                                                               // 53
			h = HASH[7];                                                                                               // 54
                                                                                                              // 55
			for ( var j = 0; j<64; j++) {                                                                              // 56
				if (j < 16) W[j] = m[j + i];                                                                              // 57
				else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
                                                                                                              // 59
				T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);                    // 60
				T2 = safe_add(Sigma0256(a), Maj(a, b, c));                                                                // 61
                                                                                                              // 62
				h = g;                                                                                                    // 63
				g = f;                                                                                                    // 64
				f = e;                                                                                                    // 65
				e = safe_add(d, T1);                                                                                      // 66
				d = c;                                                                                                    // 67
				c = b;                                                                                                    // 68
				b = a;                                                                                                    // 69
				a = safe_add(T1, T2);                                                                                     // 70
			}                                                                                                          // 71
                                                                                                              // 72
			HASH[0] = safe_add(a, HASH[0]);                                                                            // 73
			HASH[1] = safe_add(b, HASH[1]);                                                                            // 74
			HASH[2] = safe_add(c, HASH[2]);                                                                            // 75
			HASH[3] = safe_add(d, HASH[3]);                                                                            // 76
			HASH[4] = safe_add(e, HASH[4]);                                                                            // 77
			HASH[5] = safe_add(f, HASH[5]);                                                                            // 78
			HASH[6] = safe_add(g, HASH[6]);                                                                            // 79
			HASH[7] = safe_add(h, HASH[7]);                                                                            // 80
		}                                                                                                           // 81
		return HASH;                                                                                                // 82
	}                                                                                                            // 83
                                                                                                              // 84
	function str2binb (str) {                                                                                    // 85
		var bin = Array();                                                                                          // 86
		var mask = (1 << chrsz) - 1;                                                                                // 87
		for(var i = 0; i < str.length * chrsz; i += chrsz) {                                                        // 88
			bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32);                                            // 89
		}                                                                                                           // 90
		return bin;                                                                                                 // 91
	}                                                                                                            // 92
                                                                                                              // 93
	function Utf8Encode(string) {                                                                                // 94
		// METEOR change:                                                                                           // 95
		// The webtoolkit.info version of this code added this                                                      // 96
		// Utf8Encode function (which does seem necessary for dealing                                               // 97
		// with arbitrary Unicode), but the following line seems                                                    // 98
		// problematic:                                                                                             // 99
		//                                                                                                          // 100
		// string = string.replace(/\r\n/g,"\n");                                                                   // 101
		var utftext = "";                                                                                           // 102
                                                                                                              // 103
		for (var n = 0; n < string.length; n++) {                                                                   // 104
                                                                                                              // 105
			var c = string.charCodeAt(n);                                                                              // 106
                                                                                                              // 107
			if (c < 128) {                                                                                             // 108
				utftext += String.fromCharCode(c);                                                                        // 109
			}                                                                                                          // 110
			else if((c > 127) && (c < 2048)) {                                                                         // 111
				utftext += String.fromCharCode((c >> 6) | 192);                                                           // 112
				utftext += String.fromCharCode((c & 63) | 128);                                                           // 113
			}                                                                                                          // 114
			else {                                                                                                     // 115
				utftext += String.fromCharCode((c >> 12) | 224);                                                          // 116
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);                                                    // 117
				utftext += String.fromCharCode((c & 63) | 128);                                                           // 118
			}                                                                                                          // 119
                                                                                                              // 120
		}                                                                                                           // 121
                                                                                                              // 122
		return utftext;                                                                                             // 123
	}                                                                                                            // 124
                                                                                                              // 125
	function binb2hex (binarray) {                                                                               // 126
		var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";                                            // 127
		var str = "";                                                                                               // 128
		for(var i = 0; i < binarray.length * 4; i++) {                                                              // 129
			str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +                                         // 130
			hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);                                                 // 131
		}                                                                                                           // 132
		return str;                                                                                                 // 133
	}                                                                                                            // 134
                                                                                                              // 135
	s = Utf8Encode(s);                                                                                           // 136
	return binb2hex(core_sha256(str2binb(s), s.length * chrsz));                                                 // 137
                                                                                                              // 138
}                                                                                                             // 139
                                                                                                              // 140
/// METEOR WRAPPER                                                                                            // 141
return SHA256;                                                                                                // 142
})();                                                                                                         // 143
                                                                                                              // 144
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.sha = {}, {
  SHA256: SHA256
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var SHA256 = Package.sha.SHA256;
var _ = Package.underscore._;

/* Package-scope variables */
var BigInteger, SRP;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// packages/srp/biginteger.js                                                                                       //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
/// METEOR WRAPPER                                                                                                  // 1
BigInteger = (function () {                                                                                         // 2
                                                                                                                    // 3
                                                                                                                    // 4
/// BEGIN jsbn.js                                                                                                   // 5
                                                                                                                    // 6
/*                                                                                                                  // 7
 * Copyright (c) 2003-2005  Tom Wu                                                                                  // 8
 * All Rights Reserved.                                                                                             // 9
 *                                                                                                                  // 10
 * Permission is hereby granted, free of charge, to any person obtaining                                            // 11
 * a copy of this software and associated documentation files (the                                                  // 12
 * "Software"), to deal in the Software without restriction, including                                              // 13
 * without limitation the rights to use, copy, modify, merge, publish,                                              // 14
 * distribute, sublicense, and/or sell copies of the Software, and to                                               // 15
 * permit persons to whom the Software is furnished to do so, subject to                                            // 16
 * the following conditions:                                                                                        // 17
 *                                                                                                                  // 18
 * The above copyright notice and this permission notice shall be                                                   // 19
 * included in all copies or substantial portions of the Software.                                                  // 20
 *                                                                                                                  // 21
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,                                               // 22
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY                                                 // 23
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.                                                 // 24
 *                                                                                                                  // 25
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,                                                  // 26
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER                                         // 27
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF                                           // 28
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT                                           // 29
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                                // 30
 *                                                                                                                  // 31
 * In addition, the following condition applies:                                                                    // 32
 *                                                                                                                  // 33
 * All redistributions must retain an intact copy of this copyright notice                                          // 34
 * and disclaimer.                                                                                                  // 35
 */                                                                                                                 // 36
                                                                                                                    // 37
// Basic JavaScript BN library - subset useful for RSA encryption.                                                  // 38
                                                                                                                    // 39
// Bits per digit                                                                                                   // 40
var dbits;                                                                                                          // 41
                                                                                                                    // 42
// JavaScript engine analysis                                                                                       // 43
var canary = 0xdeadbeefcafe;                                                                                        // 44
var j_lm = ((canary&0xffffff)==0xefcafe);                                                                           // 45
                                                                                                                    // 46
// (public) Constructor                                                                                             // 47
function BigInteger(a,b,c) {                                                                                        // 48
  if(a != null)                                                                                                     // 49
    if("number" == typeof a) this.fromNumber(a,b,c);                                                                // 50
    else if(b == null && "string" != typeof a) this.fromString(a,256);                                              // 51
    else this.fromString(a,b);                                                                                      // 52
}                                                                                                                   // 53
                                                                                                                    // 54
// return new, unset BigInteger                                                                                     // 55
function nbi() { return new BigInteger(null); }                                                                     // 56
                                                                                                                    // 57
// am: Compute w_j += (x*this_i), propagate carries,                                                                // 58
// c is initial carry, returns final carry.                                                                         // 59
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue                                                                      // 60
// We need to select the fastest one that works in this environment.                                                // 61
                                                                                                                    // 62
// am1: use a single mult and divide to get the high bits,                                                          // 63
// max digit bits should be 26 because                                                                              // 64
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)                                                                // 65
function am1(i,x,w,j,c,n) {                                                                                         // 66
  while(--n >= 0) {                                                                                                 // 67
    var v = x*this[i++]+w[j]+c;                                                                                     // 68
    c = Math.floor(v/0x4000000);                                                                                    // 69
    w[j++] = v&0x3ffffff;                                                                                           // 70
  }                                                                                                                 // 71
  return c;                                                                                                         // 72
}                                                                                                                   // 73
// am2 avoids a big mult-and-extract completely.                                                                    // 74
// Max digit bits should be <= 30 because we do bitwise ops                                                         // 75
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)                                                                   // 76
function am2(i,x,w,j,c,n) {                                                                                         // 77
  var xl = x&0x7fff, xh = x>>15;                                                                                    // 78
  while(--n >= 0) {                                                                                                 // 79
    var l = this[i]&0x7fff;                                                                                         // 80
    var h = this[i++]>>15;                                                                                          // 81
    var m = xh*l+h*xl;                                                                                              // 82
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);                                                                  // 83
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);                                                                            // 84
    w[j++] = l&0x3fffffff;                                                                                          // 85
  }                                                                                                                 // 86
  return c;                                                                                                         // 87
}                                                                                                                   // 88
// Alternately, set max digit bits to 28 since some                                                                 // 89
// browsers slow down when dealing with 32-bit numbers.                                                             // 90
function am3(i,x,w,j,c,n) {                                                                                         // 91
  var xl = x&0x3fff, xh = x>>14;                                                                                    // 92
  while(--n >= 0) {                                                                                                 // 93
    var l = this[i]&0x3fff;                                                                                         // 94
    var h = this[i++]>>14;                                                                                          // 95
    var m = xh*l+h*xl;                                                                                              // 96
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;                                                                               // 97
    c = (l>>28)+(m>>14)+xh*h;                                                                                       // 98
    w[j++] = l&0xfffffff;                                                                                           // 99
  }                                                                                                                 // 100
  return c;                                                                                                         // 101
}                                                                                                                   // 102
                                                                                                                    // 103
/* XXX METEOR XXX                                                                                                   // 104
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {                                                  // 105
  BigInteger.prototype.am = am2;                                                                                    // 106
  dbits = 30;                                                                                                       // 107
}                                                                                                                   // 108
else if(j_lm && (navigator.appName != "Netscape")) {                                                                // 109
  BigInteger.prototype.am = am1;                                                                                    // 110
  dbits = 26;                                                                                                       // 111
}                                                                                                                   // 112
else                                                                                                                // 113
*/                                                                                                                  // 114
                                                                                                                    // 115
{ // Mozilla/Netscape seems to prefer am3                                                                           // 116
  BigInteger.prototype.am = am3;                                                                                    // 117
  dbits = 28;                                                                                                       // 118
}                                                                                                                   // 119
                                                                                                                    // 120
BigInteger.prototype.DB = dbits;                                                                                    // 121
BigInteger.prototype.DM = ((1<<dbits)-1);                                                                           // 122
BigInteger.prototype.DV = (1<<dbits);                                                                               // 123
                                                                                                                    // 124
var BI_FP = 52;                                                                                                     // 125
BigInteger.prototype.FV = Math.pow(2,BI_FP);                                                                        // 126
BigInteger.prototype.F1 = BI_FP-dbits;                                                                              // 127
BigInteger.prototype.F2 = 2*dbits-BI_FP;                                                                            // 128
                                                                                                                    // 129
// Digit conversions                                                                                                // 130
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";                                                                 // 131
var BI_RC = new Array();                                                                                            // 132
var rr,vv;                                                                                                          // 133
rr = "0".charCodeAt(0);                                                                                             // 134
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;                                                                        // 135
rr = "a".charCodeAt(0);                                                                                             // 136
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;                                                                       // 137
rr = "A".charCodeAt(0);                                                                                             // 138
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;                                                                       // 139
                                                                                                                    // 140
function int2char(n) { return BI_RM.charAt(n); }                                                                    // 141
function intAt(s,i) {                                                                                               // 142
  var c = BI_RC[s.charCodeAt(i)];                                                                                   // 143
  return (c==null)?-1:c;                                                                                            // 144
}                                                                                                                   // 145
                                                                                                                    // 146
// (protected) copy this to r                                                                                       // 147
function bnpCopyTo(r) {                                                                                             // 148
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];                                                                // 149
  r.t = this.t;                                                                                                     // 150
  r.s = this.s;                                                                                                     // 151
}                                                                                                                   // 152
                                                                                                                    // 153
// (protected) set from integer value x, -DV <= x < DV                                                              // 154
function bnpFromInt(x) {                                                                                            // 155
  this.t = 1;                                                                                                       // 156
  this.s = (x<0)?-1:0;                                                                                              // 157
  if(x > 0) this[0] = x;                                                                                            // 158
  else if(x < -1) this[0] = x+DV;                                                                                   // 159
  else this.t = 0;                                                                                                  // 160
}                                                                                                                   // 161
                                                                                                                    // 162
// return bigint initialized to value                                                                               // 163
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }                                                          // 164
                                                                                                                    // 165
// (protected) set from string and radix                                                                            // 166
function bnpFromString(s,b) {                                                                                       // 167
  var k;                                                                                                            // 168
  if(b == 16) k = 4;                                                                                                // 169
  else if(b == 8) k = 3;                                                                                            // 170
  else if(b == 256) k = 8; // byte array                                                                            // 171
  else if(b == 2) k = 1;                                                                                            // 172
  else if(b == 32) k = 5;                                                                                           // 173
  else if(b == 4) k = 2;                                                                                            // 174
  else { this.fromRadix(s,b); return; }                                                                             // 175
  this.t = 0;                                                                                                       // 176
  this.s = 0;                                                                                                       // 177
  var i = s.length, mi = false, sh = 0;                                                                             // 178
  while(--i >= 0) {                                                                                                 // 179
    var x = (k==8)?s[i]&0xff:intAt(s,i);                                                                            // 180
    if(x < 0) {                                                                                                     // 181
      if(s.charAt(i) == "-") mi = true;                                                                             // 182
      continue;                                                                                                     // 183
    }                                                                                                               // 184
    mi = false;                                                                                                     // 185
    if(sh == 0)                                                                                                     // 186
      this[this.t++] = x;                                                                                           // 187
    else if(sh+k > this.DB) {                                                                                       // 188
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;                                                              // 189
      this[this.t++] = (x>>(this.DB-sh));                                                                           // 190
    }                                                                                                               // 191
    else                                                                                                            // 192
      this[this.t-1] |= x<<sh;                                                                                      // 193
    sh += k;                                                                                                        // 194
    if(sh >= this.DB) sh -= this.DB;                                                                                // 195
  }                                                                                                                 // 196
  if(k == 8 && (s[0]&0x80) != 0) {                                                                                  // 197
    this.s = -1;                                                                                                    // 198
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;                                                         // 199
  }                                                                                                                 // 200
  this.clamp();                                                                                                     // 201
  if(mi) BigInteger.ZERO.subTo(this,this);                                                                          // 202
}                                                                                                                   // 203
                                                                                                                    // 204
// (protected) clamp off excess high words                                                                          // 205
function bnpClamp() {                                                                                               // 206
  var c = this.s&this.DM;                                                                                           // 207
  while(this.t > 0 && this[this.t-1] == c) --this.t;                                                                // 208
}                                                                                                                   // 209
                                                                                                                    // 210
// (public) return string representation in given radix                                                             // 211
function bnToString(b) {                                                                                            // 212
  if(this.s < 0) return "-"+this.negate().toString(b);                                                              // 213
  var k;                                                                                                            // 214
  if(b == 16) k = 4;                                                                                                // 215
  else if(b == 8) k = 3;                                                                                            // 216
  else if(b == 2) k = 1;                                                                                            // 217
  else if(b == 32) k = 5;                                                                                           // 218
  else if(b == 4) k = 2;                                                                                            // 219
  else return this.toRadix(b);                                                                                      // 220
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;                                                              // 221
  var p = this.DB-(i*this.DB)%k;                                                                                    // 222
  if(i-- > 0) {                                                                                                     // 223
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }                                          // 224
    while(i >= 0) {                                                                                                 // 225
      if(p < k) {                                                                                                   // 226
        d = (this[i]&((1<<p)-1))<<(k-p);                                                                            // 227
        d |= this[--i]>>(p+=this.DB-k);                                                                             // 228
      }                                                                                                             // 229
      else {                                                                                                        // 230
        d = (this[i]>>(p-=k))&km;                                                                                   // 231
        if(p <= 0) { p += this.DB; --i; }                                                                           // 232
      }                                                                                                             // 233
      if(d > 0) m = true;                                                                                           // 234
      if(m) r += int2char(d);                                                                                       // 235
    }                                                                                                               // 236
  }                                                                                                                 // 237
  return m?r:"0";                                                                                                   // 238
}                                                                                                                   // 239
                                                                                                                    // 240
// (public) -this                                                                                                   // 241
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }                                     // 242
                                                                                                                    // 243
// (public) |this|                                                                                                  // 244
function bnAbs() { return (this.s<0)?this.negate():this; }                                                          // 245
                                                                                                                    // 246
// (public) return + if this > a, - if this < a, 0 if equal                                                         // 247
function bnCompareTo(a) {                                                                                           // 248
  var r = this.s-a.s;                                                                                               // 249
  if(r != 0) return r;                                                                                              // 250
  var i = this.t;                                                                                                   // 251
  r = i-a.t;                                                                                                        // 252
  if(r != 0) return r;                                                                                              // 253
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;                                                               // 254
  return 0;                                                                                                         // 255
}                                                                                                                   // 256
                                                                                                                    // 257
// returns bit length of the integer x                                                                              // 258
function nbits(x) {                                                                                                 // 259
  var r = 1, t;                                                                                                     // 260
  if((t=x>>>16) != 0) { x = t; r += 16; }                                                                           // 261
  if((t=x>>8) != 0) { x = t; r += 8; }                                                                              // 262
  if((t=x>>4) != 0) { x = t; r += 4; }                                                                              // 263
  if((t=x>>2) != 0) { x = t; r += 2; }                                                                              // 264
  if((t=x>>1) != 0) { x = t; r += 1; }                                                                              // 265
  return r;                                                                                                         // 266
}                                                                                                                   // 267
                                                                                                                    // 268
// (public) return the number of bits in "this"                                                                     // 269
function bnBitLength() {                                                                                            // 270
  if(this.t <= 0) return 0;                                                                                         // 271
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));                                                 // 272
}                                                                                                                   // 273
                                                                                                                    // 274
// (protected) r = this << n*DB                                                                                     // 275
function bnpDLShiftTo(n,r) {                                                                                        // 276
  var i;                                                                                                            // 277
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];                                                                  // 278
  for(i = n-1; i >= 0; --i) r[i] = 0;                                                                               // 279
  r.t = this.t+n;                                                                                                   // 280
  r.s = this.s;                                                                                                     // 281
}                                                                                                                   // 282
                                                                                                                    // 283
// (protected) r = this >> n*DB                                                                                     // 284
function bnpDRShiftTo(n,r) {                                                                                        // 285
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];                                                                 // 286
  r.t = Math.max(this.t-n,0);                                                                                       // 287
  r.s = this.s;                                                                                                     // 288
}                                                                                                                   // 289
                                                                                                                    // 290
// (protected) r = this << n                                                                                        // 291
function bnpLShiftTo(n,r) {                                                                                         // 292
  var bs = n%this.DB;                                                                                               // 293
  var cbs = this.DB-bs;                                                                                             // 294
  var bm = (1<<cbs)-1;                                                                                              // 295
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;                                                      // 296
  for(i = this.t-1; i >= 0; --i) {                                                                                  // 297
    r[i+ds+1] = (this[i]>>cbs)|c;                                                                                   // 298
    c = (this[i]&bm)<<bs;                                                                                           // 299
  }                                                                                                                 // 300
  for(i = ds-1; i >= 0; --i) r[i] = 0;                                                                              // 301
  r[ds] = c;                                                                                                        // 302
  r.t = this.t+ds+1;                                                                                                // 303
  r.s = this.s;                                                                                                     // 304
  r.clamp();                                                                                                        // 305
}                                                                                                                   // 306
                                                                                                                    // 307
// (protected) r = this >> n                                                                                        // 308
function bnpRShiftTo(n,r) {                                                                                         // 309
  r.s = this.s;                                                                                                     // 310
  var ds = Math.floor(n/this.DB);                                                                                   // 311
  if(ds >= this.t) { r.t = 0; return; }                                                                             // 312
  var bs = n%this.DB;                                                                                               // 313
  var cbs = this.DB-bs;                                                                                             // 314
  var bm = (1<<bs)-1;                                                                                               // 315
  r[0] = this[ds]>>bs;                                                                                              // 316
  for(var i = ds+1; i < this.t; ++i) {                                                                              // 317
    r[i-ds-1] |= (this[i]&bm)<<cbs;                                                                                 // 318
    r[i-ds] = this[i]>>bs;                                                                                          // 319
  }                                                                                                                 // 320
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;                                                                    // 321
  r.t = this.t-ds;                                                                                                  // 322
  r.clamp();                                                                                                        // 323
}                                                                                                                   // 324
                                                                                                                    // 325
// (protected) r = this - a                                                                                         // 326
function bnpSubTo(a,r) {                                                                                            // 327
  var i = 0, c = 0, m = Math.min(a.t,this.t);                                                                       // 328
  while(i < m) {                                                                                                    // 329
    c += this[i]-a[i];                                                                                              // 330
    r[i++] = c&this.DM;                                                                                             // 331
    c >>= this.DB;                                                                                                  // 332
  }                                                                                                                 // 333
  if(a.t < this.t) {                                                                                                // 334
    c -= a.s;                                                                                                       // 335
    while(i < this.t) {                                                                                             // 336
      c += this[i];                                                                                                 // 337
      r[i++] = c&this.DM;                                                                                           // 338
      c >>= this.DB;                                                                                                // 339
    }                                                                                                               // 340
    c += this.s;                                                                                                    // 341
  }                                                                                                                 // 342
  else {                                                                                                            // 343
    c += this.s;                                                                                                    // 344
    while(i < a.t) {                                                                                                // 345
      c -= a[i];                                                                                                    // 346
      r[i++] = c&this.DM;                                                                                           // 347
      c >>= this.DB;                                                                                                // 348
    }                                                                                                               // 349
    c -= a.s;                                                                                                       // 350
  }                                                                                                                 // 351
  r.s = (c<0)?-1:0;                                                                                                 // 352
  if(c < -1) r[i++] = this.DV+c;                                                                                    // 353
  else if(c > 0) r[i++] = c;                                                                                        // 354
  r.t = i;                                                                                                          // 355
  r.clamp();                                                                                                        // 356
}                                                                                                                   // 357
                                                                                                                    // 358
// (protected) r = this * a, r != this,a (HAC 14.12)                                                                // 359
// "this" should be the larger one if appropriate.                                                                  // 360
function bnpMultiplyTo(a,r) {                                                                                       // 361
  var x = this.abs(), y = a.abs();                                                                                  // 362
  var i = x.t;                                                                                                      // 363
  r.t = i+y.t;                                                                                                      // 364
  while(--i >= 0) r[i] = 0;                                                                                         // 365
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);                                                       // 366
  r.s = 0;                                                                                                          // 367
  r.clamp();                                                                                                        // 368
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);                                                                     // 369
}                                                                                                                   // 370
                                                                                                                    // 371
// (protected) r = this^2, r != this (HAC 14.16)                                                                    // 372
function bnpSquareTo(r) {                                                                                           // 373
  var x = this.abs();                                                                                               // 374
  var i = r.t = 2*x.t;                                                                                              // 375
  while(--i >= 0) r[i] = 0;                                                                                         // 376
  for(i = 0; i < x.t-1; ++i) {                                                                                      // 377
    var c = x.am(i,x[i],r,2*i,0,1);                                                                                 // 378
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {                                                    // 379
      r[i+x.t] -= x.DV;                                                                                             // 380
      r[i+x.t+1] = 1;                                                                                               // 381
    }                                                                                                               // 382
  }                                                                                                                 // 383
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);                                                                   // 384
  r.s = 0;                                                                                                          // 385
  r.clamp();                                                                                                        // 386
}                                                                                                                   // 387
                                                                                                                    // 388
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)                                         // 389
// r != q, this != m.  q or r may be null.                                                                          // 390
function bnpDivRemTo(m,q,r) {                                                                                       // 391
  var pm = m.abs();                                                                                                 // 392
  if(pm.t <= 0) return;                                                                                             // 393
  var pt = this.abs();                                                                                              // 394
  if(pt.t < pm.t) {                                                                                                 // 395
    if(q != null) q.fromInt(0);                                                                                     // 396
    if(r != null) this.copyTo(r);                                                                                   // 397
    return;                                                                                                         // 398
  }                                                                                                                 // 399
  if(r == null) r = nbi();                                                                                          // 400
  var y = nbi(), ts = this.s, ms = m.s;                                                                             // 401
  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus                                                         // 402
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }                                                           // 403
  else { pm.copyTo(y); pt.copyTo(r); }                                                                              // 404
  var ys = y.t;                                                                                                     // 405
  var y0 = y[ys-1];                                                                                                 // 406
  if(y0 == 0) return;                                                                                               // 407
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);                                                             // 408
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;                                                        // 409
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;                                                                     // 410
  y.dlShiftTo(j,t);                                                                                                 // 411
  if(r.compareTo(t) >= 0) {                                                                                         // 412
    r[r.t++] = 1;                                                                                                   // 413
    r.subTo(t,r);                                                                                                   // 414
  }                                                                                                                 // 415
  BigInteger.ONE.dlShiftTo(ys,t);                                                                                   // 416
  t.subTo(y,y);	// "negative" y so we can replace sub with am later                                                 // 417
  while(y.t < ys) y[y.t++] = 0;                                                                                     // 418
  while(--j >= 0) {                                                                                                 // 419
    // Estimate quotient digit                                                                                      // 420
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);                                                // 421
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out                                                            // 422
      y.dlShiftTo(j,t);                                                                                             // 423
      r.subTo(t,r);                                                                                                 // 424
      while(r[i] < --qd) r.subTo(t,r);                                                                              // 425
    }                                                                                                               // 426
  }                                                                                                                 // 427
  if(q != null) {                                                                                                   // 428
    r.drShiftTo(ys,q);                                                                                              // 429
    if(ts != ms) BigInteger.ZERO.subTo(q,q);                                                                        // 430
  }                                                                                                                 // 431
  r.t = ys;                                                                                                         // 432
  r.clamp();                                                                                                        // 433
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder                                                           // 434
  if(ts < 0) BigInteger.ZERO.subTo(r,r);                                                                            // 435
}                                                                                                                   // 436
                                                                                                                    // 437
// (public) this mod a                                                                                              // 438
function bnMod(a) {                                                                                                 // 439
  var r = nbi();                                                                                                    // 440
  this.abs().divRemTo(a,null,r);                                                                                    // 441
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);                                                  // 442
  return r;                                                                                                         // 443
}                                                                                                                   // 444
                                                                                                                    // 445
// Modular reduction using "classic" algorithm                                                                      // 446
function Classic(m) { this.m = m; }                                                                                 // 447
function cConvert(x) {                                                                                              // 448
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);                                                     // 449
  else return x;                                                                                                    // 450
}                                                                                                                   // 451
function cRevert(x) { return x; }                                                                                   // 452
function cReduce(x) { x.divRemTo(this.m,null,x); }                                                                  // 453
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                       // 454
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                             // 455
                                                                                                                    // 456
Classic.prototype.convert = cConvert;                                                                               // 457
Classic.prototype.revert = cRevert;                                                                                 // 458
Classic.prototype.reduce = cReduce;                                                                                 // 459
Classic.prototype.mulTo = cMulTo;                                                                                   // 460
Classic.prototype.sqrTo = cSqrTo;                                                                                   // 461
                                                                                                                    // 462
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction                                                  // 463
// justification:                                                                                                   // 464
//         xy == 1 (mod m)                                                                                          // 465
//         xy =  1+km                                                                                               // 466
//   xy(2-xy) = (1+km)(1-km)                                                                                        // 467
// x[y(2-xy)] = 1-k^2m^2                                                                                            // 468
// x[y(2-xy)] == 1 (mod m^2)                                                                                        // 469
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2                                                                   // 470
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.                                            // 471
// JS multiply "overflows" differently from C/C++, so care is needed here.                                          // 472
function bnpInvDigit() {                                                                                            // 473
  if(this.t < 1) return 0;                                                                                          // 474
  var x = this[0];                                                                                                  // 475
  if((x&1) == 0) return 0;                                                                                          // 476
  var y = x&3;		// y == 1/x mod 2^2                                                                                 // 477
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4                                                                    // 478
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8                                                                  // 479
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16                                                  // 480
  // last step - calculate inverse mod DV directly;                                                                 // 481
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints                                                // 482
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits                                                         // 483
  // we really want the negative inverse, and -DV < y < DV                                                          // 484
  return (y>0)?this.DV-y:-y;                                                                                        // 485
}                                                                                                                   // 486
                                                                                                                    // 487
// Montgomery reduction                                                                                             // 488
function Montgomery(m) {                                                                                            // 489
  this.m = m;                                                                                                       // 490
  this.mp = m.invDigit();                                                                                           // 491
  this.mpl = this.mp&0x7fff;                                                                                        // 492
  this.mph = this.mp>>15;                                                                                           // 493
  this.um = (1<<(m.DB-15))-1;                                                                                       // 494
  this.mt2 = 2*m.t;                                                                                                 // 495
}                                                                                                                   // 496
                                                                                                                    // 497
// xR mod m                                                                                                         // 498
function montConvert(x) {                                                                                           // 499
  var r = nbi();                                                                                                    // 500
  x.abs().dlShiftTo(this.m.t,r);                                                                                    // 501
  r.divRemTo(this.m,null,r);                                                                                        // 502
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);                                                // 503
  return r;                                                                                                         // 504
}                                                                                                                   // 505
                                                                                                                    // 506
// x/R mod m                                                                                                        // 507
function montRevert(x) {                                                                                            // 508
  var r = nbi();                                                                                                    // 509
  x.copyTo(r);                                                                                                      // 510
  this.reduce(r);                                                                                                   // 511
  return r;                                                                                                         // 512
}                                                                                                                   // 513
                                                                                                                    // 514
// x = x/R mod m (HAC 14.32)                                                                                        // 515
function montReduce(x) {                                                                                            // 516
  while(x.t <= this.mt2)	// pad x so am has enough room later                                                       // 517
    x[x.t++] = 0;                                                                                                   // 518
  for(var i = 0; i < this.m.t; ++i) {                                                                               // 519
    // faster way of calculating u0 = x[i]*mp mod DV                                                                // 520
    var j = x[i]&0x7fff;                                                                                            // 521
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;                                    // 522
    // use am to combine the multiply-shift-add into one call                                                       // 523
    j = i+this.m.t;                                                                                                 // 524
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);                                                                         // 525
    // propagate carry                                                                                              // 526
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }                                                                 // 527
  }                                                                                                                 // 528
  x.clamp();                                                                                                        // 529
  x.drShiftTo(this.m.t,x);                                                                                          // 530
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);                                                                   // 531
}                                                                                                                   // 532
                                                                                                                    // 533
// r = "x^2/R mod m"; x != r                                                                                        // 534
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                          // 535
                                                                                                                    // 536
// r = "xy/R mod m"; x,y != r                                                                                       // 537
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                    // 538
                                                                                                                    // 539
Montgomery.prototype.convert = montConvert;                                                                         // 540
Montgomery.prototype.revert = montRevert;                                                                           // 541
Montgomery.prototype.reduce = montReduce;                                                                           // 542
Montgomery.prototype.mulTo = montMulTo;                                                                             // 543
Montgomery.prototype.sqrTo = montSqrTo;                                                                             // 544
                                                                                                                    // 545
// (protected) true iff this is even                                                                                // 546
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }                                               // 547
                                                                                                                    // 548
// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)                                             // 549
function bnpExp(e,z) {                                                                                              // 550
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;                                                                // 551
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;                                                   // 552
  g.copyTo(r);                                                                                                      // 553
  while(--i >= 0) {                                                                                                 // 554
    z.sqrTo(r,r2);                                                                                                  // 555
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);                                                                             // 556
    else { var t = r; r = r2; r2 = t; }                                                                             // 557
  }                                                                                                                 // 558
  return z.revert(r);                                                                                               // 559
}                                                                                                                   // 560
                                                                                                                    // 561
// (public) this^e % m, 0 <= e < 2^32                                                                               // 562
function bnModPowInt(e,m) {                                                                                         // 563
  var z;                                                                                                            // 564
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);                                         // 565
  return this.exp(e,z);                                                                                             // 566
}                                                                                                                   // 567
                                                                                                                    // 568
// protected                                                                                                        // 569
BigInteger.prototype.copyTo = bnpCopyTo;                                                                            // 570
BigInteger.prototype.fromInt = bnpFromInt;                                                                          // 571
BigInteger.prototype.fromString = bnpFromString;                                                                    // 572
BigInteger.prototype.clamp = bnpClamp;                                                                              // 573
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;                                                                      // 574
BigInteger.prototype.drShiftTo = bnpDRShiftTo;                                                                      // 575
BigInteger.prototype.lShiftTo = bnpLShiftTo;                                                                        // 576
BigInteger.prototype.rShiftTo = bnpRShiftTo;                                                                        // 577
BigInteger.prototype.subTo = bnpSubTo;                                                                              // 578
BigInteger.prototype.multiplyTo = bnpMultiplyTo;                                                                    // 579
BigInteger.prototype.squareTo = bnpSquareTo;                                                                        // 580
BigInteger.prototype.divRemTo = bnpDivRemTo;                                                                        // 581
BigInteger.prototype.invDigit = bnpInvDigit;                                                                        // 582
BigInteger.prototype.isEven = bnpIsEven;                                                                            // 583
BigInteger.prototype.exp = bnpExp;                                                                                  // 584
                                                                                                                    // 585
// public                                                                                                           // 586
BigInteger.prototype.toString = bnToString;                                                                         // 587
BigInteger.prototype.negate = bnNegate;                                                                             // 588
BigInteger.prototype.abs = bnAbs;                                                                                   // 589
BigInteger.prototype.compareTo = bnCompareTo;                                                                       // 590
BigInteger.prototype.bitLength = bnBitLength;                                                                       // 591
BigInteger.prototype.mod = bnMod;                                                                                   // 592
BigInteger.prototype.modPowInt = bnModPowInt;                                                                       // 593
                                                                                                                    // 594
// "constants"                                                                                                      // 595
BigInteger.ZERO = nbv(0);                                                                                           // 596
BigInteger.ONE = nbv(1);                                                                                            // 597
                                                                                                                    // 598
                                                                                                                    // 599
/// BEGIN jsbn2.js                                                                                                  // 600
                                                                                                                    // 601
/*                                                                                                                  // 602
 * Copyright (c) 2003-2005  Tom Wu                                                                                  // 603
 * All Rights Reserved.                                                                                             // 604
 *                                                                                                                  // 605
 * Permission is hereby granted, free of charge, to any person obtaining                                            // 606
 * a copy of this software and associated documentation files (the                                                  // 607
 * "Software"), to deal in the Software without restriction, including                                              // 608
 * without limitation the rights to use, copy, modify, merge, publish,                                              // 609
 * distribute, sublicense, and/or sell copies of the Software, and to                                               // 610
 * permit persons to whom the Software is furnished to do so, subject to                                            // 611
 * the following conditions:                                                                                        // 612
 *                                                                                                                  // 613
 * The above copyright notice and this permission notice shall be                                                   // 614
 * included in all copies or substantial portions of the Software.                                                  // 615
 *                                                                                                                  // 616
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,                                               // 617
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY                                                 // 618
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.                                                 // 619
 *                                                                                                                  // 620
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,                                                  // 621
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER                                         // 622
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF                                           // 623
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT                                           // 624
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                                                // 625
 *                                                                                                                  // 626
 * In addition, the following condition applies:                                                                    // 627
 *                                                                                                                  // 628
 * All redistributions must retain an intact copy of this copyright notice                                          // 629
 * and disclaimer.                                                                                                  // 630
 */                                                                                                                 // 631
                                                                                                                    // 632
// Extended JavaScript BN functions, required for RSA private ops.                                                  // 633
                                                                                                                    // 634
// (public)                                                                                                         // 635
function bnClone() { var r = nbi(); this.copyTo(r); return r; }                                                     // 636
                                                                                                                    // 637
// (public) return value as integer                                                                                 // 638
function bnIntValue() {                                                                                             // 639
  if(this.s < 0) {                                                                                                  // 640
    if(this.t == 1) return this[0]-this.DV;                                                                         // 641
    else if(this.t == 0) return -1;                                                                                 // 642
  }                                                                                                                 // 643
  else if(this.t == 1) return this[0];                                                                              // 644
  else if(this.t == 0) return 0;                                                                                    // 645
  // assumes 16 < DB < 32                                                                                           // 646
  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];                                                        // 647
}                                                                                                                   // 648
                                                                                                                    // 649
// (public) return value as byte                                                                                    // 650
function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }                                             // 651
                                                                                                                    // 652
// (public) return value as short (assumes DB>=16)                                                                  // 653
function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }                                            // 654
                                                                                                                    // 655
// (protected) return x s.t. r^x < DV                                                                               // 656
function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }                                       // 657
                                                                                                                    // 658
// (public) 0 if this == 0, 1 if this > 0                                                                           // 659
function bnSigNum() {                                                                                               // 660
  if(this.s < 0) return -1;                                                                                         // 661
  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;                                                   // 662
  else return 1;                                                                                                    // 663
}                                                                                                                   // 664
                                                                                                                    // 665
// (protected) convert to radix string                                                                              // 666
function bnpToRadix(b) {                                                                                            // 667
  if(b == null) b = 10;                                                                                             // 668
  if(this.signum() == 0 || b < 2 || b > 36) return "0";                                                             // 669
  var cs = this.chunkSize(b);                                                                                       // 670
  var a = Math.pow(b,cs);                                                                                           // 671
  var d = nbv(a), y = nbi(), z = nbi(), r = "";                                                                     // 672
  this.divRemTo(d,y,z);                                                                                             // 673
  while(y.signum() > 0) {                                                                                           // 674
    r = (a+z.intValue()).toString(b).substr(1) + r;                                                                 // 675
    y.divRemTo(d,y,z);                                                                                              // 676
  }                                                                                                                 // 677
  return z.intValue().toString(b) + r;                                                                              // 678
}                                                                                                                   // 679
                                                                                                                    // 680
// (protected) convert from radix string                                                                            // 681
function bnpFromRadix(s,b) {                                                                                        // 682
  this.fromInt(0);                                                                                                  // 683
  if(b == null) b = 10;                                                                                             // 684
  var cs = this.chunkSize(b);                                                                                       // 685
  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;                                                                 // 686
  for(var i = 0; i < s.length; ++i) {                                                                               // 687
    var x = intAt(s,i);                                                                                             // 688
    if(x < 0) {                                                                                                     // 689
      if(s.charAt(i) == "-" && this.signum() == 0) mi = true;                                                       // 690
      continue;                                                                                                     // 691
    }                                                                                                               // 692
    w = b*w+x;                                                                                                      // 693
    if(++j >= cs) {                                                                                                 // 694
      this.dMultiply(d);                                                                                            // 695
      this.dAddOffset(w,0);                                                                                         // 696
      j = 0;                                                                                                        // 697
      w = 0;                                                                                                        // 698
    }                                                                                                               // 699
  }                                                                                                                 // 700
  if(j > 0) {                                                                                                       // 701
    this.dMultiply(Math.pow(b,j));                                                                                  // 702
    this.dAddOffset(w,0);                                                                                           // 703
  }                                                                                                                 // 704
  if(mi) BigInteger.ZERO.subTo(this,this);                                                                          // 705
}                                                                                                                   // 706
                                                                                                                    // 707
// (protected) alternate constructor                                                                                // 708
function bnpFromNumber(a,b,c) {                                                                                     // 709
  if("number" == typeof b) {                                                                                        // 710
    // new BigInteger(int,int,RNG)                                                                                  // 711
    if(a < 2) this.fromInt(1);                                                                                      // 712
    else {                                                                                                          // 713
      this.fromNumber(a,c);                                                                                         // 714
      if(!this.testBit(a-1))	// force MSB set                                                                       // 715
        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);                                                   // 716
      if(this.isEven()) this.dAddOffset(1,0); // force odd                                                          // 717
      while(!this.isProbablePrime(b)) {                                                                             // 718
        this.dAddOffset(2,0);                                                                                       // 719
        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);                                    // 720
      }                                                                                                             // 721
    }                                                                                                               // 722
  }                                                                                                                 // 723
  else {                                                                                                            // 724
    // new BigInteger(int,RNG)                                                                                      // 725
    var x = new Array(), t = a&7;                                                                                   // 726
    x.length = (a>>3)+1;                                                                                            // 727
    b.nextBytes(x);                                                                                                 // 728
    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;                                                                    // 729
    this.fromString(x,256);                                                                                         // 730
  }                                                                                                                 // 731
}                                                                                                                   // 732
                                                                                                                    // 733
// (public) convert to bigendian byte array                                                                         // 734
function bnToByteArray() {                                                                                          // 735
  var i = this.t, r = new Array();                                                                                  // 736
  r[0] = this.s;                                                                                                    // 737
  var p = this.DB-(i*this.DB)%8, d, k = 0;                                                                          // 738
  if(i-- > 0) {                                                                                                     // 739
    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)                                                      // 740
      r[k++] = d|(this.s<<(this.DB-p));                                                                             // 741
    while(i >= 0) {                                                                                                 // 742
      if(p < 8) {                                                                                                   // 743
        d = (this[i]&((1<<p)-1))<<(8-p);                                                                            // 744
        d |= this[--i]>>(p+=this.DB-8);                                                                             // 745
      }                                                                                                             // 746
      else {                                                                                                        // 747
        d = (this[i]>>(p-=8))&0xff;                                                                                 // 748
        if(p <= 0) { p += this.DB; --i; }                                                                           // 749
      }                                                                                                             // 750
      if((d&0x80) != 0) d |= -256;                                                                                  // 751
      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;                                                                  // 752
      if(k > 0 || d != this.s) r[k++] = d;                                                                          // 753
    }                                                                                                               // 754
  }                                                                                                                 // 755
  return r;                                                                                                         // 756
}                                                                                                                   // 757
                                                                                                                    // 758
function bnEquals(a) { return(this.compareTo(a)==0); }                                                              // 759
function bnMin(a) { return(this.compareTo(a)<0)?this:a; }                                                           // 760
function bnMax(a) { return(this.compareTo(a)>0)?this:a; }                                                           // 761
                                                                                                                    // 762
// (protected) r = this op a (bitwise)                                                                              // 763
function bnpBitwiseTo(a,op,r) {                                                                                     // 764
  var i, f, m = Math.min(a.t,this.t);                                                                               // 765
  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);                                                                   // 766
  if(a.t < this.t) {                                                                                                // 767
    f = a.s&this.DM;                                                                                                // 768
    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);                                                               // 769
    r.t = this.t;                                                                                                   // 770
  }                                                                                                                 // 771
  else {                                                                                                            // 772
    f = this.s&this.DM;                                                                                             // 773
    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);                                                                     // 774
    r.t = a.t;                                                                                                      // 775
  }                                                                                                                 // 776
  r.s = op(this.s,a.s);                                                                                             // 777
  r.clamp();                                                                                                        // 778
}                                                                                                                   // 779
                                                                                                                    // 780
// (public) this & a                                                                                                // 781
function op_and(x,y) { return x&y; }                                                                                // 782
function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }                                          // 783
                                                                                                                    // 784
// (public) this | a                                                                                                // 785
function op_or(x,y) { return x|y; }                                                                                 // 786
function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }                                            // 787
                                                                                                                    // 788
// (public) this ^ a                                                                                                // 789
function op_xor(x,y) { return x^y; }                                                                                // 790
function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }                                          // 791
                                                                                                                    // 792
// (public) this & ~a                                                                                               // 793
function op_andnot(x,y) { return x&~y; }                                                                            // 794
function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }                                    // 795
                                                                                                                    // 796
// (public) ~this                                                                                                   // 797
function bnNot() {                                                                                                  // 798
  var r = nbi();                                                                                                    // 799
  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];                                                          // 800
  r.t = this.t;                                                                                                     // 801
  r.s = ~this.s;                                                                                                    // 802
  return r;                                                                                                         // 803
}                                                                                                                   // 804
                                                                                                                    // 805
// (public) this << n                                                                                               // 806
function bnShiftLeft(n) {                                                                                           // 807
  var r = nbi();                                                                                                    // 808
  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);                                                           // 809
  return r;                                                                                                         // 810
}                                                                                                                   // 811
                                                                                                                    // 812
// (public) this >> n                                                                                               // 813
function bnShiftRight(n) {                                                                                          // 814
  var r = nbi();                                                                                                    // 815
  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);                                                           // 816
  return r;                                                                                                         // 817
}                                                                                                                   // 818
                                                                                                                    // 819
// return index of lowest 1-bit in x, x < 2^31                                                                      // 820
function lbit(x) {                                                                                                  // 821
  if(x == 0) return -1;                                                                                             // 822
  var r = 0;                                                                                                        // 823
  if((x&0xffff) == 0) { x >>= 16; r += 16; }                                                                        // 824
  if((x&0xff) == 0) { x >>= 8; r += 8; }                                                                            // 825
  if((x&0xf) == 0) { x >>= 4; r += 4; }                                                                             // 826
  if((x&3) == 0) { x >>= 2; r += 2; }                                                                               // 827
  if((x&1) == 0) ++r;                                                                                               // 828
  return r;                                                                                                         // 829
}                                                                                                                   // 830
                                                                                                                    // 831
// (public) returns index of lowest 1-bit (or -1 if none)                                                           // 832
function bnGetLowestSetBit() {                                                                                      // 833
  for(var i = 0; i < this.t; ++i)                                                                                   // 834
    if(this[i] != 0) return i*this.DB+lbit(this[i]);                                                                // 835
  if(this.s < 0) return this.t*this.DB;                                                                             // 836
  return -1;                                                                                                        // 837
}                                                                                                                   // 838
                                                                                                                    // 839
// return number of 1 bits in x                                                                                     // 840
function cbit(x) {                                                                                                  // 841
  var r = 0;                                                                                                        // 842
  while(x != 0) { x &= x-1; ++r; }                                                                                  // 843
  return r;                                                                                                         // 844
}                                                                                                                   // 845
                                                                                                                    // 846
// (public) return number of set bits                                                                               // 847
function bnBitCount() {                                                                                             // 848
  var r = 0, x = this.s&this.DM;                                                                                    // 849
  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);                                                             // 850
  return r;                                                                                                         // 851
}                                                                                                                   // 852
                                                                                                                    // 853
// (public) true iff nth bit is set                                                                                 // 854
function bnTestBit(n) {                                                                                             // 855
  var j = Math.floor(n/this.DB);                                                                                    // 856
  if(j >= this.t) return(this.s!=0);                                                                                // 857
  return((this[j]&(1<<(n%this.DB)))!=0);                                                                            // 858
}                                                                                                                   // 859
                                                                                                                    // 860
// (protected) this op (1<<n)                                                                                       // 861
function bnpChangeBit(n,op) {                                                                                       // 862
  var r = BigInteger.ONE.shiftLeft(n);                                                                              // 863
  this.bitwiseTo(r,op,r);                                                                                           // 864
  return r;                                                                                                         // 865
}                                                                                                                   // 866
                                                                                                                    // 867
// (public) this | (1<<n)                                                                                           // 868
function bnSetBit(n) { return this.changeBit(n,op_or); }                                                            // 869
                                                                                                                    // 870
// (public) this & ~(1<<n)                                                                                          // 871
function bnClearBit(n) { return this.changeBit(n,op_andnot); }                                                      // 872
                                                                                                                    // 873
// (public) this ^ (1<<n)                                                                                           // 874
function bnFlipBit(n) { return this.changeBit(n,op_xor); }                                                          // 875
                                                                                                                    // 876
// (protected) r = this + a                                                                                         // 877
function bnpAddTo(a,r) {                                                                                            // 878
  var i = 0, c = 0, m = Math.min(a.t,this.t);                                                                       // 879
  while(i < m) {                                                                                                    // 880
    c += this[i]+a[i];                                                                                              // 881
    r[i++] = c&this.DM;                                                                                             // 882
    c >>= this.DB;                                                                                                  // 883
  }                                                                                                                 // 884
  if(a.t < this.t) {                                                                                                // 885
    c += a.s;                                                                                                       // 886
    while(i < this.t) {                                                                                             // 887
      c += this[i];                                                                                                 // 888
      r[i++] = c&this.DM;                                                                                           // 889
      c >>= this.DB;                                                                                                // 890
    }                                                                                                               // 891
    c += this.s;                                                                                                    // 892
  }                                                                                                                 // 893
  else {                                                                                                            // 894
    c += this.s;                                                                                                    // 895
    while(i < a.t) {                                                                                                // 896
      c += a[i];                                                                                                    // 897
      r[i++] = c&this.DM;                                                                                           // 898
      c >>= this.DB;                                                                                                // 899
    }                                                                                                               // 900
    c += a.s;                                                                                                       // 901
  }                                                                                                                 // 902
  r.s = (c<0)?-1:0;                                                                                                 // 903
  if(c > 0) r[i++] = c;                                                                                             // 904
  else if(c < -1) r[i++] = this.DV+c;                                                                               // 905
  r.t = i;                                                                                                          // 906
  r.clamp();                                                                                                        // 907
}                                                                                                                   // 908
                                                                                                                    // 909
// (public) this + a                                                                                                // 910
function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }                                                     // 911
                                                                                                                    // 912
// (public) this - a                                                                                                // 913
function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }                                                // 914
                                                                                                                    // 915
// (public) this * a                                                                                                // 916
function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }                                           // 917
                                                                                                                    // 918
// (public) this / a                                                                                                // 919
function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }                                          // 920
                                                                                                                    // 921
// (public) this % a                                                                                                // 922
function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }                                       // 923
                                                                                                                    // 924
// (public) [this/a,this%a]                                                                                         // 925
function bnDivideAndRemainder(a) {                                                                                  // 926
  var q = nbi(), r = nbi();                                                                                         // 927
  this.divRemTo(a,q,r);                                                                                             // 928
  return new Array(q,r);                                                                                            // 929
}                                                                                                                   // 930
                                                                                                                    // 931
// (protected) this *= n, this >= 0, 1 < n < DV                                                                     // 932
function bnpDMultiply(n) {                                                                                          // 933
  this[this.t] = this.am(0,n-1,this,0,0,this.t);                                                                    // 934
  ++this.t;                                                                                                         // 935
  this.clamp();                                                                                                     // 936
}                                                                                                                   // 937
                                                                                                                    // 938
// (protected) this += n << w words, this >= 0                                                                      // 939
function bnpDAddOffset(n,w) {                                                                                       // 940
  while(this.t <= w) this[this.t++] = 0;                                                                            // 941
  this[w] += n;                                                                                                     // 942
  while(this[w] >= this.DV) {                                                                                       // 943
    this[w] -= this.DV;                                                                                             // 944
    if(++w >= this.t) this[this.t++] = 0;                                                                           // 945
    ++this[w];                                                                                                      // 946
  }                                                                                                                 // 947
}                                                                                                                   // 948
                                                                                                                    // 949
// A "null" reducer                                                                                                 // 950
function NullExp() {}                                                                                               // 951
function nNop(x) { return x; }                                                                                      // 952
function nMulTo(x,y,r) { x.multiplyTo(y,r); }                                                                       // 953
function nSqrTo(x,r) { x.squareTo(r); }                                                                             // 954
                                                                                                                    // 955
NullExp.prototype.convert = nNop;                                                                                   // 956
NullExp.prototype.revert = nNop;                                                                                    // 957
NullExp.prototype.mulTo = nMulTo;                                                                                   // 958
NullExp.prototype.sqrTo = nSqrTo;                                                                                   // 959
                                                                                                                    // 960
// (public) this^e                                                                                                  // 961
function bnPow(e) { return this.exp(e,new NullExp()); }                                                             // 962
                                                                                                                    // 963
// (protected) r = lower n words of "this * a", a.t <= n                                                            // 964
// "this" should be the larger one if appropriate.                                                                  // 965
function bnpMultiplyLowerTo(a,n,r) {                                                                                // 966
  var i = Math.min(this.t+a.t,n);                                                                                   // 967
  r.s = 0; // assumes a,this >= 0                                                                                   // 968
  r.t = i;                                                                                                          // 969
  while(i > 0) r[--i] = 0;                                                                                          // 970
  var j;                                                                                                            // 971
  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);                                       // 972
  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);                                                   // 973
  r.clamp();                                                                                                        // 974
}                                                                                                                   // 975
                                                                                                                    // 976
// (protected) r = "this * a" without lower n words, n > 0                                                          // 977
// "this" should be the larger one if appropriate.                                                                  // 978
function bnpMultiplyUpperTo(a,n,r) {                                                                                // 979
  --n;                                                                                                              // 980
  var i = r.t = this.t+a.t-n;                                                                                       // 981
  r.s = 0; // assumes a,this >= 0                                                                                   // 982
  while(--i >= 0) r[i] = 0;                                                                                         // 983
  for(i = Math.max(n-this.t,0); i < a.t; ++i)                                                                       // 984
    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);                                                             // 985
  r.clamp();                                                                                                        // 986
  r.drShiftTo(1,r);                                                                                                 // 987
}                                                                                                                   // 988
                                                                                                                    // 989
// Barrett modular reduction                                                                                        // 990
function Barrett(m) {                                                                                               // 991
  // setup Barrett                                                                                                  // 992
  this.r2 = nbi();                                                                                                  // 993
  this.q3 = nbi();                                                                                                  // 994
  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);                                                                          // 995
  this.mu = this.r2.divide(m);                                                                                      // 996
  this.m = m;                                                                                                       // 997
}                                                                                                                   // 998
                                                                                                                    // 999
function barrettConvert(x) {                                                                                        // 1000
  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);                                                             // 1001
  else if(x.compareTo(this.m) < 0) return x;                                                                        // 1002
  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }                                                    // 1003
}                                                                                                                   // 1004
                                                                                                                    // 1005
function barrettRevert(x) { return x; }                                                                             // 1006
                                                                                                                    // 1007
// x = x mod m (HAC 14.42)                                                                                          // 1008
function barrettReduce(x) {                                                                                         // 1009
  x.drShiftTo(this.m.t-1,this.r2);                                                                                  // 1010
  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }                                                             // 1011
  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);                                                              // 1012
  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);                                                               // 1013
  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);                                                       // 1014
  x.subTo(this.r2,x);                                                                                               // 1015
  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);                                                                // 1016
}                                                                                                                   // 1017
                                                                                                                    // 1018
// r = x^2 mod m; x != r                                                                                            // 1019
function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }                                                       // 1020
                                                                                                                    // 1021
// r = x*y mod m; x,y != r                                                                                          // 1022
function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }                                                 // 1023
                                                                                                                    // 1024
Barrett.prototype.convert = barrettConvert;                                                                         // 1025
Barrett.prototype.revert = barrettRevert;                                                                           // 1026
Barrett.prototype.reduce = barrettReduce;                                                                           // 1027
Barrett.prototype.mulTo = barrettMulTo;                                                                             // 1028
Barrett.prototype.sqrTo = barrettSqrTo;                                                                             // 1029
                                                                                                                    // 1030
// (public) this^e % m (HAC 14.85)                                                                                  // 1031
function bnModPow(e,m) {                                                                                            // 1032
  var i = e.bitLength(), k, r = nbv(1), z;                                                                          // 1033
  if(i <= 0) return r;                                                                                              // 1034
  else if(i < 18) k = 1;                                                                                            // 1035
  else if(i < 48) k = 3;                                                                                            // 1036
  else if(i < 144) k = 4;                                                                                           // 1037
  else if(i < 768) k = 5;                                                                                           // 1038
  else k = 6;                                                                                                       // 1039
  if(i < 8)                                                                                                         // 1040
    z = new Classic(m);                                                                                             // 1041
  else if(m.isEven())                                                                                               // 1042
    z = new Barrett(m);                                                                                             // 1043
  else                                                                                                              // 1044
    z = new Montgomery(m);                                                                                          // 1045
                                                                                                                    // 1046
  // precomputation                                                                                                 // 1047
  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;                                                              // 1048
  g[1] = z.convert(this);                                                                                           // 1049
  if(k > 1) {                                                                                                       // 1050
    var g2 = nbi();                                                                                                 // 1051
    z.sqrTo(g[1],g2);                                                                                               // 1052
    while(n <= km) {                                                                                                // 1053
      g[n] = nbi();                                                                                                 // 1054
      z.mulTo(g2,g[n-2],g[n]);                                                                                      // 1055
      n += 2;                                                                                                       // 1056
    }                                                                                                               // 1057
  }                                                                                                                 // 1058
                                                                                                                    // 1059
  var j = e.t-1, w, is1 = true, r2 = nbi(), t;                                                                      // 1060
  i = nbits(e[j])-1;                                                                                                // 1061
  while(j >= 0) {                                                                                                   // 1062
    if(i >= k1) w = (e[j]>>(i-k1))&km;                                                                              // 1063
    else {                                                                                                          // 1064
      w = (e[j]&((1<<(i+1))-1))<<(k1-i);                                                                            // 1065
      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);                                                                        // 1066
    }                                                                                                               // 1067
                                                                                                                    // 1068
    n = k;                                                                                                          // 1069
    while((w&1) == 0) { w >>= 1; --n; }                                                                             // 1070
    if((i -= n) < 0) { i += this.DB; --j; }                                                                         // 1071
    if(is1) {	// ret == 1, don't bother squaring or multiplying it                                                  // 1072
      g[w].copyTo(r);                                                                                               // 1073
      is1 = false;                                                                                                  // 1074
    }                                                                                                               // 1075
    else {                                                                                                          // 1076
      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }                                                        // 1077
      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }                                                      // 1078
      z.mulTo(r2,g[w],r);                                                                                           // 1079
    }                                                                                                               // 1080
                                                                                                                    // 1081
    while(j >= 0 && (e[j]&(1<<i)) == 0) {                                                                           // 1082
      z.sqrTo(r,r2); t = r; r = r2; r2 = t;                                                                         // 1083
      if(--i < 0) { i = this.DB-1; --j; }                                                                           // 1084
    }                                                                                                               // 1085
  }                                                                                                                 // 1086
  return z.revert(r);                                                                                               // 1087
}                                                                                                                   // 1088
                                                                                                                    // 1089
// (public) gcd(this,a) (HAC 14.54)                                                                                 // 1090
function bnGCD(a) {                                                                                                 // 1091
  var x = (this.s<0)?this.negate():this.clone();                                                                    // 1092
  var y = (a.s<0)?a.negate():a.clone();                                                                             // 1093
  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }                                                               // 1094
  var i = x.getLowestSetBit(), g = y.getLowestSetBit();                                                             // 1095
  if(g < 0) return x;                                                                                               // 1096
  if(i < g) g = i;                                                                                                  // 1097
  if(g > 0) {                                                                                                       // 1098
    x.rShiftTo(g,x);                                                                                                // 1099
    y.rShiftTo(g,y);                                                                                                // 1100
  }                                                                                                                 // 1101
  while(x.signum() > 0) {                                                                                           // 1102
    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);                                                              // 1103
    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);                                                              // 1104
    if(x.compareTo(y) >= 0) {                                                                                       // 1105
      x.subTo(y,x);                                                                                                 // 1106
      x.rShiftTo(1,x);                                                                                              // 1107
    }                                                                                                               // 1108
    else {                                                                                                          // 1109
      y.subTo(x,y);                                                                                                 // 1110
      y.rShiftTo(1,y);                                                                                              // 1111
    }                                                                                                               // 1112
  }                                                                                                                 // 1113
  if(g > 0) y.lShiftTo(g,y);                                                                                        // 1114
  return y;                                                                                                         // 1115
}                                                                                                                   // 1116
                                                                                                                    // 1117
// (protected) this % n, n < 2^26                                                                                   // 1118
function bnpModInt(n) {                                                                                             // 1119
  if(n <= 0) return 0;                                                                                              // 1120
  var d = this.DV%n, r = (this.s<0)?n-1:0;                                                                          // 1121
  if(this.t > 0)                                                                                                    // 1122
    if(d == 0) r = this[0]%n;                                                                                       // 1123
    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;                                                    // 1124
  return r;                                                                                                         // 1125
}                                                                                                                   // 1126
                                                                                                                    // 1127
// (public) 1/this % m (HAC 14.61)                                                                                  // 1128
function bnModInverse(m) {                                                                                          // 1129
  var ac = m.isEven();                                                                                              // 1130
  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;                                              // 1131
  var u = m.clone(), v = this.clone();                                                                              // 1132
  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);                                                               // 1133
  while(u.signum() != 0) {                                                                                          // 1134
    while(u.isEven()) {                                                                                             // 1135
      u.rShiftTo(1,u);                                                                                              // 1136
      if(ac) {                                                                                                      // 1137
        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }                                           // 1138
        a.rShiftTo(1,a);                                                                                            // 1139
      }                                                                                                             // 1140
      else if(!b.isEven()) b.subTo(m,b);                                                                            // 1141
      b.rShiftTo(1,b);                                                                                              // 1142
    }                                                                                                               // 1143
    while(v.isEven()) {                                                                                             // 1144
      v.rShiftTo(1,v);                                                                                              // 1145
      if(ac) {                                                                                                      // 1146
        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }                                           // 1147
        c.rShiftTo(1,c);                                                                                            // 1148
      }                                                                                                             // 1149
      else if(!d.isEven()) d.subTo(m,d);                                                                            // 1150
      d.rShiftTo(1,d);                                                                                              // 1151
    }                                                                                                               // 1152
    if(u.compareTo(v) >= 0) {                                                                                       // 1153
      u.subTo(v,u);                                                                                                 // 1154
      if(ac) a.subTo(c,a);                                                                                          // 1155
      b.subTo(d,b);                                                                                                 // 1156
    }                                                                                                               // 1157
    else {                                                                                                          // 1158
      v.subTo(u,v);                                                                                                 // 1159
      if(ac) c.subTo(a,c);                                                                                          // 1160
      d.subTo(b,d);                                                                                                 // 1161
    }                                                                                                               // 1162
  }                                                                                                                 // 1163
  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;                                                      // 1164
  if(d.compareTo(m) >= 0) return d.subtract(m);                                                                     // 1165
  if(d.signum() < 0) d.addTo(m,d); else return d;                                                                   // 1166
  if(d.signum() < 0) return d.add(m); else return d;                                                                // 1167
}                                                                                                                   // 1168
                                                                                                                    // 1169
var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
var lplim = (1<<26)/lowprimes[lowprimes.length-1];                                                                  // 1171
                                                                                                                    // 1172
// (public) test primality with certainty >= 1-.5^t                                                                 // 1173
function bnIsProbablePrime(t) {                                                                                     // 1174
  var i, x = this.abs();                                                                                            // 1175
  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {                                                           // 1176
    for(i = 0; i < lowprimes.length; ++i)                                                                           // 1177
      if(x[0] == lowprimes[i]) return true;                                                                         // 1178
    return false;                                                                                                   // 1179
  }                                                                                                                 // 1180
  if(x.isEven()) return false;                                                                                      // 1181
  i = 1;                                                                                                            // 1182
  while(i < lowprimes.length) {                                                                                     // 1183
    var m = lowprimes[i], j = i+1;                                                                                  // 1184
    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];                                                   // 1185
    m = x.modInt(m);                                                                                                // 1186
    while(i < j) if(m%lowprimes[i++] == 0) return false;                                                            // 1187
  }                                                                                                                 // 1188
  return x.millerRabin(t);                                                                                          // 1189
}                                                                                                                   // 1190
                                                                                                                    // 1191
// (protected) true if probably prime (HAC 4.24, Miller-Rabin)                                                      // 1192
function bnpMillerRabin(t) {                                                                                        // 1193
  var n1 = this.subtract(BigInteger.ONE);                                                                           // 1194
  var k = n1.getLowestSetBit();                                                                                     // 1195
  if(k <= 0) return false;                                                                                          // 1196
  var r = n1.shiftRight(k);                                                                                         // 1197
  t = (t+1)>>1;                                                                                                     // 1198
  if(t > lowprimes.length) t = lowprimes.length;                                                                    // 1199
  var a = nbi();                                                                                                    // 1200
  for(var i = 0; i < t; ++i) {                                                                                      // 1201
    a.fromInt(lowprimes[i]);                                                                                        // 1202
    var y = a.modPow(r,this);                                                                                       // 1203
    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {                                                  // 1204
      var j = 1;                                                                                                    // 1205
      while(j++ < k && y.compareTo(n1) != 0) {                                                                      // 1206
        y = y.modPowInt(2,this);                                                                                    // 1207
        if(y.compareTo(BigInteger.ONE) == 0) return false;                                                          // 1208
      }                                                                                                             // 1209
      if(y.compareTo(n1) != 0) return false;                                                                        // 1210
    }                                                                                                               // 1211
  }                                                                                                                 // 1212
  return true;                                                                                                      // 1213
}                                                                                                                   // 1214
                                                                                                                    // 1215
// protected                                                                                                        // 1216
BigInteger.prototype.chunkSize = bnpChunkSize;                                                                      // 1217
BigInteger.prototype.toRadix = bnpToRadix;                                                                          // 1218
BigInteger.prototype.fromRadix = bnpFromRadix;                                                                      // 1219
BigInteger.prototype.fromNumber = bnpFromNumber;                                                                    // 1220
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;                                                                      // 1221
BigInteger.prototype.changeBit = bnpChangeBit;                                                                      // 1222
BigInteger.prototype.addTo = bnpAddTo;                                                                              // 1223
BigInteger.prototype.dMultiply = bnpDMultiply;                                                                      // 1224
BigInteger.prototype.dAddOffset = bnpDAddOffset;                                                                    // 1225
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;                                                          // 1226
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;                                                          // 1227
BigInteger.prototype.modInt = bnpModInt;                                                                            // 1228
BigInteger.prototype.millerRabin = bnpMillerRabin;                                                                  // 1229
                                                                                                                    // 1230
// public                                                                                                           // 1231
BigInteger.prototype.clone = bnClone;                                                                               // 1232
BigInteger.prototype.intValue = bnIntValue;                                                                         // 1233
BigInteger.prototype.byteValue = bnByteValue;                                                                       // 1234
BigInteger.prototype.shortValue = bnShortValue;                                                                     // 1235
BigInteger.prototype.signum = bnSigNum;                                                                             // 1236
BigInteger.prototype.toByteArray = bnToByteArray;                                                                   // 1237
BigInteger.prototype.equals = bnEquals;                                                                             // 1238
BigInteger.prototype.min = bnMin;                                                                                   // 1239
BigInteger.prototype.max = bnMax;                                                                                   // 1240
BigInteger.prototype.and = bnAnd;                                                                                   // 1241
BigInteger.prototype.or = bnOr;                                                                                     // 1242
BigInteger.prototype.xor = bnXor;                                                                                   // 1243
BigInteger.prototype.andNot = bnAndNot;                                                                             // 1244
BigInteger.prototype.not = bnNot;                                                                                   // 1245
BigInteger.prototype.shiftLeft = bnShiftLeft;                                                                       // 1246
BigInteger.prototype.shiftRight = bnShiftRight;                                                                     // 1247
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;                                                           // 1248
BigInteger.prototype.bitCount = bnBitCount;                                                                         // 1249
BigInteger.prototype.testBit = bnTestBit;                                                                           // 1250
BigInteger.prototype.setBit = bnSetBit;                                                                             // 1251
BigInteger.prototype.clearBit = bnClearBit;                                                                         // 1252
BigInteger.prototype.flipBit = bnFlipBit;                                                                           // 1253
BigInteger.prototype.add = bnAdd;                                                                                   // 1254
BigInteger.prototype.subtract = bnSubtract;                                                                         // 1255
BigInteger.prototype.multiply = bnMultiply;                                                                         // 1256
BigInteger.prototype.divide = bnDivide;                                                                             // 1257
BigInteger.prototype.remainder = bnRemainder;                                                                       // 1258
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;                                                     // 1259
BigInteger.prototype.modPow = bnModPow;                                                                             // 1260
BigInteger.prototype.modInverse = bnModInverse;                                                                     // 1261
BigInteger.prototype.pow = bnPow;                                                                                   // 1262
BigInteger.prototype.gcd = bnGCD;                                                                                   // 1263
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;                                                           // 1264
                                                                                                                    // 1265
// BigInteger interfaces not implemented in jsbn:                                                                   // 1266
                                                                                                                    // 1267
// BigInteger(int signum, byte[] magnitude)                                                                         // 1268
// double doubleValue()                                                                                             // 1269
// float floatValue()                                                                                               // 1270
// int hashCode()                                                                                                   // 1271
// long longValue()                                                                                                 // 1272
// static BigInteger valueOf(long val)                                                                              // 1273
                                                                                                                    // 1274
/// METEOR WRAPPER                                                                                                  // 1275
return BigInteger;                                                                                                  // 1276
})();                                                                                                               // 1277
                                                                                                                    // 1278
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                  //
// packages/srp/srp.js                                                                                              //
//                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                    //
// This package contains just enough of the original SRP code to                                                    // 1
// support the backwards-compatibility upgrade path.                                                                // 2
//                                                                                                                  // 3
// An SRP (and possibly also accounts-srp) package should eventually be                                             // 4
// available in Atmosphere so that users can continue to use SRP if they                                            // 5
// want to.                                                                                                         // 6
                                                                                                                    // 7
SRP = {};                                                                                                           // 8
                                                                                                                    // 9
/**                                                                                                                 // 10
 * Generate a new SRP verifier. Password is the plaintext password.                                                 // 11
 *                                                                                                                  // 12
 * options is optional and can include:                                                                             // 13
 * - identity: String. The SRP username to user. Mostly this is passed                                              // 14
 *   in for testing.  Random UUID if not provided.                                                                  // 15
 * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.
 * - salt: String. A salt to use.  Mostly this is passed in for                                                     // 17
 *   testing.  Random UUID if not provided.                                                                         // 18
 * - SRP parameters (see _defaults and paramsFromOptions below)                                                     // 19
 */                                                                                                                 // 20
SRP.generateVerifier = function (password, options) {                                                               // 21
  var params = paramsFromOptions(options);                                                                          // 22
                                                                                                                    // 23
  var salt = (options && options.salt) || Random.secret();                                                          // 24
                                                                                                                    // 25
  var identity;                                                                                                     // 26
  var hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;                                     // 27
  if (!hashedIdentityAndPassword) {                                                                                 // 28
    identity = (options && options.identity) || Random.secret();                                                    // 29
    hashedIdentityAndPassword = params.hash(identity + ":" + password);                                             // 30
  }                                                                                                                 // 31
                                                                                                                    // 32
  var x = params.hash(salt + hashedIdentityAndPassword);                                                            // 33
  var xi = new BigInteger(x, 16);                                                                                   // 34
  var v = params.g.modPow(xi, params.N);                                                                            // 35
                                                                                                                    // 36
  return {                                                                                                          // 37
    identity: identity,                                                                                             // 38
    salt: salt,                                                                                                     // 39
    verifier: v.toString(16)                                                                                        // 40
  };                                                                                                                // 41
};                                                                                                                  // 42
                                                                                                                    // 43
// For use with check().                                                                                            // 44
SRP.matchVerifier = {                                                                                               // 45
  identity: String,                                                                                                 // 46
  salt: String,                                                                                                     // 47
  verifier: String                                                                                                  // 48
};                                                                                                                  // 49
                                                                                                                    // 50
                                                                                                                    // 51
/**                                                                                                                 // 52
 * Default parameter values for SRP.                                                                                // 53
 *                                                                                                                  // 54
 */                                                                                                                 // 55
var _defaults = {                                                                                                   // 56
  hash: function (x) { return SHA256(x).toLowerCase(); },                                                           // 57
  N: new BigInteger("EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3", 16),
  g: new BigInteger("2")                                                                                            // 59
};                                                                                                                  // 60
_defaults.k = new BigInteger(                                                                                       // 61
  _defaults.hash(                                                                                                   // 62
    _defaults.N.toString(16) +                                                                                      // 63
      _defaults.g.toString(16)),                                                                                    // 64
  16);                                                                                                              // 65
                                                                                                                    // 66
/**                                                                                                                 // 67
 * Process an options hash to create SRP parameters.                                                                // 68
 *                                                                                                                  // 69
 * Options can include:                                                                                             // 70
 * - hash: Function. Defaults to SHA256.                                                                            // 71
 * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054                                              // 72
 * - g: String or BigInteger. Defaults to 2.                                                                        // 73
 * - k: String or BigInteger. Defaults to hash(N, g)                                                                // 74
 */                                                                                                                 // 75
var paramsFromOptions = function (options) {                                                                        // 76
  if (!options) // fast path                                                                                        // 77
    return _defaults;                                                                                               // 78
                                                                                                                    // 79
  var ret = _.extend({}, _defaults);                                                                                // 80
                                                                                                                    // 81
  _.each(['N', 'g', 'k'], function (p) {                                                                            // 82
    if (options[p]) {                                                                                               // 83
      if (typeof options[p] === "string")                                                                           // 84
        ret[p] = new BigInteger(options[p], 16);                                                                    // 85
      else if (options[p] instanceof BigInteger)                                                                    // 86
        ret[p] = options[p];                                                                                        // 87
      else                                                                                                          // 88
        throw new Error("Invalid parameter: " + p);                                                                 // 89
    }                                                                                                               // 90
  });                                                                                                               // 91
                                                                                                                    // 92
  if (options.hash)                                                                                                 // 93
    ret.hash = function (x) { return options.hash(x).toLowerCase(); };                                              // 94
                                                                                                                    // 95
  if (!options.k && (options.N || options.g || options.hash)) {                                                     // 96
    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));                                                      // 97
  }                                                                                                                 // 98
                                                                                                                    // 99
  return ret;                                                                                                       // 100
};                                                                                                                  // 101
                                                                                                                    // 102
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.srp = {}, {
  SRP: SRP
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Accounts = Package['accounts-base'].Accounts;
var SRP = Package.srp.SRP;
var SHA256 = Package.sha.SHA256;
var EJSON = Package.ejson.EJSON;
var DDP = Package['ddp-client'].DDP;
var check = Package.check.check;
var Match = Package.check.Match;
var _ = Package.underscore._;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

var require = meteorInstall({"node_modules":{"meteor":{"accounts-password":{"password_client.js":function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/accounts-password/password_client.js                                                              //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
// Used in the various functions below to handle errors consistently                                          // 1
function reportError(error, callback) {                                                                       // 2
  if (callback) {                                                                                             // 3
    callback(error);                                                                                          // 4
  } else {                                                                                                    // 5
    throw error;                                                                                              // 6
  }                                                                                                           // 7
}                                                                                                             // 8
                                                                                                              //
; // Attempt to log in with a password.                                                                       // 8
//                                                                                                            // 11
// @param selector {String|Object} One of the following:                                                      // 12
//   - {username: (username)}                                                                                 // 13
//   - {email: (email)}                                                                                       // 14
//   - a string which may be a username or email, depending on whether                                        // 15
//     it contains "@".                                                                                       // 16
// @param password {String}                                                                                   // 17
// @param callback {Function(error|undefined)}                                                                // 18
/**                                                                                                           // 20
 * @summary Log the user in with a password.                                                                  //
 * @locus Client                                                                                              //
 * @param {Object | String} user                                                                              //
 *   Either a string interpreted as a username or an email; or an object with a                               //
 *   single key: `email`, `username` or `id`. Username or email match in a case                               //
 *   insensitive manner.                                                                                      //
 * @param {String} password The user's password.                                                              //
 * @param {Function} [callback] Optional callback.                                                            //
 *   Called with no arguments on success, or with a single `Error` argument                                   //
 *   on failure.                                                                                              //
 * @importFromPackage meteor                                                                                  //
 */                                                                                                           //
                                                                                                              //
Meteor.loginWithPassword = function (selector, password, callback) {                                          // 33
  if (typeof selector === 'string') if (selector.indexOf('@') === -1) selector = {                            // 34
    username: selector                                                                                        // 36
  };else selector = {                                                                                         // 36
    email: selector                                                                                           // 38
  };                                                                                                          // 38
  Accounts.callLoginMethod({                                                                                  // 40
    methodArguments: [{                                                                                       // 41
      user: selector,                                                                                         // 42
      password: Accounts._hashPassword(password)                                                              // 43
    }],                                                                                                       // 41
    userCallback: function (error, result) {                                                                  // 45
      if (error && error.error === 400 && error.reason === 'old password format') {                           // 46
        // The "reason" string should match the error thrown in the                                           // 48
        // password login handler in password_server.js.                                                      // 49
        // XXX COMPAT WITH 0.8.1.3                                                                            // 51
        // If this user's last login was with a previous version of                                           // 52
        // Meteor that used SRP, then the server throws this error to                                         // 53
        // indicate that we should try again. The error includes the                                          // 54
        // user's SRP identity. We provide a value derived from the                                           // 55
        // identity and the password to prove to the server that we know                                      // 56
        // the password without requiring a full SRP flow, as well as                                         // 57
        // SHA256(password), which the server bcrypts and stores in                                           // 58
        // place of the old SRP information for this user.                                                    // 59
        srpUpgradePath({                                                                                      // 60
          upgradeError: error,                                                                                // 61
          userSelector: selector,                                                                             // 62
          plaintextPassword: password                                                                         // 63
        }, callback);                                                                                         // 60
      } else if (error) {                                                                                     // 65
        reportError(error, callback);                                                                         // 67
      } else {                                                                                                // 68
        callback && callback();                                                                               // 69
      }                                                                                                       // 70
    }                                                                                                         // 71
  });                                                                                                         // 40
};                                                                                                            // 73
                                                                                                              //
Accounts._hashPassword = function (password) {                                                                // 75
  return {                                                                                                    // 76
    digest: SHA256(password),                                                                                 // 77
    algorithm: "sha-256"                                                                                      // 78
  };                                                                                                          // 76
}; // XXX COMPAT WITH 0.8.1.3                                                                                 // 80
// The server requested an upgrade from the old SRP password format,                                          // 83
// so supply the needed SRP identity to login. Options:                                                       // 84
//   - upgradeError: the error object that the server returned to tell                                        // 85
//     us to upgrade from SRP to bcrypt.                                                                      // 86
//   - userSelector: selector to retrieve the user object                                                     // 87
//   - plaintextPassword: the password as a string                                                            // 88
                                                                                                              //
                                                                                                              //
var srpUpgradePath = function (options, callback) {                                                           // 89
  var details;                                                                                                // 90
                                                                                                              //
  try {                                                                                                       // 91
    details = EJSON.parse(options.upgradeError.details);                                                      // 92
  } catch (e) {}                                                                                              // 93
                                                                                                              //
  if (!(details && details.format === 'srp')) {                                                               // 94
    reportError(new Meteor.Error(400, "Password is old. Please reset your " + "password."), callback);        // 95
  } else {                                                                                                    // 98
    Accounts.callLoginMethod({                                                                                // 99
      methodArguments: [{                                                                                     // 100
        user: options.userSelector,                                                                           // 101
        srp: SHA256(details.identity + ":" + options.plaintextPassword),                                      // 102
        password: Accounts._hashPassword(options.plaintextPassword)                                           // 103
      }],                                                                                                     // 100
      userCallback: callback                                                                                  // 105
    });                                                                                                       // 99
  }                                                                                                           // 107
}; // Attempt to log in as a new user.                                                                        // 108
/**                                                                                                           // 112
 * @summary Create a new user.                                                                                //
 * @locus Anywhere                                                                                            //
 * @param {Object} options                                                                                    //
 * @param {String} options.username A unique name for this user.                                              //
 * @param {String} options.email The user's email address.                                                    //
 * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.    //
 * @param {Object} options.profile The user's profile, typically including the `name` field.                  //
 * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base                                                                           //
 */                                                                                                           //
                                                                                                              //
Accounts.createUser = function (options, callback) {                                                          // 123
  options = _.clone(options); // we'll be modifying options                                                   // 124
                                                                                                              //
  if (typeof options.password !== 'string') throw new Error("options.password must be a string");             // 126
                                                                                                              //
  if (!options.password) {                                                                                    // 128
    return reportError(new Meteor.Error(400, "Password may not be empty"), callback);                         // 129
  } // Replace password with the hashed password.                                                             // 130
                                                                                                              //
                                                                                                              //
  options.password = Accounts._hashPassword(options.password);                                                // 133
  Accounts.callLoginMethod({                                                                                  // 135
    methodName: 'createUser',                                                                                 // 136
    methodArguments: [options],                                                                               // 137
    userCallback: callback                                                                                    // 138
  });                                                                                                         // 135
}; // Change password. Must be logged in.                                                                     // 140
//                                                                                                            // 143
// @param oldPassword {String|null} By default servers no longer allow                                        // 144
//   changing password without the old password, but they could so we                                         // 145
//   support passing no password to the server and letting it decide.                                         // 146
// @param newPassword {String}                                                                                // 147
// @param callback {Function(error|undefined)}                                                                // 148
/**                                                                                                           // 150
 * @summary Change the current user's password. Must be logged in.                                            //
 * @locus Client                                                                                              //
 * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.
 * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base                                                                           //
 */                                                                                                           //
                                                                                                              //
Accounts.changePassword = function (oldPassword, newPassword, callback) {                                     // 158
  if (!Meteor.user()) {                                                                                       // 159
    return reportError(new Error("Must be logged in to change password."), callback);                         // 160
  }                                                                                                           // 161
                                                                                                              //
  check(newPassword, String);                                                                                 // 163
                                                                                                              //
  if (!newPassword) {                                                                                         // 164
    return reportError(new Meteor.Error(400, "Password may not be empty"), callback);                         // 165
  }                                                                                                           // 166
                                                                                                              //
  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], function (error, result) {
    if (error || !result) {                                                                                   // 173
      if (error && error.error === 400 && error.reason === 'old password format') {                           // 174
        // XXX COMPAT WITH 0.8.1.3                                                                            // 176
        // The server is telling us to upgrade from SRP to bcrypt, as                                         // 177
        // in Meteor.loginWithPassword.                                                                       // 178
        srpUpgradePath({                                                                                      // 179
          upgradeError: error,                                                                                // 180
          userSelector: {                                                                                     // 181
            id: Meteor.userId()                                                                               // 181
          },                                                                                                  // 181
          plaintextPassword: oldPassword                                                                      // 182
        }, function (err) {                                                                                   // 179
          if (err) {                                                                                          // 184
            reportError(err, callback);                                                                       // 185
          } else {                                                                                            // 186
            // Now that we've successfully migrated from srp to                                               // 187
            // bcrypt, try changing the password again.                                                       // 188
            Accounts.changePassword(oldPassword, newPassword, callback);                                      // 189
          }                                                                                                   // 190
        });                                                                                                   // 191
      } else {                                                                                                // 192
        // A normal error, not an error telling us to upgrade to bcrypt                                       // 193
        reportError(error || new Error("No result from changePassword."), callback);                          // 194
      }                                                                                                       // 196
    } else {                                                                                                  // 197
      callback && callback();                                                                                 // 198
    }                                                                                                         // 199
  });                                                                                                         // 200
}; // Sends an email to a user with a link that can be used to reset                                          // 202
// their password                                                                                             // 205
//                                                                                                            // 206
// @param options {Object}                                                                                    // 207
//   - email: (email)                                                                                         // 208
// @param callback (optional) {Function(error|undefined)}                                                     // 209
/**                                                                                                           // 211
 * @summary Request a forgot password email.                                                                  //
 * @locus Client                                                                                              //
 * @param {Object} options                                                                                    //
 * @param {String} options.email The email address to send a password reset link.                             //
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base                                                                           //
 */                                                                                                           //
                                                                                                              //
Accounts.forgotPassword = function (options, callback) {                                                      // 219
  if (!options.email) {                                                                                       // 220
    return reportError(new Meteor.Error(400, "Must pass options.email"), callback);                           // 221
  }                                                                                                           // 222
                                                                                                              //
  if (callback) {                                                                                             // 224
    Accounts.connection.call("forgotPassword", options, callback);                                            // 225
  } else {                                                                                                    // 226
    Accounts.connection.call("forgotPassword", options);                                                      // 227
  }                                                                                                           // 228
}; // Resets a password based on a token originally created by                                                // 229
// Accounts.forgotPassword, and then logs in the matching user.                                               // 232
//                                                                                                            // 233
// @param token {String}                                                                                      // 234
// @param newPassword {String}                                                                                // 235
// @param callback (optional) {Function(error|undefined)}                                                     // 236
/**                                                                                                           // 238
 * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.       //
 * @locus Client                                                                                              //
 * @param {String} token The token retrieved from the reset password URL.                                     //
 * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base                                                                           //
 */                                                                                                           //
                                                                                                              //
Accounts.resetPassword = function (token, newPassword, callback) {                                            // 246
  check(token, String);                                                                                       // 247
  check(newPassword, String);                                                                                 // 248
                                                                                                              //
  if (!newPassword) {                                                                                         // 250
    return reportError(new Meteor.Error(400, "Password may not be empty"), callback);                         // 251
  }                                                                                                           // 252
                                                                                                              //
  Accounts.callLoginMethod({                                                                                  // 254
    methodName: 'resetPassword',                                                                              // 255
    methodArguments: [token, Accounts._hashPassword(newPassword)],                                            // 256
    userCallback: callback                                                                                    // 257
  });                                                                                                         // 254
}; // Verifies a user's email address based on a token originally                                             // 258
// created by Accounts.sendVerificationEmail                                                                  // 261
//                                                                                                            // 262
// @param token {String}                                                                                      // 263
// @param callback (optional) {Function(error|undefined)}                                                     // 264
/**                                                                                                           // 266
 * @summary Marks the user's email address as verified. Logs the user in afterwards.                          //
 * @locus Client                                                                                              //
 * @param {String} token The token retrieved from the verification URL.                                       //
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
 * @importFromPackage accounts-base                                                                           //
 */                                                                                                           //
                                                                                                              //
Accounts.verifyEmail = function (token, callback) {                                                           // 273
  if (!token) {                                                                                               // 274
    return reportError(new Meteor.Error(400, "Need to pass token"), callback);                                // 275
  }                                                                                                           // 276
                                                                                                              //
  Accounts.callLoginMethod({                                                                                  // 278
    methodName: 'verifyEmail',                                                                                // 279
    methodArguments: [token],                                                                                 // 280
    userCallback: callback                                                                                    // 281
  });                                                                                                         // 278
};                                                                                                            // 282
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/accounts-password/password_client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['accounts-password'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Mongo = Package.mongo.Mongo;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var LocalCollection = Package.minimongo.LocalCollection;
var Minimongo = Package.minimongo.Minimongo;

/* Package-scope variables */
var CollectionExtensions;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                               //
// packages/lai_collection-extensions/collection-extensions.js                                                   //
//                                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                 //
// The collection extensions namespace                                                                           // 1
CollectionExtensions = {};                                                                                       // 2
                                                                                                                 // 3
// Stores all the collection extensions                                                                          // 4
CollectionExtensions._extensions = [];                                                                           // 5
                                                                                                                 // 6
// This is where you would add custom functionality to                                                           // 7
// Mongo.Collection/Meteor.Collection                                                                            // 8
CollectionExtensions.addExtension = function(customFunction) {                                                   // 9
  if (typeof customFunction !== 'function') {                                                                    // 10
    throw new Meteor.Error(                                                                                      // 11
      'collection-extension-wrong-argument',                                                                     // 12
      'You must pass a function \
       into CollectionExtensions.addExtension().');                                                              // 14
  }                                                                                                              // 15
  CollectionExtensions._extensions.push(customFunction);                                                         // 16
  // If Meteor.users exists, apply the extension right away                                                      // 17
  if (typeof Meteor.users !== 'undefined') {                                                                     // 18
    customFunction.apply(Meteor.users, ['users']);                                                               // 19
  }                                                                                                              // 20
};                                                                                                               // 21
                                                                                                                 // 22
// Backwards compatibility                                                                                       // 23
Meteor.addCollectionExtension = function() {                                                                     // 24
  console.warn('`Meteor.addCollectionExtension` is deprecated, please use `CollectionExtensions.addExtension`');
  CollectionExtensions.addExtension.apply(null, arguments);                                                      // 26
};                                                                                                               // 27
                                                                                                                 // 28
// Utility function to add a prototype function to your                                                          // 29
// Meteor/Mongo.Collection object                                                                                // 30
CollectionExtensions.addPrototype = function(name, customFunction) {                                             // 31
  if (typeof name !== 'string') {                                                                                // 32
    throw new Meteor.Error(                                                                                      // 33
      'collection-extension-wrong-argument',                                                                     // 34
      'You must pass a string as the first argument \
       into CollectionExtensions.addPrototype().');                                                              // 36
  }                                                                                                              // 37
  if (typeof customFunction !== 'function') {                                                                    // 38
    throw new Meteor.Error(                                                                                      // 39
      'collection-extension-wrong-argument',                                                                     // 40
      'You must pass a function as the second argument \
       into CollectionExtensions.addPrototype().');                                                              // 42
  }                                                                                                              // 43
  (typeof Mongo !== 'undefined' ?                                                                                // 44
    Mongo.Collection :                                                                                           // 45
    Meteor.Collection).prototype[name] = customFunction;                                                         // 46
};                                                                                                               // 47
                                                                                                                 // 48
// Backwards compatibility                                                                                       // 49
Meteor.addCollectionPrototype = function() {                                                                     // 50
  console.warn('`Meteor.addCollectionPrototype` is deprecated, please use `CollectionExtensions.addPrototype`');
  CollectionExtensions.addPrototype.apply(null, arguments);                                                      // 52
};                                                                                                               // 53
                                                                                                                 // 54
// This is used to reassign the prototype of unfortunately                                                       // 55
// and unstoppably already instantiated Mongo instances                                                          // 56
// i.e. Meteor.users                                                                                             // 57
function reassignCollectionPrototype(instance, constr) {                                                         // 58
  var hasSetPrototypeOf = typeof Object.setPrototypeOf === 'function';                                           // 59
                                                                                                                 // 60
  if (!constr) constr = typeof Mongo !== 'undefined' ? Mongo.Collection : Meteor.Collection;                     // 61
                                                                                                                 // 62
  // __proto__ is not available in < IE11                                                                        // 63
  // Note: Assigning a prototype dynamically has performance implications                                        // 64
  if (hasSetPrototypeOf) {                                                                                       // 65
    Object.setPrototypeOf(instance, constr.prototype);                                                           // 66
  } else if (instance.__proto__) {                                                                               // 67
    instance.__proto__ = constr.prototype;                                                                       // 68
  }                                                                                                              // 69
};                                                                                                               // 70
                                                                                                                 // 71
// This monkey-patches the Collection constructor                                                                // 72
// This code is the same monkey-patching code                                                                    // 73
// that matb33:collection-hooks uses, which works pretty nicely                                                  // 74
function wrapCollection(ns, as) {                                                                                // 75
  // Save the original prototype                                                                                 // 76
  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);                               // 77
                                                                                                                 // 78
  var constructor = as.Collection;                                                                               // 79
  var proto = as._CollectionPrototype;                                                                           // 80
                                                                                                                 // 81
  ns.Collection = function () {                                                                                  // 82
    var ret = constructor.apply(this, arguments);                                                                // 83
    // This is where all the collection extensions get processed                                                 // 84
    processCollectionExtensions(this, arguments);                                                                // 85
    return ret;                                                                                                  // 86
  };                                                                                                             // 87
                                                                                                                 // 88
  ns.Collection.prototype = proto;                                                                               // 89
  ns.Collection.prototype.constructor = ns.Collection;                                                           // 90
                                                                                                                 // 91
  for (var prop in constructor) {                                                                                // 92
    if (constructor.hasOwnProperty(prop)) {                                                                      // 93
      ns.Collection[prop] = constructor[prop];                                                                   // 94
    }                                                                                                            // 95
  }                                                                                                              // 96
};                                                                                                               // 97
                                                                                                                 // 98
function processCollectionExtensions(self, args) {                                                               // 99
  // Using old-school operations for better performance                                                          // 100
  // Please don't judge me ;P                                                                                    // 101
  var args = args ? [].slice.call(args, 0) : undefined;                                                          // 102
  var extensions = CollectionExtensions._extensions;                                                             // 103
  for (var i = 0, len = extensions.length; i < len; i++) {                                                       // 104
    extensions[i].apply(self, args);                                                                             // 105
  }                                                                                                              // 106
};                                                                                                               // 107
                                                                                                                 // 108
if (typeof Mongo !== 'undefined') {                                                                              // 109
  wrapCollection(Meteor, Mongo);                                                                                 // 110
  wrapCollection(Mongo, Mongo);                                                                                  // 111
} else {                                                                                                         // 112
  wrapCollection(Meteor, Meteor);                                                                                // 113
}                                                                                                                // 114
                                                                                                                 // 115
if (typeof Meteor.users !== 'undefined') {                                                                       // 116
  // Ensures that Meteor.users instanceof Mongo.Collection                                                       // 117
  reassignCollectionPrototype(Meteor.users);                                                                     // 118
}                                                                                                                // 119
                                                                                                                 // 120
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['lai:collection-extensions'] = {}, {
  CollectionExtensions: CollectionExtensions
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Mongo = Package.mongo.Mongo;
var _ = Package.underscore._;
var CollectionExtensions = Package['lai:collection-extensions'].CollectionExtensions;

(function(){

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                            //
// packages/dburles_mongo-collection-instances/mongo-instances.js                                             //
//                                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                              //
var instances = [];                                                                                           // 1
                                                                                                              // 2
CollectionExtensions.addExtension(function (name, options) {                                                  // 3
  instances.push({                                                                                            // 4
    name: name,                                                                                               // 5
    instance: this,                                                                                           // 6
    options: options                                                                                          // 7
  });                                                                                                         // 8
});                                                                                                           // 9
                                                                                                              // 10
Mongo.Collection.get = function(name, options) {                                                              // 11
  options = options || {};                                                                                    // 12
  var collection = _.find(instances, function(instance) {                                                     // 13
    if (options.connection)                                                                                   // 14
      return instance.name === name &&                                                                        // 15
        instance.options && instance.options.connection._lastSessionId === options.connection._lastSessionId;
    return instance.name === name;                                                                            // 17
  });                                                                                                         // 18
                                                                                                              // 19
  return collection && collection.instance;                                                                   // 20
};                                                                                                            // 21
                                                                                                              // 22
Mongo.Collection.getAll = function() {                                                                        // 23
  return instances;                                                                                           // 24
};                                                                                                            // 25
                                                                                                              // 26
// Meteor.Collection will lack ownProperties that are added back to Mongo.Collection                          // 27
Meteor.Collection = Mongo.Collection;                                                                         // 28
                                                                                                              // 29
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['dburles:mongo-collection-instances'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var WebApp;

var require = meteorInstall({"node_modules":{"meteor":{"webapp":{"webapp_client.js":function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/webapp/webapp_client.js                                  //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
WebApp = {                                                           // 1
  _isCssLoaded: function () {                                        // 3
    if (document.styleSheets.length === 0) return true;              // 4
    return _.find(document.styleSheets, function (sheet) {           // 7
      if (sheet.cssText && !sheet.cssRules) // IE8                   // 8
        return !sheet.cssText.match(/meteor-css-not-found-error/);   // 9
      return !_.find(sheet.cssRules, function (rule) {               // 10
        return rule.selectorText === '.meteor-css-not-found-error';  // 11
      });                                                            // 12
    });                                                              // 13
  }                                                                  // 14
};                                                                   // 1
///////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
require("./node_modules/meteor/webapp/webapp_client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.webapp = {}, {
  WebApp: WebApp
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var DDP = Package['ddp-client'].DDP;

/* Package-scope variables */
var LivedataTest;



/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.livedata = {}, {
  DDP: DDP,
  LivedataTest: LivedataTest
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {



/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['hot-code-push'] = {};

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

/* Package-scope variables */
var LaunchScreen;

(function(){

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// packages/launch-screen/mobile-launch-screen.js                         //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
                                                                          //
// XXX This currently implements loading screens for mobile apps only,    // 1
// but in the future can be expanded to all apps.                         // 2
                                                                          // 3
var holdCount = 0;                                                        // 4
var alreadyHidden = false;                                                // 5
                                                                          // 6
LaunchScreen = {                                                          // 7
  hold: function () {                                                     // 8
    if (! Meteor.isCordova) {                                             // 9
      return {                                                            // 10
        release: function () { /* noop */ }                               // 11
      };                                                                  // 12
    }                                                                     // 13
                                                                          // 14
    if (alreadyHidden) {                                                  // 15
      throw new Error("Can't show launch screen once it's hidden");       // 16
    }                                                                     // 17
                                                                          // 18
    holdCount++;                                                          // 19
                                                                          // 20
    var released = false;                                                 // 21
    var release = function () {                                           // 22
      if (! Meteor.isCordova)                                             // 23
        return;                                                           // 24
                                                                          // 25
      if (! released) {                                                   // 26
        released = true;                                                  // 27
        holdCount--;                                                      // 28
        if (holdCount === 0 &&                                            // 29
            typeof navigator !== 'undefined' && navigator.splashscreen) {
          alreadyHidden = true;                                           // 31
          navigator.splashscreen.hide();                                  // 32
        }                                                                 // 33
      }                                                                   // 34
    };                                                                    // 35
                                                                          // 36
    // Returns a launch screen handle with a release method               // 37
    return {                                                              // 38
      release: release                                                    // 39
    };                                                                    // 40
  }                                                                       // 41
};                                                                        // 42
                                                                          // 43
////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////
//                                                                        //
// packages/launch-screen/default-behavior.js                             //
//                                                                        //
////////////////////////////////////////////////////////////////////////////
                                                                          //
// Hold launch screen on app load. This reflects the fact that Meteor     // 1
// mobile apps that use this package always start with a launch screen    // 2
// visible. (see XXX comment at the top of package.js for more            // 3
// details)                                                               // 4
var handle = LaunchScreen.hold();                                         // 5
                                                                          // 6
var Template = Package.templating && Package.templating.Template;         // 7
                                                                          // 8
Meteor.startup(function () {                                              // 9
  if (! Template) {                                                       // 10
    handle.release();                                                     // 11
  } else if (Package['iron:router']) {                                    // 12
    // XXX Instead of doing this here, this code should be in             // 13
    // iron:router directly. Note that since we're in a                   // 14
    // `Meteor.startup` block it's ok that we don't have a                // 15
    // weak dependency on iron:router in package.js.                      // 16
    Package['iron:router'].Router.onAfterAction(function () {             // 17
      handle.release();                                                   // 18
    });                                                                   // 19
  } else {                                                                // 20
    Template.body.onRendered(function () {                                // 21
      handle.release();                                                   // 22
    });                                                                   // 23
                                                                          // 24
    // In case `Template.body` never gets rendered (due to some bug),     // 25
    // hide the launch screen after 6 seconds. This matches the           // 26
    // observed timeout that Cordova apps on Android (but not iOS)        // 27
    // have on hiding the launch screen (even if you don't call           // 28
    // `navigator.splashscreen.hide()`)                                   // 29
    setTimeout(function () {                                              // 30
      handle.release();                                                   // 31
    }, 6000);                                                             // 32
  }                                                                       // 33
});                                                                       // 34
                                                                          // 35
////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['launch-screen'] = {}, {
  LaunchScreen: LaunchScreen
});

})();


//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Retry = Package.retry.Retry;
var DDP = Package['ddp-client'].DDP;
var Mongo = Package.mongo.Mongo;
var _ = Package.underscore._;

/* Package-scope variables */
var ClientVersions, Autoupdate;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
// packages/autoupdate/autoupdate_client.js                                                //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                           //
// Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1
// which contains the set of acceptable client versions.                                   // 2
//                                                                                         // 3
// A "hard code push" occurs when the running client version is not in                     // 4
// the set of acceptable client versions (or the server updates the                        // 5
// collection, there is a published client version marked `current` and                    // 6
// the running client version is no longer in the set).                                    // 7
//                                                                                         // 8
// When the `reload` package is loaded, a hard code push causes                            // 9
// the browser to reload, so that it will load the latest client                           // 10
// version from the server.                                                                // 11
//                                                                                         // 12
// A "soft code push" represents the situation when the running client                     // 13
// version is in the set of acceptable versions, but there is a newer                      // 14
// version available on the server.                                                        // 15
//                                                                                         // 16
// `Autoupdate.newClientAvailable` is a reactive data source which                         // 17
// becomes `true` if there is a new version of the client is available on                  // 18
// the server.                                                                             // 19
//                                                                                         // 20
// This package doesn't implement a soft code reload process itself,                       // 21
// but `newClientAvailable` could be used for example to display a                         // 22
// "click to reload" link to the user.                                                     // 23
                                                                                           // 24
// The client version of the client code currently running in the                          // 25
// browser.                                                                                // 26
var autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || "unknown";          // 27
var autoupdateVersionRefreshable =                                                         // 28
  __meteor_runtime_config__.autoupdateVersionRefreshable || "unknown";                     // 29
                                                                                           // 30
// The collection of acceptable client versions.                                           // 31
ClientVersions = new Mongo.Collection("meteor_autoupdate_clientVersions");                 // 32
                                                                                           // 33
Autoupdate = {};                                                                           // 34
                                                                                           // 35
Autoupdate.newClientAvailable = function () {                                              // 36
  return !! ClientVersions.findOne({                                                       // 37
               _id: "version",                                                             // 38
               version: {$ne: autoupdateVersion} }) ||                                     // 39
         !! ClientVersions.findOne({                                                       // 40
               _id: "version-refreshable",                                                 // 41
               version: {$ne: autoupdateVersionRefreshable} });                            // 42
};                                                                                         // 43
Autoupdate._ClientVersions = ClientVersions;  // Used by a self-test                       // 44
                                                                                           // 45
var knownToSupportCssOnLoad = false;                                                       // 46
                                                                                           // 47
var retry = new Retry({                                                                    // 48
  // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49
  // in normal operation, this is a wacky failure. We don't want to retry                  // 50
  // right away, we can start slowly.                                                      // 51
  //                                                                                       // 52
  // A better way than timeconstants here might be to use the knowledge                    // 53
  // of when we reconnect to help trigger these retries. Typically, the                    // 54
  // server fixing code will result in a restart and reconnect, but                        // 55
  // potentially the subscription could have a transient error.                            // 56
  minCount: 0, // don't do any immediate retries                                           // 57
  baseTimeout: 30*1000 // start with 30s                                                   // 58
});                                                                                        // 59
var failures = 0;                                                                          // 60
                                                                                           // 61
Autoupdate._retrySubscription = function () {                                              // 62
  Meteor.subscribe("meteor_autoupdate_clientVersions", {                                   // 63
    onError: function (error) {                                                            // 64
      Meteor._debug("autoupdate subscription failed:", error);                             // 65
      failures++;                                                                          // 66
      retry.retryLater(failures, function () {                                             // 67
        // Just retry making the subscription, don't reload the whole                      // 68
        // page. While reloading would catch more cases (for example,                      // 69
        // the server went back a version and is now doing old-style hot                   // 70
        // code push), it would also be more prone to reload loops,                        // 71
        // which look really bad to the user. Just retrying the                            // 72
        // subscription over DDP means it is at least possible to fix by                   // 73
        // updating the server.                                                            // 74
        Autoupdate._retrySubscription();                                                   // 75
      });                                                                                  // 76
    },                                                                                     // 77
    onReady: function () {                                                                 // 78
      if (Package.reload) {                                                                // 79
        var checkNewVersionDocument = function (doc) {                                     // 80
          var self = this;                                                                 // 81
          if (doc._id === 'version-refreshable' &&                                         // 82
              doc.version !== autoupdateVersionRefreshable) {                              // 83
            autoupdateVersionRefreshable = doc.version;                                    // 84
            // Switch out old css links for the new css links. Inspired by:                // 85
            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710
            var newCss = (doc.assets && doc.assets.allCss) || [];                          // 87
            var oldLinks = [];                                                             // 88
            _.each(document.getElementsByTagName('link'), function (link) {                // 89
              if (link.className === '__meteor-css__') {                                   // 90
                oldLinks.push(link);                                                       // 91
              }                                                                            // 92
            });                                                                            // 93
                                                                                           // 94
            var waitUntilCssLoads = function  (link, callback) {                           // 95
              var executeCallback = _.once(callback);                                      // 96
              link.onload = function () {                                                  // 97
                knownToSupportCssOnLoad = true;                                            // 98
                executeCallback();                                                         // 99
              };                                                                           // 100
              if (! knownToSupportCssOnLoad) {                                             // 101
                var id = Meteor.setInterval(function () {                                  // 102
                  if (link.sheet) {                                                        // 103
                    executeCallback();                                                     // 104
                    Meteor.clearInterval(id);                                              // 105
                  }                                                                        // 106
                }, 50);                                                                    // 107
              }                                                                            // 108
            };                                                                             // 109
                                                                                           // 110
            var removeOldLinks = _.after(newCss.length, function () {                      // 111
              _.each(oldLinks, function (oldLink) {                                        // 112
                oldLink.parentNode.removeChild(oldLink);                                   // 113
              });                                                                          // 114
            });                                                                            // 115
                                                                                           // 116
            var attachStylesheetLink = function (newLink) {                                // 117
              document.getElementsByTagName("head").item(0).appendChild(newLink);          // 118
                                                                                           // 119
              waitUntilCssLoads(newLink, function () {                                     // 120
                Meteor.setTimeout(removeOldLinks, 200);                                    // 121
              });                                                                          // 122
            };                                                                             // 123
                                                                                           // 124
            if (newCss.length !== 0) {                                                     // 125
              _.each(newCss, function (css) {                                              // 126
                var newLink = document.createElement("link");                              // 127
                newLink.setAttribute("rel", "stylesheet");                                 // 128
                newLink.setAttribute("type", "text/css");                                  // 129
                newLink.setAttribute("class", "__meteor-css__");                           // 130
                newLink.setAttribute("href", css.url);                                     // 131
                attachStylesheetLink(newLink);                                             // 132
              });                                                                          // 133
            } else {                                                                       // 134
              removeOldLinks();                                                            // 135
            }                                                                              // 136
                                                                                           // 137
          }                                                                                // 138
          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {           // 139
            handle && handle.stop();                                                       // 140
                                                                                           // 141
            if (Package.reload) {                                                          // 142
              Package.reload.Reload._reload();                                             // 143
            }                                                                              // 144
          }                                                                                // 145
        };                                                                                 // 146
                                                                                           // 147
        var handle = ClientVersions.find().observe({                                       // 148
          added: checkNewVersionDocument,                                                  // 149
          changed: checkNewVersionDocument                                                 // 150
        });                                                                                // 151
      }                                                                                    // 152
    }                                                                                      // 153
  });                                                                                      // 154
};                                                                                         // 155
Autoupdate._retrySubscription();                                                           // 156
                                                                                           // 157
/////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.autoupdate = {}, {
  Autoupdate: Autoupdate
});

})();


/* Imports for global scope */

Mongo = Package.mongo.Mongo;
ReactiveVar = Package['reactive-var'].ReactiveVar;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;
Accounts = Package['accounts-base'].Accounts;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
_ = Package.underscore._;
DDP = Package['ddp-client'].DDP;
LaunchScreen = Package['launch-screen'].LaunchScreen;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;



//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Accounts = Package['accounts-base'].Accounts;
var Mongo = Package.mongo.Mongo;

/* Package-scope variables */
var ServiceConfiguration;

(function(){

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// packages/service-configuration/service_configuration_common.js                     //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
                                                                                      //
if (typeof ServiceConfiguration === 'undefined') {                                    // 1
  ServiceConfiguration = {};                                                          // 2
}                                                                                     // 3
                                                                                      // 4
                                                                                      // 5
// Table containing documents with configuration options for each                     // 6
// login service                                                                      // 7
ServiceConfiguration.configurations = new Mongo.Collection(                           // 8
  "meteor_accounts_loginServiceConfiguration", {                                      // 9
    _preventAutopublish: true,                                                        // 10
    connection: Meteor.isClient ? Accounts.connection : Meteor.connection             // 11
  });                                                                                 // 12
// Leave this collection open in insecure mode. In theory, someone could              // 13
// hijack your oauth connect requests to a different endpoint or appId,               // 14
// but you did ask for 'insecure'. The advantage is that it is much                   // 15
// easier to write a configuration wizard that works only in insecure                 // 16
// mode.                                                                              // 17
                                                                                      // 18
                                                                                      // 19
// Thrown when trying to use a login service which is not configured                  // 20
ServiceConfiguration.ConfigError = function (serviceName) {                           // 21
  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {                       // 22
    this.message = "Login service configuration not yet loaded";                      // 23
  } else if (serviceName) {                                                           // 24
    this.message = "Service " + serviceName + " not configured";                      // 25
  } else {                                                                            // 26
    this.message = "Service not configured";                                          // 27
  }                                                                                   // 28
};                                                                                    // 29
ServiceConfiguration.ConfigError.prototype = new Error();                             // 30
ServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';
                                                                                      // 32
////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['service-configuration'] = {}, {
  ServiceConfiguration: ServiceConfiguration
});

})();


// Disable hot-code-push
Meteor._reload.onMigrate(function () {
  return [false];
});
